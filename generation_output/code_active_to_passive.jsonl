{"task_id": 0, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    A function should be written to find the similar elements from the given two tuple lists.\n    '''\n"}], "response": "```python\ndef func(test_tup1, test_tup2):\n    '''\n    A function should be written to find the similar elements from the given two tuple lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n```", "response_code": "\ndef func(test_tup1, test_tup2):\n    '''\n    A function should be written to find the similar elements from the given two tuple lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n"}
{"task_id": 1, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(n):\n    '''\n    A python function is written to identify non-prime numbers.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    '''\n    A python function is written to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False", "response_code": "import math\n\ndef func(n):\n    '''\n    A python function is written to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": 2, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq as hq\ndef func(nums,n):\n    '''\n    A function is written to find the largest integers from a given list of numbers using the heap queue algorithm.\n    '''\n"}], "response": "import heapq as hq\n\ndef func(nums, n):\n    return hq.nlargest(n, nums)", "response_code": "import heapq as hq\n\ndef func(nums, n):\n    return hq.nlargest(n, nums)"}
{"task_id": 3, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x): \n    '''\n    A python function is written to check whether the two numbers differ at one bit position only or not.\n    '''\n"}], "response": "```python\ndef func(x): \n    return bin(x).count('1') == 1\n```", "response_code": "\ndef func(x): \n    return bin(x).count('1') == 1\n"}
{"task_id": 4, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function should be written to find all words which are at least 4 characters long in a string by using regex.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)", "response_code": "import re\n\ndef func(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)"}
{"task_id": 5, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    A function is written to find squares of individual elements in a list using a lambda function.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return list(map(lambda x: x**2, nums))\n```", "response_code": "\ndef func(nums):\n    return list(map(lambda x: x**2, nums))\n"}
{"task_id": 6, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str): \n    '''\n    A python function is written to find the minimum number of rotations required to get the same string.\n    '''\n"}], "response": "```python\ndef func(str): \n    '''\n    A python function is written to find the minimum number of rotations required to get the same string.\n    '''\n    def rotations_to_same_string(s):\n        n = len(s)\n        for i in range(1, n+1):\n            if n % i == 0:\n                if s == s[:i]*(n//i):\n                    return n//i\n        return n\n\n    return rotations_to_same_string(str)\n```", "response_code": "\ndef func(str): \n    '''\n    A python function is written to find the minimum number of rotations required to get the same string.\n    '''\n    def rotations_to_same_string(s):\n        n = len(s)\n        for i in range(1, n+1):\n            if n % i == 0:\n                if s == s[:i]*(n//i):\n                    return n//i\n        return n\n\n    return rotations_to_same_string(str)\n"}
{"task_id": 7, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s,ch): \n    '''\n    A python function is written to remove the first and last occurrence of a given character from the string.\n    '''\n"}], "response": "```python\ndef func(s, ch):\n    '''\n    A python function is written to remove the first and last occurrence of a given character from the string.\n    '''\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    \n    if first_index != -1 and last_index != -1:\n        s = s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n    \n    return s\n```", "response_code": "\ndef func(s, ch):\n    '''\n    A python function is written to remove the first and last occurrence of a given character from the string.\n    '''\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    \n    if first_index != -1 and last_index != -1:\n        s = s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n    \n    return s\n"}
{"task_id": 8, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(M):\n    '''\n    A function should be written to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(M):\n    return M[np.argsort(np.sum(M, axis=1))]\n```", "response_code": "\nimport numpy as np\n\ndef func(M):\n    return M[np.argsort(np.sum(M, axis=1))]\n"}
{"task_id": 9, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l,b,h) : \n    '''\n    A python function is written to find the volume of a triangular prism.\n    '''\n"}], "response": "```python\ndef func(l, b, h):\n    return 0.5 * l * b * h\n```", "response_code": "\ndef func(l, b, h):\n    return 0.5 * l * b * h\n"}
{"task_id": 10, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function should be written to find sequences of lowercase letters joined with an underscore.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    result = re.findall(pattern, text)\n    return result", "response_code": "import re\n\ndef func(text):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    result = re.findall(pattern, text)\n    return result"}
{"task_id": 11, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a):\n    '''\n    A function should be written to find the perimeter of a square.\n    '''\n"}], "response": "```python\ndef func(a):\n    return 4 * a\n```", "response_code": "\ndef func(a):\n    return 4 * a\n"}
{"task_id": 12, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "NO_OF_CHARS = 256\ndef func(string): \n    '''\n    A function should be written to remove characters from the first string which are present in the second string.\n    '''\n"}], "response": "```python\nNO_OF_CHARS = 256\n\ndef func(string): \n    '''\n    A function should be written to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) < 2:\n        return string\n\n    input_string = list(string)\n    mask = [0] * NO_OF_CHARS\n\n    for char in input_string:\n        mask[ord(char)] += 1\n\n    result = []\n    for char in input_string:\n        if mask[ord(char)] == 0:\n            result.append(char)\n\n    return ''.join(result)\n```", "response_code": "\nNO_OF_CHARS = 256\n\ndef func(string): \n    '''\n    A function should be written to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) < 2:\n        return string\n\n    input_string = list(string)\n    mask = [0] * NO_OF_CHARS\n\n    for char in input_string:\n        mask[ord(char)] += 1\n\n    result = []\n    for char in input_string:\n        if mask[ord(char)] == 0:\n            result.append(char)\n\n    return ''.join(result)\n"}
{"task_id": 13, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arraynums):\n    '''\n    A function should be written to determine whether a given array of integers contains any duplicate element.\n    '''\n"}], "response": "def func(arraynums):\n    '''\n    A function should be written to determine whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True", "response_code": "def func(arraynums):\n    '''\n    A function should be written to determine whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True"}
{"task_id": 14, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x): \n    '''\n    A function should be written to check if the given number is woodball or not.\n    '''\n"}], "response": "```python\ndef is_woodball(x):\n    if x < 1:\n        return False\n    while x % 2 == 0:\n        x /= 2\n    while x % 3 == 0:\n        x /= 3\n    while x % 5 == 0:\n        x /= 5\n    return x == 1\n```", "response_code": "\ndef is_woodball(x):\n    if x < 1:\n        return False\n    while x % 2 == 0:\n        x /= 2\n    while x % 3 == 0:\n        x /= 3\n    while x % 5 == 0:\n        x /= 5\n    return x == 1\n"}
{"task_id": 15, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(num):    \n    '''\n    A python function is written to check if a given number is one less than twice its reverse.\n    '''\n"}], "response": "```python\ndef func(num):\n    reverse_num = int(str(num)[::-1])\n    if num == 2 * reverse_num - 1:\n        return True\n    else:\n        return False\n```", "response_code": "\ndef func(num):\n    reverse_num = int(str(num)[::-1])\n    if num == 2 * reverse_num - 1:\n        return True\n    else:\n        return False\n"}
{"task_id": 16, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr) : \n    '''\n    A python function is written to find the largest number that can be formed with the given digits.\n    '''\n"}], "response": "from itertools import permutations\n\ndef func(arr):\n    perm = permutations(arr)\n    max_num = 0\n    for p in perm:\n        num = int(''.join(p))\n        if num > max_num:\n            max_num = num\n    return max_num", "response_code": "from itertools import permutations\n\ndef func(arr):\n    perm = permutations(arr)\n    max_num = 0\n    for p in perm:\n        num = int(''.join(p))\n        if num > max_num:\n            max_num = num\n    return max_num"}
{"task_id": 17, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x,y): \n    '''\n    A python function is written to check whether the given two integers have opposite sign or not.\n    '''\n"}], "response": "```python\ndef func(x, y):\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False\n```", "response_code": "\ndef func(x, y):\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False\n"}
{"task_id": 18, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to find the nth octagonal number.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n * (3 * n - 2)\n```", "response_code": "\ndef func(n):\n    return n * (3 * n - 2)\n"}
{"task_id": 19, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import defaultdict\ndef func(s):\n    '''\n    A python function is written to count the number of substrings with the sum of digits equal to their length.\n    '''\n"}], "response": "```python\nfrom collections import defaultdict\n\ndef func(s):\n    '''\n    A python function is written to count the number of substrings with the sum of digits equal to their length.\n    '''\n```", "response_code": "\nfrom collections import defaultdict\n\ndef func(s):\n    '''\n    A python function is written to count the number of substrings with the sum of digits equal to their length.\n    '''\n"}
{"task_id": 20, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(xs):\n    '''\n    A python function is written to find the smallest number in a list.\n    '''\n"}], "response": "```python\ndef func(xs):\n    return min(xs)\n```", "response_code": "\ndef func(xs):\n    return min(xs)\n"}
{"task_id": 21, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    A function should be written to find the maximum difference between available pairs in the given tuple list.\n    '''\n"}], "response": "```python\ndef func(test_list):\n    max_diff = max(test_list) - min(test_list)\n    return max_diff\n```", "response_code": "\ndef func(test_list):\n    max_diff = max(test_list) - min(test_list)\n    return max_diff\n"}
{"task_id": 22, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(subjectmarks):\n    '''\n    A function should be written to sort a list of tuples using lambda.\n    '''\n"}], "response": "```python\ndef func(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])\n```", "response_code": "\ndef func(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])\n"}
{"task_id": 23, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(data_list):\n    '''\n    A function of recursion list sum is written.\n    '''\n"}], "response": "```python\ndef func(data_list):\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + func(data_list[1:])\n```", "response_code": "\ndef func(data_list):\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + func(data_list[1:])\n"}
{"task_id": 24, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list):\n    '''\n    A python function is written to count positive numbers in a list.\n    '''\n"}], "response": "```python\ndef func(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n```", "response_code": "\ndef func(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n"}
{"task_id": 25, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):   \n    '''\n    A function should be written to find the number of ways to partition a set of bell numbers.\n    '''\n"}], "response": "```python\nfrom math import factorial\n\ndef func(n):\n    return factorial(2*n) // (factorial(n) * factorial(n+1))\n```", "response_code": "\nfrom math import factorial\n\ndef func(n):\n    return factorial(2*n) // (factorial(n) * factorial(n+1))\n"}
{"task_id": 26, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(A): \n    '''\n    A python function should be written to check whether the given array is monotonic or not.\n    '''\n"}], "response": "```python\ndef is_monotonic(A):\n    return all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n```", "response_code": "\ndef is_monotonic(A):\n    return all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n"}
{"task_id": 27, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l, s):\n    '''\n    A function should be written to check whether a list contains the given sublist or not.\n    '''\n"}], "response": "```python\ndef func(l, s):\n    '''\n    A function should be written to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n```", "response_code": "\ndef func(l, s):\n    '''\n    A function should be written to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"}
{"task_id": 28, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(Input):\n    '''\n    A function should be written to determine whether all the given tuples have equal length or not.\n    '''\n"}], "response": "def func(Input):\n    '''\n    A function should be written to determine whether all the given tuples have equal length or not.\n    '''\n    if all(len(t) == len(Input[0]) for t in Input):\n        return True\n    else:\n        return False", "response_code": "def func(Input):\n    '''\n    A function should be written to determine whether all the given tuples have equal length or not.\n    '''\n    if all(len(t) == len(Input[0]) for t in Input):\n        return True\n    else:\n        return False"}
{"task_id": 29, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    A function should be written to sort a list of elements using comb sort.\n    '''\n"}], "response": "```python\ndef comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / shrink))\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums\n```", "response_code": "\ndef comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / shrink))\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums\n"}
{"task_id": 30, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function should be written to check whether the given number can be represented as difference of two squares or not.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(n):\n    '''\n    A python function should be written to check whether the given number can be represented as difference of two squares or not.\n    '''\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if math.isqrt(n + i*i) ** 2 == n + i*i:\n            return True\n    return False\n```", "response_code": "\nimport math\n\ndef func(n):\n    '''\n    A python function should be written to check whether the given number can be represented as difference of two squares or not.\n    '''\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if math.isqrt(n + i*i) ** 2 == n + i*i:\n            return True\n    return False\n"}
{"task_id": 31, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(colors, patterns):    \n    '''\n    A function should be written to check whether it follows the sequence given in the patterns array.\n    '''\n"}], "response": "```python\ndef func(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    color_dict = {}\n    pattern_dict = {}\n    \n    for i in range(len(colors)):\n        if colors[i] not in color_dict:\n            color_dict[colors[i]] = patterns[i]\n        if patterns[i] not in pattern_dict:\n            pattern_dict[patterns[i]] = colors[i]\n        \n        if color_dict[colors[i]] != patterns[i] or pattern_dict[patterns[i]] != colors[i]:\n            return False\n    \n    return True\n```", "response_code": "\ndef func(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    color_dict = {}\n    pattern_dict = {}\n    \n    for i in range(len(colors)):\n        if colors[i] not in color_dict:\n            color_dict[colors[i]] = patterns[i]\n        if patterns[i] not in pattern_dict:\n            pattern_dict[patterns[i]] = colors[i]\n        \n        if color_dict[colors[i]] != patterns[i] or pattern_dict[patterns[i]] != colors[i]:\n            return False\n    \n    return True\n"}
{"task_id": 32, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list, K):\n    '''\n    A function should be written to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n"}], "response": "from typing import List\n\ndef func(test_list: List[tuple], K: int) -> List[tuple]:\n    res = [tup for tup in test_list if all(ele % K == 0 for ele in tup)]\n    return res", "response_code": "from typing import List\n\ndef func(test_list: List[tuple], K: int) -> List[tuple]:\n    res = [tup for tup in test_list if all(ele % K == 0 for ele in tup)]\n    return res"}
{"task_id": 33, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function is written to find the difference between sum of even and odd digits.\n    '''\n"}], "response": "```python\ndef func(n): \n    even_sum = 0\n    odd_sum = 0\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    return even_sum - odd_sum\n```", "response_code": "\ndef func(n): \n    even_sum = 0\n    odd_sum = 0\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    return even_sum - odd_sum\n"}
{"task_id": 34, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s): \n    '''\n    A python function is written to check whether the length of the word is odd or not.\n    '''\n"}], "response": "def func(s):\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True", "response_code": "def func(s):\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True"}
{"task_id": 35, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to find the nth tetrahedral number.\n    '''\n"}], "response": "def func(n):\n    return n * (n + 1) * (n + 2) // 6", "response_code": "def func(n):\n    return n * (n + 1) * (n + 2) // 6"}
{"task_id": 36, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(r):\n    '''\n    A function should be written to find the volume of a sphere.\n    '''\n"}], "response": "import math\n\ndef func(r):\n    volume = (4/3) * math.pi * r**3\n    return volume", "response_code": "import math\n\ndef func(r):\n    volume = (4/3) * math.pi * r**3\n    return volume"}
{"task_id": 37, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(strr):  \n    '''\n    A python function is written to find the character made by adding all the characters of the given string.\n    '''\n"}], "response": "```python\ndef func(strr):\n    return chr(sum(ord(char) for char in strr))\n```", "response_code": "\ndef func(strr):\n    return chr(sum(ord(char) for char in strr))\n"}
{"task_id": 38, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to find the n-th number in the newman conway sequence.\n    '''\n"}], "response": "```python\ndef newman_conway(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    else:\n        sequence = [0] * (n + 1)\n        sequence[1] = 1\n        sequence[2] = 1\n        for i in range(3, n + 1):\n            sequence[i] = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]]\n        return sequence[n]\n```", "response_code": "\ndef newman_conway(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    else:\n        sequence = [0] * (n + 1)\n        sequence[1] = 1\n        sequence[2] = 1\n        for i in range(3, n + 1):\n            sequence[i] = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]]\n        return sequence[n]\n"}
{"task_id": 39, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(r):\n    '''\n    A function should be written to find the surface area of a sphere.\n    '''\n"}], "response": "import math\n\ndef func(r):\n    return 4 * math.pi * r**2", "response_code": "import math\n\ndef func(r):\n    return 4 * math.pi * r**2"}
{"task_id": 40, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    A function should be written to find the nth centered hexagonal number.\n    '''\n"}], "response": "```python\ndef func(n):\n    return 3*n*(n-1) + 1\n```", "response_code": "\ndef func(n):\n    return 3*n*(n-1) + 1\n"}
{"task_id": 41, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import collections as ct\ndef func(dict1,dict2, dict3):\n    '''\n    A function should be written to merge three dictionaries into a single expression.\n    '''\n"}], "response": "import collections as ct\n\ndef func(dict1, dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "response_code": "import collections as ct\n\ndef func(dict1, dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict"}
{"task_id": 42, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import collections\ndef func(list1):\n    '''\n    A function should be written to get the frequency of the elements in a list.\n    '''\n"}], "response": "import collections\n\ndef func(list1):\n    return collections.Counter(list1)", "response_code": "import collections\n\ndef func(list1):\n    return collections.Counter(list1)"}
{"task_id": 43, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(N):\n    '''\n    A function should be written to find the closest smaller number than n.\n    '''\n"}], "response": "```python\ndef func(N):\n    return N - 1\n```", "response_code": "\ndef func(N):\n    return N - 1\n"}
{"task_id": 44, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    A python function is written to find the length of the longest word.\n    '''\n"}], "response": "```python\ndef func(list1):\n    return max(len(word) for word in list1)\n```", "response_code": "\ndef func(list1):\n    return max(len(word) for word in list1)\n"}
{"task_id": 45, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1, sub_str):\n    '''\n    A function should be written to check if a substring is present in a given list of string values.\n    '''\n"}], "response": "def func(str1, sub_str):\n    return sub_str in str1", "response_code": "def func(str1, sub_str):\n    return sub_str in str1"}
{"task_id": 46, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to check whether the given number is undulating or not.\n    '''\n"}], "response": "```python\ndef is_undulating(n):\n    n_str = str(n)\n    if len(n_str) < 3:\n        return False\n    for i in range(2, len(n_str)):\n        if n_str[i] == n_str[i-2] and n_str[i] != n_str[i-1]:\n            continue\n        elif n_str[i] != n_str[i-2] and n_str[i] == n_str[i-1]:\n            continue\n        else:\n            return False\n    return True\n```", "response_code": "\ndef is_undulating(n):\n    n_str = str(n)\n    if len(n_str) < 3:\n        return False\n    for i in range(2, len(n_str)):\n        if n_str[i] == n_str[i-2] and n_str[i] != n_str[i-1]:\n            continue\n        elif n_str[i] != n_str[i-2] and n_str[i] == n_str[i-1]:\n            continue\n        else:\n            return False\n    return True\n"}
{"task_id": 47, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,b):\n    '''\n    A function should be written to calculate the value of 'a' to the power 'b'.\n    '''\n"}], "response": "```python\ndef func(a, b):\n    return a ** b\n```", "response_code": "\ndef func(a, b):\n    return a ** b\n"}
{"task_id": 48, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from operator import itemgetter \ndef func(test_list):\n    '''\n    A function should be written to extract the index minimum value record from the given tuples.\n    '''\n"}], "response": "```python\nfrom operator import itemgetter\n\ndef func(test_list):\n    return min(enumerate(test_list), key=itemgetter(1))[0]\n```", "response_code": "\nfrom operator import itemgetter\n\ndef func(test_list):\n    return min(enumerate(test_list), key=itemgetter(1))[0]\n"}
{"task_id": 49, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst):  \n    '''\n    A python function is written to find the minimum length of sublist.\n    '''\n"}], "response": "```python\ndef func(lst):\n    return min(len(sublist) for sublist in lst)\n```", "response_code": "\ndef func(lst):\n    return min(len(sublist) for sublist in lst)\n"}
{"task_id": 50, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    A python function is written to find the number of divisors of a given integer.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2 if n // i != i else 1\n    return count\n```", "response_code": "\nimport math\n\ndef func(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2 if n // i != i else 1\n    return count\n"}
{"task_id": 51, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to find the frequency count of a list of lists.\n    '''\n"}], "response": "```python\nfrom collections import Counter\n\ndef func(list1):\n    count = Counter([item for sublist in list1 for item in sublist])\n    return count\n```", "response_code": "\nfrom collections import Counter\n\ndef func(list1):\n    count = Counter([item for sublist in list1 for item in sublist])\n    return count\n"}
{"task_id": 52, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(numbers):  \n    '''\n    A function should be written to multiply all the numbers in a list and divide with the length of the list.\n    '''\n"}], "response": "```python\ndef func(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n```", "response_code": "\ndef func(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n"}
{"task_id": 53, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to convert the given decimal number to its binary equivalent.\n    '''\n"}], "response": "```python\ndef func(n):\n    return bin(n)[2:]\n```", "response_code": "\ndef func(n):\n    return bin(n)[2:]\n"}
{"task_id": 54, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import sys\ndef func(num):\n    '''\n    A function should be written to find the next smallest palindrome of a specified number.\n    '''\n"}], "response": "import sys\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_palindrome(num):\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n\ndef func(num):\n    '''\n    A function should be written to find the next smallest palindrome of a specified number.\n    '''\n    return next_palindrome(num)", "response_code": "import sys\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_palindrome(num):\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n\ndef func(num):\n    '''\n    A function should be written to find the next smallest palindrome of a specified number.\n    '''\n    return next_palindrome(num)"}
{"task_id": 55, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr, k):\n    '''\n    A function should be written to find the kth element in the given array.\n    '''\n"}], "response": "```python\ndef func(arr, k):\n    arr.sort()\n    return arr[k-1]\n```", "response_code": "\ndef func(arr, k):\n    arr.sort()\n    return arr[k-1]\n"}
{"task_id": 56, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(word):\n    '''\n    A function should be written to convert snake case string to camel case string.\n    '''\n"}], "response": "```python\ndef snake_to_camel(word):\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n\n# Example Usage:\n# print(snake_to_camel('hello_world'))  # Output: 'HelloWorld'\n```", "response_code": "\ndef snake_to_camel(word):\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n\n# Example Usage:\n# print(snake_to_camel('hello_world'))  # Output: 'HelloWorld'\n"}
{"task_id": 57, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n, m): \n    '''\n    A function should be written to find the eulerian number a(n, m).\n    '''\n"}], "response": "```python\nfrom math import comb\n\ndef func(n, m): \n    return sum((-1)**k * comb(n + 1, k) * (n + 1 - k)**m for k in range(n + 1))\n```", "response_code": "\nfrom math import comb\n\ndef func(n, m): \n    return sum((-1)**k * comb(n + 1, k) * (n + 1 - k)**m for k in range(n + 1))\n"}
{"task_id": 58, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(input_list):\n    '''\n    A function should be written to sort each sublist of strings in a given list of lists using a lambda function.\n    '''\n"}], "response": "```python\ndef func(input_list):\n    return [sorted(sublist, key=lambda x: x) for sublist in input_list]\n```", "response_code": "\ndef func(input_list):\n    return [sorted(sublist, key=lambda x: x) for sublist in input_list]\n"}
{"task_id": 59, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst):   \n    '''\n    A python function is written to count true booleans in the given list.\n    '''\n"}], "response": "```python\ndef func(lst):\n    return lst.count(True)\n```", "response_code": "\ndef func(lst):\n    return lst.count(True)\n"}
{"task_id": 60, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list, test_tup):\n    '''\n    A function should be written to add the given list to the given tuples.\n    '''\n"}], "response": "def func(test_list, test_tup):\n    return [(tup + tuple(test_list)) for tup in test_tup]", "response_code": "def func(test_list, test_tup):\n    return [(tup + tuple(test_list)) for tup in test_tup]"}
{"task_id": 61, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq\ndef func(num1,num2,num3):\n    '''\n    A function should be written to merge multiple sorted inputs into a single sorted iterator using the heap queue algorithm.\n    '''\n"}], "response": "import heapq\n\ndef func(num1, num2, num3):\n    '''\n    A function should be written to merge multiple sorted inputs into a single sorted iterator using the heap queue algorithm.\n    '''\n    heap = []\n    for i in num1, num2, num3:\n        for j in i:\n            heapq.heappush(heap, j)\n    \n    while heap:\n        yield heapq.heappop(heap)", "response_code": "import heapq\n\ndef func(num1, num2, num3):\n    '''\n    A function should be written to merge multiple sorted inputs into a single sorted iterator using the heap queue algorithm.\n    '''\n    heap = []\n    for i in num1, num2, num3:\n        for j in i:\n            heapq.heappush(heap, j)\n    \n    while heap:\n        yield heapq.heappop(heap)"}
{"task_id": 62, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s,n): \n    '''\n    A python function is written to find the count of rotations of a binary string with odd value.\n    '''\n"}], "response": "```python\ndef func(s, n):\n    count = 0\n    for i in range(n):\n        if int(s, 2) % 2 == 1:\n            count += 1\n        s = s[-1] + s[:-1]\n    return count\n```", "response_code": "\ndef func(s, n):\n    count = 0\n    for i in range(n):\n        if int(s, 2) % 2 == 1:\n            count += 1\n        s = s[-1] + s[:-1]\n    return count\n"}
{"task_id": 63, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nestedlist):\n    '''\n    A function should be written to find common elements in given nested lists.\n    '''\n"}], "response": "```python\ndef func(nestedlist):\n    '''\n    A function should be written to find common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return []\n    \n    common_elements = set(nestedlist[0])\n    \n    for sublist in nestedlist[1:]:\n        common_elements = common_elements.intersection(set(sublist))\n    \n    return list(common_elements)\n```", "response_code": "\ndef func(nestedlist):\n    '''\n    A function should be written to find common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return []\n    \n    common_elements = set(nestedlist[0])\n    \n    for sublist in nestedlist[1:]:\n        common_elements = common_elements.intersection(set(sublist))\n    \n    return list(common_elements)\n"}
{"task_id": 64, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(text):\n    '''\n    A function should be written to check if a string represents an integer or not.\n    '''\n"}], "response": "```python\ndef func(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n```", "response_code": "\ndef func(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"}
{"task_id": 65, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to check whether all dictionaries in a list are empty or not.\n    '''\n"}], "response": "def func(list1):\n    for d in list1:\n        if d:\n            return False\n    return True", "response_code": "def func(list1):\n    for d in list1:\n        if d:\n            return False\n    return True"}
{"task_id": 66, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    A function should be written to convert a given tuple of positive integers into an integer.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return int(''.join(map(str, nums)))\n```", "response_code": "\ndef func(nums):\n    return int(''.join(map(str, nums)))\n"}
{"task_id": 67, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    A function should be written to convert all possible convertible elements in the list to float.\n    '''\n"}], "response": "```python\ndef func(test_list):\n    return [float(i) if i.replace('.', '', 1).isdigit() else i for i in test_list]\n```", "response_code": "\ndef func(test_list):\n    return [float(i) if i.replace('.', '', 1).isdigit() else i for i in test_list]\n"}
{"task_id": 68, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(string): \n    '''\n    A function should be written to convert a string to a list.\n    '''\n"}], "response": "```python\ndef func(string): \n    return list(string)\n```", "response_code": "\ndef func(string): \n    return list(string)\n"}
{"task_id": 69, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):\n    '''\n    A python function is written to find the element that appears only once in a sorted array.\n    '''\n"}], "response": "```python\ndef func(arr):\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n```", "response_code": "\ndef func(arr):\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n"}
{"task_id": 70, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to find the maximum product from the pairs of tuples within a given list.\n    '''\n"}], "response": "```python\ndef func(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product\n```", "response_code": "\ndef func(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product\n"}
{"task_id": 71, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(limit):\n    '''\n    A function should be written to sum all amicable numbers from 1 to a specified number.\n    '''\n"}], "response": "```python\ndef func(limit):\n    def sum_divisors(n):\n        divisors = [1]\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                divisors.append(i)\n                if i != n // i:\n                    divisors.append(n // i)\n        return sum(divisors)\n\n    amicable_numbers = set()\n    for i in range(1, limit + 1):\n        if i not in amicable_numbers:\n            sum1 = sum_divisors(i)\n            sum2 = sum_divisors(sum1)\n            if i == sum2 and i != sum1:\n                amicable_numbers.add(i)\n                amicable_numbers.add(sum1)\n\n    return sum(amicable_numbers)\n```", "response_code": "\ndef func(limit):\n    def sum_divisors(n):\n        divisors = [1]\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                divisors.append(i)\n                if i != n // i:\n                    divisors.append(n // i)\n        return sum(divisors)\n\n    amicable_numbers = set()\n    for i in range(1, limit + 1):\n        if i not in amicable_numbers:\n            sum1 = sum_divisors(i)\n            sum2 = sum_divisors(sum1)\n            if i == sum2 and i != sum1:\n                amicable_numbers.add(i)\n                amicable_numbers.add(sum1)\n\n    return sum(amicable_numbers)\n"}
{"task_id": 72, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import cmath\ndef func(a,b):\n    '''\n    A function should be written to get the angle of a complex number.\n    '''\n"}], "response": "import cmath\n\ndef func(a, b):\n    angle = cmath.phase(complex(a, b))\n    return angle", "response_code": "import cmath\n\ndef func(a, b):\n    angle = cmath.phase(complex(a, b))\n    return angle"}
{"task_id": 73, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(string): \n    '''\n    A function should be written to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n"}], "response": "```python\ndef func(string): \n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    diff = 0\n    \n    for char in string: \n        if char == '0': \n            count_0 += 1\n        else: \n            count_1 += 1\n        \n        diff = count_0 - count_1\n        if diff > max_diff: \n            max_diff = diff\n    \n    return max_diff\n```", "response_code": "\ndef func(string): \n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    diff = 0\n    \n    for char in string: \n        if char == '0': \n            count_0 += 1\n        else: \n            count_1 += 1\n        \n        diff = count_0 - count_1\n        if diff > max_diff: \n            max_diff = diff\n    \n    return max_diff\n"}
{"task_id": 74, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,b): \n    '''\n    A python function is written to find the sum of common divisors of two given numbers.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(a, b):\n    '''\n    A python function is written to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    \n    return sum(common_divisors)\n```", "response_code": "\nimport math\n\ndef func(a, b):\n    '''\n    A python function is written to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    \n    return sum(common_divisors)\n"}
{"task_id": 75, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x, y):\n    '''\n    A function should be written to multiply two integers without using the * operator in python.\n    '''\n"}], "response": "```python\ndef func(x, y):\n    if y == 0:\n        return 0\n    if y > 0:\n        return x + func(x, y - 1)\n    if y < 0:\n        return -func(x, -y)\n```", "response_code": "\ndef func(x, y):\n    if y == 0:\n        return 0\n    if y > 0:\n        return x + func(x, y - 1)\n    if y < 0:\n        return -func(x, -y)\n"}
{"task_id": 76, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n, str):\n    '''\n    A function should be written to shortlist words that are longer than n from a given list of words.\n    '''\n"}], "response": "```python\ndef func(n, word_list):\n    return [word for word in word_list if len(word) > n]\n```", "response_code": "\ndef func(n, word_list):\n    return [word for word in word_list if len(word) > n]\n"}
{"task_id": 77, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(my_matrix):\n    '''\n    A function should be written to calculate a magic square.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(my_matrix):\n    n = len(my_matrix)\n    magic_sum = n * (n**2 + 1) // 2\n    row_sums = np.sum(my_matrix, axis=1)\n    col_sums = np.sum(my_matrix, axis=0)\n    diag_sum1 = np.trace(my_matrix)\n    diag_sum2 = np.trace(np.fliplr(my_matrix))\n    \n    if (np.all(row_sums == magic_sum) and np.all(col_sums == magic_sum) and diag_sum1 == magic_sum and diag_sum2 == magic_sum):\n        return True\n    else:\n        return False\n```", "response_code": "\nimport numpy as np\n\ndef func(my_matrix):\n    n = len(my_matrix)\n    magic_sum = n * (n**2 + 1) // 2\n    row_sums = np.sum(my_matrix, axis=1)\n    col_sums = np.sum(my_matrix, axis=0)\n    diag_sum1 = np.trace(my_matrix)\n    diag_sum2 = np.trace(np.fliplr(my_matrix))\n    \n    if (np.all(row_sums == magic_sum) and np.all(col_sums == magic_sum) and diag_sum1 == magic_sum and diag_sum2 == magic_sum):\n        return True\n    else:\n        return False\n"}
{"task_id": 78, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import defaultdict\ndef func(nums):\n    '''\n    A function should be written to find the item with maximum frequency in a given list.\n    '''\n"}], "response": "```python\nfrom collections import defaultdict\n\ndef func(nums):\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq_item = max(freq_dict, key=freq_dict.get)\n    return max_freq_item\n```", "response_code": "\nfrom collections import defaultdict\n\ndef func(nums):\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq_item = max(freq_dict, key=freq_dict.get)\n    return max_freq_item\n"}
{"task_id": 79, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1):\n    '''\n    A python function to reverse only the vowels of a given string is to be written.\n    '''\n"}], "response": "```python\ndef reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] in vowels and s[j] in vowels:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n        elif s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n    return \"\".join(s)\n```", "response_code": "\ndef reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] in vowels and s[j] in vowels:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n        elif s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n    return \"\".join(s)\n"}
{"task_id": 80, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(tup1):\n    '''\n    A function should be written to convert tuple to a string.\n    '''\n"}], "response": "def func(tup1):\n    return ''.join(map(str, tup1))", "response_code": "def func(tup1):\n    return ''.join(map(str, tup1))"}
{"task_id": 81, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    A function should be written to calculate the sum of the negative numbers of a given list of numbers using a lambda function.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return sum(filter(lambda x: x < 0, nums))\n```", "response_code": "\ndef func(nums):\n    return sum(filter(lambda x: x < 0, nums))\n"}
{"task_id": 82, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to find the nth hexagonal number.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n * (2 * n - 1)\n```", "response_code": "\ndef func(n):\n    return n * (2 * n - 1)\n"}
{"task_id": 83, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from array import array\ndef func(nums):\n    '''\n    A function should be written to find the ratio of zeroes in an array of integers.\n    '''\n"}], "response": "```python\nfrom array import array\n\ndef func(nums):\n    count_zeros = nums.count(0)\n    total_elements = len(nums)\n    \n    if total_elements == 0:\n        return 0.0\n    \n    ratio_zeros = count_zeros / total_elements\n    return ratio_zeros\n```", "response_code": "\nfrom array import array\n\ndef func(nums):\n    count_zeros = nums.count(0)\n    total_elements = len(nums)\n    \n    if total_elements == 0:\n        return 0.0\n    \n    ratio_zeros = count_zeros / total_elements\n    return ratio_zeros\n"}
{"task_id": 84, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function should be written to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n"}], "response": "```python\ndef func(n): \n    if n <= 0: \n        return False\n    return bin(n).count('1') == 1\n```", "response_code": "\ndef func(n): \n    if n <= 0: \n        return False\n    return bin(n).count('1') == 1\n"}
{"task_id": 85, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(r):\n    '''\n    A function should be written to find the circumference of a circle.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(r):\n    return 2 * math.pi * r\n```", "response_code": "\nimport math\n\ndef func(r):\n    return 2 * math.pi * r\n"}
{"task_id": 86, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    A function should be written to extract elements that occur singly in the given tuple list.\n    '''\n"}], "response": "```python\ndef func(test_list):\n    res = []\n    for ele in test_list:\n        if test_list.count(ele) == 1:\n            res.append(ele)\n    return res\n```", "response_code": "\ndef func(test_list):\n    res = []\n    for ele in test_list:\n        if test_list.count(ele) == 1:\n            res.append(ele)\n    return res\n"}
{"task_id": 87, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    A function should be written to sort a list of elements using pancake sort.\n    '''\n"}], "response": "```python\ndef pancake_sort(arr):\n    def flip(sublist, k):\n        i = 0\n        while i < k / 2:\n            sublist[i], sublist[k - i - 1] = sublist[k - i - 1], sublist[i]\n            i += 1\n\n    def find_max_index(arr, n):\n        mi = 0\n        for i in range(0, n):\n            if arr[i] > arr[mi]:\n                mi = i\n        return mi\n\n    def pancake_sort_helper(arr, n):\n        curr_size = n\n        while curr_size > 1:\n            mi = find_max_index(arr, curr_size)\n            if mi != curr_size - 1:\n                flip(arr, mi + 1)\n                flip(arr, curr_size)\n            curr_size -= 1\n\n    pancake_sort_helper(arr, len(arr))\n    return arr\n```", "response_code": "\ndef pancake_sort(arr):\n    def flip(sublist, k):\n        i = 0\n        while i < k / 2:\n            sublist[i], sublist[k - i - 1] = sublist[k - i - 1], sublist[i]\n            i += 1\n\n    def find_max_index(arr, n):\n        mi = 0\n        for i in range(0, n):\n            if arr[i] > arr[mi]:\n                mi = i\n        return mi\n\n    def pancake_sort_helper(arr, n):\n        curr_size = n\n        while curr_size > 1:\n            mi = find_max_index(arr, curr_size)\n            if mi != curr_size - 1:\n                flip(arr, mi + 1)\n                flip(arr, curr_size)\n            curr_size -= 1\n\n    pancake_sort_helper(arr, len(arr))\n    return arr\n"}
{"task_id": 88, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1,list2,list3):\n    '''\n    A function should be written to count the same pair in three given lists.\n    '''\n"}], "response": "```python\ndef func(list1, list2, list3):\n    count = 0\n    for item in list1:\n        if item in list2 and item in list3:\n            count += 1\n    return count\n```", "response_code": "\ndef func(list1, list2, list3):\n    count = 0\n    for item in list1:\n        if item in list2 and item in list3:\n            count += 1\n    return count\n"}
{"task_id": 89, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(Input): \n    '''\n    A function should be written to find the number of lists present in the given tuple.\n    '''\n"}], "response": "def count_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count", "response_code": "def count_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"}
{"task_id": 90, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr): \n    '''\n    A python function is written to find the maximum difference between any two elements in a given array.\n    '''\n"}], "response": "```python\ndef func(arr): \n    return max(arr) - min(arr)\n```", "response_code": "\ndef func(arr): \n    return max(arr) - min(arr)\n"}
{"task_id": 91, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a, b, n):\n    '''\n    A function should be written to find x and y that satisfies ax + by = n.\n    '''\n"}], "response": "```python\ndef func(a, b, n):\n    '''\n    A function should be written to find x and y that satisfies ax + by = n.\n    '''\n    def extended_gcd(a, b):\n        if a == 0:\n            return (b, 0, 1)\n        else:\n            g, y, x = extended_gcd(b % a, a)\n            return (g, x - (b // a) * y, y)\n\n    gcd, x, y = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None\n    x *= n // gcd\n    y *= n // gcd\n    return x, y\n```", "response_code": "\ndef func(a, b, n):\n    '''\n    A function should be written to find x and y that satisfies ax + by = n.\n    '''\n    def extended_gcd(a, b):\n        if a == 0:\n            return (b, 0, 1)\n        else:\n            g, y, x = extended_gcd(b % a, a)\n            return (g, x - (b // a) * y, y)\n\n    gcd, x, y = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None\n    x *= n // gcd\n    y *= n // gcd\n    return x, y\n"}
{"task_id": 92, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1, list2):\n    '''\n    A function should be written to remove all elements from a given list present in another list.\n    '''\n"}], "response": "```python\ndef func(list1, list2):\n    return [x for x in list1 if x not in list2]\n```", "response_code": "\ndef func(list1, list2):\n    return [x for x in list1 if x not in list2]\n"}
{"task_id": 93, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    A function should be written to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n    '''\n"}], "response": "def func(n):\n    total_sum = 0\n    while n > 0:\n        total_sum += n\n        n -= 2\n    return total_sum", "response_code": "def func(n):\n    total_sum = 0\n    while n > 0:\n        total_sum += n\n        n -= 2\n    return total_sum"}
{"task_id": 94, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from math import tan, pi\ndef func(s, l):\n    '''\n    A function should be written to calculate the area of a regular polygon.\n    '''\n"}], "response": "```python\nfrom math import tan, pi\n\ndef func(s, l):\n    '''\n    Calculate the area of a regular polygon.\n\n    Parameters:\n    s (int): Number of sides of the polygon\n    l (int): Length of each side of the polygon\n\n    Returns:\n    float: Area of the regular polygon\n    '''\n    area = (s * l**2) / (4 * tan(pi/s))\n    return area\n```", "response_code": "\nfrom math import tan, pi\n\ndef func(s, l):\n    '''\n    Calculate the area of a regular polygon.\n\n    Parameters:\n    s (int): Number of sides of the polygon\n    l (int): Length of each side of the polygon\n\n    Returns:\n    float: Area of the regular polygon\n    '''\n    area = (s * l**2) / (4 * tan(pi/s))\n    return area\n"}
{"task_id": 95, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math \ndef func(n): \n    '''\n    A python function is written to check whether the sum of divisors are same or not.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    '''\n    A python function is written to check whether the sum of divisors are same or not.\n    '''\n    def sum_of_divisors(num):\n        div_sum = 1\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                div_sum += i\n                if i != num // i:\n                    div_sum += num // i\n        return div_sum\n\n    return sum_of_divisors(n) == n * 2", "response_code": "import math\n\ndef func(n):\n    '''\n    A python function is written to check whether the sum of divisors are same or not.\n    '''\n    def sum_of_divisors(num):\n        div_sum = 1\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                div_sum += i\n                if i != num // i:\n                    div_sum += num // i\n        return div_sum\n\n    return sum_of_divisors(n) == n * 2"}
{"task_id": 96, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1): \n    '''\n    A python function should be written to count characters at the same position in a given string (lower and uppercase characters) as in the English alphabet.\n    '''\n"}], "response": "```python\ndef func(str1): \n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(ord('a') + i) or str1[i].upper() == chr(ord('A') + i):\n            count += 1\n    return count\n```", "response_code": "\ndef func(str1): \n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(ord('a') + i) or str1[i].upper() == chr(ord('A') + i):\n            count += 1\n    return count\n"}
{"task_id": 97, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(A): \n    '''\n    A python function is written to count the pairs with xor as an even number.\n    '''\n"}], "response": "```python\ndef func(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n```", "response_code": "\ndef func(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"}
{"task_id": 98, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function is written to find the smallest power of 2 greater than or equal to n.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(n): \n    return 2**math.ceil(math.log2(n))\n```", "response_code": "\nimport math\n\ndef func(n): \n    return 2**math.ceil(math.log2(n))\n"}
{"task_id": 99, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,x): \n    '''\n    A python function is written to find the frequency of a number in a given array.\n    '''\n"}], "response": "```python\ndef func(a, x):\n    return a.count(x)\n```", "response_code": "\ndef func(a, x):\n    return a.count(x)\n"}
