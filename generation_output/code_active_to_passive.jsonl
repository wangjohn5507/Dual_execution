{"task_id": 0, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    A function should be written to find the similar elements from the given two tuple lists.\n    '''\n"}], "response": "from typing import List\n\ndef func(test_tup1: List[tuple], test_tup2: List[tuple]):\n    similar_elements = []\n    for tup1 in test_tup1:\n        for tup2 in test_tup2:\n            if set(tup1) == set(tup2):\n                similar_elements.append(tup1)\n    return similar_elements", "response_code": "from typing import List\n\ndef func(test_tup1: List[tuple], test_tup2: List[tuple]):\n    similar_elements = []\n    for tup1 in test_tup1:\n        for tup2 in test_tup2:\n            if set(tup1) == set(tup2):\n                similar_elements.append(tup1)\n    return similar_elements"}
{"task_id": 1, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(n):\n    '''\n    A python function is written to identify non-prime numbers.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    '''\n    A python function is written to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False", "response_code": "import math\n\ndef func(n):\n    '''\n    A python function is written to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": 2, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq as hq\ndef func(nums,n):\n    '''\n    A function is written to find the largest integers from a given list of numbers using the heap queue algorithm.\n    '''\n"}], "response": "import heapq as hq\n\ndef func(nums, n):\n    return hq.nlargest(n, nums)", "response_code": "import heapq as hq\n\ndef func(nums, n):\n    return hq.nlargest(n, nums)"}
{"task_id": 3, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x): \n    '''\n    A python function is written to check whether the two numbers differ at one bit position only or not.\n    '''\n"}], "response": "```python\ndef func(x): \n    return bin(x).count('1') == 1\n```", "response_code": "\ndef func(x): \n    return bin(x).count('1') == 1\n"}
{"task_id": 4, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function should be written to find all words which are at least 4 characters long in a string by using regex.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)", "response_code": "import re\n\ndef func(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)"}
{"task_id": 5, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    A function is written to find squares of individual elements in a list using a lambda function.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return list(map(lambda x: x**2, nums))\n```", "response_code": "\ndef func(nums):\n    return list(map(lambda x: x**2, nums))\n"}
{"task_id": 6, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str): \n    '''\n    A python function is written to find the minimum number of rotations required to get the same string.\n    '''\n"}], "response": "```python\ndef func(str): \n    '''\n    A python function is written to find the minimum number of rotations required to get the same string.\n    '''\n    def rotations_to_same_string(s):\n        n = len(s)\n        for i in range(1, n+1):\n            if n % i == 0:\n                if s == s[:i]*(n//i):\n                    return n//i\n        return n\n\n    return rotations_to_same_string(str)\n```", "response_code": "\ndef func(str): \n    '''\n    A python function is written to find the minimum number of rotations required to get the same string.\n    '''\n    def rotations_to_same_string(s):\n        n = len(s)\n        for i in range(1, n+1):\n            if n % i == 0:\n                if s == s[:i]*(n//i):\n                    return n//i\n        return n\n\n    return rotations_to_same_string(str)\n"}
{"task_id": 7, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s,ch): \n    '''\n    A python function is written to remove the first and last occurrence of a given character from the string.\n    '''\n"}], "response": "```python\ndef func(s, ch):\n    '''\n    A python function is written to remove the first and last occurrence of a given character from the string.\n    '''\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    \n    if first_index != -1 and last_index != -1:\n        s = s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n    \n    return s\n```", "response_code": "\ndef func(s, ch):\n    '''\n    A python function is written to remove the first and last occurrence of a given character from the string.\n    '''\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    \n    if first_index != -1 and last_index != -1:\n        s = s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n    \n    return s\n"}
{"task_id": 8, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(M):\n    '''\n    A function should be written to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(M):\n    return M[np.argsort(np.sum(M, axis=1))]\n```", "response_code": "\nimport numpy as np\n\ndef func(M):\n    return M[np.argsort(np.sum(M, axis=1))]\n"}
{"task_id": 9, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l,b,h) : \n    '''\n    A python function is written to find the volume of a triangular prism.\n    '''\n"}], "response": "```python\ndef func(l, b, h):\n    return 0.5 * l * b * h\n```", "response_code": "\ndef func(l, b, h):\n    return 0.5 * l * b * h\n"}
{"task_id": 10, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function should be written to find sequences of lowercase letters joined with an underscore.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    result = re.findall(pattern, text)\n    return result", "response_code": "import re\n\ndef func(text):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    result = re.findall(pattern, text)\n    return result"}
{"task_id": 11, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a):\n    '''\n    A function should be written to find the perimeter of a square.\n    '''\n"}], "response": "```python\ndef func(a):\n    return 4 * a\n```", "response_code": "\ndef func(a):\n    return 4 * a\n"}
{"task_id": 12, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "NO_OF_CHARS = 256\ndef func(string): \n    '''\n    A function should be written to remove characters from the first string which are present in the second string.\n    '''\n"}], "response": "```python\ndef func(string): \n    NO_OF_CHARS = 256\n    count = [0] * NO_OF_CHARS\n    res = []\n    \n    for i in string:\n        count[ord(i)] += 1\n    \n    for i in string:\n        if count[ord(i)] == 0:\n            res.append(i)\n    \n    return ''.join(res)\n```", "response_code": "\ndef func(string): \n    NO_OF_CHARS = 256\n    count = [0] * NO_OF_CHARS\n    res = []\n    \n    for i in string:\n        count[ord(i)] += 1\n    \n    for i in string:\n        if count[ord(i)] == 0:\n            res.append(i)\n    \n    return ''.join(res)\n"}
{"task_id": 13, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arraynums):\n    '''\n    A function should be written to determine whether a given array of integers contains any duplicate element.\n    '''\n"}], "response": "```python\ndef func(arraynums):\n    return len(arraynums) != len(set(arraynums))\n```", "response_code": "\ndef func(arraynums):\n    return len(arraynums) != len(set(arraynums))\n"}
{"task_id": 14, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x): \n    '''\n    A function should be written to check if the given number is woodball or not.\n    '''\n"}], "response": "```python\ndef is_woodball(x):\n    if x < 1:\n        return False\n    sum_of_digits = sum(int(digit) for digit in str(x))\n    product_of_digits = 1\n    for digit in str(x):\n        product_of_digits *= int(digit)\n    if sum_of_digits * product_of_digits == x:\n        return True\n    else:\n        return False\n```", "response_code": "\ndef is_woodball(x):\n    if x < 1:\n        return False\n    sum_of_digits = sum(int(digit) for digit in str(x))\n    product_of_digits = 1\n    for digit in str(x):\n        product_of_digits *= int(digit)\n    if sum_of_digits * product_of_digits == x:\n        return True\n    else:\n        return False\n"}
{"task_id": 15, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(num):    \n    '''\n    A python function is written to check if a given number is one less than twice its reverse.\n    '''\n"}], "response": "```python\ndef func(num):\n    reverse_num = int(str(num)[::-1])\n    if num == 2 * reverse_num - 1:\n        return True\n    else:\n        return False\n```", "response_code": "\ndef func(num):\n    reverse_num = int(str(num)[::-1])\n    if num == 2 * reverse_num - 1:\n        return True\n    else:\n        return False\n"}
{"task_id": 16, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr) : \n    '''\n    A python function is written to find the largest number that can be formed with the given digits.\n    '''\n"}], "response": "from itertools import permutations\n\ndef func(arr):\n    perm = permutations(arr)\n    max_num = 0\n    for p in perm:\n        num = int(''.join(p))\n        if num > max_num:\n            max_num = num\n    return max_num", "response_code": "from itertools import permutations\n\ndef func(arr):\n    perm = permutations(arr)\n    max_num = 0\n    for p in perm:\n        num = int(''.join(p))\n        if num > max_num:\n            max_num = num\n    return max_num"}
{"task_id": 17, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x,y): \n    '''\n    A python function is written to check whether the given two integers have opposite sign or not.\n    '''\n"}], "response": "def func(x, y):\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False", "response_code": "def func(x, y):\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False"}
{"task_id": 18, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to find the nth octagonal number.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n * (3 * n - 2)\n```", "response_code": "\ndef func(n):\n    return n * (3 * n - 2)\n"}
{"task_id": 19, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import defaultdict\ndef func(s):\n    '''\n    A python function is written to count the number of substrings with the sum of digits equal to their length.\n    '''\n"}], "response": "from collections import defaultdict\n\ndef func(s):\n    '''\n    A python function is written to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    prefix_sum = defaultdict(int)\n    prefix_sum[0] = 1\n    cur_sum = 0\n    \n    for digit in s:\n        cur_sum += int(digit)\n        count += prefix_sum[cur_sum - len(str(cur_sum))]\n        prefix_sum[cur_sum] += 1\n    \n    return count", "response_code": "from collections import defaultdict\n\ndef func(s):\n    '''\n    A python function is written to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    prefix_sum = defaultdict(int)\n    prefix_sum[0] = 1\n    cur_sum = 0\n    \n    for digit in s:\n        cur_sum += int(digit)\n        count += prefix_sum[cur_sum - len(str(cur_sum))]\n        prefix_sum[cur_sum] += 1\n    \n    return count"}
{"task_id": 20, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(xs):\n    '''\n    A python function is written to find the smallest number in a list.\n    '''\n"}], "response": "```python\ndef func(xs):\n    return min(xs)\n```", "response_code": "\ndef func(xs):\n    return min(xs)\n"}
{"task_id": 21, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    A function should be written to find the maximum difference between available pairs in the given tuple list.\n    '''\n"}], "response": "```python\ndef func(test_list):\n    max_diff = max(test_list) - min(test_list)\n    return max_diff\n```", "response_code": "\ndef func(test_list):\n    max_diff = max(test_list) - min(test_list)\n    return max_diff\n"}
{"task_id": 22, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(subjectmarks):\n    '''\n    A function should be written to sort a list of tuples using lambda.\n    '''\n"}], "response": "```python\ndef func(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])\n```", "response_code": "\ndef func(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])\n"}
{"task_id": 23, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(data_list):\n    '''\n    A function of recursion list sum is written.\n    '''\n"}], "response": "```python\ndef func(data_list):\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + func(data_list[1:])\n```", "response_code": "\ndef func(data_list):\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + func(data_list[1:])\n"}
{"task_id": 24, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list):\n    '''\n    A python function is written to count positive numbers in a list.\n    '''\n"}], "response": "```python\ndef func(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n```", "response_code": "\ndef func(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n"}
{"task_id": 25, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):   \n    '''\n    A function should be written to find the number of ways to partition a set of bell numbers.\n    '''\n"}], "response": "```python\nfrom math import factorial\n\ndef func(n):\n    return factorial(2*n) // (factorial(n+1) * factorial(n))\n```", "response_code": "\nfrom math import factorial\n\ndef func(n):\n    return factorial(2*n) // (factorial(n+1) * factorial(n))\n"}
{"task_id": 26, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(A): \n    '''\n    A python function should be written to check whether the given array is monotonic or not.\n    '''\n"}], "response": "```python\ndef is_monotonic(A):\n    return all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n```", "response_code": "\ndef is_monotonic(A):\n    return all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n"}
{"task_id": 27, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l, s):\n    '''\n    A function should be written to check whether a list contains the given sublist or not.\n    '''\n"}], "response": "```python\ndef func(l, s):\n    '''\n    A function should be written to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n```", "response_code": "\ndef func(l, s):\n    '''\n    A function should be written to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"}
{"task_id": 28, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(Input):\n    '''\n    A function should be written to determine whether all the given tuples have equal length or not.\n    '''\n"}], "response": "def func(Input):\n    if all(len(t) == len(Input[0]) for t in Input):\n        return True\n    else:\n        return False", "response_code": "def func(Input):\n    if all(len(t) == len(Input[0]) for t in Input):\n        return True\n    else:\n        return False"}
{"task_id": 29, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    A function should be written to sort a list of elements using comb sort.\n    '''\n"}], "response": "```python\ndef comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / shrink))\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums\n```", "response_code": "\ndef comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / shrink))\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums\n"}
{"task_id": 30, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function should be written to check whether the given number can be represented as difference of two squares or not.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(n):\n    '''\n    A python function should be written to check whether the given number can be represented as difference of two squares or not.\n    '''\n    for i in range(1, int(math.sqrt(n)) + 1):\n        j = int(math.sqrt(n + i*i))\n        if j*j - i*i == n:\n            return True\n    return False\n```", "response_code": "\nimport math\n\ndef func(n):\n    '''\n    A python function should be written to check whether the given number can be represented as difference of two squares or not.\n    '''\n    for i in range(1, int(math.sqrt(n)) + 1):\n        j = int(math.sqrt(n + i*i))\n        if j*j - i*i == n:\n            return True\n    return False\n"}
{"task_id": 31, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(colors, patterns):    \n    '''\n    A function should be written to check whether it follows the sequence given in the patterns array.\n    '''\n"}], "response": "```python\ndef func(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    color_dict = {}\n    pattern_dict = {}\n    \n    for i in range(len(colors)):\n        if colors[i] not in color_dict:\n            color_dict[colors[i]] = patterns[i]\n        if patterns[i] not in pattern_dict:\n            pattern_dict[patterns[i]] = colors[i]\n        \n        if color_dict[colors[i]] != patterns[i] or pattern_dict[patterns[i]] != colors[i]:\n            return False\n    \n    return True\n```", "response_code": "\ndef func(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    color_dict = {}\n    pattern_dict = {}\n    \n    for i in range(len(colors)):\n        if colors[i] not in color_dict:\n            color_dict[colors[i]] = patterns[i]\n        if patterns[i] not in pattern_dict:\n            pattern_dict[patterns[i]] = colors[i]\n        \n        if color_dict[colors[i]] != patterns[i] or pattern_dict[patterns[i]] != colors[i]:\n            return False\n    \n    return True\n"}
{"task_id": 32, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list, K):\n    '''\n    A function should be written to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n"}], "response": "from typing import List\n\ndef func(test_list: List[tuple], K: int) -> List[tuple]:\n    return [tup for tup in test_list if all(ele % K == 0 for ele in tup)]", "response_code": "from typing import List\n\ndef func(test_list: List[tuple], K: int) -> List[tuple]:\n    return [tup for tup in test_list if all(ele % K == 0 for ele in tup)]"}
{"task_id": 33, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function is written to find the difference between sum of even and odd digits.\n    '''\n"}], "response": "def func(n): \n    even_sum = 0\n    odd_sum = 0\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    return even_sum - odd_sum", "response_code": "def func(n): \n    even_sum = 0\n    odd_sum = 0\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    return even_sum - odd_sum"}
{"task_id": 34, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s): \n    '''\n    A python function is written to check whether the length of the word is odd or not.\n    '''\n"}], "response": "def func(s):\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True", "response_code": "def func(s):\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True"}
{"task_id": 35, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to find the nth tetrahedral number.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n * (n + 1) * (n + 2) // 6\n```", "response_code": "\ndef func(n):\n    return n * (n + 1) * (n + 2) // 6\n"}
{"task_id": 36, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(r):\n    '''\n    A function should be written to find the volume of a sphere.\n    '''\n"}], "response": "import math\n\ndef func(r):\n    volume = (4/3) * math.pi * r**3\n    return volume", "response_code": "import math\n\ndef func(r):\n    volume = (4/3) * math.pi * r**3\n    return volume"}
{"task_id": 37, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(strr):  \n    '''\n    A python function is written to find the character made by adding all the characters of the given string.\n    '''\n"}], "response": "```python\ndef func(strr):\n    return chr(sum(ord(char) for char in strr) % 256)\n```", "response_code": "\ndef func(strr):\n    return chr(sum(ord(char) for char in strr) % 256)\n"}
{"task_id": 38, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to find the n-th number in the newman conway sequence.\n    '''\n"}], "response": "```python\ndef newman_conway(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    else:\n        sequence = [0] * (n + 1)\n        sequence[1] = 1\n        sequence[2] = 1\n        for i in range(3, n + 1):\n            sequence[i] = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]]\n        return sequence[n]\n```", "response_code": "\ndef newman_conway(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    else:\n        sequence = [0] * (n + 1)\n        sequence[1] = 1\n        sequence[2] = 1\n        for i in range(3, n + 1):\n            sequence[i] = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]]\n        return sequence[n]\n"}
{"task_id": 39, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(r):\n    '''\n    A function should be written to find the surface area of a sphere.\n    '''\n"}], "response": "import math\n\ndef func(r):\n    return 4 * math.pi * r**2", "response_code": "import math\n\ndef func(r):\n    return 4 * math.pi * r**2"}
{"task_id": 40, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    A function should be written to find the nth centered hexagonal number.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n * (2 * n - 1)\n```", "response_code": "\ndef func(n):\n    return n * (2 * n - 1)\n"}
{"task_id": 41, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import collections as ct\ndef func(dict1,dict2, dict3):\n    '''\n    A function should be written to merge three dictionaries into a single expression.\n    '''\n"}], "response": "import collections as ct\n\ndef func(dict1, dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "response_code": "import collections as ct\n\ndef func(dict1, dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict"}
{"task_id": 42, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import collections\ndef func(list1):\n    '''\n    A function should be written to get the frequency of the elements in a list.\n    '''\n"}], "response": "import collections\n\ndef func(list1):\n    return collections.Counter(list1)", "response_code": "import collections\n\ndef func(list1):\n    return collections.Counter(list1)"}
{"task_id": 43, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(N):\n    '''\n    A function should be written to find the closest smaller number than n.\n    '''\n"}], "response": "```python\ndef func(N):\n    return N - 1\n```", "response_code": "\ndef func(N):\n    return N - 1\n"}
{"task_id": 44, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    A python function is written to find the length of the longest word.\n    '''\n"}], "response": "```python\ndef func(list1):\n    return max(len(word) for word in list1)\n```", "response_code": "\ndef func(list1):\n    return max(len(word) for word in list1)\n"}
{"task_id": 45, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1, sub_str):\n    '''\n    A function should be written to check if a substring is present in a given list of string values.\n    '''\n"}], "response": "def func(str1, sub_str):\n    return sub_str in str1", "response_code": "def func(str1, sub_str):\n    return sub_str in str1"}
{"task_id": 46, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to check whether the given number is undulating or not.\n    '''\n"}], "response": "```python\ndef is_undulating(n):\n    n_str = str(n)\n    if len(n_str) < 3:\n        return False\n    for i in range(2, len(n_str)):\n        if n_str[i] == n_str[i-2] and n_str[i] != n_str[i-1]:\n            continue\n        elif n_str[i] != n_str[i-2] and n_str[i] == n_str[i-1]:\n            continue\n        else:\n            return False\n    return True\n```", "response_code": "\ndef is_undulating(n):\n    n_str = str(n)\n    if len(n_str) < 3:\n        return False\n    for i in range(2, len(n_str)):\n        if n_str[i] == n_str[i-2] and n_str[i] != n_str[i-1]:\n            continue\n        elif n_str[i] != n_str[i-2] and n_str[i] == n_str[i-1]:\n            continue\n        else:\n            return False\n    return True\n"}
{"task_id": 47, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,b):\n    '''\n    A function should be written to calculate the value of 'a' to the power 'b'.\n    '''\n"}], "response": "```python\ndef func(a, b):\n    return a ** b\n```", "response_code": "\ndef func(a, b):\n    return a ** b\n"}
{"task_id": 48, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from operator import itemgetter \ndef func(test_list):\n    '''\n    A function should be written to extract the index minimum value record from the given tuples.\n    '''\n"}], "response": "from operator import itemgetter\n\ndef func(test_list):\n    return min(enumerate(test_list), key=itemgetter(1))[0]", "response_code": "from operator import itemgetter\n\ndef func(test_list):\n    return min(enumerate(test_list), key=itemgetter(1))[0]"}
{"task_id": 49, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst):  \n    '''\n    A python function is written to find the minimum length of sublist.\n    '''\n"}], "response": "```python\ndef func(lst):\n    return min(len(sublist) for sublist in lst)\n```", "response_code": "\ndef func(lst):\n    return min(len(sublist) for sublist in lst)\n"}
{"task_id": 50, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    A python function is written to find the number of divisors of a given integer.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2 if n // i != i else 1\n    return count\n```", "response_code": "\nimport math\n\ndef func(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2 if n // i != i else 1\n    return count\n"}
{"task_id": 51, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to find the frequency count of a list of lists.\n    '''\n"}], "response": "```python\nfrom collections import Counter\n\ndef func(list1):\n    count = Counter([item for sublist in list1 for item in sublist])\n    return count\n```", "response_code": "\nfrom collections import Counter\n\ndef func(list1):\n    count = Counter([item for sublist in list1 for item in sublist])\n    return count\n"}
{"task_id": 52, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(numbers):  \n    '''\n    A function should be written to multiply all the numbers in a list and divide with the length of the list.\n    '''\n"}], "response": "```python\ndef func(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n```", "response_code": "\ndef func(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n"}
{"task_id": 53, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to convert the given decimal number to its binary equivalent.\n    '''\n"}], "response": "```python\ndef func(n):\n    return bin(n)[2:]\n```", "response_code": "\ndef func(n):\n    return bin(n)[2:]\n"}
{"task_id": 54, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import sys\ndef func(num):\n    '''\n    A function should be written to find the next smallest palindrome of a specified number.\n    '''\n"}], "response": "import sys\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_palindrome(num):\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n\ndef func(num):\n    '''\n    A function should be written to find the next smallest palindrome of a specified number.\n    '''\n    return next_palindrome(num)", "response_code": "import sys\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_palindrome(num):\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n\ndef func(num):\n    '''\n    A function should be written to find the next smallest palindrome of a specified number.\n    '''\n    return next_palindrome(num)"}
{"task_id": 55, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr, k):\n    '''\n    A function should be written to find the kth element in the given array.\n    '''\n"}], "response": "```python\ndef func(arr, k):\n    arr.sort()\n    return arr[k-1]\n```", "response_code": "\ndef func(arr, k):\n    arr.sort()\n    return arr[k-1]\n"}
{"task_id": 56, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(word):\n    '''\n    A function should be written to convert snake case string to camel case string.\n    '''\n"}], "response": "```python\ndef snake_to_camel(word):\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n\n# Example usage:\n# print(snake_to_camel('hello_world'))  # Output: 'HelloWorld'\n```", "response_code": "\ndef snake_to_camel(word):\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n\n# Example usage:\n# print(snake_to_camel('hello_world'))  # Output: 'HelloWorld'\n"}
{"task_id": 57, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n, m): \n    '''\n    A function should be written to find the eulerian number a(n, m).\n    '''\n"}], "response": "```python\nfrom math import comb\n\ndef func(n, m): \n    return sum((-1)**k * comb(n, k) * (m-k)**n for k in range(n+1))\n```", "response_code": "\nfrom math import comb\n\ndef func(n, m): \n    return sum((-1)**k * comb(n, k) * (m-k)**n for k in range(n+1))\n"}
{"task_id": 58, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(input_list):\n    '''\n    A function should be written to sort each sublist of strings in a given list of lists using a lambda function.\n    '''\n"}], "response": "```python\ndef func(input_list):\n    return [sorted(sublist, key=lambda x: x) for sublist in input_list]\n```", "response_code": "\ndef func(input_list):\n    return [sorted(sublist, key=lambda x: x) for sublist in input_list]\n"}
{"task_id": 59, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst):   \n    '''\n    A python function is written to count true booleans in the given list.\n    '''\n"}], "response": "```python\ndef func(lst):\n    return lst.count(True)\n```", "response_code": "\ndef func(lst):\n    return lst.count(True)\n"}
{"task_id": 60, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list, test_tup):\n    '''\n    A function should be written to add the given list to the given tuples.\n    '''\n"}], "response": "def func(test_list, test_tup):\n    return [tup + (elem,) for tup in test_tup for elem in test_list]", "response_code": "def func(test_list, test_tup):\n    return [tup + (elem,) for tup in test_tup for elem in test_list]"}
{"task_id": 61, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq\ndef func(num1,num2,num3):\n    '''\n    A function should be written to merge multiple sorted inputs into a single sorted iterator using the heap queue algorithm.\n    '''\n"}], "response": "import heapq\n\ndef func(num1, num2, num3):\n    '''\n    A function should be written to merge multiple sorted inputs into a single sorted iterator using the heap queue algorithm.\n    '''\n    heap = []\n    for i in num1, num2, num3:\n        for j in i:\n            heapq.heappush(heap, j)\n    \n    while heap:\n        yield heapq.heappop(heap)", "response_code": "import heapq\n\ndef func(num1, num2, num3):\n    '''\n    A function should be written to merge multiple sorted inputs into a single sorted iterator using the heap queue algorithm.\n    '''\n    heap = []\n    for i in num1, num2, num3:\n        for j in i:\n            heapq.heappush(heap, j)\n    \n    while heap:\n        yield heapq.heappop(heap)"}
{"task_id": 62, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s,n): \n    '''\n    A python function is written to find the count of rotations of a binary string with odd value.\n    '''\n"}], "response": "```python\ndef func(s, n):\n    count = 0\n    for i in range(n):\n        if int(s, 2) % 2 != 0:\n            count += 1\n        s = s[-1] + s[:-1]\n    return count\n```", "response_code": "\ndef func(s, n):\n    count = 0\n    for i in range(n):\n        if int(s, 2) % 2 != 0:\n            count += 1\n        s = s[-1] + s[:-1]\n    return count\n"}
{"task_id": 63, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nestedlist):\n    '''\n    A function should be written to find common elements in given nested lists.\n    '''\n"}], "response": "```python\ndef func(nestedlist):\n    '''\n    A function should be written to find common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return []\n    \n    common_elements = set(nestedlist[0])\n    \n    for sublist in nestedlist[1:]:\n        common_elements = common_elements.intersection(set(sublist))\n    \n    return list(common_elements)\n```", "response_code": "\ndef func(nestedlist):\n    '''\n    A function should be written to find common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return []\n    \n    common_elements = set(nestedlist[0])\n    \n    for sublist in nestedlist[1:]:\n        common_elements = common_elements.intersection(set(sublist))\n    \n    return list(common_elements)\n"}
{"task_id": 64, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(text):\n    '''\n    A function should be written to check if a string represents an integer or not.\n    '''\n"}], "response": "```python\ndef func(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n```", "response_code": "\ndef func(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"}
{"task_id": 65, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to check whether all dictionaries in a list are empty or not.\n    '''\n"}], "response": "def func(list1):\n    for d in list1:\n        if d:\n            return False\n    return True", "response_code": "def func(list1):\n    for d in list1:\n        if d:\n            return False\n    return True"}
{"task_id": 66, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    A function should be written to convert a given tuple of positive integers into an integer.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return int(''.join(map(str, nums)))\n```", "response_code": "\ndef func(nums):\n    return int(''.join(map(str, nums)))\n"}
{"task_id": 67, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    A function should be written to convert all possible convertible elements in the list to float.\n    '''\n"}], "response": "```python\ndef func(test_list):\n    return [float(i) if i.replace('.', '', 1).isdigit() else i for i in test_list]\n```", "response_code": "\ndef func(test_list):\n    return [float(i) if i.replace('.', '', 1).isdigit() else i for i in test_list]\n"}
{"task_id": 68, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(string): \n    '''\n    A function should be written to convert a string to a list.\n    '''\n"}], "response": "def func(string): \n    return list(string)", "response_code": "def func(string): \n    return list(string)"}
{"task_id": 69, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):\n    '''\n    A python function is written to find the element that appears only once in a sorted array.\n    '''\n"}], "response": "```python\ndef func(arr):\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n```", "response_code": "\ndef func(arr):\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n"}
{"task_id": 70, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to find the maximum product from the pairs of tuples within a given list.\n    '''\n"}], "response": "```python\ndef func(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            max_product = max(max_product, product)\n    return max_product\n```", "response_code": "\ndef func(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            max_product = max(max_product, product)\n    return max_product\n"}
{"task_id": 71, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(limit):\n    '''\n    A function should be written to sum all amicable numbers from 1 to a specified number.\n    '''\n"}], "response": "```python\ndef func(limit):\n    def sum_divisors(n):\n        divisors = [1]\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                divisors.append(i)\n                if i != n // i:\n                    divisors.append(n // i)\n        return sum(divisors)\n\n    amicable_numbers = set()\n    for i in range(1, limit + 1):\n        if i not in amicable_numbers:\n            sum1 = sum_divisors(i)\n            sum2 = sum_divisors(sum1)\n            if i == sum2 and i != sum1:\n                amicable_numbers.add(i)\n                amicable_numbers.add(sum1)\n\n    return sum(amicable_numbers)\n```", "response_code": "\ndef func(limit):\n    def sum_divisors(n):\n        divisors = [1]\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                divisors.append(i)\n                if i != n // i:\n                    divisors.append(n // i)\n        return sum(divisors)\n\n    amicable_numbers = set()\n    for i in range(1, limit + 1):\n        if i not in amicable_numbers:\n            sum1 = sum_divisors(i)\n            sum2 = sum_divisors(sum1)\n            if i == sum2 and i != sum1:\n                amicable_numbers.add(i)\n                amicable_numbers.add(sum1)\n\n    return sum(amicable_numbers)\n"}
{"task_id": 72, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import cmath\ndef func(a,b):\n    '''\n    A function should be written to get the angle of a complex number.\n    '''\n"}], "response": "import cmath\n\ndef func(a, b):\n    angle = cmath.phase(complex(a, b))\n    return angle", "response_code": "import cmath\n\ndef func(a, b):\n    angle = cmath.phase(complex(a, b))\n    return angle"}
{"task_id": 73, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(string): \n    '''\n    A function should be written to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n"}], "response": "```python\ndef max_diff(string):\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    diff = 0\n\n    for char in string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        diff = count_0 - count_1\n        if diff > max_diff:\n            max_diff = diff\n\n        if diff < 0:\n            count_0 = 0\n            count_1 = 0\n\n    return max_diff\n```", "response_code": "\ndef max_diff(string):\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    diff = 0\n\n    for char in string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        diff = count_0 - count_1\n        if diff > max_diff:\n            max_diff = diff\n\n        if diff < 0:\n            count_0 = 0\n            count_1 = 0\n\n    return max_diff\n"}
{"task_id": 74, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,b): \n    '''\n    A python function is written to find the sum of common divisors of two given numbers.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(a, b):\n    '''\n    A python function is written to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    \n    return sum(common_divisors)\n```", "response_code": "\nimport math\n\ndef func(a, b):\n    '''\n    A python function is written to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    \n    return sum(common_divisors)\n"}
{"task_id": 75, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x, y):\n    '''\n    A function should be written to multiply two integers without using the * operator in python.\n    '''\n"}], "response": "```python\ndef func(x, y):\n    if y == 0:\n        return 0\n    if y > 0:\n        return x + func(x, y - 1)\n    if y < 0:\n        return -func(x, -y)\n```", "response_code": "\ndef func(x, y):\n    if y == 0:\n        return 0\n    if y > 0:\n        return x + func(x, y - 1)\n    if y < 0:\n        return -func(x, -y)\n"}
{"task_id": 76, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n, str):\n    '''\n    A function should be written to shortlist words that are longer than n from a given list of words.\n    '''\n"}], "response": "from typing import List\n\ndef func(n: int, words: List[str]) -> List[str]:\n    return [word for word in words if len(word) > n]", "response_code": "from typing import List\n\ndef func(n: int, words: List[str]) -> List[str]:\n    return [word for word in words if len(word) > n]"}
{"task_id": 77, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(my_matrix):\n    '''\n    A function should be written to calculate a magic square.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(my_matrix):\n    n = len(my_matrix)\n    magic_sum = n * (n**2 + 1) // 2\n    row_sums = np.sum(my_matrix, axis=1)\n    col_sums = np.sum(my_matrix, axis=0)\n    diag_sum1 = np.trace(my_matrix)\n    diag_sum2 = np.trace(np.fliplr(my_matrix))\n    \n    if all(row_sum == magic_sum for row_sum in row_sums) and all(col_sum == magic_sum for col_sum in col_sums) and diag_sum1 == magic_sum and diag_sum2 == magic_sum:\n        return True\n    else:\n        return False\n```", "response_code": "\nimport numpy as np\n\ndef func(my_matrix):\n    n = len(my_matrix)\n    magic_sum = n * (n**2 + 1) // 2\n    row_sums = np.sum(my_matrix, axis=1)\n    col_sums = np.sum(my_matrix, axis=0)\n    diag_sum1 = np.trace(my_matrix)\n    diag_sum2 = np.trace(np.fliplr(my_matrix))\n    \n    if all(row_sum == magic_sum for row_sum in row_sums) and all(col_sum == magic_sum for col_sum in col_sums) and diag_sum1 == magic_sum and diag_sum2 == magic_sum:\n        return True\n    else:\n        return False\n"}
{"task_id": 78, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import defaultdict\ndef func(nums):\n    '''\n    A function should be written to find the item with maximum frequency in a given list.\n    '''\n"}], "response": "from collections import defaultdict\n\ndef func(nums):\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    \n    max_freq_item = max(freq_dict, key=freq_dict.get)\n    \n    return max_freq_item", "response_code": "from collections import defaultdict\n\ndef func(nums):\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    \n    max_freq_item = max(freq_dict, key=freq_dict.get)\n    \n    return max_freq_item"}
{"task_id": 79, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1):\n    '''\n    A python function to reverse only the vowels of a given string is to be written.\n    '''\n"}], "response": "```python\ndef reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] in vowels and s[j] in vowels:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n        elif s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n    return \"\".join(s)\n```", "response_code": "\ndef reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] in vowels and s[j] in vowels:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n        elif s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n    return \"\".join(s)\n"}
{"task_id": 80, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(tup1):\n    '''\n    A function should be written to convert tuple to a string.\n    '''\n"}], "response": "def func(tup1):\n    return ''.join(map(str, tup1))", "response_code": "def func(tup1):\n    return ''.join(map(str, tup1))"}
{"task_id": 81, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    A function should be written to calculate the sum of the negative numbers of a given list of numbers using a lambda function.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return sum(filter(lambda x: x < 0, nums))\n```", "response_code": "\ndef func(nums):\n    return sum(filter(lambda x: x < 0, nums))\n"}
{"task_id": 82, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to find the nth hexagonal number.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n * (2 * n - 1)\n```", "response_code": "\ndef func(n):\n    return n * (2 * n - 1)\n"}
{"task_id": 83, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from array import array\ndef func(nums):\n    '''\n    A function should be written to find the ratio of zeroes in an array of integers.\n    '''\n"}], "response": "```python\nfrom array import array\n\ndef func(nums):\n    count_zeros = nums.count(0)\n    total_elements = len(nums)\n    \n    if total_elements == 0:\n        return 0.0\n    \n    ratio_zeros = count_zeros / total_elements\n    return ratio_zeros\n```", "response_code": "\nfrom array import array\n\ndef func(nums):\n    count_zeros = nums.count(0)\n    total_elements = len(nums)\n    \n    if total_elements == 0:\n        return 0.0\n    \n    ratio_zeros = count_zeros / total_elements\n    return ratio_zeros\n"}
{"task_id": 84, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function should be written to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n"}], "response": "```python\ndef func(n): \n    '''\n    A python function should be written to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0:\n        return False\n    return bin(n).count('1') == 1\n```", "response_code": "\ndef func(n): \n    '''\n    A python function should be written to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0:\n        return False\n    return bin(n).count('1') == 1\n"}
{"task_id": 85, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(r):\n    '''\n    A function should be written to find the circumference of a circle.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(r):\n    return 2 * math.pi * r\n```", "response_code": "\nimport math\n\ndef func(r):\n    return 2 * math.pi * r\n"}
{"task_id": 86, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    A function should be written to extract elements that occur singly in the given tuple list.\n    '''\n"}], "response": "```python\nfrom collections import Counter\n\ndef func(test_list):\n    count_dict = Counter([item for sublist in test_list for item in sublist])\n    return [key for key, value in count_dict.items() if value == 1]\n```", "response_code": "\nfrom collections import Counter\n\ndef func(test_list):\n    count_dict = Counter([item for sublist in test_list for item in sublist])\n    return [key for key, value in count_dict.items() if value == 1]\n"}
{"task_id": 87, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    A function should be written to sort a list of elements using pancake sort.\n    '''\n"}], "response": "```python\ndef pancake_sort(arr):\n    def flip(sublist, k):\n        i = 0\n        while i < k / 2:\n            sublist[i], sublist[k - i - 1] = sublist[k - i - 1], sublist[i]\n            i += 1\n\n    def find_max_index(arr, n):\n        mi = 0\n        for i in range(0, n):\n            if arr[i] > arr[mi]:\n                mi = i\n        return mi\n\n    def pancake_sort_helper(arr, n):\n        curr_size = n\n        while curr_size > 1:\n            mi = find_max_index(arr, curr_size)\n            if mi != curr_size - 1:\n                flip(arr, mi + 1)\n                flip(arr, curr_size)\n            curr_size -= 1\n\n    pancake_sort_helper(arr, len(arr))\n    return arr\n```", "response_code": "\ndef pancake_sort(arr):\n    def flip(sublist, k):\n        i = 0\n        while i < k / 2:\n            sublist[i], sublist[k - i - 1] = sublist[k - i - 1], sublist[i]\n            i += 1\n\n    def find_max_index(arr, n):\n        mi = 0\n        for i in range(0, n):\n            if arr[i] > arr[mi]:\n                mi = i\n        return mi\n\n    def pancake_sort_helper(arr, n):\n        curr_size = n\n        while curr_size > 1:\n            mi = find_max_index(arr, curr_size)\n            if mi != curr_size - 1:\n                flip(arr, mi + 1)\n                flip(arr, curr_size)\n            curr_size -= 1\n\n    pancake_sort_helper(arr, len(arr))\n    return arr\n"}
{"task_id": 88, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1,list2,list3):\n    '''\n    A function should be written to count the same pair in three given lists.\n    '''\n"}], "response": "```python\ndef func(list1, list2, list3):\n    count = 0\n    for item in list1:\n        if item in list2 and item in list3:\n            count += 1\n    return count\n```", "response_code": "\ndef func(list1, list2, list3):\n    count = 0\n    for item in list1:\n        if item in list2 and item in list3:\n            count += 1\n    return count\n"}
{"task_id": 89, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(Input): \n    '''\n    A function should be written to find the number of lists present in the given tuple.\n    '''\n"}], "response": "def func(Input): \n    return sum(isinstance(i, list) for i in Input)", "response_code": "def func(Input): \n    return sum(isinstance(i, list) for i in Input)"}
{"task_id": 90, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr): \n    '''\n    A python function is written to find the maximum difference between any two elements in a given array.\n    '''\n"}], "response": "```python\ndef func(arr): \n    return max(arr) - min(arr)\n```", "response_code": "\ndef func(arr): \n    return max(arr) - min(arr)\n"}
{"task_id": 91, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a, b, n):\n    '''\n    A function should be written to find x and y that satisfies ax + by = n.\n    '''\n"}], "response": "```python\ndef func(a, b, n):\n    '''\n    A function should be written to find x and y that satisfies ax + by = n.\n    '''\n    def extended_gcd(a, b):\n        if a == 0:\n            return (b, 0, 1)\n        else:\n            g, y, x = extended_gcd(b % a, a)\n            return (g, x - (b // a) * y, y)\n\n    gcd, x, y = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None\n    x *= n // gcd\n    y *= n // gcd\n    return x, y\n```", "response_code": "\ndef func(a, b, n):\n    '''\n    A function should be written to find x and y that satisfies ax + by = n.\n    '''\n    def extended_gcd(a, b):\n        if a == 0:\n            return (b, 0, 1)\n        else:\n            g, y, x = extended_gcd(b % a, a)\n            return (g, x - (b // a) * y, y)\n\n    gcd, x, y = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None\n    x *= n // gcd\n    y *= n // gcd\n    return x, y\n"}
{"task_id": 92, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1, list2):\n    '''\n    A function should be written to remove all elements from a given list present in another list.\n    '''\n"}], "response": "```python\ndef func(list1, list2):\n    return [x for x in list1 if x not in list2]\n```", "response_code": "\ndef func(list1, list2):\n    return [x for x in list1 if x not in list2]\n"}
{"task_id": 93, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    A function should be written to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n    '''\n"}], "response": "```python\ndef func(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total\n```", "response_code": "\ndef func(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total\n"}
{"task_id": 94, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from math import tan, pi\ndef func(s, l):\n    '''\n    A function should be written to calculate the area of a regular polygon.\n    '''\n"}], "response": "```python\nfrom math import tan, pi\n\ndef func(s, l):\n    '''\n    Calculate the area of a regular polygon.\n\n    Parameters:\n    s (int): Number of sides of the polygon\n    l (int): Length of each side of the polygon\n\n    Returns:\n    float: Area of the regular polygon\n    '''\n    area = (s * l**2) / (4 * tan(pi/s))\n    return area\n```", "response_code": "\nfrom math import tan, pi\n\ndef func(s, l):\n    '''\n    Calculate the area of a regular polygon.\n\n    Parameters:\n    s (int): Number of sides of the polygon\n    l (int): Length of each side of the polygon\n\n    Returns:\n    float: Area of the regular polygon\n    '''\n    area = (s * l**2) / (4 * tan(pi/s))\n    return area\n"}
{"task_id": 95, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math \ndef func(n): \n    '''\n    A python function is written to check whether the sum of divisors are same or not.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    sum_divisors = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            sum_divisors += i\n            if n // i != i:\n                sum_divisors += n // i\n    return sum_divisors == n", "response_code": "import math\n\ndef func(n):\n    sum_divisors = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            sum_divisors += i\n            if n // i != i:\n                sum_divisors += n // i\n    return sum_divisors == n"}
{"task_id": 96, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1): \n    '''\n    A python function should be written to count characters at the same position in a given string (lower and uppercase characters) as in the English alphabet.\n    '''\n"}], "response": "```python\ndef func(str1): \n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(ord('a') + i) or str1[i].upper() == chr(ord('A') + i):\n            count += 1\n    return count\n```", "response_code": "\ndef func(str1): \n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(ord('a') + i) or str1[i].upper() == chr(ord('A') + i):\n            count += 1\n    return count\n"}
{"task_id": 97, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(A): \n    '''\n    A python function is written to count the pairs with xor as an even number.\n    '''\n"}], "response": "```python\ndef func(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n```", "response_code": "\ndef func(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"}
{"task_id": 98, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function is written to find the smallest power of 2 greater than or equal to n.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(n): \n    return 2**math.ceil(math.log2(n))\n```", "response_code": "\nimport math\n\ndef func(n): \n    return 2**math.ceil(math.log2(n))\n"}
{"task_id": 99, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,x): \n    '''\n    A python function is written to find the frequency of a number in a given array.\n    '''\n"}], "response": "```python\ndef func(a, x):\n    return a.count(x)\n```", "response_code": "\ndef func(a, x):\n    return a.count(x)\n"}
{"task_id": 100, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1, m, n):                                                                                                                                                                                                \n    '''\n    A function should be written to find the sum of the numbers in a list between the indices of a specified range.\n    '''\n"}], "response": "```python\ndef func(list1, m, n):\n    return sum(list1[m:n+1])\n```", "response_code": "\ndef func(list1, m, n):\n    return sum(list1[m:n+1])\n"}
{"task_id": 101, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(a):\n    '''\n    A function should be written to find the perimeter of a pentagon.\n    '''\n"}], "response": "import math\n\ndef func(a):\n    perimeter = 5 * a\n    return perimeter", "response_code": "import math\n\ndef func(a):\n    perimeter = 5 * a\n    return perimeter"}
{"task_id": 102, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s):\n    '''\n    A function should be written to find the occurrence of characters 'std' in the given string.\n    '''\n"}], "response": "```python\ndef func(s):\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n```", "response_code": "\ndef func(s):\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n"}
{"task_id": 103, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tuple):\n    '''\n    A function should be written to check if all the elements in the tuple have the same data type or not.\n    '''\n"}], "response": "def func(test_tuple):\n    '''\n    A function should be written to check if all the elements in the tuple have the same data type or not.\n    '''\n    if len(set(map(type, test_tuple))) == 1:\n        return True\n    else:\n        return False", "response_code": "def func(test_tuple):\n    '''\n    A function should be written to check if all the elements in the tuple have the same data type or not.\n    '''\n    if len(set(map(type, test_tuple))) == 1:\n        return True\n    else:\n        return False"}
{"task_id": 104, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr, n, x):\n    '''\n    A function should be written to check for majority element in the given sorted array.\n    '''\n"}], "response": "from typing import List\n\ndef func(arr: List[int], n: int, x: int) -> bool:\n    left = 0\n    right = n - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == x:\n            count = 1\n            i = mid - 1\n            while i >= 0 and arr[i] == x:\n                count += 1\n                i -= 1\n\n            j = mid + 1\n            while j < n and arr[j] == x:\n                count += 1\n                j += 1\n\n            if count > n // 2:\n                return True\n            else:\n                return False\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False", "response_code": "from typing import List\n\ndef func(arr: List[int], n: int, x: int) -> bool:\n    left = 0\n    right = n - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == x:\n            count = 1\n            i = mid - 1\n            while i >= 0 and arr[i] == x:\n                count += 1\n                i -= 1\n\n            j = mid + 1\n            while j < n and arr[j] == x:\n                count += 1\n                j += 1\n\n            if count > n // 2:\n                return True\n            else:\n                return False\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False"}
{"task_id": 105, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function is written to count set bits of a given number.\n    '''\n"}], "response": "```python\ndef func(n): \n    count = 0\n    while n: \n        count += n & 1\n        n >>= 1\n    return count\n```", "response_code": "\ndef func(n): \n    count = 0\n    while n: \n        count += n & 1\n        n >>= 1\n    return count\n"}
{"task_id": 106, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str):\n    '''\n    A python function should be written to remove the characters which have odd index values of a given string.\n    '''\n"}], "response": "def remove_odd_index_chars(input_str):\n    return input_str[::2]", "response_code": "def remove_odd_index_chars(input_str):\n    return input_str[::2]"}
{"task_id": 107, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,b,c): \n    '''\n    A function should be written to find the minimum of three numbers.\n    '''\n"}], "response": "```python\ndef func(a, b, c):\n    return min(a, b, c)\n```", "response_code": "\ndef func(a, b, c):\n    return min(a, b, c)\n"}
{"task_id": 108, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n,l,r):  \n    '''\n    A python function is written to check whether all the bits are unset in the given range or not.\n    '''\n"}], "response": "```python\ndef func(n, l, r):\n    return all((n & (1 << i)) == 0 for i in range(l, r+1))\n```", "response_code": "\ndef func(n, l, r):\n    return all((n & (1 << i)) == 0 for i in range(l, r+1))\n"}
{"task_id": 109, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr, n):\n    '''\n    A function should be written to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n    '''\n"}], "response": "```python\ndef func(arr, n):\n    arr.sort()\n    return arr\n```", "response_code": "\ndef func(arr, n):\n    arr.sort()\n    return arr\n"}
{"task_id": 110, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1,char):\n    '''\n    A function should be written to replace blank spaces with any character in a string.\n    '''\n"}], "response": "```python\ndef func(str1, char):\n    return str1.replace(' ', char)\n```", "response_code": "\ndef func(str1, char):\n    return str1.replace(' ', char)\n"}
{"task_id": 111, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq\ndef func(list1,n):\n    '''\n    A function should be written to get the n largest items from a dataset.\n    '''\n"}], "response": "import heapq\n\ndef func(list1, n):\n    return heapq.nlargest(n, list1)", "response_code": "import heapq\n\ndef func(list1, n):\n    return heapq.nlargest(n, list1)"}
{"task_id": 112, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(r,h):\n    '''\n    A function should be written to find the lateral surface area of a cylinder.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(r, h):\n    return 2 * math.pi * r * h\n```", "response_code": "\nimport math\n\ndef func(r, h):\n    return 2 * math.pi * r * h\n"}
{"task_id": 113, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l):\n    '''\n    A function should be written to find the volume of a cube.\n    '''\n"}], "response": "```python\ndef func(l):\n    return l ** 3\n```", "response_code": "\ndef func(l):\n    return l ** 3\n"}
{"task_id": 114, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function is written to set all even bits of a given number.\n    '''\n"}], "response": "```python\ndef func(n): \n    return int(''.join(['1' if i % 2 == 0 else bit for i, bit in enumerate(bin(n)[2:])]), 2)\n```", "response_code": "\ndef func(n): \n    return int(''.join(['1' if i % 2 == 0 else bit for i, bit in enumerate(bin(n)[2:])]), 2)\n"}
{"task_id": 115, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import Counter \ndef func(test_list):\n    '''\n    A function should be written to check the occurrences of records which occur similar times in the given tuples.\n    '''\n"}], "response": "from collections import Counter\n\ndef func(test_list):\n    count_dict = Counter(test_list)\n    return count_dict", "response_code": "from collections import Counter\n\ndef func(test_list):\n    count_dict = Counter(test_list)\n    return count_dict"}
{"task_id": 116, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str): \n    '''\n    A python function is written to count the number of non-empty substrings of a given string.\n    '''\n"}], "response": "```python\ndef count_substrings(s):\n    '''\n    A python function is written to count the number of non-empty substrings of a given string.\n    '''\n    return int(len(s) * (len(s) + 1) / 2)\n```", "response_code": "\ndef count_substrings(s):\n    '''\n    A python function is written to count the number of non-empty substrings of a given string.\n    '''\n    return int(len(s) * (len(s) + 1) / 2)\n"}
{"task_id": 117, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(m,n): \n    '''\n    A function is written to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n    '''\n"}], "response": "from math import comb\n\ndef func(m, n):\n    return comb(m - 1, n - 1)", "response_code": "from math import comb\n\ndef func(m, n):\n    return comb(m - 1, n - 1)"}
{"task_id": 118, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1,list2):\n    '''\n    A function should be written to replace the last element of the list with another list.\n    '''\n"}], "response": "```python\ndef func(list1, list2):\n    list1[-1:] = list2\n```", "response_code": "\ndef func(list1, list2):\n    list1[-1:] = list2\n"}
{"task_id": 119, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1):\n    '''\n    A function should be written to count total characters in a string.\n    '''\n"}], "response": "```python\ndef func(str1):\n    return len(str1)\n```", "response_code": "\ndef func(str1):\n    return len(str1)\n"}
{"task_id": 120, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math  \ndef func(N): \n    '''\n    A python function is written to find the next perfect square greater than a given number.\n    '''\n"}], "response": "import math\n\ndef func(N):\n    return math.ceil(math.sqrt(N)) ** 2", "response_code": "import math\n\ndef func(N):\n    return math.ceil(math.sqrt(N)) ** 2"}
{"task_id": 121, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr): \n    '''\n    A function should be written to find the maximum sum of bi-tonic sub-sequence for the given array.\n    '''\n"}], "response": "```python\ndef max_sum_biotonic_subsequence(arr):\n    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n\n    inc[0] = arr[0]\n    dec[n-1] = arr[n-1]\n\n    for i in range(1, n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n\n    for i in range(n-2, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n\n    return max_sum\n```", "response_code": "\ndef max_sum_biotonic_subsequence(arr):\n    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n\n    inc[0] = arr[0]\n    dec[n-1] = arr[n-1]\n\n    for i in range(1, n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n\n    for i in range(n-2, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n\n    return max_sum\n"}
{"task_id": 122, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(number):\n    '''\n    A function for computing square roots using the Babylonian method is to be written.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(number):\n    '''\n    A function for computing square roots using the Babylonian method is to be written.\n    '''\n    if number < 0:\n        return \"Square root is not defined for negative numbers\"\n    \n    guess = number / 2\n    while True:\n        new_guess = 0.5 * (guess + number / guess)\n        if abs(new_guess - guess) < 0.0001:\n            return new_guess\n        guess = new_guess\n```", "response_code": "\nimport math\n\ndef func(number):\n    '''\n    A function for computing square roots using the Babylonian method is to be written.\n    '''\n    if number < 0:\n        return \"Square root is not defined for negative numbers\"\n    \n    guess = number / 2\n    while True:\n        new_guess = 0.5 * (guess + number / guess)\n        if abs(new_guess - guess) < 0.0001:\n            return new_guess\n        guess = new_guess\n"}
{"task_id": 123, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str): \n    '''\n    A function should be written to find the longest palindromic subsequence in the given string.\n    '''\n"}], "response": "```python\ndef longest_palindromic_subsequence(s):\n    n = len(s)\n    dp = [[0]*n for _ in range(n)]\n    \n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]\n```", "response_code": "\ndef longest_palindromic_subsequence(s):\n    n = len(s)\n    dp = [[0]*n for _ in range(n)]\n    \n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]\n"}
{"task_id": 124, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    A function should be written to calculate the harmonic sum of n-1.\n    '''\n"}], "response": "```python\ndef func(n):\n    '''\n    A function should be written to calculate the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return func(n-1) + 1/n\n```", "response_code": "\ndef func(n):\n    '''\n    A function should be written to calculate the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return func(n-1) + 1/n\n"}
{"task_id": 125, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(array_nums1,array_nums2):\n    '''\n    A function should be written to find the intersection of two arrays using a lambda function.\n    '''\n"}], "response": "```python\nfrom typing import List\n\ndef func(array_nums1: List[int], array_nums2: List[int]):\n    intersection = list(filter(lambda x: x in array_nums1, array_nums2))\n    return intersection\n```", "response_code": "\nfrom typing import List\n\ndef func(array_nums1: List[int], array_nums2: List[int]):\n    intersection = list(filter(lambda x: x in array_nums1, array_nums2))\n    return intersection\n"}
{"task_id": 126, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(tup, x): \n    '''\n    A python function is written to count the occurrences of an element in a tuple.\n    '''\n"}], "response": "```python\ndef func(tup, x): \n    '''\n    A python function is written to count the occurrences of an element in a tuple.\n    '''\n    return tup.count(x)\n```", "response_code": "\ndef func(tup, x): \n    '''\n    A python function is written to count the occurrences of an element in a tuple.\n    '''\n    return tup.count(x)\n"}
{"task_id": 127, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list,element):\n    '''\n    A function should be written to insert an element before each element of a list.\n    '''\n"}], "response": "def func(lst, element):\n    new_list = []\n    for item in lst:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list", "response_code": "def func(lst, element):\n    new_list = []\n    for item in lst:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list"}
{"task_id": 128, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import cmath  \ndef func(numbers):    \n    '''\n    A python function should be written to convert complex numbers to polar coordinates.\n    '''\n"}], "response": "import cmath\n\ndef func(numbers):\n    polar_coordinates = [cmath.polar(num) for num in numbers]\n    return polar_coordinates", "response_code": "import cmath\n\ndef func(numbers):\n    polar_coordinates = [cmath.polar(num) for num in numbers]\n    return polar_coordinates"}
{"task_id": 129, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    A python function is written to count integers from a given list.\n    '''\n"}], "response": "```python\ndef func(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count\n```", "response_code": "\ndef func(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count\n"}
{"task_id": 130, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from itertools import combinations_with_replacement \ndef func(l, n):\n    '''\n    A function should be written to choose a specified number of colours from three different colours and generate all the combinations with repetitions.\n    '''\n"}], "response": "from itertools import combinations_with_replacement\n\ndef func(l, n):\n    return list(combinations_with_replacement(l, n))", "response_code": "from itertools import combinations_with_replacement\n\ndef func(l, n):\n    return list(combinations_with_replacement(l, n))"}
{"task_id": 131, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    A python function is written to count the number of prime numbers less than a given non-negative number.\n    '''\n"}], "response": "```python\ndef func(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n\n    return count\n```", "response_code": "\ndef func(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n\n    return count\n"}
{"task_id": 132, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,b):\n    '''\n    A function should be written to swap two numbers.\n    '''\n"}], "response": "def func(a, b):\n    return b, a", "response_code": "def func(a, b):\n    return b, a"}
{"task_id": 133, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    A function should be written to maximize the given two tuples.\n    '''\n"}], "response": "```python\ndef func(test_tup1, test_tup2):\n    return max(test_tup1 + test_tup2)\n```", "response_code": "\ndef func(test_tup1, test_tup2):\n    return max(test_tup1 + test_tup2)\n"}
{"task_id": 134, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n"}], "response": "```python\ndef func(n): \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nsw_prime(n):\n        count = 0\n        num = 0\n        while count < n:\n            num += 1\n            if is_prime(num):\n                count += 1\n        return num\n\n    return nsw_prime(n)\n```", "response_code": "\ndef func(n): \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nsw_prime(n):\n        count = 0\n        num = 0\n        while count < n:\n            num += 1\n            if is_prime(num):\n                count += 1\n        return num\n\n    return nsw_prime(n)\n"}
{"task_id": 135, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    A function should be written to perform mathematical division operation across the given tuples.\n    '''\n"}], "response": "def func(test_tup1, test_tup2):\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)", "response_code": "def func(test_tup1, test_tup2):\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)"}
{"task_id": 136, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1, L):\n    '''\n    A function should be written to split a given list into two parts where the length of the first part of the list is given.\n    '''\n"}], "response": "```python\ndef func(list1, L):\n    return list1[:L], list1[L:]\n```", "response_code": "\ndef func(list1, L):\n    return list1[:L], list1[L:]\n"}
{"task_id": 137, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(h_age):\n    '''\n    A function should be written to calculate a dog's age in dog's years.\n    '''\n"}], "response": "```python\ndef func(h_age):\n    return h_age * 7\n```", "response_code": "\ndef func(h_age):\n    return h_age * 7\n"}
{"task_id": 138, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(S, step):\n    '''\n    A function should be written to split a list for every nth element.\n    '''\n"}], "response": "```python\ndef func(S, step):\n    return [S[i:i+step] for i in range(0, len(S), step)]\n```", "response_code": "\ndef func(S, step):\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"}
{"task_id": 139, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l):\n    '''\n    A function should be written to find the lateral surface area of a cube.\n    '''\n"}], "response": "```python\ndef lateral_surface_area_of_cube(side_length):\n    return 4 * side_length ** 2\n```", "response_code": "\ndef lateral_surface_area_of_cube(side_length):\n    return 4 * side_length ** 2\n"}
{"task_id": 140, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):  \n    '''\n    A python function is written to find the sum of squares of first n odd natural numbers.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n**2\n```", "response_code": "\ndef func(n):\n    return n**2\n"}
{"task_id": 141, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to find the n'th star number.\n    '''\n"}], "response": "```python\ndef func(n):\n    return 6 * n * (n - 1) + 1\n```", "response_code": "\ndef func(n):\n    return 6 * n * (n - 1) + 1\n"}
{"task_id": 142, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(k):\n    '''\n    A function should be written to find the ascii value of a character.\n    '''\n"}], "response": "```python\ndef func(k):\n    return ord(k)\n```", "response_code": "\ndef func(k):\n    return ord(k)\n"}
{"task_id": 143, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):  \n    '''\n    A python function is written to find the sum of even numbers at even positions.\n    '''\n"}], "response": "```python\ndef func(arr):\n    return sum(arr[i] for i in range(len(arr)) if i % 2 == 0 and arr[i] % 2 == 0)\n```", "response_code": "\ndef func(arr):\n    return sum(arr[i] for i in range(len(arr)) if i % 2 == 0 and arr[i] % 2 == 0)\n"}
{"task_id": 144, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function is written to find the sum of the fifth power of the first n even natural numbers.\n    '''\n"}], "response": "def func(n):\n    return sum([i**5 for i in range(2, 2*n+1, 2)])", "response_code": "def func(n):\n    return sum([i**5 for i in range(2, 2*n+1, 2)])"}
{"task_id": 145, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    A function should be written to perform the rear element extraction from a list of tuples records.\n    '''\n"}], "response": "```python\ndef func(test_list):\n    return [sub[-1] for sub in test_list]\n```", "response_code": "\ndef func(test_list):\n    return [sub[-1] for sub in test_list]\n"}
{"task_id": 146, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    A function should be written to subtract the contents of one tuple with the corresponding index of the other tuple.\n    '''\n"}], "response": "def func(test_tup1, test_tup2):\n    result_tup = tuple(x - y for x, y in zip(test_tup1, test_tup2))\n    return result_tup", "response_code": "def func(test_tup1, test_tup2):\n    result_tup = tuple(x - y for x, y in zip(test_tup1, test_tup2))\n    return result_tup"}
{"task_id": 147, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math  \ndef func( n): \n    '''\n    A python function is written to find the sum of even index binomial coefficients.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    '''\n    A python function is written to find the sum of even index binomial coefficients.\n    '''\n    sum_even = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            sum_even += math.comb(n, i)\n    \n    return sum_even", "response_code": "import math\n\ndef func(n):\n    '''\n    A python function is written to find the sum of even index binomial coefficients.\n    '''\n    sum_even = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            sum_even += math.comb(n, i)\n    \n    return sum_even"}
{"task_id": 148, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(r,h):\n    '''\n    A function should be written to find the volume of a cylinder.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(r, h):\n    volume = math.pi * r**2 * h\n    return volume\n```", "response_code": "\nimport math\n\ndef func(r, h):\n    volume = math.pi * r**2 * h\n    return volume\n"}
{"task_id": 149, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(dict,n):\n    '''\n    A function should be written to filter a dictionary based on values.\n    '''\n"}], "response": "```python\ndef func(dict, n):\n    return {key: value for key, value in dict.items() if value > n}\n```", "response_code": "\ndef func(dict, n):\n    return {key: value for key, value in dict.items() if value > n}\n"}
{"task_id": 150, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    A function should be written to find the element count that occurs before the record in the given tuple.\n    '''\n"}], "response": "```python\ndef func(test_tup):\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            break\n        count += 1\n    return count\n```", "response_code": "\ndef func(test_tup):\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            break\n        count += 1\n    return count\n"}
{"task_id": 151, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to find the nth decagonal number.\n    '''\n"}], "response": "```python\ndef func(n): \n    return n * (7 * n - 5)\n```", "response_code": "\ndef func(n): \n    return n * (7 * n - 5)\n"}
{"task_id": 152, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(dlist, item):\n    '''\n    A function should be written to search an element in the given array by using sequential search.\n    '''\n"}], "response": "```python\ndef func(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i\n    return -1\n```", "response_code": "\ndef func(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i\n    return -1\n"}
{"task_id": 153, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    A python function is written to check if the elements of a given list are unique or not.\n    '''\n"}], "response": "```python\ndef func(test_list):\n    '''\n    A python function is written to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n```", "response_code": "\ndef func(test_list):\n    '''\n    A python function is written to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"}
{"task_id": 154, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums1,nums2):\n    '''\n    A function should be written to subtract two lists using map and lambda function.\n    '''\n"}], "response": "```python\ndef func(nums1, nums2):\n    subtracted_list = list(map(lambda x, y: x - y, nums1, nums2))\n    return subtracted_list\n```", "response_code": "\ndef func(nums1, nums2):\n    subtracted_list = list(map(lambda x, y: x - y, nums1, nums2))\n    return subtracted_list\n"}
{"task_id": 155, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function is written to check whether the frequency of each digit is less than or equal to the digit itself.\n    '''\n"}], "response": "```python\ndef func(n): \n    '''\n    A python function is written to check whether the frequency of each digit is less than or equal to the digit itself.\n    '''\n    from collections import Counter\n    \n    digit_freq = Counter(str(n))\n    \n    for digit, freq in digit_freq.items():\n        if int(digit) < freq:\n            return False\n    \n    return True\n```", "response_code": "\ndef func(n): \n    '''\n    A python function is written to check whether the frequency of each digit is less than or equal to the digit itself.\n    '''\n    from collections import Counter\n    \n    digit_freq = Counter(str(n))\n    \n    for digit, freq in digit_freq.items():\n        if int(digit) < freq:\n            return False\n    \n    return True\n"}
{"task_id": 156, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list,element):\n    '''\n    A function should be written to check whether all items of a list are equal to a given string.\n    '''\n"}], "response": "def func(lst, element):\n    return all(item == element for item in lst)", "response_code": "def func(lst, element):\n    return all(item == element for item in lst)"}
{"task_id": 157, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function is written that matches a string that has an a followed by two to three 'b'.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'a(bb{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None", "response_code": "import re\n\ndef func(text):\n    pattern = r'a(bb{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"}
{"task_id": 158, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a, n, k): \n    '''\n    A function should be written to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(a, n, k): \n    modified_array = np.tile(a, k)\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(len(modified_array)):\n        current_sum = max(modified_array[i], current_sum + modified_array[i])\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n```", "response_code": "\nimport numpy as np\n\ndef func(a, n, k): \n    modified_array = np.tile(a, k)\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(len(modified_array)):\n        current_sum = max(modified_array[i], current_sum + modified_array[i])\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n"}
{"task_id": 159, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):  \n    '''\n    A python function is written to find the sum of squares of first n even natural numbers.\n    '''\n"}], "response": "```python\ndef func(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**2\n    return sum\n```", "response_code": "\ndef func(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**2\n    return sum\n"}
{"task_id": 160, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to find the list of lists with maximum length.\n    '''\n"}], "response": "```python\ndef func(list1):\n    max_length = max(len(sublist) for sublist in list1)\n    result = [sublist for sublist in list1 if len(sublist) == max_length]\n    return result\n```", "response_code": "\ndef func(list1):\n    max_length = max(len(sublist) for sublist in list1)\n    result = [sublist for sublist in list1 if len(sublist) == max_length]\n    return result\n"}
{"task_id": 161, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n, k): \n    '''\n    A function is written to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n"}], "response": "```python\ndef func(n, k): \n    if n == 0: \n        return 0\n    same, diff = 0, k \n    for _ in range(2, n+1): \n        same, diff = diff, (same + diff) * (k-1)\n    return same + diff\n```", "response_code": "\ndef func(n, k): \n    if n == 0: \n        return 0\n    same, diff = 0, k \n    for _ in range(2, n+1): \n        same, diff = diff, (same + diff) * (k-1)\n    return same + diff\n"}
{"task_id": 162, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n,m):  \n    '''\n    A python function is written to find the quotient of two numbers.\n    '''\n"}], "response": "```python\ndef func(n, m):\n    '''\n    A python function is written to find the quotient of two numbers.\n    '''\n    return n / m\n```", "response_code": "\ndef func(n, m):\n    '''\n    A python function is written to find the quotient of two numbers.\n    '''\n    return n / m\n"}
{"task_id": 163, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(w,h):\n    '''\n    A function should be written to find the third side of a right angled triangle.\n    '''\n"}], "response": "import math\n\ndef func(w, h):\n    return math.sqrt(w**2 + h**2)", "response_code": "import math\n\ndef func(w, h):\n    return math.sqrt(w**2 + h**2)"}
{"task_id": 164, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(listval):\n    '''\n    A function should be written to find the maximum value in a given heterogeneous list.\n    '''\n"}], "response": "```python\ndef func(listval):\n    return max(listval)\n```", "response_code": "\ndef func(listval):\n    return max(listval)\n"}
{"task_id": 165, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(number):\n    '''\n    A function should be written to return the sum of all divisors of a number.\n    '''\n"}], "response": "```python\ndef func(number):\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total\n```", "response_code": "\ndef func(number):\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total\n"}
{"task_id": 166, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr): \n    '''\n    A python function is written to count inversions in an array.\n    '''\n"}], "response": "```python\ndef func(arr): \n    '''\n    A python function is written to count inversions in an array.\n    '''\n    def merge(arr, temp, left, mid, right): \n        inv_count = 0\n        i = left  \n        j = mid \n        k = left \n        while i <= mid - 1 and j <= right: \n            if arr[i] <= arr[j]: \n                temp[k] = arr[i] \n                k += 1\n                i += 1\n            else: \n                temp[k] = arr[j] \n                inv_count += (mid - i) \n                k += 1\n                j += 1\n        while i <= mid - 1: \n            temp[k] = arr[i] \n            k += 1\n            i += 1\n        while j <= right: \n            temp[k] = arr[j] \n            k += 1\n            j += 1\n        for i in range(left, right + 1): \n            arr[i] = temp[i] \n        return inv_count\n\n    def _mergeSort(arr, temp, left, right): \n        inv_count = 0\n        if left < right: \n            mid = (left + right) // 2\n            inv_count += _mergeSort(arr, temp, left, mid) \n            inv_count += _mergeSort(arr, temp, mid + 1, right) \n            inv_count += merge(arr, temp, left, mid + 1, right) \n        return inv_count\n\n    n = len(arr)\n    temp = [0] * n \n    return _mergeSort(arr, temp, 0, n - 1)\n```", "response_code": "\ndef func(arr): \n    '''\n    A python function is written to count inversions in an array.\n    '''\n    def merge(arr, temp, left, mid, right): \n        inv_count = 0\n        i = left  \n        j = mid \n        k = left \n        while i <= mid - 1 and j <= right: \n            if arr[i] <= arr[j]: \n                temp[k] = arr[i] \n                k += 1\n                i += 1\n            else: \n                temp[k] = arr[j] \n                inv_count += (mid - i) \n                k += 1\n                j += 1\n        while i <= mid - 1: \n            temp[k] = arr[i] \n            k += 1\n            i += 1\n        while j <= right: \n            temp[k] = arr[j] \n            k += 1\n            j += 1\n        for i in range(left, right + 1): \n            arr[i] = temp[i] \n        return inv_count\n\n    def _mergeSort(arr, temp, left, right): \n        inv_count = 0\n        if left < right: \n            mid = (left + right) // 2\n            inv_count += _mergeSort(arr, temp, left, mid) \n            inv_count += _mergeSort(arr, temp, mid + 1, right) \n            inv_count += merge(arr, temp, left, mid + 1, right) \n        return inv_count\n\n    n = len(arr)\n    temp = [0] * n \n    return _mergeSort(arr, temp, 0, n - 1)\n"}
{"task_id": 167, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to flatten a given nested list structure.\n    '''\n"}], "response": "```python\ndef flatten_list(nested_list):\n    flat_list = []\n    for sublist in nested_list:\n        if isinstance(sublist, list):\n            flat_list.extend(flatten_list(sublist))\n        else:\n            flat_list.append(sublist)\n    return flat_list\n```", "response_code": "\ndef flatten_list(nested_list):\n    flat_list = []\n    for sublist in nested_list:\n        if isinstance(sublist, list):\n            flat_list.extend(flatten_list(sublist))\n        else:\n            flat_list.append(sublist)\n    return flat_list\n"}
{"task_id": 168, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import defaultdict\ndef func(stdata):\n    '''\n    A function should be written to calculate the maximum aggregate from the list of tuples.\n    '''\n"}], "response": "from collections import defaultdict\n\ndef func(stdata):\n    max_aggregate = defaultdict(int)\n    \n    for st, marks in stdata:\n        max_aggregate[st] = max(max_aggregate[st], marks)\n    \n    return sum(max_aggregate.values())", "response_code": "from collections import defaultdict\n\ndef func(stdata):\n    max_aggregate = defaultdict(int)\n    \n    for st, marks in stdata:\n        max_aggregate[st] = max(max_aggregate[st], marks)\n    \n    return sum(max_aggregate.values())"}
{"task_id": 169, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to find the count of all binary sequences of length 2n such that the sum of the first n bits is the same as the sum of the last n bits.\n    '''\n"}], "response": "```python\ndef func(n): \n    return int((2*n+1) * (2*n+1) / (n+1))\n```", "response_code": "\ndef func(n): \n    return int((2*n+1) * (2*n+1) / (n+1))\n"}
{"task_id": 170, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(d):\n    '''\n    A function should be written to find the depth of a dictionary.\n    '''\n"}], "response": "```python\ndef func(d):\n    if isinstance(d, dict):\n        return 1 + (max(func(v) for v in d.values()) if d else 0)\n    else:\n        return 0\n```", "response_code": "\ndef func(d):\n    if isinstance(d, dict):\n        return 1 + (max(func(v) for v in d.values()) if d else 0)\n    else:\n        return 0\n"}
{"task_id": 171, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr,ranges,rotations,index) :  \n    '''\n    A python function is written to find the element at a given index after a number of rotations.\n    '''\n"}], "response": "```python\ndef func(arr, ranges, rotations, index):\n    n = len(arr)\n    for i in range(rotations):\n        left, right = ranges[i]\n        arr = arr[:left] + arr[right+1:] + arr[left:right+1]\n    return arr[index]\n```", "response_code": "\ndef func(arr, ranges, rotations, index):\n    n = len(arr)\n    for i in range(rotations):\n        left, right = ranges[i]\n        arr = arr[:left] + arr[right+1:] + arr[left:right+1]\n    return arr[index]\n"}
{"task_id": 172, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(words):\n    '''\n    A function should be written to match two words from a list of words starting with the letter 'p'.\n    '''\n"}], "response": "import re\n\ndef func(words):\n    pattern = r'^p\\w+'\n    matched_words = []\n    for word in words:\n        if re.match(pattern, word):\n            matched_words.append(word)\n    \n    return matched_words", "response_code": "import re\n\ndef func(words):\n    pattern = r'^p\\w+'\n    matched_words = []\n    for word in words:\n        if re.match(pattern, word):\n            matched_words.append(word)\n    \n    return matched_words"}
{"task_id": 173, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a, n, index, k):\n    '''\n    A function is written to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n"}], "response": "```python\ndef func(a, n, index, k):\n    dp = [0] * n\n    dp[index] = a[index]\n    \n    for i in range(index+1, k):\n        for j in range(index, i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    \n    return max(dp)\n```", "response_code": "\ndef func(a, n, index, k):\n    dp = [0] * n\n    dp[index] = a[index]\n    \n    for i in range(index+1, k):\n        for j in range(index, i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    \n    return max(dp)\n"}
{"task_id": 174, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from copy import deepcopy\ndef func(tuplex,m,n):\n    '''\n    A function should be written to get a colon of a tuple.\n    '''\n"}], "response": "from copy import deepcopy\n\ndef func(tuplex, m, n):\n    return tuplex[m:n]", "response_code": "from copy import deepcopy\n\ndef func(tuplex, m, n):\n    return tuplex[m:n]"}
{"task_id": 175, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums1, nums2, N):\n    '''\n    A function should be written to find the specified number of largest products from two given lists.\n    '''\n"}], "response": "```python\nimport itertools\n\ndef func(nums1, nums2, N):\n    products = [x * y for x in nums1 for y in nums2]\n    largest_products = sorted(products, reverse=True)[:N]\n    return largest_products\n```", "response_code": "\nimport itertools\n\ndef func(nums1, nums2, N):\n    products = [x * y for x in nums1 for y in nums2]\n    largest_products = sorted(products, reverse=True)[:N]\n    return largest_products\n"}
{"task_id": 176, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,b):   \n    '''\n    A python function is written to find the maximum of two numbers.\n    '''\n"}], "response": "```python\ndef func(a, b):\n    '''\n    A python function is written to find the maximum of two numbers.\n    '''\n    return max(a, b)\n```", "response_code": "\ndef func(a, b):\n    '''\n    A python function is written to find the maximum of two numbers.\n    '''\n    return max(a, b)\n"}
{"task_id": 177, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1):\n    '''\n    A function should be written to convert a given string to a tuple.\n    '''\n"}], "response": "```python\ndef func(str1):\n    return tuple(str1)\n```", "response_code": "\ndef func(str1):\n    return tuple(str1)\n"}
{"task_id": 178, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function is written to set the left most unset bit.\n    '''\n"}], "response": "```python\ndef func(n): \n    return n | (n + 1)\n```", "response_code": "\ndef func(n): \n    return n | (n + 1)\n"}
{"task_id": 179, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(r,h):\n    '''\n    A function should be written to find the volume of a cone.\n    '''\n"}], "response": "import math\n\ndef func(r, h):\n    volume = (1/3) * math.pi * r**2 * h\n    return volume", "response_code": "import math\n\ndef func(r, h):\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"}
{"task_id": 180, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function is written to find the highest power of 2 that is less than or equal to n.\n    '''\n"}], "response": "```python\ndef func(n): \n    return 2**(n.bit_length() - 1)\n```", "response_code": "\ndef func(n): \n    return 2**(n.bit_length() - 1)\n"}
{"task_id": 181, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to find the n'th lucas number.\n    '''\n"}], "response": "```python\ndef func(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b\n```", "response_code": "\ndef func(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b\n"}
{"task_id": 182, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list_, string):\n    '''\n    A function should be written to insert a given string at the beginning of all items in a list.\n    '''\n"}], "response": "```python\ndef func(list_, string):\n    return [string + item for item in list_]\n```", "response_code": "\ndef func(list_, string):\n    return [string + item for item in list_]\n"}
{"task_id": 183, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l1, l2, l3):\n    '''\n    A function should be written to convert more than one list to nested dictionary.\n    '''\n"}], "response": "```python\ndef func(l1, l2, l3):\n    '''\n    A function should be written to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n    nested_dict['list1'] = {i: j for i, j in enumerate(l1)}\n    nested_dict['list2'] = {i: j for i, j in enumerate(l2)}\n    nested_dict['list3'] = {i: j for i, j in enumerate(l3)}\n    \n    return nested_dict\n```", "response_code": "\ndef func(l1, l2, l3):\n    '''\n    A function should be written to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n    nested_dict['list1'] = {i: j for i, j in enumerate(l1)}\n    nested_dict['list2'] = {i: j for i, j in enumerate(l2)}\n    nested_dict['list3'] = {i: j for i, j in enumerate(l3)}\n    \n    return nested_dict\n"}
{"task_id": 184, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    A function is written to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n"}], "response": "```python\ndef func(n):\n    if n == 0:\n        return 0\n    \n    dp = [0] * (n + 1)\n    dp[1] = 1\n    \n    for i in range(2, n + 1):\n        dp[i] = max(i, dp[i//2] + dp[i//3] + dp[i//4] + dp[i//5])\n    \n    return dp[n]\n```", "response_code": "\ndef func(n):\n    if n == 0:\n        return 0\n    \n    dp = [0] * (n + 1)\n    dp[1] = 1\n    \n    for i in range(2, n + 1):\n        dp[i] = max(i, dp[i//2] + dp[i//3] + dp[i//4] + dp[i//5])\n    \n    return dp[n]\n"}
{"task_id": 185, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(input_list):\n    '''\n    A function should be written to find the list with maximum length using a lambda function.\n    '''\n"}], "response": "```python\ndef func(input_list):\n    return max(input_list, key=lambda x: len(x))\n```", "response_code": "\ndef func(input_list):\n    return max(input_list, key=lambda x: len(x))\n"}
{"task_id": 186, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    A function should be written to check if the given tuple is distinct or not.\n    '''\n"}], "response": "def func(test_tup):\n    '''\n    A function should be written to check if the given tuple is distinct or not.\n    '''\n    return len(test_tup) == len(set(test_tup))", "response_code": "def func(test_tup):\n    '''\n    A function should be written to check if the given tuple is distinct or not.\n    '''\n    return len(test_tup) == len(set(test_tup))"}
{"task_id": 187, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1):\n    '''\n    A python function is written to find the first non-repeated character in a given string.\n    '''\n"}], "response": "from collections import Counter\n\ndef func(str1):\n    '''\n    A python function is written to find the first non-repeated character in a given string.\n    '''\n    count = Counter(str1)\n    for char in str1:\n        if count[char] == 1:\n            return char\n    return None", "response_code": "from collections import Counter\n\ndef func(str1):\n    '''\n    A python function is written to find the first non-repeated character in a given string.\n    '''\n    count = Counter(str1)\n    for char in str1:\n        if count[char] == 1:\n            return char\n    return None"}
{"task_id": 188, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef func(string): \n    '''\n    A function should be written to check whether the given string starts and ends with the same character or not using regex.\n    '''\n"}], "response": "import re\n\ndef func(string): \n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    return re.match(regex, string) is not None", "response_code": "import re\n\ndef func(string): \n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    return re.match(regex, string) is not None"}
{"task_id": 189, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,b,c):\n    '''\n    A function should be written to find the median of three specific numbers.\n    '''\n"}], "response": "```python\ndef func(a, b, c):\n    return sorted([a, b, c])[1]\n```", "response_code": "\ndef func(a, b, c):\n    return sorted([a, b, c])[1]\n"}
{"task_id": 190, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    A function should be written to compute the sum of digits of each number of a given list.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return [sum(int(digit) for digit in str(num)) for num in nums]\n```", "response_code": "\ndef func(nums):\n    return [sum(int(digit) for digit in str(num)) for num in nums]\n"}
{"task_id": 191, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    A function should be written to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n"}], "response": "```python\ndef func(test_tup1, test_tup2):\n    result = tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n    return result\n```", "response_code": "\ndef func(test_tup1, test_tup2):\n    result = tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n    return result\n"}
{"task_id": 192, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    A function should be written to extract the frequency of unique tuples in the given list order irrespective.\n    '''\n"}], "response": "from collections import Counter\n\ndef func(test_list):\n    return dict(Counter(test_list))", "response_code": "from collections import Counter\n\ndef func(test_list):\n    return dict(Counter(test_list))"}
{"task_id": 193, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    A function should be written to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n"}], "response": "```python\ndef func(test_tup1, test_tup2):\n    result = tuple(map(sum, zip(*[(a + b for a, b in zip(inner_tup1, inner_tup2)) for inner_tup1, inner_tup2 in zip(test_tup1, test_tup2)]))\n    return result\n```", "response_code": "\ndef func(test_tup1, test_tup2):\n    result = tuple(map(sum, zip(*[(a + b for a, b in zip(inner_tup1, inner_tup2)) for inner_tup1, inner_tup2 in zip(test_tup1, test_tup2)]))\n    return result\n"}
{"task_id": 194, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,b):   \n    '''\n    A python function is written to find the minimum of two numbers.\n    '''\n"}], "response": "```python\ndef func(a, b):\n    '''\n    A python function is written to find the minimum of two numbers.\n    '''\n    return min(a, b)\n```", "response_code": "\ndef func(a, b):\n    '''\n    A python function is written to find the minimum of two numbers.\n    '''\n    return min(a, b)\n"}
{"task_id": 195, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(tuplex,tuple1): \n    '''\n    A function should be written to check whether an element exists within a tuple.\n    '''\n"}], "response": "def func(tuplex, tuple1):\n    if tuplex in tuple1:\n        return True\n    else:\n        return False", "response_code": "def func(tuplex, tuple1):\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"}
{"task_id": 196, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x): \n    '''\n    A python function is written to find the parity of a given number.\n    '''\n"}], "response": "```python\ndef func(x):\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n```", "response_code": "\ndef func(x):\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"}
{"task_id": 197, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    A function should be written to create the next bigger number by rearranging the digits of a given number.\n    '''\n"}], "response": "```python\ndef func(n):\n    n_str = str(n)\n    digits = sorted(n_str, reverse=True)\n    next_bigger = int(''.join(digits))\n    return next_bigger\n```", "response_code": "\ndef func(n):\n    n_str = str(n)\n    digits = sorted(n_str, reverse=True)\n    next_bigger = int(''.join(digits))\n    return next_bigger\n"}
{"task_id": 198, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq\ndef func(nums1, nums2, k):\n    '''\n    A function should be written to find k number of pairs which consist of one element from the first array and one element from the second array.\n    '''\n"}], "response": "import heapq\n\ndef func(nums1, nums2, k):\n    min_heap = []\n    if not nums1 or not nums2:\n        return []\n\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2):\n            heapq.heappush(min_heap, (nums1[i] + nums2[j], i, j))\n\n    push(0, 0)\n    pairs = []\n    while min_heap and len(pairs) < k:\n        _, i, j = heapq.heappop(min_heap)\n        pairs.append((nums1[i], nums2[j]))\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n\n    return pairs", "response_code": "import heapq\n\ndef func(nums1, nums2, k):\n    min_heap = []\n    if not nums1 or not nums2:\n        return []\n\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2):\n            heapq.heappush(min_heap, (nums1[i] + nums2[j], i, j))\n\n    push(0, 0)\n    pairs = []\n    while min_heap and len(pairs) < k:\n        _, i, j = heapq.heappop(min_heap)\n        pairs.append((nums1[i], nums2[j]))\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n\n    return pairs"}
{"task_id": 199, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to find the minimum product from the pairs of tuples within a given list.\n    '''\n"}], "response": "```python\ndef func(list1):\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            min_product = min(min_product, product)\n    return min_product\n```", "response_code": "\ndef func(list1):\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            min_product = min(min_product, product)\n    return min_product\n"}
{"task_id": 200, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(listval):\n    '''\n    A function should be written to find the minimum value in a given heterogeneous list.\n    '''\n"}], "response": "def func(listval):\n    return min(listval)", "response_code": "def func(listval):\n    return min(listval)"}
{"task_id": 201, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(word):\n    '''\n    A function should be written to convert the given snake case string to camel case string by using regex.\n    '''\n"}], "response": "import re\n\ndef func(word):\n    return re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)", "response_code": "import re\n\ndef func(word):\n    return re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)"}
{"task_id": 202, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l):\n    '''\n    A python function is written to remove odd numbers from a given list.\n    '''\n"}], "response": "```python\ndef func(l):\n    return [x for x in l if x % 2 == 0]\n```", "response_code": "\ndef func(l):\n    return [x for x in l if x % 2 == 0]\n"}
{"task_id": 203, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1, n):\n    '''\n    A function should be written to extract the nth element from a given list of tuples.\n    '''\n"}], "response": "```python\ndef func(list1, n):\n    return [item[n] for item in list1]\n```", "response_code": "\ndef func(list1, n):\n    return [item[n] for item in list1]\n"}
{"task_id": 204, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1,list2):  \n    '''\n    A python function is written to check whether the value exists in a sequence or not.\n    '''\n"}], "response": "```python\ndef func(list1, list2):\n    '''\n    A python function is written to check whether the value exists in a sequence or not.\n    '''\n    for val in list1:\n        if val in list2:\n            print(f\"{val} exists in the sequence.\")\n        else:\n            print(f\"{val} does not exist in the sequence.\")\n```", "response_code": "\ndef func(list1, list2):\n    '''\n    A python function is written to check whether the value exists in a sequence or not.\n    '''\n    for val in list1:\n        if val in list2:\n            print(f\"{val} exists in the sequence.\")\n        else:\n            print(f\"{val} does not exist in the sequence.\")\n"}
{"task_id": 205, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr): \n    '''\n    A python function is written to find a pair with highest product from a given array of integers.\n    '''\n"}], "response": "```python\nimport itertools\n\ndef func(arr): \n    max_product = float('-inf')\n    pair = ()\n    \n    for a, b in itertools.combinations(arr, 2):\n        product = a * b\n        if product > max_product:\n            max_product = product\n            pair = (a, b)\n    \n    return pair\n```", "response_code": "\nimport itertools\n\ndef func(arr): \n    max_product = float('-inf')\n    pair = ()\n    \n    for a, b in itertools.combinations(arr, 2):\n        product = a * b\n        if product > max_product:\n            max_product = product\n            pair = (a, b)\n    \n    return pair\n"}
{"task_id": 206, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(Input): \n    '''\n    A function should be written to find the common first element in a given list of tuple.\n    '''\n"}], "response": "from collections import Counter\n\ndef func(Input): \n    '''\n    A function should be written to find the common first element in a given list of tuple.\n    '''\n    first_elements = [tup[0] for tup in Input]\n    common_first_element = Counter(first_elements).most_common(1)[0][0]\n    \n    return common_first_element", "response_code": "from collections import Counter\n\ndef func(Input): \n    '''\n    A function should be written to find the common first element in a given list of tuple.\n    '''\n    first_elements = [tup[0] for tup in Input]\n    common_first_element = Counter(first_elements).most_common(1)[0][0]\n    \n    return common_first_element"}
{"task_id": 207, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst): \n    '''\n    A python function is written to find the sublist having maximum length.\n    '''\n"}], "response": "```python\ndef func(lst): \n    return max(lst, key=len)\n```", "response_code": "\ndef func(lst): \n    return max(lst, key=len)\n"}
{"task_id": 208, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n"}], "response": "```python\ndef func(list1):\n    total_sum = sum([round(num) for num in list1])\n    result = total_sum * len(list1)\n    print(result)\n```", "response_code": "\ndef func(list1):\n    total_sum = sum([round(num) for num in list1])\n    result = total_sum * len(list1)\n    print(result)\n"}
{"task_id": 209, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function is written to find the cube sum of first n even natural numbers.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n * (n + 1) * (2 * n + 1) // 2\n```", "response_code": "\ndef func(n):\n    return n * (n + 1) * (2 * n + 1) // 2\n"}
{"task_id": 210, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    A function should be written to concatenate each element of the tuple by the delimiter.\n    '''\n"}], "response": "```python\ndef func(test_tup):\n    return '-'.join(test_tup)\n```", "response_code": "\ndef func(test_tup):\n    return '-'.join(test_tup)\n"}
{"task_id": 211, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):  \n    '''\n    A python function is written to find the average of cubes of first n natural numbers.\n    '''\n"}], "response": "```python\ndef func(n):\n    total = sum([i**3 for i in range(1, n+1)])\n    average = total / n\n    return average\n```", "response_code": "\ndef func(n):\n    total = sum([i**3 for i in range(1, n+1)])\n    average = total / n\n    return average\n"}
{"task_id": 212, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tuple):\n    '''\n    A function should be written to extract only the rear index element of each string in the given tuple.\n    '''\n"}], "response": "def func(test_tuple):\n    return tuple(s[-1] for s in test_tuple)", "response_code": "def func(test_tuple):\n    return tuple(s[-1] for s in test_tuple)"}
{"task_id": 213, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1, x): \n    '''\n    A function should be written to count the number of sublists containing a particular element.\n    '''\n"}], "response": "from typing import List\n\ndef func(list1: List[List[int]], x: int) -> int:\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count", "response_code": "from typing import List\n\ndef func(list1: List[List[int]], x: int) -> int:\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"}
{"task_id": 214, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    A function should be written to filter odd numbers using a lambda function.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))\n```", "response_code": "\ndef func(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))\n"}
{"task_id": 215, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(dt):\n    '''\n    A function should be written to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n    '''\n"}], "response": "import re\n\ndef func(dt):\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)", "response_code": "import re\n\ndef func(dt):\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)"}
{"task_id": 216, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(my_list):\n    '''\n    A function should be written to sort the given array by using shell sort.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(my_list):\n    '''\n    A function should be written to sort the given array by using shell sort.\n    '''\n    def shell_sort(arr):\n        n = len(arr)\n        gap = n // 2\n        while gap > 0:\n            for i in range(gap, n):\n                temp = arr[i]\n                j = i\n                while j >= gap and arr[j - gap] > temp:\n                    arr[j] = arr[j - gap]\n                    j -= gap\n                arr[j] = temp\n            gap //= 2\n        return arr\n\n    return shell_sort(my_list)\n```", "response_code": "\nimport numpy as np\n\ndef func(my_list):\n    '''\n    A function should be written to sort the given array by using shell sort.\n    '''\n    def shell_sort(arr):\n        n = len(arr)\n        gap = n // 2\n        while gap > 0:\n            for i in range(gap, n):\n                temp = arr[i]\n                j = i\n                while j >= gap and arr[j - gap] > temp:\n                    arr[j] = arr[j - gap]\n                    j -= gap\n                arr[j] = temp\n            gap //= 2\n        return arr\n\n    return shell_sort(my_list)\n"}
{"task_id": 217, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    A function should be written to extract the elementwise and tuples from the given two tuples.\n    '''\n"}], "response": "```python\ndef func(test_tup1, test_tup2):\n    return tuple(map(lambda x, y: (x, y), test_tup1, test_tup2))\n```", "response_code": "\ndef func(test_tup1, test_tup2):\n    return tuple(map(lambda x, y: (x, y), test_tup1, test_tup2))\n"}
{"task_id": 218, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a, b, c): \n    '''\n    A function should be written to find the directrix of a parabola.\n    '''\n"}], "response": "```python\ndef func(a, b, c): \n    '''\n    A function should be written to find the directrix of a parabola.\n    '''\n    directrix = c - (b**2) / (4*a)\n    return directrix\n```", "response_code": "\ndef func(a, b, c): \n    '''\n    A function should be written to find the directrix of a parabola.\n    '''\n    directrix = c - (b**2) / (4*a)\n    return directrix\n"}
{"task_id": 219, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1, list2):\n    '''\n    A function is written that takes two lists and returns true if they have at least one common element.\n    '''\n"}], "response": "```python\ndef func(list1, list2):\n    '''\n    A function is written that takes two lists and returns true if they have at least one common element.\n    '''\n    return any(item in list1 for item in list2)\n```", "response_code": "\ndef func(list1, list2):\n    '''\n    A function is written that takes two lists and returns true if they have at least one common element.\n    '''\n    return any(item in list1 for item in list2)\n"}
{"task_id": 220, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(base1,base2,height):\n    '''\n    A function should be written to find the median of a trapezium.\n    '''\n"}], "response": "```python\ndef func(base1, base2, height):\n    return (base1 + base2) / 2 * height\n```", "response_code": "\ndef func(base1, base2, height):\n    return (base1 + base2) / 2 * height\n"}
{"task_id": 221, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr, number):\n    '''\n    A function should be written to check whether the entered number is greater than the elements of the given array.\n    '''\n"}], "response": "def func(arr, number):\n    for element in arr:\n        if number <= element:\n            return False\n    return True", "response_code": "def func(arr, number):\n    for element in arr:\n        if number <= element:\n            return False\n    return True"}
{"task_id": 222, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function should be written that matches a string that has an a followed by one or more b's.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'ab+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False", "response_code": "import re\n\ndef func(text):\n    pattern = r'ab+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": 223, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n) :\n    '''\n    A python function is written to find the last digit of a given number.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n % 10\n```", "response_code": "\ndef func(n):\n    return n % 10\n"}
{"task_id": 224, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    A python function should be written to print negative numbers in a list.\n    '''\n"}], "response": "```python\ndef func(list1):\n    for num in list1:\n        if num < 0:\n            print(num)\n```", "response_code": "\ndef func(list1):\n    for num in list1:\n        if num < 0:\n            print(num)\n"}
{"task_id": 225, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1):\n    '''\n    A function should be written to remove odd characters in a string.\n    '''\n"}], "response": "```python\ndef func(str1):\n    return str1[::2]\n```", "response_code": "\ndef func(str1):\n    return str1[::2]\n"}
{"task_id": 226, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    A function should be written to count bidirectional tuple pairs.\n    '''\n"}], "response": "```python\ndef func(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list and (test_list[j], test_list[i]) in test_list:\n                count += 1\n    return count\n```", "response_code": "\ndef func(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list and (test_list[j], test_list[i]) in test_list:\n                count += 1\n    return count\n"}
{"task_id": 227, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(L):\n    '''\n    A function should be written to convert a list of multiple integers into a single integer.\n    '''\n"}], "response": "```python\ndef func(L):\n    return int(''.join(map(str, L)))\n```", "response_code": "\ndef func(L):\n    return int(''.join(map(str, L)))\n"}
{"task_id": 228, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function should be written to find all adverbs and their positions in a given sentence.\n    '''\n"}], "response": "import re\n\ndef find_adverbs(text):\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    positions = [m.start() for m in re.finditer(r'\\b\\w+ly\\b', text)]\n    return adverbs, positions", "response_code": "import re\n\ndef find_adverbs(text):\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    positions = [m.start() for m in re.finditer(r'\\b\\w+ly\\b', text)]\n    return adverbs, positions"}
{"task_id": 229, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l):\n    '''\n    A function should be written to find the surface area of a cube.\n    '''\n"}], "response": "```python\ndef func(l):\n    return 6 * l**2\n```", "response_code": "\ndef func(l):\n    return 6 * l**2\n"}
{"task_id": 230, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from array import array\ndef func(nums):\n    '''\n    A function should be written to find the ratio of positive numbers in an array of integers.\n    '''\n"}], "response": "```python\nfrom array import array\n\ndef func(nums):\n    count_positive = sum(1 for num in nums if num > 0)\n    total_numbers = len(nums)\n    \n    if total_numbers == 0:\n        return 0\n    else:\n        return count_positive / total_numbers\n```", "response_code": "\nfrom array import array\n\ndef func(nums):\n    count_positive = sum(1 for num in nums if num > 0)\n    total_numbers = len(nums)\n    \n    if total_numbers == 0:\n        return 0\n    else:\n        return count_positive / total_numbers\n"}
{"task_id": 231, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1): \n    '''\n    A python function is written to find the largest negative number from the given list.\n    '''\n"}], "response": "```python\ndef func(list1): \n    '''\n    A python function is written to find the largest negative number from the given list.\n    '''\n    neg_nums = [num for num in list1 if num < 0]\n    if not neg_nums:\n        return None\n    return max(neg_nums)\n```", "response_code": "\ndef func(list1): \n    '''\n    A python function is written to find the largest negative number from the given list.\n    '''\n    neg_nums = [num for num in list1 if num < 0]\n    if not neg_nums:\n        return None\n    return max(neg_nums)\n"}
{"task_id": 232, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list, K):\n    '''\n    A function should be written to trim each tuple by k in the given tuple list.\n    '''\n"}], "response": "```python\ndef func(test_list, K):\n    return [tuple(t[K:]) for t in test_list]\n```", "response_code": "\ndef func(test_list, K):\n    return [tuple(t[K:]) for t in test_list]\n"}
{"task_id": 233, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    A function should be written to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n"}], "response": "def func(test_tup1, test_tup2):\n    result = tuple(x * y for x, y in zip(test_tup1, test_tup2))\n    return result", "response_code": "def func(test_tup1, test_tup2):\n    result = tuple(x * y for x, y in zip(test_tup1, test_tup2))\n    return result"}
{"task_id": 234, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import Counter \ndef func(tup, lst): \n    '''\n    A python function is written to count the occurrence of all elements of list in a tuple.\n    '''\n"}], "response": "from collections import Counter\n\ndef func(tup, lst):\n    '''\n    A python function is written to count the occurrence of all elements of list in a tuple.\n    '''\n    return Counter(tup)", "response_code": "from collections import Counter\n\ndef func(tup, lst):\n    '''\n    A python function is written to count the occurrence of all elements of list in a tuple.\n    '''\n    return Counter(tup)"}
{"task_id": 235, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    A function should be written to find cubes of individual elements in a list using a lambda function.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return list(map(lambda x: x**3, nums))\n```", "response_code": "\ndef func(nums):\n    return list(map(lambda x: x**3, nums))\n"}
{"task_id": 236, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to calculate the sum of perrin numbers.\n    '''\n"}], "response": "```python\ndef func(n):\n    perrin = [3, 0, 2]\n    if n == 0:\n        return perrin[0]\n    elif n == 1:\n        return perrin[1]\n    elif n == 2:\n        return perrin[2]\n    else:\n        for i in range(3, n+1):\n            perrin.append(perrin[i-2] + perrin[i-3])\n        return sum(perrin)\n```", "response_code": "\ndef func(n):\n    perrin = [3, 0, 2]\n    if n == 0:\n        return perrin[0]\n    elif n == 1:\n        return perrin[1]\n    elif n == 2:\n        return perrin[2]\n    else:\n        for i in range(3, n+1):\n            perrin.append(perrin[i-2] + perrin[i-3])\n        return sum(perrin)\n"}
{"task_id": 237, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str, l):\n    '''\n    A function should be written to extract specified size of strings from a given list of string values.\n    '''\n"}], "response": "```python\ndef func(str_list, size):\n    return [s[:size] for s in str_list]\n```", "response_code": "\ndef func(str_list, size):\n    return [s[:size] for s in str_list]\n"}
{"task_id": 238, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text1):\n    '''\n    A function should be written to remove all whitespaces from the given string using regex.\n    '''\n"}], "response": "import re\n\ndef func(text1):\n    return re.sub(r'\\s+', '', text1)", "response_code": "import re\n\ndef func(text1):\n    return re.sub(r'\\s+', '', text1)"}
{"task_id": 239, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(actual_cost,sale_amount): \n    '''\n    A function is written that gives loss amount if the given amount has loss else returns none.\n    '''\n"}], "response": "def func(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return None", "response_code": "def func(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return None"}
{"task_id": 240, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math \ndef func(n) : \n    '''\n    A python function is written to find the sum of even factors of a number.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    sum = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if (n // i) % 2 == 0:\n                sum += n // i\n    return sum", "response_code": "import math\n\ndef func(n):\n    sum = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if (n // i) % 2 == 0:\n                sum += n // i\n    return sum"}
{"task_id": 241, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function is written that matches a word containing 'z'.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches", "response_code": "import re\n\ndef func(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"}
{"task_id": 242, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(monthnum2):\n    '''\n    A function should be written to check whether the given month number contains 31 days or not.\n    '''\n"}], "response": "```python\ndef func(monthnum2):\n    thirty_one_days_months = [1, 3, 5, 7, 8, 10, 12]\n    if monthnum2 in thirty_one_days_months:\n        return True\n    else:\n        return False\n```", "response_code": "\ndef func(monthnum2):\n    thirty_one_days_months = [1, 3, 5, 7, 8, 10, 12]\n    if monthnum2 in thirty_one_days_months:\n        return True\n    else:\n        return False\n"}
{"task_id": 243, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(stringlist):\n    '''\n    A function should be written to reverse strings in a given list of string values.\n    '''\n"}], "response": "def func(stringlist):\n    return [string[::-1] for string in stringlist]", "response_code": "def func(stringlist):\n    return [string[::-1] for string in stringlist]"}
{"task_id": 244, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst): \n    '''\n    A python function should be written to find the sublist having minimum length.\n    '''\n"}], "response": "```python\ndef func(lst): \n    return min(lst, key=len)\n```", "response_code": "\ndef func(lst): \n    return min(lst, key=len)\n"}
{"task_id": 245, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l,b):\n    '''\n    A function should be written to find the area of a rectangle.\n    '''\n"}], "response": "```python\ndef func(l, b):\n    '''\n    A function should be written to find the area of a rectangle.\n    '''\n    return l * b\n```", "response_code": "\ndef func(l, b):\n    '''\n    A function should be written to find the area of a rectangle.\n    '''\n    return l * b\n"}
{"task_id": 246, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(str1):\n    '''\n    A function should be written to remove uppercase substrings from a given string by using regex.\n    '''\n"}], "response": "import re\n\ndef func(str1):\n    return re.sub(r'[A-Z]+', '', str1)", "response_code": "import re\n\ndef func(str1):\n    return re.sub(r'[A-Z]+', '', str1)"}
{"task_id": 247, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst): \n    '''\n    A python function should be written to get the first element of each sublist.\n    '''\n"}], "response": "```python\ndef func(lst): \n    return [sublist[0] for sublist in lst]\n```", "response_code": "\ndef func(lst): \n    return [sublist[0] for sublist in lst]\n"}
{"task_id": 248, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str):\n    '''\n    A python function should be written to count the upper case characters in a given string.\n    '''\n"}], "response": "def count_uppercase_chars(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count", "response_code": "def count_uppercase_chars(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count"}
{"task_id": 249, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to find all possible combinations of the elements of a given list.\n    '''\n"}], "response": "from itertools import permutations\n\ndef func(list1):\n    return list(permutations(list1))", "response_code": "from itertools import permutations\n\ndef func(list1):\n    return list(permutations(list1))"}
{"task_id": 250, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):\n    '''\n    A function should be written to find the maximum product subarray of the given array.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(arr):\n    if not arr:\n        return 0\n    \n    max_prod = arr[0]\n    min_prod = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_prod, min_prod = min_prod, max_prod\n        \n        max_prod = max(arr[i], max_prod * arr[i])\n        min_prod = min(arr[i], min_prod * arr[i])\n        \n        result = max(result, max_prod)\n    \n    return result\n```", "response_code": "\nimport numpy as np\n\ndef func(arr):\n    if not arr:\n        return 0\n    \n    max_prod = arr[0]\n    min_prod = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_prod, min_prod = min_prod, max_prod\n        \n        max_prod = max(arr[i], max_prod * arr[i])\n        min_prod = min(arr[i], min_prod * arr[i])\n        \n        result = max(result, max_prod)\n    \n    return result\n"}
{"task_id": 251, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(dict, n):\n    '''\n    A function should be written to check if all values are the same in a dictionary.\n    '''\n"}], "response": "```python\ndef func(dict, n):\n    '''\n    A function should be written to check if all values are the same in a dictionary.\n    '''\n    return len(set(dict.values())) == 1\n```", "response_code": "\ndef func(dict, n):\n    '''\n    A function should be written to check if all values are the same in a dictionary.\n    '''\n    return len(set(dict.values())) == 1\n"}
{"task_id": 252, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(dict1):\n    '''\n    A function should be written to drop empty items from a given dictionary.\n    '''\n"}], "response": "```python\ndef func(dict1):\n    return {k: v for k, v in dict1.items() if v}\n```", "response_code": "\ndef func(dict1):\n    return {k: v for k, v in dict1.items() if v}\n"}
{"task_id": 253, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):   \n    '''\n    A function should be written to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n"}], "response": "```python\ndef max_product_increasing_subsequence(arr):\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    \n    for i in range(1, n):\n        max_product = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_product = max(max_product, dp[j] * arr[i])\n        dp[i] = max_product\n    \n    return max(dp)\n```", "response_code": "\ndef max_product_increasing_subsequence(arr):\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    \n    for i in range(1, n):\n        max_product = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_product = max(max_product, dp[j] * arr[i])\n        dp[i] = max_product\n    \n    return max(dp)\n"}
{"task_id": 254, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    A function should be written to find the pairwise addition of the elements of the given tuples.\n    '''\n"}], "response": "```python\ndef func(test_tup):\n    return tuple(map(sum, zip(*test_tup)))\n```", "response_code": "\ndef func(test_tup):\n    return tuple(map(sum, zip(*test_tup)))\n"}
{"task_id": 255, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr, n): \n    '''\n    A python function is written to find the remainder of array multiplication divided by n.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(arr, n): \n    '''\n    A python function is written to find the remainder of array multiplication divided by n.\n    '''\n    return np.prod(arr) % n\n```", "response_code": "\nimport numpy as np\n\ndef func(arr, n): \n    '''\n    A python function is written to find the remainder of array multiplication divided by n.\n    '''\n    return np.prod(arr) % n\n"}
{"task_id": 256, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l): \n    '''\n    A python function is written to check whether the given list contains consecutive numbers or not.\n    '''\n"}], "response": "```python\ndef func(l): \n    '''\n    A python function is written to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l) == list(range(min(l), max(l)+1))\n```", "response_code": "\ndef func(l): \n    '''\n    A python function is written to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l) == list(range(min(l), max(l)+1))\n"}
{"task_id": 257, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list1, test_list2):\n    '''\n    A function should be written to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n"}], "response": "```python\ndef func(test_list1, test_list2):\n    return list(set(test_list1) & set(test_list2))\n```", "response_code": "\ndef func(test_list1, test_list2):\n    return list(set(test_list1) & set(test_list2))\n"}
{"task_id": 258, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1,ch,newch):\n    '''\n    A function should be written to replace characters in a string.\n    '''\n"}], "response": "```python\ndef func(str1, ch, newch):\n    return str1.replace(ch, newch)\n```", "response_code": "\ndef func(str1, ch, newch):\n    return str1.replace(ch, newch)\n"}
{"task_id": 259, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import Counter\ndef func(dict1):\n    '''\n    A function should be written to sort counter by value.\n    '''\n"}], "response": "```python\nfrom collections import Counter\n\ndef func(dict1):\n    sorted_dict = dict(Counter(dict1).most_common())\n    return sorted_dict\n```", "response_code": "\nfrom collections import Counter\n\ndef func(dict1):\n    sorted_dict = dict(Counter(dict1).most_common())\n    return sorted_dict\n"}
{"task_id": 260, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    A python function is written to find the sum of the largest and smallest value in a given array.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return max(nums) + min(nums)\n```", "response_code": "\ndef func(nums):\n    return max(nums) + min(nums)\n"}
{"task_id": 261, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(string):\n    '''\n    A python function should be written to convert the given string to lower case.\n    '''\n"}], "response": "```python\ndef func(string):\n    return string.lower()\n```", "response_code": "\ndef func(string):\n    return string.lower()\n"}
{"task_id": 262, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(str1):\n    '''\n    A function should be written to remove lowercase substrings from a given string.\n    '''\n"}], "response": "import re\n\ndef func(str1):\n    return re.sub(r'[a-z]+', '', str1)", "response_code": "import re\n\ndef func(str1):\n    return re.sub(r'[a-z]+', '', str1)"}
{"task_id": 263, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n) :  \n    '''\n    A python function is written to find the first digit of a given number.\n    '''\n"}], "response": "```python\ndef func(n):\n    '''\n    A python function is written to find the first digit of a given number.\n    '''\n    while n >= 10:\n        n //= 10\n    return n\n```", "response_code": "\ndef func(n):\n    '''\n    A python function is written to find the first digit of a given number.\n    '''\n    while n >= 10:\n        n //= 10\n    return n\n"}
{"task_id": 264, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list): \n    '''\n    A python function is written to find odd numbers from a mixed list.\n    '''\n"}], "response": "```python\ndef func(lst):\n    return [num for num in lst if num % 2 != 0]\n```", "response_code": "\ndef func(lst):\n    return [num for num in lst if num % 2 != 0]\n"}
{"task_id": 265, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n) :  \n    '''\n    A python function is written to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n"}], "response": "```python\ndef func(n):\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    sum_of_natural_numbers = n * (n + 1) // 2\n    return sum_of_cubes - sum_of_natural_numbers\n```", "response_code": "\ndef func(n):\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    sum_of_natural_numbers = n * (n + 1) // 2\n    return sum_of_cubes - sum_of_natural_numbers\n"}
{"task_id": 266, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(A,N) : \n    '''\n    A python function is written to count the pairs with xor as an odd number.\n    '''\n"}], "response": "```python\ndef func(A,N) : \n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count += 1\n    return count\n```", "response_code": "\ndef func(A,N) : \n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count += 1\n    return count\n"}
{"task_id": 267, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(string):\n    '''\n    A function should be written to toggle characters case in a string.\n    '''\n"}], "response": "```python\ndef func(string):\n    return string.swapcase()\n```", "response_code": "\ndef func(string):\n    return string.swapcase()\n"}
{"task_id": 268, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n1, n2):\n    '''\n    A python function is written to find the digit distance between two integers.\n    '''\n"}], "response": "```python\ndef func(n1, n2):\n    '''\n    A python function is written to find the digit distance between two integers.\n    '''\n    return sum([int(digit) for digit in str(abs(n1 - n2))])\n```", "response_code": "\ndef func(n1, n2):\n    '''\n    A python function is written to find the digit distance between two integers.\n    '''\n    return sum([int(digit) for digit in str(abs(n1 - n2))])\n"}
{"task_id": 269, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a, size):\n    '''\n    A function should be written to find the largest sum of contiguous subarray in the given array.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(a, size):\n    max_sum = current_sum = a[0]\n    \n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n```", "response_code": "\nimport numpy as np\n\ndef func(a, size):\n    max_sum = current_sum = a[0]\n    \n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n"}
{"task_id": 270, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    A function should be written to find the union of elements of the given tuples.\n    '''\n"}], "response": "from typing import Tuple\n\ndef func(test_tup1: Tuple, test_tup2: Tuple) -> Tuple:\n    return tuple(set(test_tup1) | set(test_tup2))", "response_code": "from typing import Tuple\n\ndef func(test_tup1: Tuple, test_tup2: Tuple) -> Tuple:\n    return tuple(set(test_tup1) | set(test_tup2))"}
{"task_id": 271, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst):  \n    '''\n    A python function is written to find the maximum length of sublist.\n    '''\n"}], "response": "```python\ndef func(lst):\n    return max(len(sublist) for sublist in lst)\n```", "response_code": "\ndef func(lst):\n    return max(len(sublist) for sublist in lst)\n"}
{"task_id": 272, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function should be written to extract values between quotation marks of a string.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    return re.findall(r'\"(.*?)\"', text)", "response_code": "import re\n\ndef func(text):\n    return re.findall(r'\"(.*?)\"', text)"}
{"task_id": 273, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr,n): \n    '''\n    A python function is written to count unequal element pairs from the given array.\n    '''\n"}], "response": "```python\ndef func(arr,n): \n    '''\n    A python function is written to count unequal element pairs from the given array.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n```", "response_code": "\ndef func(arr,n): \n    '''\n    A python function is written to count unequal element pairs from the given array.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n"}
{"task_id": 274, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(word): \n    '''\n    A python function is written to split a string into characters.\n    '''\n"}], "response": "```python\ndef func(word): \n    return list(word)\n```", "response_code": "\ndef func(word): \n    return list(word)\n"}
{"task_id": 275, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    A function should be written to get the sum of a non-negative integer.\n    '''\n"}], "response": "```python\ndef func(n):\n    return sum(int(i) for i in str(n))\n```", "response_code": "\ndef func(n):\n    return sum(int(i) for i in str(n))\n"}
{"task_id": 276, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to check whether a specified list is sorted or not.\n    '''\n"}], "response": "```python\ndef func(list1):\n    return all(list1[i] <= list1[i + 1] for i in range(len(list1) - 1))\n```", "response_code": "\ndef func(list1):\n    return all(list1[i] <= list1[i + 1] for i in range(len(list1) - 1))\n"}
{"task_id": 277, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(length):\n    '''\n    A function should be written to create a list of empty dictionaries.\n    '''\n"}], "response": "def func(length):\n    return [{} for _ in range(length)]", "response_code": "def func(length):\n    return [{} for _ in range(length)]"}
{"task_id": 278, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to sort each sublist of strings in a given list of lists.\n    '''\n"}], "response": "```python\ndef func(list1):\n    for sublist in list1:\n        sublist.sort()\n    return list1\n```", "response_code": "\ndef func(list1):\n    for sublist in list1:\n        sublist.sort()\n    return list1\n"}
{"task_id": 279, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    A python function is written to remove two duplicate numbers from a given number of lists.\n    '''\n"}], "response": "```python\ndef func(nums):\n    '''\n    A python function is written to remove two duplicate numbers from a given number of lists.\n    '''\n    nums = [list(set(lst)) for lst in nums]\n    return nums\n```", "response_code": "\ndef func(nums):\n    '''\n    A python function is written to remove two duplicate numbers from a given number of lists.\n    '''\n    nums = [list(set(lst)) for lst in nums]\n    return nums\n"}
{"task_id": 280, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list_data):\n    '''\n    A python function is written to calculate the product of the unique numbers of a given list.\n    '''\n"}], "response": "from functools import reduce\n\ndef func(list_data):\n    unique_numbers = set(list_data)\n    product = reduce(lambda x, y: x*y, unique_numbers)\n    return product", "response_code": "from functools import reduce\n\ndef func(list_data):\n    unique_numbers = set(list_data)\n    product = reduce(lambda x, y: x*y, unique_numbers)\n    return product"}
{"task_id": 281, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(r,h):\n    '''\n    A function should be written to find the surface area of a cylinder.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(r, h):\n    return 2 * math.pi * r * (r + h)\n```", "response_code": "\nimport math\n\ndef func(r, h):\n    return 2 * math.pi * r * (r + h)\n"}
{"task_id": 282, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(A,B): \n    '''\n    A python function is written to check whether an array is a subarray of another or not.\n    '''\n"}], "response": "```python\ndef func(A,B): \n    '''\n    A python function is written to check whether an array is a subarray of another or not.\n    '''\n    for i in range(len(B) - len(A) + 1):\n        if B[i:i+len(A)] == A:\n            return True\n    return False\n```", "response_code": "\ndef func(A,B): \n    '''\n    A python function is written to check whether an array is a subarray of another or not.\n    '''\n    for i in range(len(B) - len(A) + 1):\n        if B[i:i+len(A)] == A:\n            return True\n    return False\n"}
{"task_id": 283, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function is written to find the last digit in factorial of a given number.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(n): \n    return math.factorial(n) % 10\n```", "response_code": "\nimport math\n\ndef func(n): \n    return math.factorial(n) % 10\n"}
{"task_id": 284, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1,list2,list3):\n    '''\n    A function should be written to interleave lists of the same length.\n    '''\n"}], "response": "```python\ndef func(list1, list2, list3):\n    interleaved_list = [val for pair in zip(list1, list2, list3) for val in pair]\n    return interleaved_list\n```", "response_code": "\ndef func(list1, list2, list3):\n    interleaved_list = [val for pair in zip(list1, list2, list3) for val in pair]\n    return interleaved_list\n"}
{"task_id": 285, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    A function should be written to find the dissimilar elements in the given two tuples.\n    '''\n"}], "response": "```python\ndef func(test_tup1, test_tup2):\n    return tuple(set(test_tup1) ^ set(test_tup2))\n```", "response_code": "\ndef func(test_tup1, test_tup2):\n    return tuple(set(test_tup1) ^ set(test_tup2))\n"}
{"task_id": 286, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tuple, even_fnc): \n    '''\n    A function should be written to extract the even elements in the nested mixed tuple.\n    '''\n"}], "response": "```python\ndef func(test_tuple, even_fnc): \n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.extend(func(item, even_fnc))\n        elif isinstance(item, int) and even_fnc(item):\n            result.append(item)\n    return result\n```", "response_code": "\ndef func(test_tuple, even_fnc): \n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.extend(func(item, even_fnc))\n        elif isinstance(item, int) and even_fnc(item):\n            result.append(item)\n    return result\n"}
{"task_id": 287, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(b,s): \n    '''\n    A python function is written to find the surface area of the square pyramid.\n    '''\n"}], "response": "```python\ndef func(b, s):\n    '''\n    A python function is written to find the surface area of the square pyramid.\n    '''\n    return b**2 + 2*b*(s**2 + b**2)**0.5\n```", "response_code": "\ndef func(b, s):\n    '''\n    A python function is written to find the surface area of the square pyramid.\n    '''\n    return b**2 + 2*b*(s**2 + b**2)**0.5\n"}
{"task_id": 288, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(dict1):\n    '''\n    A function should be written to check if a dictionary is empty or not.\n    '''\n"}], "response": "```python\ndef func(dict1):\n    if not dict1:\n        return True\n    else:\n        return False\n```", "response_code": "\ndef func(dict1):\n    if not dict1:\n        return True\n    else:\n        return False\n"}
{"task_id": 289, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(num):\n    '''\n    A function for the nth catalan number is to be written.\n    '''\n"}], "response": "```python\ndef func(num):\n    if num == 0:\n        return 1\n    else:\n        return int((4*num - 2) * func(num - 1) / (num + 1))\n```", "response_code": "\ndef func(num):\n    if num == 0:\n        return 1\n    else:\n        return int((4*num - 2) * func(num - 1) / (num + 1))\n"}
{"task_id": 290, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function should be written to find all adverbs and their positions in a given sentence by using regex.\n    '''\n"}], "response": "import re\n\ndef find_adverbs(text):\n    adverbs = re.finditer(r'\\b\\w+ly\\b', text)\n    adverbs_positions = [(adverb.group(), adverb.start()) for adverb in adverbs]\n    return adverbs_positions", "response_code": "import re\n\ndef find_adverbs(text):\n    adverbs = re.finditer(r'\\b\\w+ly\\b', text)\n    adverbs_positions = [(adverb.group(), adverb.start()) for adverb in adverbs]\n    return adverbs_positions"}
{"task_id": 291, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq\ndef func(items,n):\n    '''\n    A function is written to find the n - expensive price items from a given dataset using heap queue algorithm.\n    '''\n"}], "response": "import heapq\n\ndef func(items, n):\n    return heapq.nlargest(n, items)", "response_code": "import heapq\n\ndef func(items, n):\n    return heapq.nlargest(n, items)"}
{"task_id": 292, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l, n):\n    '''\n    A python function is written to split the array and add the first part to the end.\n    '''\n"}], "response": "```python\ndef func(l, n):\n    '''\n    A python function is written to split the array and add the first part to the end.\n    '''\n    return l[n:] + l[:n]\n```", "response_code": "\ndef func(l, n):\n    '''\n    A python function is written to split the array and add the first part to the end.\n    '''\n    return l[n:] + l[:n]\n"}
{"task_id": 293, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(listx):\n    '''\n    A function should be written to convert a list to a tuple.\n    '''\n"}], "response": "def func(listx):\n    return tuple(listx)", "response_code": "def func(listx):\n    return tuple(listx)"}
{"task_id": 294, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    A python function is written to find the difference between the largest and smallest value in a given array.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return max(nums) - min(nums)\n```", "response_code": "\ndef func(nums):\n    return max(nums) - min(nums)\n"}
{"task_id": 295, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a, b):\n    '''\n    A function should be written to find perfect squares between two given numbers.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(a, b):\n    '''\n    A function should be written to find perfect squares between two given numbers.\n    '''\n    squares = [x**2 for x in range(math.isqrt(a), math.isqrt(b)+1)]\n    return squares\n```", "response_code": "\nimport math\n\ndef func(a, b):\n    '''\n    A function should be written to find perfect squares between two given numbers.\n    '''\n    squares = [x**2 for x in range(math.isqrt(a), math.isqrt(b)+1)]\n    return squares\n"}
{"task_id": 296, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import cmath\ndef func(x,y):\n    '''\n    A function should be written to convert polar coordinates to rectangular coordinates.\n    '''\n"}], "response": "import cmath\n\ndef func(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y", "response_code": "import cmath\n\ndef func(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"}
{"task_id": 297, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(newList): \n    '''\n    A python function is written to interchange the first and last elements in a list.\n    '''\n"}], "response": "```python\ndef func(newList): \n    '''\n    A python function is written to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n```", "response_code": "\ndef func(newList): \n    '''\n    A python function is written to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"}
{"task_id": 298, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n,k): \n    '''\n    A python function is written to find the sum of product of binomial co-efficients.\n    '''\n"}], "response": "```python\nfrom math import comb\n\ndef func(n, k):\n    '''\n    A python function is written to find the sum of product of binomial co-efficients.\n    '''\n```", "response_code": "\nfrom math import comb\n\ndef func(n, k):\n    '''\n    A python function is written to find the sum of product of binomial co-efficients.\n    '''\n"}
{"task_id": 299, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(ip):\n    '''\n    A function should be written to remove leading zeroes from an ip address.\n    '''\n"}], "response": "import re\n\ndef func(ip):\n    '''\n    A function should be written to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'\\b0+(\\d)', r'\\1', ip)", "response_code": "import re\n\ndef func(ip):\n    '''\n    A function should be written to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'\\b0+(\\d)', r'\\1', ip)"}
{"task_id": 300, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to find the difference of the first even and odd number of a given list.\n    '''\n"}], "response": "```python\ndef func(list1):\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2 != 0 and odd_num is None:\n            odd_num = num\n        if even_num is not None and odd_num is not None:\n            break\n    if even_num is not None and odd_num is not None:\n        return even_num - odd_num\n    else:\n        return \"No even and odd numbers found in the list.\"\n```", "response_code": "\ndef func(list1):\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2 != 0 and odd_num is None:\n            odd_num = num\n        if even_num is not None and odd_num is not None:\n            break\n    if even_num is not None and odd_num is not None:\n        return even_num - odd_num\n    else:\n        return \"No even and odd numbers found in the list.\"\n"}
{"task_id": 301, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1,str2) : \n    '''\n    A python function is written to count the minimum number of swaps required to convert one binary string to another.\n    '''\n"}], "response": "```python\ndef func(str1, str2):\n    def count_set_bits(n):\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n\n    if len(str1) != len(str2):\n        return -1\n\n    ones1 = count_set_bits(int(str1, 2))\n    ones2 = count_set_bits(int(str2, 2))\n\n    if ones1 != ones2:\n        return -1\n\n    count = 0\n    i = len(str1) - 1\n    j = len(str2) - 1\n\n    while i >= 0:\n        if str1[i] != str2[j]:\n            count += 1\n        else:\n            j -= 1\n        i -= 1\n\n    return count // 2\n\n```", "response_code": "\ndef func(str1, str2):\n    def count_set_bits(n):\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n\n    if len(str1) != len(str2):\n        return -1\n\n    ones1 = count_set_bits(int(str1, 2))\n    ones2 = count_set_bits(int(str2, 2))\n\n    if ones1 != ones2:\n        return -1\n\n    count = 0\n    i = len(str1) - 1\n    j = len(str2) - 1\n\n    while i >= 0:\n        if str1[i] != str2[j]:\n            count += 1\n        else:\n            j -= 1\n        i -= 1\n\n    return count // 2\n\n"}
{"task_id": 302, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import sys \ndef func(tuple_list):\n    '''\n    A function should be written to find the size of the given tuple.\n    '''\n"}], "response": "import sys\n\ndef func(tuple_list):\n    return sys.getsizeof(tuple_list)", "response_code": "import sys\n\ndef func(tuple_list):\n    return sys.getsizeof(tuple_list)"}
{"task_id": 303, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr1, arr2, k):\n    '''\n    A function should be written to find the kth element from the given two sorted arrays.\n    '''\n"}], "response": "```python\ndef func(arr1, arr2, k):\n    merged_arr = sorted(arr1 + arr2)\n    return merged_arr[k-1]\n```", "response_code": "\ndef func(arr1, arr2, k):\n    merged_arr = sorted(arr1 + arr2)\n    return merged_arr[k-1]\n"}
{"task_id": 304, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(number):\n    '''\n    A function should be written to check whether the given number is armstrong or not.\n    '''\n"}], "response": "def is_armstrong(number):\n    num_str = str(number)\n    num_len = len(num_str)\n    sum = 0\n    for digit in num_str:\n        sum += int(digit) ** num_len\n    if sum == number:\n        return True\n    else:\n        return False", "response_code": "def is_armstrong(number):\n    num_str = str(number)\n    num_len = len(num_str)\n    sum = 0\n    for digit in num_str:\n        sum += int(digit) ** num_len\n    if sum == number:\n        return True\n    else:\n        return False"}
{"task_id": 305, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(number):\n    '''\n    A function should be written to find the sum and average of the first n natural numbers.\n    '''\n"}], "response": "def func(number):\n    sum_natural_numbers = number * (number + 1) // 2\n    average_natural_numbers = sum_natural_numbers / number\n    return sum_natural_numbers, average_natural_numbers", "response_code": "def func(number):\n    sum_natural_numbers = number * (number + 1) // 2\n    average_natural_numbers = sum_natural_numbers / number\n    return sum_natural_numbers, average_natural_numbers"}
{"task_id": 306, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n) : \n    '''\n    A python function is written to check whether the given number is even or not using bitwise operator.\n    '''\n"}], "response": "```python\ndef func(n):\n    if n & 1 == 0:\n        return True\n    else:\n        return False\n```", "response_code": "\ndef func(n):\n    if n & 1 == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": 307, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1):\n    '''\n    A python function is written to find the first repeated character in a given string.\n    '''\n"}], "response": "```python\ndef func(str1):\n    '''\n    A python function is written to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None\n```", "response_code": "\ndef func(str1):\n    '''\n    A python function is written to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None\n"}
{"task_id": 308, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    A function should be written to get a lucid number smaller than or equal to n.\n    '''\n"}], "response": "```python\ndef func(n):\n    lucid = 1\n    while lucid * 2 <= n:\n        lucid *= 2\n    return lucid\n```", "response_code": "\ndef func(n):\n    lucid = 1\n    while lucid * 2 <= n:\n        lucid *= 2\n    return lucid\n"}
{"task_id": 309, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s):\n    '''\n    A function should be written to reverse words in a given string.\n    '''\n"}], "response": "```python\ndef func(s):\n    return ' '.join(s.split()[::-1])\n```", "response_code": "\ndef func(s):\n    return ' '.join(s.split()[::-1])\n"}
{"task_id": 310, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(num):\n    '''\n    A function should be written to check if the given integer is a prime number.\n    '''\n"}], "response": "```python\nimport math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n```", "response_code": "\nimport math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n"}
{"task_id": 311, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(degree):\n    '''\n    A function should be written to convert degrees to radians.\n    '''\n"}], "response": "import math\n\ndef func(degree):\n    radians = math.radians(degree)\n    return radians", "response_code": "import math\n\ndef func(degree):\n    radians = math.radians(degree)\n    return radians"}
{"task_id": 312, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\n\ndef func(text, pattern):\n    '''\n    A function should be written to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n    '''\n"}], "response": "import re\n\ndef func(text, pattern):\n    matches = re.finditer(pattern, text)\n    locations = []\n    for match in matches:\n        locations.append(match.start())\n    return locations", "response_code": "import re\n\ndef func(text, pattern):\n    matches = re.finditer(pattern, text)\n    locations = []\n    for match in matches:\n        locations.append(match.start())\n    return locations"}
{"task_id": 313, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function is written to find the nth bell number.\n    '''\n"}], "response": "```python\nfrom math import factorial\n\ndef func(n): \n    '''\n    A python function is written to find the nth bell number.\n    '''\n    bell_number = 0\n    for k in range(n+1):\n        bell_number += factorial(n) / (factorial(k) * factorial(n-k))\n    return bell_number\n```", "response_code": "\nfrom math import factorial\n\ndef func(n): \n    '''\n    A python function is written to find the nth bell number.\n    '''\n    bell_number = 0\n    for k in range(n+1):\n        bell_number += factorial(n) / (factorial(k) * factorial(n-k))\n    return bell_number\n"}
{"task_id": 314, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1, L):\n    '''\n    A python function is written to remove the k'th element from a given list.\n    '''\n"}], "response": "```python\ndef func(list1, k):\n    del list1[k-1]\n    return list1\n```", "response_code": "\ndef func(list1, k):\n    del list1[k-1]\n    return list1\n"}
{"task_id": 315, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list, N):\n    '''\n    A function should be written to find the maximum of the nth column from the given tuple list.\n    '''\n"}], "response": "```python\ndef func(test_list, N):\n    return max(row[N] for row in test_list)\n```", "response_code": "\ndef func(test_list, N):\n    return max(row[N] for row in test_list)\n"}
{"task_id": 316, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst):  \n    '''\n    A python function is written to merge the first and last elements separately in a list of lists.\n    '''\n"}], "response": "```python\ndef func(lst):\n    return [sublist[0] + sublist[-1] for sublist in lst]\n```", "response_code": "\ndef func(lst):\n    return [sublist[0] + sublist[-1] for sublist in lst]\n"}
{"task_id": 317, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    A function should be written to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n"}], "response": "```python\ndef func(test_list):\n    return sum(sum(sub) for sub in test_list)\n```", "response_code": "\ndef func(test_list):\n    return sum(sum(sub) for sub in test_list)\n"}
{"task_id": 318, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    A function should be written to find the average value of the numbers in a given tuple of tuples.\n    '''\n"}], "response": "```python\ndef func(nums):\n    total_sum = 0\n    total_count = 0\n    for tup in nums:\n        total_sum += sum(tup)\n        total_count += len(tup)\n    return total_sum / total_count\n```", "response_code": "\ndef func(nums):\n    total_sum = 0\n    total_count = 0\n    for tup in nums:\n        total_sum += sum(tup)\n        total_count += len(tup)\n    return total_sum / total_count\n"}
{"task_id": 319, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    A function should be written to perform the modulo of tuple elements in the given two tuples.\n    '''\n"}], "response": "```python\ndef func(test_tup1, test_tup2):\n    result_tup = tuple(x % y for x, y in zip(test_tup1, test_tup2))\n    return result_tup\n```", "response_code": "\ndef func(test_tup1, test_tup2):\n    result_tup = tuple(x % y for x, y in zip(test_tup1, test_tup2))\n    return result_tup\n"}
{"task_id": 320, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(steps, d): \n    '''\n    A function is written to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(steps, d): \n    '''\n    A function is written to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    return math.ceil(d / steps)\n```", "response_code": "\nimport math\n\ndef func(steps, d): \n    '''\n    A function is written to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    return math.ceil(d / steps)\n"}
{"task_id": 321, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums1,nums2):\n    '''\n    A function should be written to divide two lists using map and lambda function.\n    '''\n"}], "response": "```python\ndef func(nums1, nums2):\n    result = list(map(lambda x, y: x / y, nums1, nums2))\n    return result\n```", "response_code": "\ndef func(nums1, nums2):\n    result = list(map(lambda x, y: x / y, nums1, nums2))\n    return result\n"}
{"task_id": 322, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_str):\n    '''\n    A function should be written to move all the numbers in it to the given string.\n    '''\n"}], "response": "```python\ndef func(test_str):\n    return ''.join([char for char in test_str if char.isdigit()])\n```", "response_code": "\ndef func(test_str):\n    return ''.join([char for char in test_str if char.isdigit()])\n"}
{"task_id": 323, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a):\n    '''\n    A function should be written to find the largest subset where each pair is divisible.\n    '''\n"}], "response": "```python\nfrom itertools import combinations\n\ndef func(a):\n    '''\n    A function should be written to find the largest subset where each pair is divisible.\n    '''\n    def is_divisible(x, y):\n        return x % y == 0 or y % x == 0\n\n    max_subset = []\n    for i in range(1, len(a) + 1):\n        for subset in combinations(a, i):\n            if all(is_divisible(x, y) for x, y in combinations(subset, 2)):\n                max_subset = subset\n\n    return max_subset\n```", "response_code": "\nfrom itertools import combinations\n\ndef func(a):\n    '''\n    A function should be written to find the largest subset where each pair is divisible.\n    '''\n    def is_divisible(x, y):\n        return x % y == 0 or y % x == 0\n\n    max_subset = []\n    for i in range(1, len(a) + 1):\n        for subset in combinations(a, i):\n            if all(is_divisible(x, y) for x, y in combinations(subset, 2)):\n                max_subset = subset\n\n    return max_subset\n"}
{"task_id": 324, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr1, arr2, n):\n    '''\n    A function should be written to find the median of two sorted arrays of the same size.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(arr1, arr2, n):\n    combined_arr = np.concatenate((arr1, arr2))\n    combined_arr.sort()\n    median = np.median(combined_arr)\n    return median\n```", "response_code": "\nimport numpy as np\n\ndef func(arr1, arr2, n):\n    combined_arr = np.concatenate((arr1, arr2))\n    combined_arr.sort()\n    median = np.median(combined_arr)\n    return median\n"}
{"task_id": 325, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums,n):\n    '''\n    A function should be written to find the n-th power of individual elements in a list using a lambda function.\n    '''\n"}], "response": "```python\ndef func(nums, n):\n    return list(map(lambda x: x**n, nums))\n```", "response_code": "\ndef func(nums, n):\n    return list(map(lambda x: x**n, nums))\n"}
{"task_id": 326, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(string):\n    '''\n    A python function should be written to convert the given string to upper case.\n    '''\n"}], "response": "```python\ndef func(string):\n    return string.upper()\n```", "response_code": "\ndef func(string):\n    return string.upper()\n"}
{"task_id": 327, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(newList): \n    '''\n    A python function should be written to interchange first and last elements in a given list.\n    '''\n"}], "response": "```python\ndef func(newList): \n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n```", "response_code": "\ndef func(newList): \n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"}
{"task_id": 328, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(r) :  \n    '''\n    A python function should be written to find the largest triangle that can be inscribed in the semicircle.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(r):\n    return r * r\n```", "response_code": "\nimport math\n\ndef func(r):\n    return r * r\n"}
{"task_id": 329, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(array,start=0,end=None):\n    '''\n    A python function is written to find the smallest missing number from the given array.\n    '''\n"}], "response": "```python\ndef func(array, start=0, end=None):\n    if end is None:\n        end = max(array)\n    \n    for i in range(start, end+1):\n        if i not in array:\n            return i\n```", "response_code": "\ndef func(array, start=0, end=None):\n    if end is None:\n        end = max(array)\n    \n    for i in range(start, end+1):\n        if i not in array:\n            return i\n"}
{"task_id": 330, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(string):\n    '''\n    A function should be written to replace all spaces in the given string with the character * list item * list item * list item * list item '%20'.\n    '''\n"}], "response": "```python\ndef func(string):\n    return string.replace(' ', '%20')\n```", "response_code": "\ndef func(string):\n    return string.replace(' ', '%20')\n"}
{"task_id": 331, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list): \n    '''\n    A python function is written to find even numbers from a mixed list.\n    '''\n"}], "response": "```python\ndef func(lst):\n    return [num for num in lst if num % 2 == 0]\n```", "response_code": "\ndef func(lst):\n    return [num for num in lst if num % 2 == 0]\n"}
{"task_id": 332, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(ele, sub = []): \n    '''\n    A function should be written to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n"}], "response": "```python\ndef func(ele, sub = []): \n    '''\n    A function should be written to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_coords = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    return adj_coords\n```", "response_code": "\ndef func(ele, sub = []): \n    '''\n    A function should be written to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_coords = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    return adj_coords\n"}
{"task_id": 333, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(text):\n    '''\n    A function should be written to replace whitespaces with an underscore and vice versa in a given string by using regex.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    return re.sub(r'(\\s+)', '_', text) if ' ' in text else re.sub(r'(_+)', ' ', text)", "response_code": "import re\n\ndef func(text):\n    return re.sub(r'(\\s+)', '_', text) if ' ' in text else re.sub(r'(_+)', ' ', text)"}
{"task_id": 334, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(num_list):\n    '''\n    A python function should be written to move all zeroes to the end of the given list.\n    '''\n"}], "response": "```python\ndef func(num_list):\n    num_list.sort(key=lambda x: x == 0)\n```", "response_code": "\ndef func(num_list):\n    num_list.sort(key=lambda x: x == 0)\n"}
{"task_id": 335, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr,n) : \n    '''\n    A python function is written to find the sum of xor of all pairs of numbers in the given array.\n    '''\n"}], "response": "```python\ndef func(arr,n) : \n    '''\n    A python function is written to find the sum of xor of all pairs of numbers in the given array.\n    '''\n    total_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total_xor += arr[i] ^ arr[j]\n    \n    return total_xor\n```", "response_code": "\ndef func(arr,n) : \n    '''\n    A python function is written to find the sum of xor of all pairs of numbers in the given array.\n    '''\n    total_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total_xor += arr[i] ^ arr[j]\n    \n    return total_xor\n"}
{"task_id": 336, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq as hq\ndef func(iterable):\n    '''\n    A function should be written to push all values into a heap and then pop off the smallest values one at a time.\n    '''\n"}], "response": "import heapq as hq\n\ndef func(iterable):\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, value)\n    \n    while heap:\n        print(hq.heappop(heap))", "response_code": "import heapq as hq\n\ndef func(iterable):\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, value)\n    \n    while heap:\n        print(hq.heappop(heap))"}
{"task_id": 337, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(actual_cost,sale_amount): \n    '''\n    A function should be written to check whether the given amount has no profit and no loss.\n    '''\n"}], "response": "def func(actual_cost, sale_amount):\n    if actual_cost == sale_amount:\n        return \"No profit, no loss\"\n    else:\n        return \"Profit or loss exists\"", "response_code": "def func(actual_cost, sale_amount):\n    if actual_cost == sale_amount:\n        return \"No profit, no loss\"\n    else:\n        return \"Profit or loss exists\""}
{"task_id": 338, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(v,t):\n    '''\n    A function should be written to calculate wind chill index.\n    '''\n"}], "response": "import math\n\ndef func(v, t):\n    wind_chill_index = 35.74 + 0.6215*t - 35.75*math.pow(v, 0.16) + 0.4275*t*math.pow(v, 0.16)\n    return wind_chill_index", "response_code": "import math\n\ndef func(v, t):\n    wind_chill_index = 35.74 + 0.6215*t - 35.75*math.pow(v, 0.16) + 0.4275*t*math.pow(v, 0.16)\n    return wind_chill_index"}
{"task_id": 339, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(funces):\n    '''\n    A function should be written to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n"}], "response": "def func(funces):\n    total_length = 0\n    for name in funces:\n        if name[0].islower():\n            continue\n        total_length += len(name)\n    return total_length", "response_code": "def func(funces):\n    total_length = 0\n    for name in funces:\n        if name[0].islower():\n            continue\n        total_length += len(name)\n    return total_length"}
{"task_id": 340, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(items):\n    '''\n    A function should be written to remove the parenthesis area in a string.\n    '''\n"}], "response": "import re\n\ndef func(items):\n    '''\n    A function should be written to remove the parenthesis area in a string.\n    '''\n    return re.sub(r'\\([^)]*\\)', '', items)", "response_code": "import re\n\ndef func(items):\n    '''\n    A function should be written to remove the parenthesis area in a string.\n    '''\n    return re.sub(r'\\([^)]*\\)', '', items)"}
{"task_id": 341, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to find the nth nonagonal number.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n * (7 * n - 5) // 2\n```", "response_code": "\ndef func(n):\n    return n * (7 * n - 5) // 2\n"}
{"task_id": 342, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function should be written that matches a word containing 'z', not at the start or end of the word.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches", "response_code": "import re\n\ndef func(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"}
{"task_id": 343, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(input, k): \n    '''\n    A python function is written to reverse an array upto a given position.\n    '''\n"}], "response": "```python\ndef func(input, k): \n    '''\n    A python function is written to reverse an array upto a given position.\n    '''\n    if k > len(input):\n        return \"Invalid position\"\n    \n    return input[:k][::-1] + input[k:]\n```", "response_code": "\ndef func(input, k): \n    '''\n    A python function is written to reverse an array upto a given position.\n    '''\n    if k > len(input):\n        return \"Invalid position\"\n    \n    return input[:k][::-1] + input[k:]\n"}
{"task_id": 344, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup, test_dict):\n    '''\n    A function should be written to add a dictionary to the tuple.\n    '''\n"}], "response": "def func(test_tup, test_dict):\n    new_tup = list(test_tup)\n    new_tup.append(test_dict)\n    return tuple(new_tup)", "response_code": "def func(test_tup, test_dict):\n    new_tup = list(test_tup)\n    new_tup.append(test_dict)\n    return tuple(new_tup)"}
{"task_id": 345, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(cost):\n    '''\n    A function should be written to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(cost):\n    n = len(cost)\n    dp = np.zeros((n, n))\n    \n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    return dp[n-1][n-1] / (2*n - 1)\n```", "response_code": "\nimport numpy as np\n\ndef func(cost):\n    n = len(cost)\n    dp = np.zeros((n, n))\n    \n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    return dp[n-1][n-1] / (2*n - 1)\n"}
{"task_id": 346, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(students,h,w):\n    '''\n    A function should be written to filter the height and width of students which are stored in a dictionary.\n    '''\n"}], "response": "```python\ndef func(students, h, w):\n    filtered_students = {k: v for k, v in students.items() if v['height'] > h and v['width'] > w}\n    return filtered_students\n```", "response_code": "\ndef func(students, h, w):\n    filtered_students = {k: v for k, v in students.items() if v['height'] > h and v['width'] > w}\n    return filtered_students\n"}
{"task_id": 347, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from operator import eq\ndef func(nums1, nums2):\n    '''\n    A function should be written to count the same pair in two given lists using the map function.\n    '''\n"}], "response": "from operator import eq\n\ndef func(nums1, nums2):\n    return sum(map(eq, nums1, nums2))", "response_code": "from operator import eq\n\ndef func(nums1, nums2):\n    return sum(map(eq, nums1, nums2))"}
{"task_id": 348, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(base, power):\n    '''\n    A function should be written to calculate the sum of all digits of the base to the specified power.\n    '''\n"}], "response": "```python\ndef func(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))\n```", "response_code": "\ndef func(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))\n"}
{"task_id": 349, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text1):\n    '''\n    A function should be written to extract values between quotation marks of the given string by using regex.\n    '''\n"}], "response": "import re\n\ndef func(text1):\n    return re.findall(r'\"(.*?)\"', text1)", "response_code": "import re\n\ndef func(text1):\n    return re.findall(r'\"(.*?)\"', text1)"}
{"task_id": 350, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    A function should be written to multiply the adjacent elements of the given tuple.\n    '''\n"}], "response": "def func(test_tup):\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)", "response_code": "def func(test_tup):\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"}
{"task_id": 351, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst1,lst2):\n    '''\n    A function should be written to sum elements in two lists.\n    '''\n"}], "response": "```python\ndef func(lst1, lst2):\n    return [x + y for x, y in zip(lst1, lst2)]\n```", "response_code": "\ndef func(lst1, lst2):\n    return [x + y for x, y in zip(lst1, lst2)]\n"}
{"task_id": 352, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from itertools import groupby\ndef func(nums):\n    '''\n    A function should be written to remove consecutive duplicates of a given list.\n    '''\n"}], "response": "```python\nfrom itertools import groupby\n\ndef func(nums):\n    return [key for key, _ in groupby(nums)]\n```", "response_code": "\nfrom itertools import groupby\n\ndef func(nums):\n    return [key for key, _ in groupby(nums)]\n"}
{"task_id": 353, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(r,h):\n    '''\n    A function should be written to find the lateral surface area of a cone.\n    '''\n"}], "response": "import math\n\ndef func(r, h):\n    lateral_surface_area = math.pi * r * math.sqrt(r**2 + h**2)\n    return lateral_surface_area", "response_code": "import math\n\ndef func(r, h):\n    lateral_surface_area = math.pi * r * math.sqrt(r**2 + h**2)\n    return lateral_surface_area"}
{"task_id": 354, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function should be written to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    return re.sub(r'[ ,.]', ':', text)", "response_code": "import re\n\ndef func(text):\n    return re.sub(r'[ ,.]', ':', text)"}
{"task_id": 355, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(A, x):\n    '''\n    A function should be written to find the index of the first occurrence of a given number in a sorted array.\n    '''\n"}], "response": "```python\ndef func(A, x):\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            while mid > 0 and A[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```", "response_code": "\ndef func(A, x):\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            while mid > 0 and A[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n"}
{"task_id": 356, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):\n    '''\n    A python function is written to find the sum of products of all possible subarrays.\n    '''\n"}], "response": "```python\nimport itertools\n\ndef func(arr):\n    '''\n    A python function is written to find the sum of products of all possible subarrays.\n    '''\n    total_sum = 0\n    for i in range(1, len(arr)+1):\n        for subarr in itertools.combinations(arr, i):\n            product = 1\n            for num in subarr:\n                product *= num\n            total_sum += product\n    return total_sum\n```", "response_code": "\nimport itertools\n\ndef func(arr):\n    '''\n    A python function is written to find the sum of products of all possible subarrays.\n    '''\n    total_sum = 0\n    for i in range(1, len(arr)+1):\n        for subarr in itertools.combinations(arr, i):\n            product = 1\n            for num in subarr:\n                product *= num\n            total_sum += product\n    return total_sum\n"}
{"task_id": 357, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):  \n    '''\n    A python function is written to toggle bits of the number except the first and the last bit.\n    '''\n"}], "response": "```python\ndef func(n):\n    mask = (1 << n.bit_length()) - 1\n    return n ^ (mask ^ 3)\n```", "response_code": "\ndef func(n):\n    mask = (1 << n.bit_length()) - 1\n    return n ^ (mask ^ 3)\n"}
{"task_id": 358, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import bisect\ndef func(a, x):\n    '''\n    A function should be written to locate the left insertion point for a specified value in sorted order.\n    '''\n"}], "response": "import bisect\n\ndef func(a, x):\n    return bisect.bisect_left(a, x)", "response_code": "import bisect\n\ndef func(a, x):\n    return bisect.bisect_left(a, x)"}
{"task_id": 359, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef func(string): \n    '''\n    A function should be written to check whether the given string is starting with a vowel or not using regex.\n    '''\n"}], "response": "import re\n\ndef func(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return re.match(regex, string) is not None", "response_code": "import re\n\ndef func(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return re.match(regex, string) is not None"}
{"task_id": 360, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    A function should be written to calculate the geometric sum of n-1.\n    '''\n"}], "response": "```python\ndef func(n):\n    if n == 0:\n        return 1\n    else:\n        return 1 / (2 ** n) + func(n - 1)\n```", "response_code": "\ndef func(n):\n    if n == 0:\n        return 1\n    else:\n        return 1 / (2 ** n) + func(n - 1)\n"}
{"task_id": 361, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math \ndef func(n): \n    '''\n    A python function should be written to find the index of the smallest triangular number with n digits.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    index = 1\n    while True:\n        triangular_number = index * (index + 1) // 2\n        if len(str(triangular_number)) >= n:\n            return index\n        index += 1", "response_code": "import math\n\ndef func(n):\n    index = 1\n    while True:\n        triangular_number = index * (index + 1) // 2\n        if len(str(triangular_number)) >= n:\n            return index\n        index += 1"}
{"task_id": 362, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    A function should be written to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n"}], "response": "```python\ndef func(test_tup):\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup), 2)}\n```", "response_code": "\ndef func(test_tup):\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup), 2)}\n"}
{"task_id": 363, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s) :\n    '''\n    A python function is written to check whether all the characters are same or not.\n    '''\n"}], "response": "```python\ndef func(s):\n    return all(char == s[0] for char in s)\n```", "response_code": "\ndef func(s):\n    return all(char == s[0] for char in s)\n"}
{"task_id": 364, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(side):\n    '''\n    A function should be written to calculate the area of a tetrahedron.\n    '''\n"}], "response": "import math\n\ndef func(side):\n    return (math.sqrt(3) * side ** 2) / 4 * side / 3", "response_code": "import math\n\ndef func(side):\n    return (math.sqrt(3) * side ** 2) / 4 * side / 3"}
{"task_id": 365, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list, m):\n    '''\n    A function should be written to rotate a given list by a specified number of items to the right direction.\n    '''\n"}], "response": "```python\ndef func(lst, m):\n    m = m % len(lst)\n    return lst[-m:] + lst[:-m]\n```", "response_code": "\ndef func(lst, m):\n    m = m % len(lst)\n    return lst[-m:] + lst[:-m]\n"}
{"task_id": 366, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    A function should be written to check if the given tuple has any none value or not.\n    '''\n"}], "response": "def func(test_tup):\n    if None in test_tup:\n        return True\n    else:\n        return False", "response_code": "def func(test_tup):\n    if None in test_tup:\n        return True\n    else:\n        return False"}
{"task_id": 367, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(startnum, endnum):\n    '''\n    A function should be written to find numbers within a given range where every number is divisible by every digit it contains.\n    '''\n"}], "response": "```python\ndef func(startnum, endnum):\n    def is_divisible_by_digits(num):\n        for digit in str(num):\n            if int(digit) == 0 or num % int(digit) != 0:\n                return False\n        return True\n\n    result = []\n    for i in range(startnum, endnum + 1):\n        if is_divisible_by_digits(i):\n            result.append(i)\n    \n    return result\n```", "response_code": "\ndef func(startnum, endnum):\n    def is_divisible_by_digits(num):\n        for digit in str(num):\n            if int(digit) == 0 or num % int(digit) != 0:\n                return False\n        return True\n\n    result = []\n    for i in range(startnum, endnum + 1):\n        if is_divisible_by_digits(i):\n            result.append(i)\n    \n    return result\n"}
{"task_id": 368, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(r,a):\n    '''\n    A function should be written to find the area of a sector.\n    '''\n"}], "response": "import math\n\ndef func(r, a):\n    return 0.5 * r**2 * math.radians(a)", "response_code": "import math\n\ndef func(r, a):\n    return 0.5 * r**2 * math.radians(a)"}
{"task_id": 369, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(X, Y, Z): \n    '''\n    A function should be written to find the longest common subsequence for the given three string sequence.\n    '''\n"}], "response": "```python\nfrom difflib import SequenceMatcher\n\ndef func(X, Y, Z): \n    '''\n    A function should be written to find the longest common subsequence for the given three string sequence.\n    '''\n    def lcs(X, Y, Z, m, n, o): \n        L = [[[0 for _ in range(o+1)] for _ in range(n+1)] for _ in range(m+1)] \n\n        for i in range(m+1): \n            for j in range(n+1): \n                for k in range(o+1): \n                    if i == 0 or j == 0 or k == 0: \n                        L[i][j][k] = 0\n                    elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                        L[i][j][k] = L[i-1][j-1][k-1] + 1\n                    else: \n                        L[i][j][k] = max(max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]), L[i-1][j-1][k], L[i-1][j][k-1], L[i][j-1][k-1]) \n\n        return L[m][n][o] \n\n    return lcs(X, Y, Z, len(X), len(Y), len(Z))\n```", "response_code": "\nfrom difflib import SequenceMatcher\n\ndef func(X, Y, Z): \n    '''\n    A function should be written to find the longest common subsequence for the given three string sequence.\n    '''\n    def lcs(X, Y, Z, m, n, o): \n        L = [[[0 for _ in range(o+1)] for _ in range(n+1)] for _ in range(m+1)] \n\n        for i in range(m+1): \n            for j in range(n+1): \n                for k in range(o+1): \n                    if i == 0 or j == 0 or k == 0: \n                        L[i][j][k] = 0\n                    elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                        L[i][j][k] = L[i-1][j-1][k-1] + 1\n                    else: \n                        L[i][j][k] = max(max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]), L[i-1][j-1][k], L[i-1][j][k-1], L[i][j-1][k-1]) \n\n        return L[m][n][o] \n\n    return lcs(X, Y, Z, len(X), len(Y), len(Z))\n"}
{"task_id": 370, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(str1):\n    '''\n    A function should be written to put spaces between words starting with capital letters in a given string by using regex.\n    '''\n"}], "response": "import re\n\ndef func(str1):\n    return re.sub(r'([a-z])([A-Z])', r'\\1 \\2', str1)", "response_code": "import re\n\ndef func(str1):\n    return re.sub(r'([a-z])([A-Z])', r'\\1 \\2', str1)"}
{"task_id": 371, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums_str):\n    '''\n    A function should be written to sort a given list of strings of numbers numerically.\n    '''\n"}], "response": "```python\ndef func(nums_str):\n    return sorted(nums_str, key=lambda x: int(x))\n```", "response_code": "\ndef func(nums_str):\n    return sorted(nums_str, key=lambda x: int(x))\n"}
{"task_id": 372, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list, test_tup):\n    '''\n    A function should be written to add the given tuple to the given list.\n    '''\n"}], "response": "def func(test_list, test_tup):\n    test_list.append(test_tup)\n    return test_list", "response_code": "def func(test_list, test_tup):\n    test_list.append(test_tup)\n    return test_list"}
{"task_id": 373, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr, i):\n    '''\n    A function should be written to check if the given array represents a min heap or not.\n    '''\n"}], "response": "```python\ndef func(arr, i):\n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        if arr[i] > arr[2*i + 1] or (2*i + 2 < n and arr[i] > arr[2*i + 2]):\n            return False\n    return True\n```", "response_code": "\ndef func(arr, i):\n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        if arr[i] > arr[2*i + 1] or (2*i + 2 < n and arr[i] > arr[2*i + 2]):\n            return False\n    return True\n"}
{"task_id": 374, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to find the nth Jacobsthal number.\n    '''\n"}], "response": "```python\ndef func(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return func(n-1) + 2*func(n-2)\n```", "response_code": "\ndef func(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return func(n-1) + 2*func(n-2)\n"}
{"task_id": 375, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list, K):\n    '''\n    A function should be written to find minimum k records from tuple list.\n    '''\n"}], "response": "```python\ndef func(test_list, K):\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]\n```", "response_code": "\ndef func(test_list, K):\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]\n"}
{"task_id": 376, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l1, l2, l3):\n    '''\n    A function should be written to find common index elements from three lists.\n    '''\n"}], "response": "```python\ndef func(l1, l2, l3):\n    '''\n    A function should be written to find common index elements from three lists.\n    '''\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n```", "response_code": "\ndef func(l1, l2, l3):\n    '''\n    A function should be written to find common index elements from three lists.\n    '''\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n"}
{"task_id": 377, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(numbers):\n    '''\n    A function should be written to find the second smallest number in a list.\n    '''\n"}], "response": "```python\ndef func(numbers):\n    unique_numbers = list(set(numbers))\n    unique_numbers.sort()\n    return unique_numbers[1]\n```", "response_code": "\ndef func(numbers):\n    unique_numbers = list(set(numbers))\n    unique_numbers.sort()\n    return unique_numbers[1]\n"}
{"task_id": 378, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function is written that matches a string that has an a followed by zero or one 'b'.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'ab?'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False", "response_code": "import re\n\ndef func(text):\n    pattern = r'ab?'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": 379, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    A function should be written to count the pairs of reverse strings in the given string list.\n    '''\n"}], "response": "from collections import Counter\n\ndef func(test_list):\n    count = 0\n    for string in test_list:\n        if string[::-1] in test_list:\n            count += 1\n    return count", "response_code": "from collections import Counter\n\ndef func(test_list):\n    count = 0\n    for string in test_list:\n        if string[::-1] in test_list:\n            count += 1\n    return count"}
{"task_id": 380, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to count the number of unique lists within a list.\n    '''\n"}], "response": "```python\ndef func(list1):\n    return len(set(map(tuple, list1)))\n```", "response_code": "\ndef func(list1):\n    return len(set(map(tuple, list1)))\n"}
{"task_id": 381, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(num):\n    '''\n    A function should be written to check a decimal with a precision of 2.\n    '''\n"}], "response": "```python\ndef func(num):\n    return round(num, 2)\n```", "response_code": "\ndef func(num):\n    return round(num, 2)\n"}
{"task_id": 382, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):\n    '''\n    A python function should be written to check whether an array contains only one distinct element or not.\n    '''\n"}], "response": "def func(arr):\n    return len(set(arr)) == 1", "response_code": "def func(arr):\n    return len(set(arr)) == 1"}
{"task_id": 383, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(monthnum3):\n    '''\n    A function should be written to check whether the given month number contains 30 days or not.\n    '''\n"}], "response": "```python\ndef func(monthnum):\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n```", "response_code": "\ndef func(monthnum):\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n"}
{"task_id": 384, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr,n): \n    '''\n    A python function is written to find the minimum difference between any two elements in a given array.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(arr,n): \n    '''\n    A python function is written to find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    min_diff = np.inf\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n```", "response_code": "\nimport numpy as np\n\ndef func(arr,n): \n    '''\n    A python function is written to find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    min_diff = np.inf\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n"}
{"task_id": 385, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str):\n    '''\n    A python function is written to count numeric values in a given string.\n    '''\n"}], "response": "```python\ndef func(str):\n    count = 0\n    for char in str:\n        if char.isnumeric():\n            count += 1\n    return count\n```", "response_code": "\ndef func(str):\n    count = 0\n    for char in str:\n        if char.isnumeric():\n            count += 1\n    return count\n"}
{"task_id": 386, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math \ndef func(n): \n    '''\n    A function should be written to find the nth polite number.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    return int(math.ceil(n * (3/2)))", "response_code": "import math\n\ndef func(n):\n    return int(math.ceil(n * (3/2)))"}
{"task_id": 387, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l1):\n    '''\n    A function should be written to iterate over all pairs of consecutive items in a given list.\n    '''\n"}], "response": "```python\ndef func(l1):\n    for i in range(len(l1) - 1):\n        print(l1[i], l1[i+1])\n\n# Example usage\n# func([1, 2, 3, 4, 5])\n```", "response_code": "\ndef func(l1):\n    for i in range(len(l1) - 1):\n        print(l1[i], l1[i+1])\n\n# Example usage\n# func([1, 2, 3, 4, 5])\n"}
{"task_id": 388, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr, sum):\n    '''\n    A python function is written to count the number of pairs whose sum is equal to 'sum'.\n    '''\n"}], "response": "```python\ndef func(arr, sum):\n    '''\n    A python function is written to count the number of pairs whose sum is equal to 'sum'.\n    '''\n    count = 0\n    seen = set()\n    for num in arr:\n        complement = sum - num\n        if complement in seen:\n            count += 1\n        seen.add(num)\n    return count\n```", "response_code": "\ndef func(arr, sum):\n    '''\n    A python function is written to count the number of pairs whose sum is equal to 'sum'.\n    '''\n    count = 0\n    seen = set()\n    for num in arr:\n        complement = sum - num\n        if complement in seen:\n            count += 1\n        seen.add(num)\n    return count\n"}
{"task_id": 389, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(li1,li2):\n    '''\n    A python function is written to get the difference between two lists.\n    '''\n"}], "response": "```python\ndef func(li1, li2):\n    return list(set(li1) - set(li2))\n```", "response_code": "\ndef func(li1, li2):\n    return list(set(li1) - set(li2))\n"}
{"task_id": 390, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n) : \n    '''\n    A python function is written to find the sum of the fourth power of the first n odd natural numbers.\n    '''\n"}], "response": "def func(n):\n    return n * n * n * n", "response_code": "def func(n):\n    return n * n * n * n"}
{"task_id": 391, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import deque\ndef func(exp):\n    '''\n    A function should be written to check if the given expression is balanced or not.\n    '''\n"}], "response": "from collections import deque\n\ndef func(exp):\n    stack = deque()\n    opening_brackets = ['(', '[', '{']\n    closing_brackets = [')', ']', '}']\n    \n    for char in exp:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack:\n                return False\n            top = stack.pop()\n            if opening_brackets.index(top) != closing_brackets.index(char):\n                return False\n    \n    return len(stack) == 0", "response_code": "from collections import deque\n\ndef func(exp):\n    stack = deque()\n    opening_brackets = ['(', '[', '{']\n    closing_brackets = [')', ']', '}']\n    \n    for char in exp:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack:\n                return False\n            top = stack.pop()\n            if opening_brackets.index(top) != closing_brackets.index(char):\n                return False\n    \n    return len(stack) == 0"}
{"task_id": 392, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_str, K):\n    '''\n    A function should be written to remove all the words with k length in the given string.\n    '''\n"}], "response": "```python\ndef func(test_str, K):\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    return ' '.join(filtered_words)\n```", "response_code": "\ndef func(test_str, K):\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    return ' '.join(filtered_words)\n"}
{"task_id": 393, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text,pattern):\n    '''\n    A function should be written to find the occurrence and position of the substrings within a string.\n    '''\n"}], "response": "import re\n\ndef func(text, pattern):\n    matches = re.finditer(pattern, text)\n    occurrences = [(match.group(0), match.start(), match.end()) for match in matches]\n    return occurrences", "response_code": "import re\n\ndef func(text, pattern):\n    matches = re.finditer(pattern, text)\n    occurrences = [(match.group(0), match.start(), match.end()) for match in matches]\n    return occurrences"}
{"task_id": 394, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    A python function should be written to check whether every odd index contains odd numbers of a given list.\n    '''\n"}], "response": "def func(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True", "response_code": "def func(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": 395, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_str):\n    '''\n    A function should be written to count those characters which have vowels as their neighbors in the given string.\n    '''\n"}], "response": "```python\ndef func(test_str):\n    count = 0\n    vowels = 'aeiouAEIOU'\n    for i in range(1, len(test_str) - 1):\n        if test_str[i] in vowels and (test_str[i-1] in vowels or test_str[i+1] in vowels):\n            count += 1\n    return count\n```", "response_code": "\ndef func(test_str):\n    count = 0\n    vowels = 'aeiouAEIOU'\n    for i in range(1, len(test_str) - 1):\n        if test_str[i] in vowels and (test_str[i-1] in vowels or test_str[i+1] in vowels):\n            count += 1\n    return count\n"}
{"task_id": 396, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr): \n    '''\n    A python function is written to find the sum of non-repeated elements in a given array.\n    '''\n"}], "response": "```python\ndef func(arr): \n    return sum(num for num in set(arr) if arr.count(num) == 1)\n```", "response_code": "\ndef func(arr): \n    return sum(num for num in set(arr) if arr.count(num) == 1)\n"}
{"task_id": 397, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from itertools import groupby\ndef func(list1):\n    '''\n    A function should be written to pack consecutive duplicates of a given list elements into sublists.\n    '''\n"}], "response": "from itertools import groupby\n\ndef func(list1):\n    return [list(group) for key, group in groupby(list1)]", "response_code": "from itertools import groupby\n\ndef func(list1):\n    return [list(group) for key, group in groupby(list1)]"}
{"task_id": 398, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to count the number of unique lists within a list.\n    '''\n"}], "response": "```python\ndef func(list1):\n    return len(set(map(tuple, list1)))\n```", "response_code": "\ndef func(list1):\n    return len(set(map(tuple, list1)))\n"}
{"task_id": 399, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from itertools import combinations \ndef func(test_list):\n    '''\n    A function should be written to find the combinations of sums with tuples in the given tuple list.\n    '''\n"}], "response": "from itertools import combinations\n\ndef func(test_list):\n    res = []\n    for i in range(1, len(test_list)+1):\n        for subset in combinations(test_list, i):\n            res.append((subset, sum(subset)))\n    return res", "response_code": "from itertools import combinations\n\ndef func(test_list):\n    res = []\n    for i in range(1, len(test_list)+1):\n        for subset in combinations(test_list, i):\n            res.append((subset, sum(subset)))\n    return res"}
{"task_id": 400, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math \ndef func(n) : \n    '''\n    A python function should be written to check whether the count of divisors is even or odd.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    if math.isqrt(n) ** 2 == n:\n        return \"Odd\"\n    else:\n        return \"Even\"", "response_code": "import math\n\ndef func(n):\n    if math.isqrt(n) ** 2 == n:\n        return \"Odd\"\n    else:\n        return \"Even\""}
{"task_id": 401, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):\n    '''\n    A python function is written to find the sum of all odd length subarrays.\n    '''\n"}], "response": "```python\ndef func(arr):\n    total_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j - i + 1) % 2 != 0:\n                total_sum += sum(arr[i:j+1])\n    return total_sum\n```", "response_code": "\ndef func(arr):\n    total_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j - i + 1) % 2 != 0:\n                total_sum += sum(arr[i:j+1])\n    return total_sum\n"}
{"task_id": 402, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(r, g, b):\n    '''\n    A function should be written to convert rgb color to hsv color.\n    '''\n"}], "response": "```python\nimport colorsys\n\ndef func(r, g, b):\n    '''\n    A function should be written to convert rgb color to hsv color.\n    '''\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n    h, s, v = colorsys.rgb_to_hsv(r, g, b)\n    return h, s, v\n```", "response_code": "\nimport colorsys\n\ndef func(r, g, b):\n    '''\n    A function should be written to convert rgb color to hsv color.\n    '''\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n    h, s, v = colorsys.rgb_to_hsv(r, g, b)\n    return h, s, v\n"}
{"task_id": 403, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to find the product of the first even and odd number of a given list.\n    '''\n"}], "response": "```python\ndef func(list1):\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2 != 0 and odd_num is None:\n            odd_num = num\n        if even_num is not None and odd_num is not None:\n            break\n    if even_num is None or odd_num is None:\n        return None\n    return even_num * odd_num\n```", "response_code": "\ndef func(list1):\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2 != 0 and odd_num is None:\n            odd_num = num\n        if even_num is not None and odd_num is not None:\n            break\n    if even_num is None or odd_num is None:\n        return None\n    return even_num * odd_num\n"}
{"task_id": 404, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_str):\n    '''\n    A function should be written to convert tuple string to integer tuple.\n    '''\n"}], "response": "```python\ndef func(test_str):\n    return tuple(map(int, test_str.strip('()').split(',')))\n```", "response_code": "\ndef func(test_str):\n    return tuple(map(int, test_str.strip('()').split(',')))\n"}
{"task_id": 405, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import bisect\ndef func(a, x):\n    '''\n    A function should be written to locate the right insertion point for a specified value in sorted order.\n    '''\n"}], "response": "import bisect\n\ndef func(a, x):\n    return bisect.bisect_right(a, x)", "response_code": "import bisect\n\ndef func(a, x):\n    return bisect.bisect_right(a, x)"}
{"task_id": 406, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function should be written that matches a string that has an a followed by three 'b'.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'ab{3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False", "response_code": "import re\n\ndef func(text):\n    pattern = r'ab{3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": 407, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list, test_str):\n    '''\n    A function should be written to create a new tuple from the given string and list.\n    '''\n"}], "response": "```python\ndef func(test_list, test_str):\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple\n```", "response_code": "\ndef func(test_list, test_str):\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple\n"}
{"task_id": 408, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    A python function should be written to check whether every even index contains even numbers of a given list.\n    '''\n"}], "response": "```python\ndef func(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n```", "response_code": "\ndef func(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n"}
{"task_id": 409, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    A function should be written to remove the nested record from the given tuple.\n    '''\n"}], "response": "```python\ndef func(test_tup):\n    return tuple(item for sublist in test_tup for item in sublist)\n```", "response_code": "\ndef func(test_tup):\n    return tuple(item for sublist in test_tup for item in sublist)\n"}
{"task_id": 410, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(input_list): \n    '''\n    A python function is written to count the number of lists in a given number of lists.\n    '''\n"}], "response": "```python\ndef func(input_list): \n    '''\n    A python function is written to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n```", "response_code": "\ndef func(input_list): \n    '''\n    A python function is written to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n"}
{"task_id": 411, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr,x):\n    '''\n    A python function is written to find the last position of an element in a sorted array.\n    '''\n"}], "response": "```python\ndef func(arr, x):\n    '''\n    A python function is written to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = low + (high - low) // 2\n\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result\n```", "response_code": "\ndef func(arr, x):\n    '''\n    A python function is written to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = low + (high - low) // 2\n\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result\n"}
{"task_id": 412, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function is written that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'a.*b$'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False", "response_code": "import re\n\ndef func(text):\n    pattern = r'a.*b$'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": 413, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(dict):\n    '''\n    A function should be written to find the sum of all items in the given dictionary.\n    '''\n"}], "response": "def func(dict):\n    return sum(dict.values())", "response_code": "def func(dict):\n    return sum(dict.values())"}
{"task_id": 414, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function is written to find the sum of all odd natural numbers within the range l and r.\n    '''\n"}], "response": "```python\ndef func(n): \n    '''\n    A python function is written to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return n**2\n```", "response_code": "\ndef func(n): \n    '''\n    A python function is written to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return n**2\n"}
{"task_id": 415, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):  \n    '''\n    A python function is written to find the sum of an array.\n    '''\n"}], "response": "```python\ndef func(arr):\n    return sum(arr)\n```", "response_code": "\ndef func(arr):\n    return sum(arr)\n"}
{"task_id": 416, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n,d):   \n    '''\n    A python function is written to left rotate the bits of a given number.\n    '''\n"}], "response": "```python\ndef func(n,d):\n    return (n << d) | (n >> (32 - d))\n```", "response_code": "\ndef func(n,d):\n    return (n << d) | (n >> (32 - d))\n"}
{"task_id": 417, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function should be written to remove all whitespaces from a string.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    return re.sub(r'\\s+', '', text)", "response_code": "import re\n\ndef func(text):\n    return re.sub(r'\\s+', '', text)"}
{"task_id": 418, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x,y,z):\n    '''\n    A python function is written to count the number of equal numbers from three given integers.\n    '''\n"}], "response": "```python\ndef func(x, y, z):\n    '''\n    A python function is written to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count = 3\n    elif x == y or y == z or x == z:\n        count = 2\n    return count\n```", "response_code": "\ndef func(x, y, z):\n    '''\n    A python function is written to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count = 3\n    elif x == y or y == z or x == z:\n        count = 2\n    return count\n"}
{"task_id": 419, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):   \n    '''\n    A python function is written to count the number of rotations required to generate a sorted array.\n    '''\n"}], "response": "```python\ndef func(arr):\n    '''\n    A python function is written to count the number of rotations required to generate a sorted array.\n    '''\n    def count_rotations(arr):\n        n = len(arr)\n        start = 0\n        end = n - 1\n\n        while start <= end:\n            if arr[start] <= arr[end]:\n                return start\n\n            mid = (start + end) // 2\n            next_mid = (mid + 1) % n\n            prev_mid = (mid + n - 1) % n\n\n            if arr[mid] <= arr[next_mid] and arr[mid] <= arr[prev_mid]:\n                return mid\n            elif arr[start] <= arr[mid]:\n                start = mid + 1\n            elif arr[mid] <= arr[end]:\n                end = mid - 1\n\n    return count_rotations(arr)\n```", "response_code": "\ndef func(arr):\n    '''\n    A python function is written to count the number of rotations required to generate a sorted array.\n    '''\n    def count_rotations(arr):\n        n = len(arr)\n        start = 0\n        end = n - 1\n\n        while start <= end:\n            if arr[start] <= arr[end]:\n                return start\n\n            mid = (start + end) // 2\n            next_mid = (mid + 1) % n\n            prev_mid = (mid + n - 1) % n\n\n            if arr[mid] <= arr[next_mid] and arr[mid] <= arr[prev_mid]:\n                return mid\n            elif arr[start] <= arr[mid]:\n                start = mid + 1\n            elif arr[mid] <= arr[end]:\n                end = mid - 1\n\n    return count_rotations(arr)\n"}
{"task_id": 420, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n) :\n    '''\n    A python function is written to check whether the given number is a perfect square or not.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    '''\n    A python function is written to check whether the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    sqrt_n = math.isqrt(n)\n    return sqrt_n * sqrt_n == n", "response_code": "import math\n\ndef func(n):\n    '''\n    A python function is written to check whether the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    sqrt_n = math.isqrt(n)\n    return sqrt_n * sqrt_n == n"}
{"task_id": 421, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr): \n    '''\n    A python function is written to check whether the product of numbers is even or not.\n    '''\n"}], "response": "```python\ndef func(arr): \n    '''\n    A python function is written to check whether the product of numbers is even or not.\n    '''\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False\n```", "response_code": "\ndef func(arr): \n    '''\n    A python function is written to check whether the product of numbers is even or not.\n    '''\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False\n"}
{"task_id": 422, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lists):\n    '''\n    A function should be written to find the list in a list of lists whose sum of elements is the highest.\n    '''\n"}], "response": "```python\ndef func(lists):\n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    \n    return max_list\n```", "response_code": "\ndef func(lists):\n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    \n    return max_list\n"}
{"task_id": 423, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_str):\n    '''\n    A function should be written to find the maximum run of uppercase characters in the given string.\n    '''\n"}], "response": "```python\ndef func(test_str):\n    max_run = 0\n    current_run = 0\n\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n\n    return max_run\n```", "response_code": "\ndef func(test_str):\n    max_run = 0\n    current_run = 0\n\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n\n    return max_run\n"}
{"task_id": 424, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    A python function is written to find the first odd number in a given list of numbers.\n    '''\n"}], "response": "```python\ndef func(nums):\n    '''\n    A python function is written to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 != 0:\n            return num\n```", "response_code": "\ndef func(nums):\n    '''\n    A python function is written to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 != 0:\n            return num\n"}
{"task_id": 425, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup, K):\n    '''\n    A function should be written to check if the given tuples contain the k or not.\n    '''\n"}], "response": "```python\ndef func(test_tup, K):\n    return any(K in sub_tup for sub_tup in test_tup)\n```", "response_code": "\ndef func(test_tup, K):\n    return any(K in sub_tup for sub_tup in test_tup)\n"}
{"task_id": 426, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    A function should be written to check if each element of the second tuple is smaller than its corresponding index in the first tuple.\n    '''\n"}], "response": "def func(test_tup1, test_tup2):\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= i:\n            return False\n    return True", "response_code": "def func(test_tup1, test_tup2):\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= i:\n            return False\n    return True"}
