{"task_id": 0, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    A function should be written to find the similar elements from the given two tuple lists.\n    '''\n"}], "response": "def func(test_tup1, test_tup2):\n    return tuple(set(test_tup1) & set(test_tup2))", "response_code": "def func(test_tup1, test_tup2):\n    return tuple(set(test_tup1) & set(test_tup2))"}
{"task_id": 1, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(n):\n    '''\n    A python function is written to identify non-prime numbers.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    '''\n    A python function is written to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False", "response_code": "import math\n\ndef func(n):\n    '''\n    A python function is written to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": 2, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq as hq\ndef func(nums,n):\n    '''\n    A function is written to find the largest integers from a given list of numbers using the heap queue algorithm.\n    '''\n"}], "response": "import heapq as hq\n\ndef func(nums, n):\n    return hq.nlargest(n, nums)", "response_code": "import heapq as hq\n\ndef func(nums, n):\n    return hq.nlargest(n, nums)"}
{"task_id": 3, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x): \n    '''\n    A python function is written to check whether the two numbers differ at one bit position only or not.\n    '''\n"}], "response": "```python\ndef func(x): \n    return bin(x).count('1') == 1\n```", "response_code": "\ndef func(x): \n    return bin(x).count('1') == 1\n"}
{"task_id": 4, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function should be written to find all words which are at least 4 characters long in a string by using regex.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)", "response_code": "import re\n\ndef func(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)"}
{"task_id": 5, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    A function is written to find squares of individual elements in a list using a lambda function.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return list(map(lambda x: x**2, nums))\n```", "response_code": "\ndef func(nums):\n    return list(map(lambda x: x**2, nums))\n"}
{"task_id": 6, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str): \n    '''\n    A python function is written to find the minimum number of rotations required to get the same string.\n    '''\n"}], "response": "```python\ndef func(str): \n    '''\n    A python function is written to find the minimum number of rotations required to get the same string.\n    '''\n    def rotate(s, n):\n        return s[n:] + s[:n]\n\n    min_rotations = len(str)\n    for i in range(1, len(str)):\n        rotated_str = rotate(str, i)\n        if rotated_str == str:\n            min_rotations = i\n            break\n\n    return min_rotations\n```", "response_code": "\ndef func(str): \n    '''\n    A python function is written to find the minimum number of rotations required to get the same string.\n    '''\n    def rotate(s, n):\n        return s[n:] + s[:n]\n\n    min_rotations = len(str)\n    for i in range(1, len(str)):\n        rotated_str = rotate(str, i)\n        if rotated_str == str:\n            min_rotations = i\n            break\n\n    return min_rotations\n"}
{"task_id": 7, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s,ch): \n    '''\n    A python function is written to remove the first and last occurrence of a given character from the string.\n    '''\n"}], "response": "```python\ndef func(s, ch):\n    '''\n    A python function is written to remove the first and last occurrence of a given character from the string.\n    '''\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    \n    if first_index != -1 and last_index != -1:\n        s = s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n    \n    return s\n```", "response_code": "\ndef func(s, ch):\n    '''\n    A python function is written to remove the first and last occurrence of a given character from the string.\n    '''\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    \n    if first_index != -1 and last_index != -1:\n        s = s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n    \n    return s\n"}
{"task_id": 8, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(M):\n    '''\n    A function should be written to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(M):\n    return M[np.argsort(np.sum(M, axis=1))]\n```", "response_code": "\nimport numpy as np\n\ndef func(M):\n    return M[np.argsort(np.sum(M, axis=1))]\n"}
{"task_id": 9, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l,b,h) : \n    '''\n    A python function is written to find the volume of a triangular prism.\n    '''\n"}], "response": "```python\ndef func(l, b, h):\n    return 0.5 * l * b * h\n```", "response_code": "\ndef func(l, b, h):\n    return 0.5 * l * b * h\n"}
{"task_id": 10, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function should be written to find sequences of lowercase letters joined with an underscore.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    result = re.findall(pattern, text)\n    return result", "response_code": "import re\n\ndef func(text):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    result = re.findall(pattern, text)\n    return result"}
{"task_id": 11, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a):\n    '''\n    A function should be written to find the perimeter of a square.\n    '''\n"}], "response": "```python\ndef func(a):\n    return 4 * a\n```", "response_code": "\ndef func(a):\n    return 4 * a\n"}
{"task_id": 12, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "NO_OF_CHARS = 256\ndef func(string): \n    '''\n    A function should be written to remove characters from the first string which are present in the second string.\n    '''\n"}], "response": "```python\nNO_OF_CHARS = 256\n\ndef func(string): \n    '''\n    A function should be written to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) < 2:\n        return string\n\n    input_string = list(string)\n    mask = [0] * NO_OF_CHARS\n\n    for char in input_string:\n        mask[ord(char)] += 1\n\n    result = []\n    for char in input_string:\n        if mask[ord(char)] == 0:\n            result.append(char)\n\n    return ''.join(result)\n```", "response_code": "\nNO_OF_CHARS = 256\n\ndef func(string): \n    '''\n    A function should be written to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) < 2:\n        return string\n\n    input_string = list(string)\n    mask = [0] * NO_OF_CHARS\n\n    for char in input_string:\n        mask[ord(char)] += 1\n\n    result = []\n    for char in input_string:\n        if mask[ord(char)] == 0:\n            result.append(char)\n\n    return ''.join(result)\n"}
{"task_id": 13, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arraynums):\n    '''\n    A function should be written to determine whether a given array of integers contains any duplicate element.\n    '''\n"}], "response": "```python\ndef func(arraynums):\n    return len(arraynums) != len(set(arraynums))\n```", "response_code": "\ndef func(arraynums):\n    return len(arraynums) != len(set(arraynums))\n"}
{"task_id": 14, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x): \n    '''\n    A function should be written to check if the given number is woodball or not.\n    '''\n"}], "response": "```python\ndef func(x):\n    if x < 1:\n        return False\n    while x % 3 == 0:\n        x /= 3\n    return x == 1\n```", "response_code": "\ndef func(x):\n    if x < 1:\n        return False\n    while x % 3 == 0:\n        x /= 3\n    return x == 1\n"}
{"task_id": 15, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(num):    \n    '''\n    A python function is written to check if a given number is one less than twice its reverse.\n    '''\n"}], "response": "```python\ndef func(num):\n    reverse_num = int(str(num)[::-1])\n    if num == 2 * reverse_num - 1:\n        return True\n    else:\n        return False\n```", "response_code": "\ndef func(num):\n    reverse_num = int(str(num)[::-1])\n    if num == 2 * reverse_num - 1:\n        return True\n    else:\n        return False\n"}
{"task_id": 16, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr) : \n    '''\n    A python function is written to find the largest number that can be formed with the given digits.\n    '''\n"}], "response": "```python\ndef func(arr):\n    arr.sort(reverse=True)\n    return int(''.join(map(str, arr)))\n```", "response_code": "\ndef func(arr):\n    arr.sort(reverse=True)\n    return int(''.join(map(str, arr)))\n"}
{"task_id": 17, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x,y): \n    '''\n    A python function is written to check whether the given two integers have opposite sign or not.\n    '''\n"}], "response": "```python\ndef func(x, y):\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False\n```", "response_code": "\ndef func(x, y):\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False\n"}
{"task_id": 18, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to find the nth octagonal number.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n * (3 * n - 2)\n```", "response_code": "\ndef func(n):\n    return n * (3 * n - 2)\n"}
{"task_id": 19, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import defaultdict\ndef func(s):\n    '''\n    A python function is written to count the number of substrings with the sum of digits equal to their length.\n    '''\n"}], "response": "```python\nfrom collections import defaultdict\n\ndef func(s):\n    '''\n    A python function is written to count the number of substrings with the sum of digits equal to their length.\n    '''\n```", "response_code": "\nfrom collections import defaultdict\n\ndef func(s):\n    '''\n    A python function is written to count the number of substrings with the sum of digits equal to their length.\n    '''\n"}
