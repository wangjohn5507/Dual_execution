{"task_id": 0, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Can you write a function to find the similar elements from the given two tuple lists?\n    '''\n"}], "response": "from typing import List\n\ndef func(test_tup1: List[tuple], test_tup2: List[tuple]):\n    similar_elements = []\n    for tup1 in test_tup1:\n        for tup2 in test_tup2:\n            if set(tup1) == set(tup2):\n                similar_elements.append(tup1)\n    return similar_elements", "response_code": "from typing import List\n\ndef func(test_tup1: List[tuple], test_tup2: List[tuple]):\n    similar_elements = []\n    for tup1 in test_tup1:\n        for tup2 in test_tup2:\n            if set(tup1) == set(tup2):\n                similar_elements.append(tup1)\n    return similar_elements"}
{"task_id": 1, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(n):\n    '''\n    Can you write a python function to identify non-prime numbers?\n    '''\n"}], "response": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef identify_non_prime_numbers(n):\n    non_prime_numbers = []\n    for num in range(2, n+1):\n        if not is_prime(num):\n            non_prime_numbers.append(num)\n    return non_prime_numbers", "response_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef identify_non_prime_numbers(n):\n    non_prime_numbers = []\n    for num in range(2, n+1):\n        if not is_prime(num):\n            non_prime_numbers.append(num)\n    return non_prime_numbers"}
{"task_id": 2, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq as hq\ndef func(nums,n):\n    '''\n    Can you write a function to find the largest integers from a given list of numbers using the heap queue algorithm?\n    '''\n"}], "response": "import heapq as hq\n\ndef func(nums, n):\n    return hq.nlargest(n, nums)", "response_code": "import heapq as hq\n\ndef func(nums, n):\n    return hq.nlargest(n, nums)"}
{"task_id": 3, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x): \n    '''\n    Can you write a python function to check whether the two numbers differ at one bit position only or not?\n    '''\n"}], "response": "```python\ndef func(x):\n    return bin(x).count('1') == 1\n```", "response_code": "\ndef func(x):\n    return bin(x).count('1') == 1\n"}
{"task_id": 4, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Can you write a function to find all words which are at least 4 characters long in a string by using regex?\n    '''\n"}], "response": "import re\n\ndef func(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)", "response_code": "import re\n\ndef func(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)"}
{"task_id": 5, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Can you write a function to find squares of individual elements in a list using a lambda function?\n    '''\n"}], "response": "```python\ndef func(nums):\n    return list(map(lambda x: x**2, nums))\n```", "response_code": "\ndef func(nums):\n    return list(map(lambda x: x**2, nums))\n"}
{"task_id": 6, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str): \n    '''\n    Can you write a python function to find the minimum number of rotations required to get the same string?\n    '''\n"}], "response": "```python\ndef func(s):\n    n = len(s)\n    for i in range(1, n+1):\n        if n % i == 0:\n            if s == s[:i]*(n//i):\n                return i\n    return n\n```", "response_code": "\ndef func(s):\n    n = len(s)\n    for i in range(1, n+1):\n        if n % i == 0:\n            if s == s[:i]*(n//i):\n                return i\n    return n\n"}
{"task_id": 7, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s,ch): \n    '''\n    Can you write a python function to remove the first and last occurrence of a given character from the string?\n    '''\n"}], "response": "def func(s, ch):\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    \n    if first_occurrence != -1 and last_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n    \n    return s", "response_code": "def func(s, ch):\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    \n    if first_occurrence != -1 and last_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n    \n    return s"}
{"task_id": 8, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(M):\n    '''\n    Can you write a function to sort a given matrix in ascending order according to the sum of its rows?\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(M):\n    return M[np.argsort(np.sum(M, axis=1))]\n```", "response_code": "\nimport numpy as np\n\ndef func(M):\n    return M[np.argsort(np.sum(M, axis=1))]\n"}
{"task_id": 9, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l,b,h) : \n    '''\n    Can you write a python function to find the volume of a triangular prism?\n    '''\n"}], "response": "```python\ndef func(l, b, h):\n    return 0.5 * l * b * h\n```", "response_code": "\ndef func(l, b, h):\n    return 0.5 * l * b * h\n"}
{"task_id": 10, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Can you write a function to find sequences of lowercase letters joined with an underscore?\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches", "response_code": "import re\n\ndef func(text):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches"}
{"task_id": 11, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a):\n    '''\n    Can you write a function to find the perimeter of a square?\n    '''\n"}], "response": "```python\ndef func(a):\n    return 4 * a\n```", "response_code": "\ndef func(a):\n    return 4 * a\n"}
{"task_id": 12, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "NO_OF_CHARS = 256\ndef func(string): \n    '''\n    Can you write a function to remove characters from the first string which are present in the second string?\n    '''\n"}], "response": "```python\nNO_OF_CHARS = 256\n\ndef func(string): \n    '''\n    Can you write a function to remove characters from the first string which are present in the second string?\n    '''\n    if len(string) < 2:\n        return string\n\n    input_string = list(string)\n    mask = [0] * NO_OF_CHARS\n\n    for char in input_string:\n        mask[ord(char)] += 1\n\n    result = []\n    for char in input_string:\n        if mask[ord(char)] == 0:\n            result.append(char)\n\n    return ''.join(result)\n```", "response_code": "\nNO_OF_CHARS = 256\n\ndef func(string): \n    '''\n    Can you write a function to remove characters from the first string which are present in the second string?\n    '''\n    if len(string) < 2:\n        return string\n\n    input_string = list(string)\n    mask = [0] * NO_OF_CHARS\n\n    for char in input_string:\n        mask[ord(char)] += 1\n\n    result = []\n    for char in input_string:\n        if mask[ord(char)] == 0:\n            result.append(char)\n\n    return ''.join(result)\n"}
{"task_id": 13, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arraynums):\n    '''\n    Can you write a function to find whether a given array of integers contains any duplicate element?\n    '''\n"}], "response": "```python\ndef func(arraynums):\n    return len(arraynums) != len(set(arraynums))\n```", "response_code": "\ndef func(arraynums):\n    return len(arraynums) != len(set(arraynums))\n"}
{"task_id": 14, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x): \n    '''\n    Can you write a function to check if the given number is woodball or not?\n    '''\n"}], "response": "import math\n\ndef is_woodball(x):\n    if x < 0:\n        return False\n    \n    sqrt_x = math.sqrt(x)\n    cube_root_x = x ** (1/3)\n    \n    if sqrt_x.is_integer() and cube_root_x.is_integer():\n        return True\n    else:\n        return False", "response_code": "import math\n\ndef is_woodball(x):\n    if x < 0:\n        return False\n    \n    sqrt_x = math.sqrt(x)\n    cube_root_x = x ** (1/3)\n    \n    if sqrt_x.is_integer() and cube_root_x.is_integer():\n        return True\n    else:\n        return False"}
{"task_id": 15, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(num):    \n    '''\n    Can you write a python function to check if a given number is one less than twice its reverse?\n    '''\n"}], "response": "def func(num):\n    reverse_num = int(str(num)[::-1])\n    if num == 2 * reverse_num - 1:\n        return True\n    else:\n        return False", "response_code": "def func(num):\n    reverse_num = int(str(num)[::-1])\n    if num == 2 * reverse_num - 1:\n        return True\n    else:\n        return False"}
{"task_id": 16, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr) : \n    '''\n    Can you write a python function to find the largest number that can be formed with the given digits?\n    '''\n"}], "response": "from itertools import permutations\n\ndef func(arr):\n    perm = permutations(arr)\n    max_num = 0\n    for p in perm:\n        num = int(''.join(p))\n        if num > max_num:\n            max_num = num\n    return max_num", "response_code": "from itertools import permutations\n\ndef func(arr):\n    perm = permutations(arr)\n    max_num = 0\n    for p in perm:\n        num = int(''.join(p))\n        if num > max_num:\n            max_num = num\n    return max_num"}
{"task_id": 17, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x,y): \n    '''\n    Can you write a python function to check whether the given two integers have opposite sign or not?\n    '''\n"}], "response": "def check_opposite_sign(x, y):\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False", "response_code": "def check_opposite_sign(x, y):\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False"}
{"task_id": 18, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a function to find the nth octagonal number?\n    '''\n"}], "response": "```python\ndef func(n):\n    return n * (3 * n - 2)\n```", "response_code": "\ndef func(n):\n    return n * (3 * n - 2)\n"}
{"task_id": 19, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import defaultdict\ndef func(s):\n    '''\n    Can you write a python function to count the number of substrings with the sum of digits equal to their length?\n    '''\n"}], "response": "```python\nfrom collections import defaultdict\n\ndef func(s):\n    count = 0\n    prefix_sum = defaultdict(int)\n    prefix_sum[0] = 1\n    cur_sum = 0\n\n    for i in range(len(s)):\n        cur_sum += int(s[i])\n        count += prefix_sum[cur_sum - i - 1]\n        prefix_sum[cur_sum - i - 1] += 1\n\n    return count\n```", "response_code": "\nfrom collections import defaultdict\n\ndef func(s):\n    count = 0\n    prefix_sum = defaultdict(int)\n    prefix_sum[0] = 1\n    cur_sum = 0\n\n    for i in range(len(s)):\n        cur_sum += int(s[i])\n        count += prefix_sum[cur_sum - i - 1]\n        prefix_sum[cur_sum - i - 1] += 1\n\n    return count\n"}
