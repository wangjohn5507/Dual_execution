{"task_id": 0, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    WRITE A FUNCTION TO FIND THE SIMILAR ELEMENTS FROM THE GIVEN TWO TUPLE LISTS.\n    '''\n"}], "response": "```python\ndef func(test_tup1, test_tup2):\n    return list(set(test_tup1) & set(test_tup2))\n```", "response_code": "\ndef func(test_tup1, test_tup2):\n    return list(set(test_tup1) & set(test_tup2))\n"}
{"task_id": 1, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(n):\n    '''\n    WRITE A PYTHON FUNCTION TO IDENTIFY NON-PRIME NUMBERS.\n    '''\n"}], "response": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef identify_non_prime_numbers(n):\n    non_prime_numbers = []\n    for num in range(2, n+1):\n        if not is_prime(num):\n            non_prime_numbers.append(num)\n    return non_prime_numbers", "response_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef identify_non_prime_numbers(n):\n    non_prime_numbers = []\n    for num in range(2, n+1):\n        if not is_prime(num):\n            non_prime_numbers.append(num)\n    return non_prime_numbers"}
{"task_id": 2, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq as hq\ndef func(nums,n):\n    '''\n    WRITE A FUNCTION TO FIND THE LARGEST INTEGERS FROM A GIVEN LIST OF NUMBERS USING HEAP QUEUE ALGORITHM.\n    '''\n"}], "response": "import heapq as hq\n\ndef func(nums, n):\n    return hq.nlargest(n, nums)", "response_code": "import heapq as hq\n\ndef func(nums, n):\n    return hq.nlargest(n, nums)"}
{"task_id": 3, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x): \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER THE TWO NUMBERS DIFFER AT ONE BIT POSITION ONLY OR NOT.\n    '''\n"}], "response": "```python\ndef func(x):\n    return bin(x).count('1') == 1\n```", "response_code": "\ndef func(x):\n    return bin(x).count('1') == 1\n"}
{"task_id": 4, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    WRITE A FUNCTION TO FIND ALL WORDS WHICH ARE AT LEAST 4 CHARACTERS LONG IN A STRING BY USING REGEX.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)", "response_code": "import re\n\ndef func(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)"}
{"task_id": 5, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    WRITE A FUNCTION TO FIND SQUARES OF INDIVIDUAL ELEMENTS IN A LIST USING LAMBDA FUNCTION.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return list(map(lambda x: x**2, nums))\n```", "response_code": "\ndef func(nums):\n    return list(map(lambda x: x**2, nums))\n"}
{"task_id": 6, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE MINIMUM NUMBER OF ROTATIONS REQUIRED TO GET THE SAME STRING.\n    '''\n"}], "response": "```python\ndef func(s):\n    n = len(s)\n    s += s\n    for i in range(1, n+1):\n        if n % i == 0:\n            if s[:i] * (n//i) == s:\n                return i\n    return n\n```", "response_code": "\ndef func(s):\n    n = len(s)\n    s += s\n    for i in range(1, n+1):\n        if n % i == 0:\n            if s[:i] * (n//i) == s:\n                return i\n    return n\n"}
{"task_id": 7, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s,ch): \n    '''\n    WRITE A PYTHON FUNCTION TO REMOVE FIRST AND LAST OCCURRENCE OF A GIVEN CHARACTER FROM THE STRING.\n    '''\n"}], "response": "```python\ndef func(s, ch):\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    \n    if first_occurrence != -1 and last_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n    \n    return s\n```", "response_code": "\ndef func(s, ch):\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    \n    if first_occurrence != -1 and last_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n    \n    return s\n"}
{"task_id": 8, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(M):\n    '''\n    WRITE A FUNCTION TO SORT A GIVEN MATRIX IN ASCENDING ORDER ACCORDING TO THE SUM OF ITS ROWS.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(M):\n    row_sums = np.sum(M, axis=1)\n    sorted_indices = np.argsort(row_sums)\n    sorted_M = M[sorted_indices]\n    \n    return sorted_M\n```", "response_code": "\nimport numpy as np\n\ndef func(M):\n    row_sums = np.sum(M, axis=1)\n    sorted_indices = np.argsort(row_sums)\n    sorted_M = M[sorted_indices]\n    \n    return sorted_M\n"}
{"task_id": 9, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l,b,h) : \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE VOLUME OF A TRIANGULAR PRISM.\n    '''\n"}], "response": "```python\ndef func(l, b, h):\n    return 0.5 * l * b * h\n```", "response_code": "\ndef func(l, b, h):\n    return 0.5 * l * b * h\n"}
{"task_id": 10, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    WRITE A FUNCTION TO FIND SEQUENCES OF LOWERCASE LETTERS JOINED WITH AN UNDERSCORE.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'[a-z]+_[a-z]+'\n    sequences = re.findall(pattern, text)\n    return sequences", "response_code": "import re\n\ndef func(text):\n    pattern = r'[a-z]+_[a-z]+'\n    sequences = re.findall(pattern, text)\n    return sequences"}
{"task_id": 11, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a):\n    '''\n    WRITE A FUNCTION TO FIND THE PERIMETER OF A SQUARE.\n    '''\n"}], "response": "```python\ndef find_perimeter_of_square(side_length):\n    return 4 * side_length\n```", "response_code": "\ndef find_perimeter_of_square(side_length):\n    return 4 * side_length\n"}
{"task_id": 12, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "NO_OF_CHARS = 256\ndef func(string): \n    '''\n    WRITE A FUNCTION TO REMOVE CHARACTERS FROM THE FIRST STRING WHICH ARE PRESENT IN THE SECOND STRING.\n    '''\n"}], "response": "```python\nNO_OF_CHARS = 256\n\ndef func(string): \n    '''\n    Function to remove characters from the first string which are present in the second string.\n    '''\n```", "response_code": "\nNO_OF_CHARS = 256\n\ndef func(string): \n    '''\n    Function to remove characters from the first string which are present in the second string.\n    '''\n"}
{"task_id": 13, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arraynums):\n    '''\n    WRITE A FUNCTION TO FIND WHETHER A GIVEN ARRAY OF INTEGERS CONTAINS ANY DUPLICATE ELEMENT.\n    '''\n"}], "response": "```python\ndef func(arraynums):\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True\n```", "response_code": "\ndef func(arraynums):\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True\n"}
{"task_id": 14, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x): \n    '''\n    WRITE A FUNCTION TO CHECK IF THE GIVEN NUMBER IS WOODBALL OR NOT.\n    '''\n"}], "response": "```python\ndef func(x):\n    if x < 0:\n        return False\n    else:\n        return (int(x ** 0.5) ** 2 == x)\n```", "response_code": "\ndef func(x):\n    if x < 0:\n        return False\n    else:\n        return (int(x ** 0.5) ** 2 == x)\n"}
{"task_id": 15, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(num):    \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK IF A GIVEN NUMBER IS ONE LESS THAN TWICE ITS REVERSE.\n    '''\n"}], "response": "def func(num):\n    reverse_num = int(str(num)[::-1])\n    if num == 2 * reverse_num - 1:\n        return True\n    else:\n        return False", "response_code": "def func(num):\n    reverse_num = int(str(num)[::-1])\n    if num == 2 * reverse_num - 1:\n        return True\n    else:\n        return False"}
{"task_id": 16, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr) : \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE LARGEST NUMBER THAT CAN BE FORMED WITH THE GIVEN DIGITS.\n    '''\n"}], "response": "from itertools import permutations\n\ndef func(arr):\n    perm = permutations(arr)\n    max_num = 0\n    for p in perm:\n        num = int(''.join(p))\n        if num > max_num:\n            max_num = num\n    return max_num", "response_code": "from itertools import permutations\n\ndef func(arr):\n    perm = permutations(arr)\n    max_num = 0\n    for p in perm:\n        num = int(''.join(p))\n        if num > max_num:\n            max_num = num\n    return max_num"}
{"task_id": 17, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x,y): \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER THE GIVEN TWO INTEGERS HAVE OPPOSITE SIGN OR NOT.\n    '''\n"}], "response": "def check_opposite_sign(x, y):\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False", "response_code": "def check_opposite_sign(x, y):\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False"}
{"task_id": 18, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A FUNCTION TO FIND THE NTH OCTAGONAL NUMBER.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n * (3 * n - 2)\n```", "response_code": "\ndef func(n):\n    return n * (3 * n - 2)\n"}
{"task_id": 19, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import defaultdict\ndef func(s):\n    '''\n    WRITE A PYTHON FUNCTION TO COUNT NUMBER OF SUBSTRINGS WITH THE SUM OF DIGITS EQUAL TO THEIR LENGTH.\n    '''\n"}], "response": "from collections import defaultdict\n\ndef func(s):\n    count = 0\n    prefix_sum = defaultdict(int)\n    prefix_sum[0] = 1\n    curr_sum = 0\n    \n    for i in range(len(s)):\n        curr_sum += int(s[i])\n        count += prefix_sum[curr_sum - i - 1]\n        prefix_sum[curr_sum - i - 1] += 1\n    \n    return count", "response_code": "from collections import defaultdict\n\ndef func(s):\n    count = 0\n    prefix_sum = defaultdict(int)\n    prefix_sum[0] = 1\n    curr_sum = 0\n    \n    for i in range(len(s)):\n        curr_sum += int(s[i])\n        count += prefix_sum[curr_sum - i - 1]\n        prefix_sum[curr_sum - i - 1] += 1\n    \n    return count"}
{"task_id": 20, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(xs):\n    '''\n    WRITE A PYTHON FUNCTION TO FIND SMALLEST NUMBER IN A LIST.\n    '''\n"}], "response": "```python\ndef func(xs):\n    return min(xs)\n```", "response_code": "\ndef func(xs):\n    return min(xs)\n"}
{"task_id": 21, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    WRITE A FUNCTION TO FIND THE MAXIMUM DIFFERENCE BETWEEN AVAILABLE PAIRS IN THE GIVEN TUPLE LIST.\n    '''\n"}], "response": "def func(test_list):\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff", "response_code": "def func(test_list):\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"}
{"task_id": 22, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(subjectmarks):\n    '''\n    WRITE A FUNCTION TO SORT A LIST OF TUPLES USING LAMBDA.\n    '''\n"}], "response": "```python\ndef func(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])\n```", "response_code": "\ndef func(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])\n"}
{"task_id": 23, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(data_list):\n    '''\n    WRITE A FUNCTION OF RECURSION LIST SUM.\n    '''\n"}], "response": "```python\ndef func(data_list):\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + func(data_list[1:])\n```", "response_code": "\ndef func(data_list):\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + func(data_list[1:])\n"}
{"task_id": 24, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list):\n    '''\n    WRITE A PYTHON FUNCTION TO COUNT POSITIVE NUMBERS IN A LIST.\n    '''\n"}], "response": "def count_positive_numbers(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count", "response_code": "def count_positive_numbers(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": 25, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):   \n    '''\n    WRITE A FUNCTION TO FIND THE NUMBER OF WAYS TO PARTITION A SET OF BELL NUMBERS.\n    '''\n"}], "response": "```python\nfrom sympy import bell\n\ndef func(n):\n    return bell(n)\n```", "response_code": "\nfrom sympy import bell\n\ndef func(n):\n    return bell(n)\n"}
{"task_id": 26, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(A): \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER THE GIVEN ARRAY IS MONOTONIC OR NOT.\n    '''\n"}], "response": "```python\ndef is_monotonic(A):\n    increasing = all(A[i] <= A[i + 1] for i in range(len(A) - 1))\n    decreasing = all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n    return increasing or decreasing\n```", "response_code": "\ndef is_monotonic(A):\n    increasing = all(A[i] <= A[i + 1] for i in range(len(A) - 1))\n    decreasing = all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n    return increasing or decreasing\n"}
{"task_id": 27, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l, s):\n    '''\n    WRITE A FUNCTION TO CHECK WHETHER A LIST CONTAINS THE GIVEN SUBLIST OR NOT.\n    '''\n"}], "response": "```python\ndef func(l, s):\n    '''\n    WRITE A FUNCTION TO CHECK WHETHER A LIST CONTAINS THE GIVEN SUBLIST OR NOT.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n```", "response_code": "\ndef func(l, s):\n    '''\n    WRITE A FUNCTION TO CHECK WHETHER A LIST CONTAINS THE GIVEN SUBLIST OR NOT.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"}
{"task_id": 28, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(Input):\n    '''\n    WRITE A FUNCTION TO FIND WHETHER ALL THE GIVEN TUPLES HAVE EQUAL LENGTH OR NOT.\n    '''\n"}], "response": "def func(Input):\n    return all(len(t) == len(Input[0]) for t in Input)", "response_code": "def func(Input):\n    return all(len(t) == len(Input[0]) for t in Input)"}
{"task_id": 29, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    WRITE A FUNCTION TO SORT A LIST OF ELEMENTS USING COMB SORT.\n    '''\n"}], "response": "```python\ndef func(nums):\n    def getNextGap(gap):\n        gap = (gap * 10) // 13\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = getNextGap(gap)\n        swapped = False\n\n        for i in range(0, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums\n```", "response_code": "\ndef func(nums):\n    def getNextGap(gap):\n        gap = (gap * 10) // 13\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = getNextGap(gap)\n        swapped = False\n\n        for i in range(0, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums\n"}
{"task_id": 30, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER THE GIVEN NUMBER CAN BE REPRESENTED AS DIFFERENCE OF TWO SQUARES OR NOT.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(n):\n    '''\n    Check whether the given number can be represented as difference of two squares or not.\n    '''\n    for i in range(1, int(math.sqrt(n)) + 1):\n        j = int(math.sqrt(n + i*i))\n        if j*j - i*i == n:\n            return True\n    return False\n```", "response_code": "\nimport math\n\ndef func(n):\n    '''\n    Check whether the given number can be represented as difference of two squares or not.\n    '''\n    for i in range(1, int(math.sqrt(n)) + 1):\n        j = int(math.sqrt(n + i*i))\n        if j*j - i*i == n:\n            return True\n    return False\n"}
{"task_id": 31, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(colors, patterns):    \n    '''\n    WRITE A FUNCTION TO CHECK WHETHER IT FOLLOWS THE SEQUENCE GIVEN IN THE PATTERNS ARRAY.\n    '''\n"}], "response": "```python\ndef func(colors, patterns):\n    return all(color == patterns[i] for i, color in enumerate(colors))\n```", "response_code": "\ndef func(colors, patterns):\n    return all(color == patterns[i] for i, color in enumerate(colors))\n"}
{"task_id": 32, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list, K):\n    '''\n    WRITE A FUNCTION TO FIND TUPLES WHICH HAVE ALL ELEMENTS DIVISIBLE BY K FROM THE GIVEN LIST OF TUPLES.\n    '''\n"}], "response": "```python\ndef func(test_list, K):\n    return [tup for tup in test_list if all(ele % K == 0 for ele in tup)]\n```", "response_code": "\ndef func(test_list, K):\n    return [tup for tup in test_list if all(ele % K == 0 for ele in tup)]\n"}
{"task_id": 33, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE DIFFERENCE BETWEEN SUM OF EVEN AND ODD DIGITS.\n    '''\n"}], "response": "```python\ndef func(n):\n    even_sum = 0\n    odd_sum = 0\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    return even_sum - odd_sum\n```", "response_code": "\ndef func(n):\n    even_sum = 0\n    odd_sum = 0\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    return even_sum - odd_sum\n"}
{"task_id": 34, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s): \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER THE LENGTH OF THE WORD IS ODD OR NOT.\n    '''\n"}], "response": "def is_odd_length(s):\n    return len(s) % 2 != 0", "response_code": "def is_odd_length(s):\n    return len(s) % 2 != 0"}
{"task_id": 35, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A FUNCTION TO FIND THE NTH TETRAHEDRAL NUMBER.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n * (n + 1) * (n + 2) // 6\n```", "response_code": "\ndef func(n):\n    return n * (n + 1) * (n + 2) // 6\n"}
{"task_id": 36, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(r):\n    '''\n    WRITE A FUNCTION TO FIND THE VOLUME OF A SPHERE.\n    '''\n"}], "response": "import math\n\ndef func(r):\n    volume = (4/3) * math.pi * r**3\n    return volume", "response_code": "import math\n\ndef func(r):\n    volume = (4/3) * math.pi * r**3\n    return volume"}
{"task_id": 37, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(strr):  \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE CHARACTER MADE BY ADDING ALL THE CHARACTERS OF THE GIVEN STRING.\n    '''\n"}], "response": "```python\ndef func(strr):\n    return chr(sum(ord(char) for char in strr))\n```", "response_code": "\ndef func(strr):\n    return chr(sum(ord(char) for char in strr))\n"}
{"task_id": 38, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A FUNCTION TO FIND THE N-TH NUMBER IN NEWMAN CONWAY SEQUENCE.\n    '''\n"}], "response": "def newman_conway(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    else:\n        sequence = [0] * (n + 1)\n        sequence[1] = 1\n        sequence[2] = 1\n        for i in range(3, n + 1):\n            sequence[i] = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]]\n        return sequence[n]", "response_code": "def newman_conway(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    else:\n        sequence = [0] * (n + 1)\n        sequence[1] = 1\n        sequence[2] = 1\n        for i in range(3, n + 1):\n            sequence[i] = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]]\n        return sequence[n]"}
{"task_id": 39, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(r):\n    '''\n    WRITE A FUNCTION TO FIND THE SURFACE AREA OF A SPHERE.\n    '''\n"}], "response": "import math\n\ndef func(r):\n    return 4 * math.pi * r**2", "response_code": "import math\n\ndef func(r):\n    return 4 * math.pi * r**2"}
{"task_id": 40, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    WRITE A FUNCTION TO FIND NTH CENTERED HEXAGONAL NUMBER.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n * (2 * n - 1)\n```", "response_code": "\ndef func(n):\n    return n * (2 * n - 1)\n"}
{"task_id": 41, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import collections as ct\ndef func(dict1,dict2, dict3):\n    '''\n    WRITE A FUNCTION TO MERGE THREE DICTIONARIES INTO A SINGLE EXPRESSION.\n    '''\n"}], "response": "import collections as ct\n\ndef func(dict1, dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "response_code": "import collections as ct\n\ndef func(dict1, dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict"}
{"task_id": 42, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import collections\ndef func(list1):\n    '''\n    WRITE A FUNCTION TO GET THE FREQUENCY OF THE ELEMENTS IN A LIST.\n    '''\n"}], "response": "import collections\n\ndef func(list1):\n    return collections.Counter(list1)", "response_code": "import collections\n\ndef func(list1):\n    return collections.Counter(list1)"}
{"task_id": 43, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(N):\n    '''\n    WRITE A FUNCTION TO FIND THE CLOSEST SMALLER NUMBER THAN N.\n    '''\n"}], "response": "```python\ndef func(N):\n    return N - 1\n```", "response_code": "\ndef func(N):\n    return N - 1\n"}
{"task_id": 44, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE LENGTH OF THE LONGEST WORD.\n    '''\n"}], "response": "```python\ndef func(list1):\n    return max(len(word) for word in list1)\n```", "response_code": "\ndef func(list1):\n    return max(len(word) for word in list1)\n"}
{"task_id": 45, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1, sub_str):\n    '''\n    WRITE A FUNCTION TO CHECK IF A SUBSTRING IS PRESENT IN A GIVEN LIST OF STRING VALUES.\n    '''\n"}], "response": "def func(str1, sub_str):\n    return sub_str in str1", "response_code": "def func(str1, sub_str):\n    return sub_str in str1"}
{"task_id": 46, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A FUNCTION TO CHECK WHETHER THE GIVEN NUMBER IS UNDULATING OR NOT.\n    '''\n"}], "response": "```python\ndef func(n):\n    num_str = str(n)\n    if len(num_str) < 3:\n        return False\n    for i in range(1, len(num_str) - 1):\n        if not ((num_str[i-1] < num_str[i] > num_str[i+1]) or (num_str[i-1] > num_str[i] < num_str[i+1])):\n            return False\n    return True\n```", "response_code": "\ndef func(n):\n    num_str = str(n)\n    if len(num_str) < 3:\n        return False\n    for i in range(1, len(num_str) - 1):\n        if not ((num_str[i-1] < num_str[i] > num_str[i+1]) or (num_str[i-1] > num_str[i] < num_str[i+1])):\n            return False\n    return True\n"}
{"task_id": 47, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,b):\n    '''\n    WRITE A FUNCTION TO CALCULATE THE VALUE OF 'A' TO THE POWER 'B'.\n    '''\n"}], "response": "```python\ndef func(a, b):\n    return a ** b\n```", "response_code": "\ndef func(a, b):\n    return a ** b\n"}
{"task_id": 48, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from operator import itemgetter \ndef func(test_list):\n    '''\n    WRITE A FUNCTION TO EXTRACT THE INDEX MINIMUM VALUE RECORD FROM THE GIVEN TUPLES.\n    '''\n"}], "response": "from operator import itemgetter\n\ndef func(test_list):\n    return min(enumerate(test_list), key=itemgetter(1))[0]", "response_code": "from operator import itemgetter\n\ndef func(test_list):\n    return min(enumerate(test_list), key=itemgetter(1))[0]"}
{"task_id": 49, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst):  \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE MINIMUM LENGTH OF SUBLIST.\n    '''\n"}], "response": "```python\ndef func(lst):\n    min_length = len(lst)\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if sum(lst[i:j]) == 0:\n                min_length = min(min_length, j-i)\n    return min_length\n```", "response_code": "\ndef func(lst):\n    min_length = len(lst)\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if sum(lst[i:j]) == 0:\n                min_length = min(min_length, j-i)\n    return min_length\n"}
{"task_id": 50, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE NUMBER OF DIVISORS OF A GIVEN INTEGER.\n    '''\n"}], "response": "```python\ndef func(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n```", "response_code": "\ndef func(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"}
{"task_id": 51, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A FUNCTION TO FIND FREQUENCY COUNT OF LIST OF LISTS.\n    '''\n"}], "response": "```python\nfrom collections import Counter\n\ndef func(list1):\n    '''\n    WRITE A FUNCTION TO FIND FREQUENCY COUNT OF LIST OF LISTS.\n    '''\n    return dict(Counter(tuple(item) for item in list1))\n```", "response_code": "\nfrom collections import Counter\n\ndef func(list1):\n    '''\n    WRITE A FUNCTION TO FIND FREQUENCY COUNT OF LIST OF LISTS.\n    '''\n    return dict(Counter(tuple(item) for item in list1))\n"}
{"task_id": 52, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(numbers):  \n    '''\n    WRITE A FUNCTION TO MULTIPLY ALL THE NUMBERS IN A LIST AND DIVIDE WITH THE LENGTH OF THE LIST.\n    '''\n"}], "response": "```python\ndef func(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n```", "response_code": "\ndef func(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n"}
{"task_id": 53, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A FUNCTION TO CONVERT THE GIVEN DECIMAL NUMBER TO ITS BINARY EQUIVALENT.\n    '''\n"}], "response": "```python\ndef func(n):\n    return bin(n)[2:]\n```", "response_code": "\ndef func(n):\n    return bin(n)[2:]\n"}
{"task_id": 54, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import sys\ndef func(num):\n    '''\n    WRITE A FUNCTION TO FIND THE NEXT SMALLEST PALINDROME OF A SPECIFIED NUMBER.\n    '''\n"}], "response": "import sys\n\ndef func(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n\n    return num", "response_code": "import sys\n\ndef func(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n\n    return num"}
{"task_id": 55, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr, k):\n    '''\n    WRITE A FUNCTION TO FIND THE KTH ELEMENT IN THE GIVEN ARRAY.\n    '''\n"}], "response": "```python\ndef func(arr, k):\n    arr.sort()\n    return arr[k-1]\n```", "response_code": "\ndef func(arr, k):\n    arr.sort()\n    return arr[k-1]\n"}
{"task_id": 56, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(word):\n    '''\n    WRITE A FUNCTION TO CONVERT SNAKE CASE STRING TO CAMEL CASE STRING.\n    '''\n"}], "response": "```python\ndef snake_to_camel(word):\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n\n# Example Usage:\n# print(snake_to_camel('hello_world'))  # Output: 'HelloWorld'\n```", "response_code": "\ndef snake_to_camel(word):\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n\n# Example Usage:\n# print(snake_to_camel('hello_world'))  # Output: 'HelloWorld'\n"}
{"task_id": 57, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n, m): \n    '''\n    WRITE A FUNCTION TO FIND EULERIAN NUMBER A(N, M).\n    '''\n"}], "response": "```python\nfrom math import comb\n\ndef func(n, m): \n    return comb(n-1, m-1) * (n-m+1)\n```", "response_code": "\nfrom math import comb\n\ndef func(n, m): \n    return comb(n-1, m-1) * (n-m+1)\n"}
{"task_id": 58, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(input_list):\n    '''\n    WRITE A FUNCTION TO SORT EACH SUBLIST OF STRINGS IN A GIVEN LIST OF LISTS USING LAMBDA FUNCTION.\n    '''\n"}], "response": "```python\ndef func(input_list):\n    return [sorted(sublist, key=lambda x: x) for sublist in input_list]\n```", "response_code": "\ndef func(input_list):\n    return [sorted(sublist, key=lambda x: x) for sublist in input_list]\n"}
{"task_id": 59, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst):   \n    '''\n    WRITE A PYTHON FUNCTION TO COUNT TRUE BOOLEANS IN THE GIVEN LIST.\n    '''\n"}], "response": "```python\ndef func(lst):\n    return sum(1 for x in lst if x is True)\n```", "response_code": "\ndef func(lst):\n    return sum(1 for x in lst if x is True)\n"}
{"task_id": 60, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list, test_tup):\n    '''\n    WRITE A FUNCTION TO ADD THE GIVEN LIST TO THE GIVEN TUPLES.\n    '''\n"}], "response": "def func(test_list, test_tup):\n    return [tup + (item,) for item in test_list for tup in test_tup]", "response_code": "def func(test_list, test_tup):\n    return [tup + (item,) for item in test_list for tup in test_tup]"}
{"task_id": 61, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq\ndef func(num1,num2,num3):\n    '''\n    WRITE A FUNCTION TO MERGE MULTIPLE SORTED INPUTS INTO A SINGLE SORTED ITERATOR USING HEAP QUEUE ALGORITHM.\n    '''\n"}], "response": "import heapq\n\ndef func(num1, num2, num3):\n    merged_list = heapq.merge(num1, num2, num3)\n    return merged_list", "response_code": "import heapq\n\ndef func(num1, num2, num3):\n    merged_list = heapq.merge(num1, num2, num3)\n    return merged_list"}
{"task_id": 62, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s,n): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE COUNT OF ROTATIONS OF A BINARY STRING WITH ODD VALUE.\n    '''\n"}], "response": "```python\ndef func(s, n):\n    count = 0\n    for i in range(n):\n        if int(s, 2) % 2 != 0:\n            break\n        s = s[-1] + s[:-1]\n        count += 1\n    return count\n```", "response_code": "\ndef func(s, n):\n    count = 0\n    for i in range(n):\n        if int(s, 2) % 2 != 0:\n            break\n        s = s[-1] + s[:-1]\n        count += 1\n    return count\n"}
{"task_id": 63, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nestedlist):\n    '''\n    WRITE A FUNCTION TO FIND COMMON ELEMENTS IN GIVEN NESTED LISTS. * LIST ITEM * LIST ITEM * LIST ITEM * LIST ITEM\n    '''\n"}], "response": "```python\ndef func(nestedlist):\n    '''\n    Function to find common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return []\n\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n\n    return list(common_elements)\n```", "response_code": "\ndef func(nestedlist):\n    '''\n    Function to find common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return []\n\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n\n    return list(common_elements)\n"}
{"task_id": 64, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(text):\n    '''\n    WRITE A FUNCTION TO CHECK IF A STRING REPRESENTS AN INTEGER OR NOT.\n    '''\n"}], "response": "```python\ndef func(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n```", "response_code": "\ndef func(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"}
{"task_id": 65, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A FUNCTION TO CHECK WHETHER ALL DICTIONARIES IN A LIST ARE EMPTY OR NOT.\n    '''\n"}], "response": "def func(list1):\n    for d in list1:\n        if d:\n            return False\n    return True", "response_code": "def func(list1):\n    for d in list1:\n        if d:\n            return False\n    return True"}
{"task_id": 66, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    WRITE A FUNCTION TO CONVERT A GIVEN TUPLE OF POSITIVE INTEGERS INTO AN INTEGER.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return int(''.join(map(str, nums)))\n```", "response_code": "\ndef func(nums):\n    return int(''.join(map(str, nums)))\n"}
{"task_id": 67, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    WRITE A FUNCTION TO CONVERT ALL POSSIBLE CONVERTIBLE ELEMENTS IN THE LIST TO FLOAT.\n    '''\n"}], "response": "```python\ndef func(test_list):\n    return [float(i) if i.replace('.', '', 1).isdigit() else i for i in test_list]\n```", "response_code": "\ndef func(test_list):\n    return [float(i) if i.replace('.', '', 1).isdigit() else i for i in test_list]\n"}
{"task_id": 68, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(string): \n    '''\n    WRITE A FUNCTION TO CONVERT A STRING TO A LIST.\n    '''\n"}], "response": "def func(string):\n    return list(string)", "response_code": "def func(string):\n    return list(string)"}
{"task_id": 69, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):\n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE ELEMENT THAT APPEARS ONLY ONCE IN A SORTED ARRAY.\n    '''\n"}], "response": "```python\ndef func(arr):\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1 or arr[i] != arr[i + 1]:\n            return arr[i]\n    return None\n```", "response_code": "\ndef func(arr):\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1 or arr[i] != arr[i + 1]:\n            return arr[i]\n    return None\n"}
{"task_id": 70, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A FUNCTION TO FIND THE MAXIMUM PRODUCT FROM THE PAIRS OF TUPLES WITHIN A GIVEN LIST.\n    '''\n"}], "response": "```python\ndef func(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product\n```", "response_code": "\ndef func(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product\n"}
{"task_id": 71, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(limit):\n    '''\n    WRITE A FUNCTION TO SUM ALL AMICABLE NUMBERS FROM 1 TO A SPECIFIED NUMBER.\n    '''\n"}], "response": "```python\ndef func(limit):\n    def sum_divisors(n):\n        divisors = [1]\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                divisors.append(i)\n                if i != n // i:\n                    divisors.append(n // i)\n        return sum(divisors)\n\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i not in amicable_numbers:\n            sum1 = sum_divisors(i)\n            sum2 = sum_divisors(sum1)\n            if i == sum2 and i != sum1:\n                amicable_numbers.extend([i, sum1])\n\n    return sum(amicable_numbers)\n```", "response_code": "\ndef func(limit):\n    def sum_divisors(n):\n        divisors = [1]\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                divisors.append(i)\n                if i != n // i:\n                    divisors.append(n // i)\n        return sum(divisors)\n\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i not in amicable_numbers:\n            sum1 = sum_divisors(i)\n            sum2 = sum_divisors(sum1)\n            if i == sum2 and i != sum1:\n                amicable_numbers.extend([i, sum1])\n\n    return sum(amicable_numbers)\n"}
{"task_id": 72, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import cmath\ndef func(a,b):\n    '''\n    WRITE A FUNCTION TO GET THE ANGLE OF A COMPLEX NUMBER.\n    '''\n"}], "response": "import cmath\n\ndef func(a, b):\n    angle = cmath.phase(complex(a, b))\n    return angle", "response_code": "import cmath\n\ndef func(a, b):\n    angle = cmath.phase(complex(a, b))\n    return angle"}
{"task_id": 73, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(string): \n    '''\n    WRITE A FUNCTION TO FIND THE MAXIMUM DIFFERENCE BETWEEN THE NUMBER OF 0S AND NUMBER OF 1S IN ANY SUB-STRING OF THE GIVEN BINARY STRING.\n    '''\n"}], "response": "```python\ndef func(string): \n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    diff = 0\n    \n    for char in string: \n        if char == '0': \n            count_0 += 1\n        else: \n            count_1 += 1\n        \n        diff = count_0 - count_1\n        if diff > max_diff: \n            max_diff = diff\n    \n    return max_diff\n```", "response_code": "\ndef func(string): \n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    diff = 0\n    \n    for char in string: \n        if char == '0': \n            count_0 += 1\n        else: \n            count_1 += 1\n        \n        diff = count_0 - count_1\n        if diff > max_diff: \n            max_diff = diff\n    \n    return max_diff\n"}
{"task_id": 74, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,b): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SUM OF COMMON DIVISORS OF TWO GIVEN NUMBERS.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(a, b):\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    \n    return sum(common_divisors)\n```", "response_code": "\nimport math\n\ndef func(a, b):\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    \n    return sum(common_divisors)\n"}
{"task_id": 75, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x, y):\n    '''\n    WRITE A FUNCTION TO MULTIPLY TWO INTEGERS WITHOUT USING THE * OPERATOR IN PYTHON.\n    '''\n"}], "response": "```python\ndef func(x, y):\n    if y == 0:\n        return 0\n    if y > 0:\n        return x + func(x, y - 1)\n    if y < 0:\n        return -func(x, -y)\n```", "response_code": "\ndef func(x, y):\n    if y == 0:\n        return 0\n    if y > 0:\n        return x + func(x, y - 1)\n    if y < 0:\n        return -func(x, -y)\n"}
{"task_id": 76, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n, str):\n    '''\n    WRITE A FUNCTION TO SHORTLIST WORDS THAT ARE LONGER THAN N FROM A GIVEN LIST OF WORDS.\n    '''\n"}], "response": "def func(n, word_list):\n    return [word for word in word_list if len(word) > n]", "response_code": "def func(n, word_list):\n    return [word for word in word_list if len(word) > n]"}
{"task_id": 77, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(my_matrix):\n    '''\n    WRITE A FUNCTION TO CALCULATE MAGIC SQUARE.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(my_matrix):\n    n = len(my_matrix)\n    magic_sum = n * (n**2 + 1) // 2\n\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in np.transpose(my_matrix)]\n    diag_sum1 = sum(my_matrix[i][i] for i in range(n))\n    diag_sum2 = sum(my_matrix[i][n-1-i] for i in range(n))\n\n    if (all(sum == magic_sum for sum in row_sums) and\n        all(sum == magic_sum for sum in col_sums) and\n        diag_sum1 == magic_sum and diag_sum2 == magic_sum):\n        return True\n    else:\n        return False\n```", "response_code": "\nimport numpy as np\n\ndef func(my_matrix):\n    n = len(my_matrix)\n    magic_sum = n * (n**2 + 1) // 2\n\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in np.transpose(my_matrix)]\n    diag_sum1 = sum(my_matrix[i][i] for i in range(n))\n    diag_sum2 = sum(my_matrix[i][n-1-i] for i in range(n))\n\n    if (all(sum == magic_sum for sum in row_sums) and\n        all(sum == magic_sum for sum in col_sums) and\n        diag_sum1 == magic_sum and diag_sum2 == magic_sum):\n        return True\n    else:\n        return False\n"}
{"task_id": 78, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import defaultdict\ndef func(nums):\n    '''\n    WRITE A FUNCTION TO FIND THE ITEM WITH MAXIMUM FREQUENCY IN A GIVEN LIST.\n    '''\n"}], "response": "from collections import defaultdict\n\ndef func(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq_item = max(freq, key=freq.get)\n    return max_freq_item", "response_code": "from collections import defaultdict\n\ndef func(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq_item = max(freq, key=freq.get)\n    return max_freq_item"}
{"task_id": 79, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1):\n    '''\n    WRITE A PYTHON FUNCTION TO REVERSE ONLY THE VOWELS OF A GIVEN STRING.\n    '''\n"}], "response": "```python\ndef reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    left, right = 0, len(str_list) - 1\n    \n    while left < right:\n        if str_list[left] in vowels and str_list[right] in vowels:\n            str_list[left], str_list[right] = str_list[right], str_list[left]\n            left += 1\n            right -= 1\n        elif str_list[left] in vowels:\n            right -= 1\n        elif str_list[right] in vowels:\n            left += 1\n        else:\n            left += 1\n            right -= 1\n    \n    return ''.join(str_list)\n```", "response_code": "\ndef reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    left, right = 0, len(str_list) - 1\n    \n    while left < right:\n        if str_list[left] in vowels and str_list[right] in vowels:\n            str_list[left], str_list[right] = str_list[right], str_list[left]\n            left += 1\n            right -= 1\n        elif str_list[left] in vowels:\n            right -= 1\n        elif str_list[right] in vowels:\n            left += 1\n        else:\n            left += 1\n            right -= 1\n    \n    return ''.join(str_list)\n"}
{"task_id": 80, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(tup1):\n    '''\n    WRITE A FUNCTION TO CONVERT TUPLE TO A STRING.\n    '''\n"}], "response": "```python\ndef func(tup1):\n    return ''.join(map(str, tup1))\n```", "response_code": "\ndef func(tup1):\n    return ''.join(map(str, tup1))\n"}
{"task_id": 81, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    WRITE A FUNCTION TO CALCULATE THE SUM OF THE NEGATIVE NUMBERS OF A GIVEN LIST OF NUMBERS USING LAMBDA FUNCTION.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return sum(filter(lambda x: x < 0, nums))\n```", "response_code": "\ndef func(nums):\n    return sum(filter(lambda x: x < 0, nums))\n"}
{"task_id": 82, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A FUNCTION TO FIND THE NTH HEXAGONAL NUMBER.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n * (2 * n - 1)\n```", "response_code": "\ndef func(n):\n    return n * (2 * n - 1)\n"}
{"task_id": 83, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from array import array\ndef func(nums):\n    '''\n    WRITE A FUNCTION TO FIND THE RATIO OF ZEROES IN AN ARRAY OF INTEGERS.\n    '''\n"}], "response": "```python\nfrom array import array\n\ndef func(nums):\n    if not nums:\n        return 0.0\n    \n    count_zeros = nums.count(0)\n    ratio_zeros = count_zeros / len(nums)\n    \n    return ratio_zeros\n```", "response_code": "\nfrom array import array\n\ndef func(nums):\n    if not nums:\n        return 0.0\n    \n    count_zeros = nums.count(0)\n    ratio_zeros = count_zeros / len(nums)\n    \n    return ratio_zeros\n"}
{"task_id": 84, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER THE GIVEN NUMBER CAN BE REPRESENTED AS SUM OF NON-ZERO POWERS OF 2 OR NOT.\n    '''\n"}], "response": "```python\ndef func(n):\n    if n <= 0:\n        return False\n    binary = bin(n)[2:]\n    for digit in binary:\n        if digit != '0' and digit != '1':\n            return False\n    return True\n```", "response_code": "\ndef func(n):\n    if n <= 0:\n        return False\n    binary = bin(n)[2:]\n    for digit in binary:\n        if digit != '0' and digit != '1':\n            return False\n    return True\n"}
{"task_id": 85, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(r):\n    '''\n    WRITE A FUNCTION TO FIND THE CIRCUMFERENCE OF A CIRCLE.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(r):\n    return 2 * math.pi * r\n```", "response_code": "\nimport math\n\ndef func(r):\n    return 2 * math.pi * r\n"}
{"task_id": 86, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    WRITE A FUNCTION TO EXTRACT ELEMENTS THAT OCCUR SINGLY IN THE GIVEN TUPLE LIST.\n    '''\n"}], "response": "from collections import Counter\n\ndef func(test_list):\n    count_dict = Counter([item for sublist in test_list for item in sublist])\n    return [key for key, value in count_dict.items() if value == 1]", "response_code": "from collections import Counter\n\ndef func(test_list):\n    count_dict = Counter([item for sublist in test_list for item in sublist])\n    return [key for key, value in count_dict.items() if value == 1]"}
{"task_id": 87, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    WRITE A FUNCTION TO SORT A LIST OF ELEMENTS USING PANCAKE SORT.\n    '''\n"}], "response": "```python\ndef pancake_sort(arr):\n    def flip(sublist, k):\n        i = 0\n        while i < k / 2:\n            sublist[i], sublist[k - i - 1] = sublist[k - i - 1], sublist[i]\n            i += 1\n\n    def find_max_index(arr, n):\n        mi = 0\n        for i in range(0, n):\n            if arr[i] > arr[mi]:\n                mi = i\n        return mi\n\n    def pancake_sort_helper(arr, n):\n        curr_size = n\n        while curr_size > 1:\n            mi = find_max_index(arr, curr_size)\n            if mi != curr_size - 1:\n                flip(arr, mi + 1)\n                flip(arr, curr_size)\n            curr_size -= 1\n\n    pancake_sort_helper(arr, len(arr))\n    return arr\n```", "response_code": "\ndef pancake_sort(arr):\n    def flip(sublist, k):\n        i = 0\n        while i < k / 2:\n            sublist[i], sublist[k - i - 1] = sublist[k - i - 1], sublist[i]\n            i += 1\n\n    def find_max_index(arr, n):\n        mi = 0\n        for i in range(0, n):\n            if arr[i] > arr[mi]:\n                mi = i\n        return mi\n\n    def pancake_sort_helper(arr, n):\n        curr_size = n\n        while curr_size > 1:\n            mi = find_max_index(arr, curr_size)\n            if mi != curr_size - 1:\n                flip(arr, mi + 1)\n                flip(arr, curr_size)\n            curr_size -= 1\n\n    pancake_sort_helper(arr, len(arr))\n    return arr\n"}
{"task_id": 88, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1,list2,list3):\n    '''\n    WRITE A FUNCTION TO COUNT THE SAME PAIR IN THREE GIVEN LISTS.\n    '''\n"}], "response": "```python\nfrom collections import Counter\n\ndef func(list1, list2, list3):\n    count = 0\n    counter1 = Counter(list1)\n    counter2 = Counter(list2)\n    counter3 = Counter(list3)\n    \n    for key in counter1:\n        count += min(counter1[key], counter2[key], counter3[key])\n    \n    return count\n```", "response_code": "\nfrom collections import Counter\n\ndef func(list1, list2, list3):\n    count = 0\n    counter1 = Counter(list1)\n    counter2 = Counter(list2)\n    counter3 = Counter(list3)\n    \n    for key in counter1:\n        count += min(counter1[key], counter2[key], counter3[key])\n    \n    return count\n"}
{"task_id": 89, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(Input): \n    '''\n    WRITE A FUNCTION TO FIND NUMBER OF LISTS PRESENT IN THE GIVEN TUPLE.\n    '''\n"}], "response": "```python\ndef func(Input): \n    return sum(isinstance(i, list) for i in Input)\n```", "response_code": "\ndef func(Input): \n    return sum(isinstance(i, list) for i in Input)\n"}
{"task_id": 90, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE MAXIMUM DIFFERENCE BETWEEN ANY TWO ELEMENTS IN A GIVEN ARRAY.\n    '''\n"}], "response": "```python\ndef func(arr): \n    return max(arr) - min(arr)\n```", "response_code": "\ndef func(arr): \n    return max(arr) - min(arr)\n"}
{"task_id": 91, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a, b, n):\n    '''\n    WRITE A FUNCTION TO FIND X AND Y THAT SATISFIES AX + BY = N.\n    '''\n"}], "response": "```python\ndef func(a, b, n):\n    '''\n    WRITE A FUNCTION TO FIND X AND Y THAT SATISFIES AX + BY = N.\n    '''\n    def extended_gcd(a, b):\n        if a == 0:\n            return (b, 0, 1)\n        else:\n            g, y, x = extended_gcd(b % a, a)\n            return (g, x - (b // a) * y, y)\n\n    gcd, x, y = extended_gcd(a, b)\n    \n    if n % gcd != 0:\n        return None\n    \n    x *= n // gcd\n    y *= n // gcd\n    \n    return x, y\n```", "response_code": "\ndef func(a, b, n):\n    '''\n    WRITE A FUNCTION TO FIND X AND Y THAT SATISFIES AX + BY = N.\n    '''\n    def extended_gcd(a, b):\n        if a == 0:\n            return (b, 0, 1)\n        else:\n            g, y, x = extended_gcd(b % a, a)\n            return (g, x - (b // a) * y, y)\n\n    gcd, x, y = extended_gcd(a, b)\n    \n    if n % gcd != 0:\n        return None\n    \n    x *= n // gcd\n    y *= n // gcd\n    \n    return x, y\n"}
{"task_id": 92, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1, list2):\n    '''\n    WRITE A FUNCTION TO REMOVE ALL ELEMENTS FROM A GIVEN LIST PRESENT IN ANOTHER LIST.\n    '''\n"}], "response": "```python\ndef func(list1, list2):\n    for item in list2:\n        if item in list1:\n            list1.remove(item)\n```", "response_code": "\ndef func(list1, list2):\n    for item in list2:\n        if item in list1:\n            list1.remove(item)\n"}
{"task_id": 93, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    WRITE A FUNCTION TO CALCULATE THE SUM OF THE POSITIVE INTEGERS OF N+(N-2)+(N-4)... (UNTIL N-X =< 0).\n    '''\n"}], "response": "```python\ndef func(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total\n```", "response_code": "\ndef func(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total\n"}
{"task_id": 94, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from math import tan, pi\ndef func(s, l):\n    '''\n    WRITE A FUNCTION TO CALCULATE THE AREA OF A REGULAR POLYGON.\n    '''\n"}], "response": "```python\nfrom math import tan, pi\n\ndef func(s, l):\n    '''\n    Calculate the area of a regular polygon.\n    \n    Parameters:\n    s (int): Number of sides of the polygon\n    l (int): Length of each side of the polygon\n    \n    Returns:\n    float: Area of the regular polygon\n    '''\n    area = (s * l**2) / (4 * tan(pi/s))\n    return area\n```", "response_code": "\nfrom math import tan, pi\n\ndef func(s, l):\n    '''\n    Calculate the area of a regular polygon.\n    \n    Parameters:\n    s (int): Number of sides of the polygon\n    l (int): Length of each side of the polygon\n    \n    Returns:\n    float: Area of the regular polygon\n    '''\n    area = (s * l**2) / (4 * tan(pi/s))\n    return area\n"}
{"task_id": 95, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math \ndef func(n): \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER THE SUM OF DIVISORS ARE SAME OR NOT.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    sum_divisors = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            sum_divisors += i\n            if n // i != i:\n                sum_divisors += n // i\n\n    return sum_divisors", "response_code": "import math\n\ndef func(n):\n    sum_divisors = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            sum_divisors += i\n            if n // i != i:\n                sum_divisors += n // i\n\n    return sum_divisors"}
{"task_id": 96, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1): \n    '''\n    WRITE A PYTHON FUNCTION TO COUNT CHARACTERS AT SAME POSITION IN A GIVEN STRING (LOWER AND UPPERCASE CHARACTERS) AS IN ENGLISH ALPHABET.\n    '''\n"}], "response": "```python\ndef func(str1): \n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(ord('a') + i) or str1[i].upper() == chr(ord('A') + i):\n            count += 1\n    return count\n```", "response_code": "\ndef func(str1): \n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(ord('a') + i) or str1[i].upper() == chr(ord('A') + i):\n            count += 1\n    return count\n"}
{"task_id": 97, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(A): \n    '''\n    WRITE A PYTHON FUNCTION TO COUNT THE PAIRS WITH XOR AS AN EVEN NUMBER.\n    '''\n"}], "response": "```python\ndef count_pairs_with_even_xor(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n```", "response_code": "\ndef count_pairs_with_even_xor(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"}
{"task_id": 98, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND SMALLEST POWER OF 2 GREATER THAN OR EQUAL TO N.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(n): \n    return 2 ** math.ceil(math.log2(n))\n```", "response_code": "\nimport math\n\ndef func(n): \n    return 2 ** math.ceil(math.log2(n))\n"}
{"task_id": 99, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,x): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE FREQUENCY OF A NUMBER IN A GIVEN ARRAY.\n    '''\n"}], "response": "```python\ndef func(a, x):\n    return a.count(x)\n```", "response_code": "\ndef func(a, x):\n    return a.count(x)\n"}
{"task_id": 100, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1, m, n):                                                                                                                                                                                                \n    '''\n    WRITE A FUNCTION TO FIND SUM OF THE NUMBERS IN A LIST BETWEEN THE INDICES OF A SPECIFIED RANGE.\n    '''\n"}], "response": "```python\ndef func(list1, m, n):\n    return sum(list1[m:n+1])\n```", "response_code": "\ndef func(list1, m, n):\n    return sum(list1[m:n+1])\n"}
{"task_id": 101, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(a):\n    '''\n    WRITE A FUNCTION TO FIND THE PERIMETER OF A PENTAGON.\n    '''\n"}], "response": "import math\n\ndef func(a):\n    perimeter = 5 * a\n    return perimeter", "response_code": "import math\n\ndef func(a):\n    perimeter = 5 * a\n    return perimeter"}
{"task_id": 102, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s):\n    '''\n    WRITE A FUNCTION TO FIND THE OCCURENCE OF CHARACTERS 'STD' IN THE GIVEN STRING.\n    '''\n"}], "response": "```python\ndef func(s):\n    return s.count('STD')\n```", "response_code": "\ndef func(s):\n    return s.count('STD')\n"}
{"task_id": 103, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tuple):\n    '''\n    WRITE A FUNCTION TO CHECK IF ALL THE ELEMENTS IN TUPLE HAVE SAME DATA TYPE OR NOT.\n    '''\n"}], "response": "def func(test_tuple):\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != data_type:\n            return False\n    return True", "response_code": "def func(test_tuple):\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != data_type:\n            return False\n    return True"}
{"task_id": 104, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr, n, x):\n    '''\n    WRITE A FUNCTION TO CHECK FOR MAJORITY ELEMENT IN THE GIVEN SORTED ARRAY.\n    '''\n"}], "response": "from collections import Counter\n\ndef func(arr, n, x):\n    count = Counter(arr)\n    if count[x] > n/2:\n        return True\n    else:\n        return False", "response_code": "from collections import Counter\n\ndef func(arr, n, x):\n    count = Counter(arr)\n    if count[x] > n/2:\n        return True\n    else:\n        return False"}
{"task_id": 105, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A PYTHON FUNCTION TO COUNT SET BITS OF A GIVEN NUMBER.\n    '''\n"}], "response": "```python\ndef count_set_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```", "response_code": "\ndef count_set_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"}
{"task_id": 106, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str):\n    '''\n    WRITE A PYTHON FUNCTION TO REMOVE THE CHARACTERS WHICH HAVE ODD INDEX VALUES OF A GIVEN STRING.\n    '''\n"}], "response": "def remove_odd_index_chars(input_str):\n    return input_str[::2]", "response_code": "def remove_odd_index_chars(input_str):\n    return input_str[::2]"}
{"task_id": 107, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,b,c): \n    '''\n    WRITE A FUNCTION TO FIND MINIMUM OF THREE NUMBERS.\n    '''\n"}], "response": "```python\ndef func(a, b, c):\n    return min(a, b, c)\n```", "response_code": "\ndef func(a, b, c):\n    return min(a, b, c)\n"}
{"task_id": 108, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n,l,r):  \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER ALL THE BITS ARE UNSET IN THE GIVEN RANGE OR NOT.\n    '''\n"}], "response": "```python\ndef func(n, l, r):\n    for i in range(l, r+1):\n        if n & (1 << i):\n            return False\n    return True\n```", "response_code": "\ndef func(n, l, r):\n    for i in range(l, r+1):\n        if n & (1 << i):\n            return False\n    return True\n"}
{"task_id": 109, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr, n):\n    '''\n    WRITE A FUNCTION TO RE-ARRANGE THE ELEMENTS OF THE GIVEN ARRAY SO THAT ALL NEGATIVE ELEMENTS APPEAR BEFORE POSITIVE ONES.\n    '''\n"}], "response": "```python\ndef func(arr, n):\n    return [x for x in arr if x < 0] + [x for x in arr if x >= 0]\n```", "response_code": "\ndef func(arr, n):\n    return [x for x in arr if x < 0] + [x for x in arr if x >= 0]\n"}
{"task_id": 110, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1,char):\n    '''\n    WRITE A FUNCTION TO REPLACE BLANK SPACES WITH ANY CHARACTER IN A STRING.\n    '''\n"}], "response": "def func(str1, char):\n    return str1.replace(' ', char)", "response_code": "def func(str1, char):\n    return str1.replace(' ', char)"}
{"task_id": 111, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq\ndef func(list1,n):\n    '''\n    WRITE A FUNCTION TO GET THE N LARGEST ITEMS FROM A DATASET.\n    '''\n"}], "response": "import heapq\n\ndef func(list1, n):\n    return heapq.nlargest(n, list1)", "response_code": "import heapq\n\ndef func(list1, n):\n    return heapq.nlargest(n, list1)"}
{"task_id": 112, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(r,h):\n    '''\n    WRITE A FUNCTION TO FIND THE LATERAL SURFACE AREA OF A CYLINDER.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(r, h):\n    lateral_surface_area = 2 * math.pi * r * h\n    return lateral_surface_area\n```", "response_code": "\nimport math\n\ndef func(r, h):\n    lateral_surface_area = 2 * math.pi * r * h\n    return lateral_surface_area\n"}
{"task_id": 113, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l):\n    '''\n    WRITE A FUNCTION TO FIND THE VOLUME OF A CUBE.\n    '''\n"}], "response": "```python\ndef func(l):\n    '''\n    Function to find the volume of a cube.\n    \n    Parameters:\n    l (float): Length of the side of the cube\n    \n    Returns:\n    float: Volume of the cube\n    '''\n    return l ** 3\n```", "response_code": "\ndef func(l):\n    '''\n    Function to find the volume of a cube.\n    \n    Parameters:\n    l (float): Length of the side of the cube\n    \n    Returns:\n    float: Volume of the cube\n    '''\n    return l ** 3\n"}
{"task_id": 114, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A PYTHON FUNCTION TO SET ALL EVEN BITS OF A GIVEN NUMBER.\n    '''\n"}], "response": "```python\ndef set_even_bits(n):\n    return int(''.join(['1' if i % 2 == 0 else bit for i, bit in enumerate(bin(n)[2:])]), 2)\n```", "response_code": "\ndef set_even_bits(n):\n    return int(''.join(['1' if i % 2 == 0 else bit for i, bit in enumerate(bin(n)[2:])]), 2)\n"}
{"task_id": 115, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import Counter \ndef func(test_list):\n    '''\n    WRITE A FUNCTION TO CHECK THE OCCURRENCES OF RECORDS WHICH OCCUR SIMILAR TIMES IN THE GIVEN TUPLES.\n    '''\n"}], "response": "from collections import Counter\n\ndef func(test_list):\n    count_dict = Counter(test_list)\n    return {key: value for key, value in count_dict.items() if value > 1}", "response_code": "from collections import Counter\n\ndef func(test_list):\n    count_dict = Counter(test_list)\n    return {key: value for key, value in count_dict.items() if value > 1}"}
{"task_id": 116, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str): \n    '''\n    WRITE A PYTHON FUNCTION TO COUNT NUMBER OF NON-EMPTY SUBSTRINGS OF A GIVEN STRING.\n    '''\n"}], "response": "```python\ndef func(s):\n    return int(len(s) * (len(s) + 1) / 2)\n```", "response_code": "\ndef func(s):\n    return int(len(s) * (len(s) + 1) / 2)\n"}
{"task_id": 117, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(m,n): \n    '''\n    WRITE A FUNCTION TO FIND THE NUMBER OF POSSIBLE SEQUENCES OF LENGTH N SUCH THAT EACH OF THE NEXT ELEMENT IS GREATER THAN OR EQUAL TO TWICE OF THE PREVIOUS ELEMENT BUT LESS THAN OR EQUAL TO M.\n    '''\n"}], "response": "```python\ndef func(m, n):\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, m + 1):\n        dp[1][i] = 1\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            for k in range(j * 2, m + 1):\n                dp[i][k] += dp[i - 1][j]\n    return sum(dp[n])\n\n# Example usage:\n# print(func(5, 3))\n```", "response_code": "\ndef func(m, n):\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, m + 1):\n        dp[1][i] = 1\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            for k in range(j * 2, m + 1):\n                dp[i][k] += dp[i - 1][j]\n    return sum(dp[n])\n\n# Example usage:\n# print(func(5, 3))\n"}
{"task_id": 118, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1,list2):\n    '''\n    WRITE A FUNCTION TO REPLACE THE LAST ELEMENT OF THE LIST WITH ANOTHER LIST.\n    '''\n"}], "response": "def replace_last_element(list1, list2):\n    list1[-1] = list2\n    return list1", "response_code": "def replace_last_element(list1, list2):\n    list1[-1] = list2\n    return list1"}
{"task_id": 119, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1):\n    '''\n    WRITE A FUNCTION TO COUNT TOTAL CHARACTERS IN A STRING.\n    '''\n"}], "response": "```python\ndef func(str1):\n    return len(str1)\n```", "response_code": "\ndef func(str1):\n    return len(str1)\n"}
{"task_id": 120, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math  \ndef func(N): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE NEXT PERFECT SQUARE GREATER THAN A GIVEN NUMBER.\n    '''\n"}], "response": "import math\n\ndef func(N):\n    return math.ceil(math.sqrt(N)) ** 2", "response_code": "import math\n\ndef func(N):\n    return math.ceil(math.sqrt(N)) ** 2"}
{"task_id": 121, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr): \n    '''\n    WRITE A FUNCTION TO FIND THE MAXIMUM SUM OF BI-TONIC SUB-SEQUENCE FOR THE GIVEN ARRAY.\n    '''\n"}], "response": "```python\ndef max_sum_bitonic_subsequence(arr):\n    n = len(arr)\n    lis = [0] * n\n    lds = [0] * n\n\n    for i in range(n):\n        lis[i] = arr[i]\n        lds[i] = arr[i]\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lis[i] = max(lis[i], lis[j] + arr[i])\n            if arr[i] < arr[j]:\n                lds[i] = max(lds[i], lds[j] + arr[i])\n\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, lis[i] + lds[i] - arr[i])\n\n    return max_sum\n```", "response_code": "\ndef max_sum_bitonic_subsequence(arr):\n    n = len(arr)\n    lis = [0] * n\n    lds = [0] * n\n\n    for i in range(n):\n        lis[i] = arr[i]\n        lds[i] = arr[i]\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lis[i] = max(lis[i], lis[j] + arr[i])\n            if arr[i] < arr[j]:\n                lds[i] = max(lds[i], lds[j] + arr[i])\n\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, lis[i] + lds[i] - arr[i])\n\n    return max_sum\n"}
{"task_id": 122, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(number):\n    '''\n    WRITE A FUNCTION FOR COMPUTING SQUARE ROOTS USING THE BABYLONIAN METHOD.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(number):\n    guess = number / 2\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(new_guess - guess) < 0.0001:\n            return new_guess\n        guess = new_guess\n```", "response_code": "\nimport math\n\ndef func(number):\n    guess = number / 2\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(new_guess - guess) < 0.0001:\n            return new_guess\n        guess = new_guess\n"}
{"task_id": 123, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str): \n    '''\n    WRITE A FUNCTION TO FIND THE LONGEST PALINDROMIC SUBSEQUENCE IN THE GIVEN STRING.\n    '''\n"}], "response": "```python\ndef longest_palindromic_subsequence(s):\n    n = len(s)\n    dp = [[0]*n for _ in range(n)]\n    \n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]\n```", "response_code": "\ndef longest_palindromic_subsequence(s):\n    n = len(s)\n    dp = [[0]*n for _ in range(n)]\n    \n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]\n"}
{"task_id": 124, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    WRITE A FUNCTION TO CALCULATE THE HARMONIC SUM OF N-1.\n    '''\n"}], "response": "```python\ndef func(n):\n    if n == 1:\n        return 0\n    else:\n        return sum(1/i for i in range(1, n))\n```", "response_code": "\ndef func(n):\n    if n == 1:\n        return 0\n    else:\n        return sum(1/i for i in range(1, n))\n"}
{"task_id": 125, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(array_nums1,array_nums2):\n    '''\n    WRITE A FUNCTION TO FIND THE INTERSECTION OF TWO ARRAYS USING LAMBDA FUNCTION.\n    '''\n"}], "response": "```python\ndef func(array_nums1, array_nums2):\n    intersection = list(filter(lambda x: x in array_nums1, array_nums2))\n    return intersection\n```", "response_code": "\ndef func(array_nums1, array_nums2):\n    intersection = list(filter(lambda x: x in array_nums1, array_nums2))\n    return intersection\n"}
{"task_id": 126, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(tup, x): \n    '''\n    WRITE A PYTHON FUNCTION TO COUNT THE OCCCURENCES OF AN ELEMENT IN A TUPLE.\n    '''\n"}], "response": "def func(tup, x): \n    return tup.count(x)", "response_code": "def func(tup, x): \n    return tup.count(x)"}
{"task_id": 127, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list,element):\n    '''\n    WRITE A FUNCTION TO INSERT AN ELEMENT BEFORE EACH ELEMENT OF A LIST.\n    '''\n"}], "response": "def func(lst, element):\n    new_list = []\n    for item in lst:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list", "response_code": "def func(lst, element):\n    new_list = []\n    for item in lst:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list"}
{"task_id": 128, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import cmath  \ndef func(numbers):    \n    '''\n    WRITE A PYTHON FUNCTION TO CONVERT COMPLEX NUMBERS TO POLAR COORDINATES.\n    '''\n"}], "response": "import cmath\n\ndef func(numbers):\n    polar_coordinates = [cmath.polar(num) for num in numbers]\n    return polar_coordinates", "response_code": "import cmath\n\ndef func(numbers):\n    polar_coordinates = [cmath.polar(num) for num in numbers]\n    return polar_coordinates"}
{"task_id": 129, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A PYTHON FUNCTION TO COUNT INTEGERS FROM A GIVEN LIST.\n    '''\n"}], "response": "```python\ndef func(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count\n```", "response_code": "\ndef func(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count\n"}
{"task_id": 130, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from itertools import combinations_with_replacement \ndef func(l, n):\n    '''\n    WRITE A FUNCTION TO CHOOSE SPECIFIED NUMBER OF COLOURS FROM THREE DIFFERENT COLOURS AND GENERATE ALL THE COMBINATIONS WITH REPETITIONS.\n    '''\n"}], "response": "from itertools import combinations_with_replacement\n\ndef func(l, n):\n    return list(combinations_with_replacement(l, n))", "response_code": "from itertools import combinations_with_replacement\n\ndef func(l, n):\n    return list(combinations_with_replacement(l, n))"}
{"task_id": 131, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    WRITE A PYTHON FUNCTION TO COUNT THE NUMBER OF PRIME NUMBERS LESS THAN A GIVEN NON-NEGATIVE NUMBER.\n    '''\n"}], "response": "```python\ndef func(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n\n    return count\n```", "response_code": "\ndef func(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n\n    return count\n"}
{"task_id": 132, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,b):\n    '''\n    WRITE A FUNCTION TO SWAP TWO NUMBERS.\n    '''\n"}], "response": "```python\ndef func(a, b):\n    '''\n    Function to swap two numbers.\n    '''\n    a, b = b, a\n    return a, b\n```", "response_code": "\ndef func(a, b):\n    '''\n    Function to swap two numbers.\n    '''\n    a, b = b, a\n    return a, b\n"}
{"task_id": 133, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    WRITE A FUNCTION TO MAXIMIZE THE GIVEN TWO TUPLES.\n    '''\n"}], "response": "```python\ndef func(test_tup1, test_tup2):\n    return tuple(max(x, y) for x, y in zip(test_tup1, test_tup2))\n```", "response_code": "\ndef func(test_tup1, test_tup2):\n    return tuple(max(x, y) for x, y in zip(test_tup1, test_tup2))\n"}
{"task_id": 134, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A FUNCTION TO FIND THE NTH NEWMAN\u2013SHANKS\u2013WILLIAMS PRIME NUMBER.\n    '''\n"}], "response": "```python\nfrom sympy import primerange, isprime\n\ndef func(n): \n    def is_nsw_prime(num):\n        if num == 0 or num == 1:\n            return False\n        if isprime(num):\n            return False\n        for i in range(2, num):\n            if isprime(i) and num % ((i**2)-1) == 0:\n                return True\n        return False\n\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        if is_nsw_prime(num):\n            count += 1\n    return num\n```", "response_code": "\nfrom sympy import primerange, isprime\n\ndef func(n): \n    def is_nsw_prime(num):\n        if num == 0 or num == 1:\n            return False\n        if isprime(num):\n            return False\n        for i in range(2, num):\n            if isprime(i) and num % ((i**2)-1) == 0:\n                return True\n        return False\n\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        if is_nsw_prime(num):\n            count += 1\n    return num\n"}
{"task_id": 135, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    WRITE A FUNCTION TO PERFORM MATHEMATICAL DIVISION OPERATION ACROSS THE GIVEN TUPLES.\n    '''\n"}], "response": "def func(test_tup1, test_tup2):\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)", "response_code": "def func(test_tup1, test_tup2):\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)"}
{"task_id": 136, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1, L):\n    '''\n    WRITE A FUNCTION TO SPLIT A GIVEN LIST INTO TWO PARTS WHERE THE LENGTH OF THE FIRST PART OF THE LIST IS GIVEN.\n    '''\n"}], "response": "```python\ndef func(list1, L):\n    return list1[:L], list1[L:]\n```", "response_code": "\ndef func(list1, L):\n    return list1[:L], list1[L:]\n"}
{"task_id": 137, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(h_age):\n    '''\n    WRITE A FUNCTION TO CALCULATE A DOG'S AGE IN DOG'S YEARS.\n    '''\n"}], "response": "```python\ndef func(h_age):\n    return h_age * 7\n```", "response_code": "\ndef func(h_age):\n    return h_age * 7\n"}
{"task_id": 138, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(S, step):\n    '''\n    WRITE A FUNCTION TO SPLIT A LIST FOR EVERY NTH ELEMENT.\n    '''\n"}], "response": "```python\ndef func(S, step):\n    return [S[i:i+step] for i in range(0, len(S), step)]\n```", "response_code": "\ndef func(S, step):\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"}
{"task_id": 139, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l):\n    '''\n    WRITE A FUNCTION TO FIND THE LATERAL SURFACE AREA OF A CUBE.\n    '''\n"}], "response": "```python\ndef lateral_surface_area_of_cube(side_length):\n    return 4 * side_length ** 2\n```", "response_code": "\ndef lateral_surface_area_of_cube(side_length):\n    return 4 * side_length ** 2\n"}
{"task_id": 140, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):  \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SUM OF SQUARES OF FIRST N ODD NATURAL NUMBERS.\n    '''\n"}], "response": "def sum_of_squares_of_odd_numbers(n):\n    return n**2 * n**2\n\n# Example usage:\n# result = sum_of_squares_of_odd_numbers(5)\n# print(result)", "response_code": "def sum_of_squares_of_odd_numbers(n):\n    return n**2 * n**2\n\n# Example usage:\n# result = sum_of_squares_of_odd_numbers(5)\n# print(result)"}
{"task_id": 141, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A FUNCTION TO FIND THE N'TH STAR NUMBER.\n    '''\n"}], "response": "```python\ndef func(n):\n    return 6 * n * (n - 1) + 1\n```", "response_code": "\ndef func(n):\n    return 6 * n * (n - 1) + 1\n"}
{"task_id": 142, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(k):\n    '''\n    WRITE A FUNCTION TO FIND THE ASCII VALUE OF A CHARACTER.\n    '''\n"}], "response": "```python\ndef func(k):\n    return ord(k)\n```", "response_code": "\ndef func(k):\n    return ord(k)\n"}
{"task_id": 143, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):  \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SUM OF EVEN NUMBERS AT EVEN POSITIONS.\n    '''\n"}], "response": "```python\ndef func(arr):\n    return sum(arr[i] for i in range(1, len(arr), 2) if arr[i] % 2 == 0)\n```", "response_code": "\ndef func(arr):\n    return sum(arr[i] for i in range(1, len(arr), 2) if arr[i] % 2 == 0)\n"}
{"task_id": 144, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SUM OF FIFTH POWER OF FIRST N EVEN NATURAL NUMBERS.\n    '''\n"}], "response": "```python\ndef func(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**5\n    return sum\n```", "response_code": "\ndef func(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**5\n    return sum\n"}
{"task_id": 145, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    WRITE A FUNCTION TO PERFOM THE REAR ELEMENT EXTRACTION FROM LIST OF TUPLES RECORDS.\n    '''\n"}], "response": "```python\ndef func(test_list):\n    return [sub[-1] for sub in test_list]\n```", "response_code": "\ndef func(test_list):\n    return [sub[-1] for sub in test_list]\n"}
{"task_id": 146, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    WRITE A FUNCTION TO SUBSTRACT THE CONTENTS OF ONE TUPLE WITH CORRESPONDING INDEX OF OTHER TUPLE.\n    '''\n"}], "response": "def func(test_tup1, test_tup2):\n    result = tuple(x - y for x, y in zip(test_tup1, test_tup2))\n    return result", "response_code": "def func(test_tup1, test_tup2):\n    result = tuple(x - y for x, y in zip(test_tup1, test_tup2))\n    return result"}
{"task_id": 147, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math  \ndef func( n): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND SUM OF EVEN INDEX BINOMIAL COEFFICIENTS.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    sum_even = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            sum_even += math.comb(n, i)\n    return sum_even", "response_code": "import math\n\ndef func(n):\n    sum_even = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            sum_even += math.comb(n, i)\n    return sum_even"}
{"task_id": 148, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(r,h):\n    '''\n    WRITE A FUNCTION TO FIND THE VOLUME OF A CYLINDER.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(r, h):\n    volume = math.pi * r**2 * h\n    return volume\n```", "response_code": "\nimport math\n\ndef func(r, h):\n    volume = math.pi * r**2 * h\n    return volume\n"}
{"task_id": 149, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(dict,n):\n    '''\n    WRITE A FUNCTION TO FILTER A DICTIONARY BASED ON VALUES.\n    '''\n"}], "response": "```python\ndef func(dict, n):\n    return {key: value for key, value in dict.items() if value > n}\n```", "response_code": "\ndef func(dict, n):\n    return {key: value for key, value in dict.items() if value > n}\n"}
{"task_id": 150, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    WRITE A FUNCTION TO FIND THE ELEMENT COUNT THAT OCCURS BEFORE THE RECORD IN THE GIVEN TUPLE.\n    '''\n"}], "response": "def func(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[-1]:\n            break\n        count += 1\n    return count", "response_code": "def func(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[-1]:\n            break\n        count += 1\n    return count"}
{"task_id": 151, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A FUNCTION TO FIND THE NTH DECAGONAL NUMBER.\n    '''\n"}], "response": "```python\ndef func(n): \n    return n * (7*n - 5) // 2\n```", "response_code": "\ndef func(n): \n    return n * (7*n - 5) // 2\n"}
{"task_id": 152, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(dlist, item):\n    '''\n    WRITE A FUNCTION TO SEARCH AN ELEMENT IN THE GIVEN ARRAY BY USING SEQUENTIAL SEARCH.\n    '''\n"}], "response": "```python\ndef func(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True\n    return False\n```", "response_code": "\ndef func(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True\n    return False\n"}
{"task_id": 153, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    WRITE A PYTHON FUNCTION TO CHECK IF THE ELEMENTS OF A GIVEN LIST ARE UNIQUE OR NOT.\n    '''\n"}], "response": "def func(test_list):\n    return len(test_list) == len(set(test_list))", "response_code": "def func(test_list):\n    return len(test_list) == len(set(test_list))"}
{"task_id": 154, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums1,nums2):\n    '''\n    WRITE A FUNCTION TO SUBSTRACT TWO LISTS USING MAP AND LAMBDA FUNCTION.\n    '''\n"}], "response": "```python\ndef func(nums1, nums2):\n    return list(map(lambda x, y: x - y, nums1, nums2))\n```", "response_code": "\ndef func(nums1, nums2):\n    return list(map(lambda x, y: x - y, nums1, nums2))\n"}
{"task_id": 155, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER THE FREQUENCY OF EACH DIGIT IS LESS THAN OR EQUAL TO THE DIGIT ITSELF.\n    '''\n"}], "response": "```python\ndef func(n):\n    num_str = str(n)\n    for digit in num_str:\n        if num_str.count(digit) > int(digit):\n            return False\n    return True\n```", "response_code": "\ndef func(n):\n    num_str = str(n)\n    for digit in num_str:\n        if num_str.count(digit) > int(digit):\n            return False\n    return True\n"}
{"task_id": 156, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list,element):\n    '''\n    WRITE A FUNCTION TO CHECK WHETHER ALL ITEMS OF A LIST ARE EQUAL TO A GIVEN STRING.\n    '''\n"}], "response": "def func(lst, element):\n    return all(item == element for item in lst)", "response_code": "def func(lst, element):\n    return all(item == element for item in lst)"}
{"task_id": 157, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    WRITE A FUNCTION THAT MATCHES A STRING THAT HAS AN A FOLLOWED BY TWO TO THREE 'B'.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'a[b]{2,3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False", "response_code": "import re\n\ndef func(text):\n    pattern = r'a[b]{2,3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"}
{"task_id": 158, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a, n, k): \n    '''\n    WRITE A FUNCTION TO FIND THE LARGEST SUM OF CONTIGUOUS ARRAY IN THE MODIFIED ARRAY WHICH IS FORMED BY REPEATING THE GIVEN ARRAY K TIMES.\n    '''\n"}], "response": "```python\ndef func(a, n, k): \n    max_sum = 0\n    for i in range(n*k):\n        current_sum = 0\n        for j in range(i, n*k):\n            current_sum += a[j % n]\n            max_sum = max(max_sum, current_sum)\n    return max_sum\n```", "response_code": "\ndef func(a, n, k): \n    max_sum = 0\n    for i in range(n*k):\n        current_sum = 0\n        for j in range(i, n*k):\n            current_sum += a[j % n]\n            max_sum = max(max_sum, current_sum)\n    return max_sum\n"}
{"task_id": 159, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):  \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SUM OF SQUARES OF FIRST N EVEN NATURAL NUMBERS.\n    '''\n"}], "response": "```python\ndef func(n):\n    sum_of_squares = n * (n + 1) * (2 * n + 1) // 3\n    return sum_of_squares\n\n# Example usage:\n# result = func(5)\n# print(result)\n```", "response_code": "\ndef func(n):\n    sum_of_squares = n * (n + 1) * (2 * n + 1) // 3\n    return sum_of_squares\n\n# Example usage:\n# result = func(5)\n# print(result)\n"}
{"task_id": 160, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A FUNCTION TO FIND THE LIST OF LISTS WITH MAXIMUM LENGTH.\n    '''\n"}], "response": "```python\ndef func(list1):\n    max_length = max(len(sublist) for sublist in list1)\n    result = [sublist for sublist in list1 if len(sublist) == max_length]\n    return result\n```", "response_code": "\ndef func(list1):\n    max_length = max(len(sublist) for sublist in list1)\n    result = [sublist for sublist in list1 if len(sublist) == max_length]\n    return result\n"}
{"task_id": 161, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n, k): \n    '''\n    WRITE A FUNCTION TO FIND OUT THE NUMBER OF WAYS OF PAINTING THE FENCE SUCH THAT AT MOST 2 ADJACENT POSTS HAVE THE SAME COLOR FOR THE GIVEN FENCE WITH N POSTS AND K COLORS.\n    '''\n"}], "response": "```python\ndef func(n, k): \n    if n == 0: \n        return 0\n    same, diff = 0, k \n    for _ in range(2, n+1): \n        same, diff = diff, (same + diff) * (k-1)\n    return same + diff\n```", "response_code": "\ndef func(n, k): \n    if n == 0: \n        return 0\n    same, diff = 0, k \n    for _ in range(2, n+1): \n        same, diff = diff, (same + diff) * (k-1)\n    return same + diff\n"}
{"task_id": 162, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n,m):  \n    '''\n    WRITE A PYTHON FUNCTION TO FIND QUOTIENT OF TWO NUMBERS.\n    '''\n"}], "response": "def func(n, m):\n    return n / m", "response_code": "def func(n, m):\n    return n / m"}
{"task_id": 163, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(w,h):\n    '''\n    WRITE A FUNCTION TO FIND THE THIRD SIDE OF A RIGHT ANGLED TRIANGLE.\n    '''\n"}], "response": "import math\n\ndef func(w, h):\n    return math.sqrt(w**2 + h**2)", "response_code": "import math\n\ndef func(w, h):\n    return math.sqrt(w**2 + h**2)"}
{"task_id": 164, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(listval):\n    '''\n    WRITE A FUNCTION TO FIND THE MAXIMUM VALUE IN A GIVEN HETEROGENEOUS LIST.\n    '''\n"}], "response": "def func(listval):\n    return max(listval)", "response_code": "def func(listval):\n    return max(listval)"}
{"task_id": 165, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(number):\n    '''\n    WRITE A FUNCTION TO RETURN THE SUM OF ALL DIVISORS OF A NUMBER.\n    '''\n"}], "response": "```python\ndef func(number):\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total\n```", "response_code": "\ndef func(number):\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total\n"}
{"task_id": 166, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr): \n    '''\n    WRITE A PYTHON FUNCTION TO COUNT INVERSIONS IN AN ARRAY.\n    '''\n"}], "response": "from typing import List\n\ndef count_inversions(arr: List[int]) -> int:\n    def merge(arr, temp, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp[k] = arr[i]\n                k += 1\n                i += 1\n            else:\n                temp[k] = arr[j]\n                k += 1\n                j += 1\n                inv_count += (mid - i + 1)\n\n        while i <= mid:\n            temp[k] = arr[i]\n            k += 1\n            i += 1\n\n        while j <= right:\n            temp[k] = arr[j]\n            k += 1\n            j += 1\n\n        for i in range(left, right + 1):\n            arr[i] = temp[i]\n\n        return inv_count\n\n    def merge_sort(arr, temp, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort(arr, temp, left, mid)\n            inv_count += merge_sort(arr, temp, mid + 1, right)\n            inv_count += merge(arr, temp, left, mid, right)\n        return inv_count\n\n    n = len(arr)\n    temp = [0] * n\n    return merge_sort(arr, temp, 0, n - 1)", "response_code": "from typing import List\n\ndef count_inversions(arr: List[int]) -> int:\n    def merge(arr, temp, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp[k] = arr[i]\n                k += 1\n                i += 1\n            else:\n                temp[k] = arr[j]\n                k += 1\n                j += 1\n                inv_count += (mid - i + 1)\n\n        while i <= mid:\n            temp[k] = arr[i]\n            k += 1\n            i += 1\n\n        while j <= right:\n            temp[k] = arr[j]\n            k += 1\n            j += 1\n\n        for i in range(left, right + 1):\n            arr[i] = temp[i]\n\n        return inv_count\n\n    def merge_sort(arr, temp, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort(arr, temp, left, mid)\n            inv_count += merge_sort(arr, temp, mid + 1, right)\n            inv_count += merge(arr, temp, left, mid, right)\n        return inv_count\n\n    n = len(arr)\n    temp = [0] * n\n    return merge_sort(arr, temp, 0, n - 1)"}
{"task_id": 167, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A FUNCTION TO FLATTEN A GIVEN NESTED LIST STRUCTURE.\n    '''\n"}], "response": "```python\ndef flatten_list(nested_list):\n    flat_list = []\n    for sublist in nested_list:\n        if isinstance(sublist, list):\n            flat_list.extend(flatten_list(sublist))\n        else:\n            flat_list.append(sublist)\n    return flat_list\n```", "response_code": "\ndef flatten_list(nested_list):\n    flat_list = []\n    for sublist in nested_list:\n        if isinstance(sublist, list):\n            flat_list.extend(flatten_list(sublist))\n        else:\n            flat_list.append(sublist)\n    return flat_list\n"}
{"task_id": 168, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import defaultdict\ndef func(stdata):\n    '''\n    WRITE A FUNCTION TO CALCULATE THE MAXIMUM AGGREGATE FROM THE LIST OF TUPLES.\n    '''\n"}], "response": "from collections import defaultdict\n\ndef func(stdata):\n    max_aggregate = defaultdict(int)\n    \n    for st, marks in stdata:\n        max_aggregate[st] = max(max_aggregate[st], marks)\n    \n    return sum(max_aggregate.values())", "response_code": "from collections import defaultdict\n\ndef func(stdata):\n    max_aggregate = defaultdict(int)\n    \n    for st, marks in stdata:\n        max_aggregate[st] = max(max_aggregate[st], marks)\n    \n    return sum(max_aggregate.values())"}
{"task_id": 169, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A FUNCTION TO FIND THE COUNT OF ALL BINARY SEQUENCES OF LENGTH 2N SUCH THAT SUM OF FIRST N BITS IS SAME AS SUM OF LAST N BITS.\n    '''\n"}], "response": "```python\ndef func(n):\n    return int((2*n) / (n+1))\n```", "response_code": "\ndef func(n):\n    return int((2*n) / (n+1))\n"}
{"task_id": 170, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(d):\n    '''\n    WRITE A FUNCTION TO FIND THE DEPTH OF A DICTIONARY.\n    '''\n"}], "response": "```python\ndef func(d):\n    if isinstance(d, dict):\n        return 1 + (max(func(v) for v in d.values()) if d else 0)\n    else:\n        return 0\n```", "response_code": "\ndef func(d):\n    if isinstance(d, dict):\n        return 1 + (max(func(v) for v in d.values()) if d else 0)\n    else:\n        return 0\n"}
{"task_id": 171, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr,ranges,rotations,index) :  \n    '''\n    WRITE A PYTHON FUNCTION TO FIND ELEMENT AT A GIVEN INDEX AFTER NUMBER OF ROTATIONS.\n    '''\n"}], "response": "def func(arr, ranges, rotations, index):\n    n = len(arr)\n    for i in range(rotations):\n        left = ranges[0]\n        right = ranges[1]\n        temp = arr[left:right+1]\n        arr = arr[:left] + temp[-1:] + temp[:-1] + arr[right+1:]\n    \n    return arr[index]", "response_code": "def func(arr, ranges, rotations, index):\n    n = len(arr)\n    for i in range(rotations):\n        left = ranges[0]\n        right = ranges[1]\n        temp = arr[left:right+1]\n        arr = arr[:left] + temp[-1:] + temp[:-1] + arr[right+1:]\n    \n    return arr[index]"}
{"task_id": 172, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(words):\n    '''\n    WRITE A FUNCTION TO MATCH TWO WORDS FROM A LIST OF WORDS STARTING WITH LETTER 'P'.\n    '''\n"}], "response": "import re\n\ndef func(words):\n    pattern = r'^P\\w+'\n    matched_words = [word for word in words if re.match(pattern, word)]\n    return matched_words", "response_code": "import re\n\ndef func(words):\n    pattern = r'^P\\w+'\n    matched_words = [word for word in words if re.match(pattern, word)]\n    return matched_words"}
{"task_id": 173, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a, n, index, k):\n    '''\n    WRITE A FUNCTION TO FIND THE MAXIMUM SUM OF INCREASING SUBSEQUENCE FROM PREFIX TILL ITH INDEX AND ALSO INCLUDING A GIVEN KTH ELEMENT WHICH IS AFTER I, I.E., K > I.\n    '''\n"}], "response": "```python\ndef func(a, n, index, k):\n    dp = [0] * n\n    dp[index] = a[index]\n    for i in range(index+1, n):\n        if i <= k:\n            dp[i] = max(dp[j] for j in range(i) if a[j] < a[i]) + a[i]\n        else:\n            dp[i] = max(dp[j] for j in range(index, i) if a[j] < a[i]) + a[i]\n    return max(dp)\n\n# Example usage:\n# a = [1, 101, 2, 3, 100, 4, 5]\n# n = len(a)\n# index = 2\n# k = 4\n# print(func(a, n, index, k))\n```", "response_code": "\ndef func(a, n, index, k):\n    dp = [0] * n\n    dp[index] = a[index]\n    for i in range(index+1, n):\n        if i <= k:\n            dp[i] = max(dp[j] for j in range(i) if a[j] < a[i]) + a[i]\n        else:\n            dp[i] = max(dp[j] for j in range(index, i) if a[j] < a[i]) + a[i]\n    return max(dp)\n\n# Example usage:\n# a = [1, 101, 2, 3, 100, 4, 5]\n# n = len(a)\n# index = 2\n# k = 4\n# print(func(a, n, index, k))\n"}
{"task_id": 174, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from copy import deepcopy\ndef func(tuplex,m,n):\n    '''\n    WRITE A FUNCTION TO GET A COLON OF A TUPLE.\n    '''\n"}], "response": "from copy import deepcopy\n\ndef func(tuplex, m, n):\n    '''\n    Function to get a colon of a tuple.\n    '''\n    return tuplex[m:n]", "response_code": "from copy import deepcopy\n\ndef func(tuplex, m, n):\n    '''\n    Function to get a colon of a tuple.\n    '''\n    return tuplex[m:n]"}
{"task_id": 175, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums1, nums2, N):\n    '''\n    WRITE A FUNCTION TO FIND THE SPECIFIED NUMBER OF LARGEST PRODUCTS FROM TWO GIVEN LISTS.\n    '''\n"}], "response": "```python\nimport itertools\n\ndef func(nums1, nums2, N):\n    products = [x * y for x in nums1 for y in nums2]\n    largest_products = sorted(products, reverse=True)[:N]\n    return largest_products\n```", "response_code": "\nimport itertools\n\ndef func(nums1, nums2, N):\n    products = [x * y for x in nums1 for y in nums2]\n    largest_products = sorted(products, reverse=True)[:N]\n    return largest_products\n"}
{"task_id": 176, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,b):   \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE MAXIMUM OF TWO NUMBERS.\n    '''\n"}], "response": "```python\ndef func(a, b):\n    return max(a, b)\n```", "response_code": "\ndef func(a, b):\n    return max(a, b)\n"}
{"task_id": 177, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1):\n    '''\n    WRITE A FUNCTION TO CONVERT A GIVEN STRING TO A TUPLE.\n    '''\n"}], "response": "def func(str1):\n    return tuple(str1)", "response_code": "def func(str1):\n    return tuple(str1)"}
{"task_id": 178, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A PYTHON FUNCTION TO SET THE LEFT MOST UNSET BIT.\n    '''\n"}], "response": "```python\ndef func(n): \n    return n | (n + 1)\n```", "response_code": "\ndef func(n): \n    return n | (n + 1)\n"}
{"task_id": 179, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(r,h):\n    '''\n    WRITE A FUNCTION TO FIND THE VOLUME OF A CONE.\n    '''\n"}], "response": "import math\n\ndef func(r, h):\n    volume = (1/3) * math.pi * r**2 * h\n    return volume", "response_code": "import math\n\ndef func(r, h):\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"}
{"task_id": 180, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE HIGHEST POWER OF 2 THAT IS LESS THAN OR EQUAL TO N.\n    '''\n"}], "response": "```python\ndef func(n):\n    highest_power = 1\n    while highest_power * 2 <= n:\n        highest_power *= 2\n    return highest_power\n```", "response_code": "\ndef func(n):\n    highest_power = 1\n    while highest_power * 2 <= n:\n        highest_power *= 2\n    return highest_power\n"}
{"task_id": 181, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A FUNCTION TO FIND THE N'TH LUCAS NUMBER.\n    '''\n"}], "response": "```python\ndef func(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return func(n-1) + func(n-2)\n```", "response_code": "\ndef func(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return func(n-1) + func(n-2)\n"}
{"task_id": 182, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list_, string):\n    '''\n    WRITE A FUNCTION TO INSERT A GIVEN STRING AT THE BEGINNING OF ALL ITEMS IN A LIST.\n    '''\n"}], "response": "def func(list_, string):\n    return [string + item for item in list_]", "response_code": "def func(list_, string):\n    return [string + item for item in list_]"}
{"task_id": 183, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l1, l2, l3):\n    '''\n    WRITE A FUNCTION TO CONVERT MORE THAN ONE LIST TO NESTED DICTIONARY.\n    '''\n"}], "response": "```python\ndef func(l1, l2, l3):\n    '''\n    Converts three lists into a nested dictionary.\n    \n    Args:\n    l1, l2, l3: Lists to be converted into a nested dictionary.\n    \n    Returns:\n    Nested dictionary created from the input lists.\n    '''\n    return {l1[i]: {l2[i]: l3[i]} for i in range(len(l1))}\n```", "response_code": "\ndef func(l1, l2, l3):\n    '''\n    Converts three lists into a nested dictionary.\n    \n    Args:\n    l1, l2, l3: Lists to be converted into a nested dictionary.\n    \n    Returns:\n    Nested dictionary created from the input lists.\n    '''\n    return {l1[i]: {l2[i]: l3[i]} for i in range(len(l1))}\n"}
{"task_id": 184, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    WRITE A FUNCTION TO FIND THE MAXIMUM SUM POSSIBLE BY USING THE GIVEN EQUATION F(N) = MAX( (F(N/2) + F(N/3) + F(N/4) + F(N/5)), N).\n    '''\n"}], "response": "```python\ndef func(n):\n    if n <= 1:\n        return n\n    \n    return max(func(n//2) + func(n//3) + func(n//4) + func(n//5), n)\n```", "response_code": "\ndef func(n):\n    if n <= 1:\n        return n\n    \n    return max(func(n//2) + func(n//3) + func(n//4) + func(n//5), n)\n"}
{"task_id": 185, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(input_list):\n    '''\n    WRITE A FUNCTION TO FIND THE LIST WITH MAXIMUM LENGTH USING LAMBDA FUNCTION.\n    '''\n"}], "response": "```python\ndef func(input_list):\n    return max(input_list, key=lambda x: len(x))\n```", "response_code": "\ndef func(input_list):\n    return max(input_list, key=lambda x: len(x))\n"}
{"task_id": 186, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    WRITE A FUNCTION TO CHECK IF GIVEN TUPLE IS DISTINCT OR NOT.\n    '''\n"}], "response": "def func(test_tup):\n    return len(test_tup) == len(set(test_tup))", "response_code": "def func(test_tup):\n    return len(test_tup) == len(set(test_tup))"}
{"task_id": 187, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1):\n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE FIRST NON-REPEATED CHARACTER IN A GIVEN STRING.\n    '''\n"}], "response": "```python\ndef func(str1):\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None\n```", "response_code": "\ndef func(str1):\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None\n"}
{"task_id": 188, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef func(string): \n    '''\n    WRITE A FUNCTION TO CHECK WHETHER THE GIVEN STRING STARTS AND ENDS WITH THE SAME CHARACTER OR NOT USING REGEX.\n    '''\n"}], "response": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef func(string): \n    return re.match(regex, string) is not None", "response_code": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef func(string): \n    return re.match(regex, string) is not None"}
{"task_id": 189, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,b,c):\n    '''\n    WRITE A FUNCTION TO FIND THE MEDIAN OF THREE SPECIFIC NUMBERS.\n    '''\n"}], "response": "```python\ndef func(a, b, c):\n    return sorted([a, b, c])[1]\n```", "response_code": "\ndef func(a, b, c):\n    return sorted([a, b, c])[1]\n"}
{"task_id": 190, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    WRITE A FUNCTION TO COMPUTE THE SUM OF DIGITS OF EACH NUMBER OF A GIVEN LIST.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return [sum(int(digit) for digit in str(num)) for num in nums]\n```", "response_code": "\ndef func(nums):\n    return [sum(int(digit) for digit in str(num)) for num in nums]\n"}
{"task_id": 191, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    WRITE A FUNCTION TO PERFORM THE MATHEMATICAL BITWISE XOR OPERATION ACROSS THE GIVEN TUPLES.\n    '''\n"}], "response": "```python\ndef func(test_tup1, test_tup2):\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n```", "response_code": "\ndef func(test_tup1, test_tup2):\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n"}
{"task_id": 192, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    WRITE A FUNCTION TO EXTRACT THE FREQUENCY OF UNIQUE TUPLES IN THE GIVEN LIST ORDER IRRESPECTIVE.\n    '''\n"}], "response": "from collections import Counter\n\ndef func(test_list):\n    return dict(Counter([tuple(sorted(sublist)) for sublist in test_list]))", "response_code": "from collections import Counter\n\ndef func(test_list):\n    return dict(Counter([tuple(sorted(sublist)) for sublist in test_list]))"}
{"task_id": 193, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    WRITE A FUNCTION TO PERFORM INDEX WISE ADDITION OF TUPLE ELEMENTS IN THE GIVEN TWO NESTED TUPLES.\n    '''\n"}], "response": "def func(test_tup1, test_tup2):\n    result = tuple(x + y for x, y in zip(test_tup1, test_tup2))\n    return result", "response_code": "def func(test_tup1, test_tup2):\n    result = tuple(x + y for x, y in zip(test_tup1, test_tup2))\n    return result"}
{"task_id": 194, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,b):   \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE MINIMUM OF TWO NUMBERS.\n    '''\n"}], "response": "```python\ndef func(a, b):\n    return min(a, b)\n```", "response_code": "\ndef func(a, b):\n    return min(a, b)\n"}
{"task_id": 195, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(tuplex,tuple1): \n    '''\n    WRITE A FUNCTION TO CHECK WHETHER AN ELEMENT EXISTS WITHIN A TUPLE.\n    '''\n"}], "response": "def func(tuplex, tuple1):\n    if tuplex in tuple1:\n        return True\n    else:\n        return False", "response_code": "def func(tuplex, tuple1):\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"}
{"task_id": 196, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE PARITY OF A GIVEN NUMBER.\n    '''\n"}], "response": "```python\ndef func(x):\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n```", "response_code": "\ndef func(x):\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"}
{"task_id": 197, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    WRITE A FUNCTION TO CREATE THE NEXT BIGGER NUMBER BY REARRANGING THE DIGITS OF A GIVEN NUMBER.\n    '''\n"}], "response": "```python\nfrom itertools import permutations\n\ndef func(n):\n    num_str = str(n)\n    perms = sorted(int(''.join(p)) for p in permutations(num_str))\n    next_bigger = next((x for x in perms if x > n), None)\n    return next_bigger\n```", "response_code": "\nfrom itertools import permutations\n\ndef func(n):\n    num_str = str(n)\n    perms = sorted(int(''.join(p)) for p in permutations(num_str))\n    next_bigger = next((x for x in perms if x > n), None)\n    return next_bigger\n"}
{"task_id": 198, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq\ndef func(nums1, nums2, k):\n    '''\n    WRITE A FUNCTION TO FIND K NUMBER OF PAIRS WHICH CONSIST OF ONE ELEMENT FROM THE FIRST ARRAY AND ONE ELEMENT FROM THE SECOND ARRAY.\n    '''\n"}], "response": "import heapq\n\ndef func(nums1, nums2, k):\n    min_heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(min_heap, (num1 + num2, num1, num2))\n    \n    pairs = []\n    for _ in range(min(k, len(min_heap))):\n        _, num1, num2 = heapq.heappop(min_heap)\n        pairs.append((num1, num2))\n    \n    return pairs", "response_code": "import heapq\n\ndef func(nums1, nums2, k):\n    min_heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(min_heap, (num1 + num2, num1, num2))\n    \n    pairs = []\n    for _ in range(min(k, len(min_heap))):\n        _, num1, num2 = heapq.heappop(min_heap)\n        pairs.append((num1, num2))\n    \n    return pairs"}
{"task_id": 199, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A FUNCTION TO FIND THE MINIMUM PRODUCT FROM THE PAIRS OF TUPLES WITHIN A GIVEN LIST.\n    '''\n"}], "response": "```python\ndef func(list1):\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            min_product = min(min_product, product)\n    return min_product\n```", "response_code": "\ndef func(list1):\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            min_product = min(min_product, product)\n    return min_product\n"}
{"task_id": 200, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(listval):\n    '''\n    WRITE A FUNCTION TO FIND THE MINIMUM VALUE IN A GIVEN HETEROGENEOUS LIST.\n    '''\n"}], "response": "def func(listval):\n    return min(listval)", "response_code": "def func(listval):\n    return min(listval)"}
{"task_id": 201, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(word):\n    '''\n    WRITE A FUNCTION TO CONVERT THE GIVEN SNAKE CASE STRING TO CAMEL CASE STRING BY USING REGEX.\n    '''\n"}], "response": "import re\n\ndef func(word):\n    return re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)", "response_code": "import re\n\ndef func(word):\n    return re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)"}
{"task_id": 202, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l):\n    '''\n    WRITE A PYTHON FUNCTION TO REMOVE ODD NUMBERS FROM A GIVEN LIST.\n    '''\n"}], "response": "```python\ndef func(l):\n    return [x for x in l if x % 2 == 0]\n```", "response_code": "\ndef func(l):\n    return [x for x in l if x % 2 == 0]\n"}
{"task_id": 203, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1, n):\n    '''\n    WRITE A FUNCTION TO EXTRACT THE NTH ELEMENT FROM A GIVEN LIST OF TUPLES.\n    '''\n"}], "response": "def func(list1, n):\n    return [item[n] for item in list1]", "response_code": "def func(list1, n):\n    return [item[n] for item in list1]"}
{"task_id": 204, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1,list2):  \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER THE VALUE EXISTS IN A SEQUENCE OR NOT.\n    '''\n"}], "response": "def func(list1, list2):\n    for val in list1:\n        if val in list2:\n            print(f\"{val} exists in the sequence.\")\n        else:\n            print(f\"{val} does not exist in the sequence.\")", "response_code": "def func(list1, list2):\n    for val in list1:\n        if val in list2:\n            print(f\"{val} exists in the sequence.\")\n        else:\n            print(f\"{val} does not exist in the sequence.\")"}
{"task_id": 205, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND A PAIR WITH HIGHEST PRODUCT FROM A GIVEN ARRAY OF INTEGERS.\n    '''\n"}], "response": "```python\nimport itertools\n\ndef func(arr): \n    max_product = float('-inf')\n    pair = None\n    \n    for a, b in itertools.combinations(arr, 2):\n        product = a * b\n        if product > max_product:\n            max_product = product\n            pair = (a, b)\n    \n    return pair\n```", "response_code": "\nimport itertools\n\ndef func(arr): \n    max_product = float('-inf')\n    pair = None\n    \n    for a, b in itertools.combinations(arr, 2):\n        product = a * b\n        if product > max_product:\n            max_product = product\n            pair = (a, b)\n    \n    return pair\n"}
{"task_id": 206, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(Input): \n    '''\n    WRITE A FUNCTION TO FIND COMMON FIRST ELEMENT IN GIVEN LIST OF TUPLE.\n    '''\n"}], "response": "```python\ndef func(Input): \n    '''\n    WRITE A FUNCTION TO FIND COMMON FIRST ELEMENT IN GIVEN LIST OF TUPLE.\n    '''\n    return set.intersection(*map(set, [tup[0] for tup in Input]))\n```", "response_code": "\ndef func(Input): \n    '''\n    WRITE A FUNCTION TO FIND COMMON FIRST ELEMENT IN GIVEN LIST OF TUPLE.\n    '''\n    return set.intersection(*map(set, [tup[0] for tup in Input]))\n"}
{"task_id": 207, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SUBLIST HAVING MAXIMUM LENGTH.\n    '''\n"}], "response": "```python\ndef func(lst): \n    max_sublist = []\n    current_sublist = []\n    \n    for num in lst:\n        if not current_sublist or num >= current_sublist[-1]:\n            current_sublist.append(num)\n        else:\n            if len(current_sublist) > len(max_sublist):\n                max_sublist = current_sublist\n            current_sublist = [num]\n    \n    if len(current_sublist) > len(max_sublist):\n        max_sublist = current_sublist\n    \n    return max_sublist\n```", "response_code": "\ndef func(lst): \n    max_sublist = []\n    current_sublist = []\n    \n    for num in lst:\n        if not current_sublist or num >= current_sublist[-1]:\n            current_sublist.append(num)\n        else:\n            if len(current_sublist) > len(max_sublist):\n                max_sublist = current_sublist\n            current_sublist = [num]\n    \n    if len(current_sublist) > len(max_sublist):\n        max_sublist = current_sublist\n    \n    return max_sublist\n"}
{"task_id": 208, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A FUNCTION TO ROUND EVERY NUMBER OF A GIVEN LIST OF NUMBERS AND PRINT THE TOTAL SUM MULTIPLIED BY THE LENGTH OF THE LIST.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(list1):\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    result = total_sum * len(list1)\n    print(result)\n```", "response_code": "\nimport math\n\ndef func(list1):\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    result = total_sum * len(list1)\n    print(result)\n"}
{"task_id": 209, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE CUBE SUM OF FIRST N EVEN NATURAL NUMBERS.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n * (n + 1) * (2 * n + 1) // 2\n```", "response_code": "\ndef func(n):\n    return n * (n + 1) * (2 * n + 1) // 2\n"}
{"task_id": 210, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    WRITE A FUNCTION TO CONCATENATE EACH ELEMENT OF TUPLE BY THE DELIMITER.\n    '''\n"}], "response": "```python\ndef func(test_tup):\n    return '-'.join(test_tup)\n```", "response_code": "\ndef func(test_tup):\n    return '-'.join(test_tup)\n"}
{"task_id": 211, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):  \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE AVERAGE OF CUBES OF FIRST N NATURAL NUMBERS.\n    '''\n"}], "response": "```python\ndef func(n):\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    avg_cubes = sum_cubes / n\n    return avg_cubes\n```", "response_code": "\ndef func(n):\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    avg_cubes = sum_cubes / n\n    return avg_cubes\n"}
{"task_id": 212, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tuple):\n    '''\n    WRITE A FUNCTION TO EXTRACT ONLY THE REAR INDEX ELEMENT OF EACH STRING IN THE GIVEN TUPLE.\n    '''\n"}], "response": "def func(test_tuple):\n    return tuple(s[-1] for s in test_tuple)", "response_code": "def func(test_tuple):\n    return tuple(s[-1] for s in test_tuple)"}
{"task_id": 213, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1, x): \n    '''\n    WRITE A FUNCTION TO COUNT THE NUMBER OF SUBLISTS CONTAINING A PARTICULAR ELEMENT.\n    '''\n"}], "response": "```python\ndef count_sublists_with_element(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n```", "response_code": "\ndef count_sublists_with_element(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"}
{"task_id": 214, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    WRITE A FUNCTION TO FILTER ODD NUMBERS USING LAMBDA FUNCTION.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))\n```", "response_code": "\ndef func(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))\n"}
{"task_id": 215, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(dt):\n    '''\n    WRITE A FUNCTION TO CONVERT A DATE OF YYYY-MM-DD FORMAT TO DD-MM-YYYY FORMAT BY USING REGEX.\n    '''\n"}], "response": "import re\n\ndef func(dt):\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)", "response_code": "import re\n\ndef func(dt):\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)"}
{"task_id": 216, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(my_list):\n    '''\n    WRITE A FUNCTION TO SORT THE GIVEN ARRAY BY USING SHELL SORT.\n    '''\n"}], "response": "```python\ndef func(my_list):\n    '''\n    WRITE A FUNCTION TO SORT THE GIVEN ARRAY BY USING SHELL SORT.\n    '''\n    def shell_sort(arr):\n        n = len(arr)\n        gap = n // 2\n        while gap > 0:\n            for i in range(gap, n):\n                temp = arr[i]\n                j = i\n                while j >= gap and arr[j - gap] > temp:\n                    arr[j] = arr[j - gap]\n                    j -= gap\n                arr[j] = temp\n            gap //= 2\n        return arr\n\n    return shell_sort(my_list)\n```", "response_code": "\ndef func(my_list):\n    '''\n    WRITE A FUNCTION TO SORT THE GIVEN ARRAY BY USING SHELL SORT.\n    '''\n    def shell_sort(arr):\n        n = len(arr)\n        gap = n // 2\n        while gap > 0:\n            for i in range(gap, n):\n                temp = arr[i]\n                j = i\n                while j >= gap and arr[j - gap] > temp:\n                    arr[j] = arr[j - gap]\n                    j -= gap\n                arr[j] = temp\n            gap //= 2\n        return arr\n\n    return shell_sort(my_list)\n"}
{"task_id": 217, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    WRITE A FUNCTION TO EXTRACT THE ELEMENTWISE AND TUPLES FROM THE GIVEN TWO TUPLES.\n    '''\n"}], "response": "```python\ndef func(test_tup1, test_tup2):\n    return tuple(x for x in test_tup1 if x in test_tup2), tuple(x for x in test_tup2 if x in test_tup1)\n```", "response_code": "\ndef func(test_tup1, test_tup2):\n    return tuple(x for x in test_tup1 if x in test_tup2), tuple(x for x in test_tup2 if x in test_tup1)\n"}
{"task_id": 218, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a, b, c): \n    '''\n    WRITE A FUNCTION TO FIND THE DIRECTRIX OF A PARABOLA.\n    '''\n"}], "response": "import math\n\ndef func(a, b, c):\n    directrix = -c / (4 * a)\n    return directrix", "response_code": "import math\n\ndef func(a, b, c):\n    directrix = -c / (4 * a)\n    return directrix"}
{"task_id": 219, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1, list2):\n    '''\n    WRITE A FUNCTION THAT TAKES TWO LISTS AND RETURNS TRUE IF THEY HAVE AT LEAST ONE COMMON ELEMENT.\n    '''\n"}], "response": "def func(list1, list2):\n    return any(item in list1 for item in list2)", "response_code": "def func(list1, list2):\n    return any(item in list1 for item in list2)"}
{"task_id": 220, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(base1,base2,height):\n    '''\n    WRITE A FUNCTION TO FIND THE MEDIAN OF A TRAPEZIUM.\n    '''\n"}], "response": "```python\ndef func(base1, base2, height):\n    return (base1 + base2) / 2 * height\n```", "response_code": "\ndef func(base1, base2, height):\n    return (base1 + base2) / 2 * height\n"}
{"task_id": 221, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr, number):\n    '''\n    WRITE A FUNCTION TO CHECK WHETHER THE ENTERED NUMBER IS GREATER THAN THE ELEMENTS OF THE GIVEN ARRAY.\n    '''\n"}], "response": "```python\ndef func(arr, number):\n    return all(num < number for num in arr)\n```", "response_code": "\ndef func(arr, number):\n    return all(num < number for num in arr)\n"}
{"task_id": 222, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    WRITE A FUNCTION THAT MATCHES A STRING THAT HAS AN A FOLLOWED BY ONE OR MORE B'S.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'a+b+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False", "response_code": "import re\n\ndef func(text):\n    pattern = r'a+b+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": 223, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n) :\n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE LAST DIGIT OF A GIVEN NUMBER.\n    '''\n"}], "response": "def func(n):\n    return n % 10", "response_code": "def func(n):\n    return n % 10"}
{"task_id": 224, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A PYTHON FUNCTION TO PRINT NEGATIVE NUMBERS IN A LIST.\n    '''\n"}], "response": "```python\ndef func(list1):\n    for num in list1:\n        if num < 0:\n            print(num)\n```", "response_code": "\ndef func(list1):\n    for num in list1:\n        if num < 0:\n            print(num)\n"}
{"task_id": 225, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1):\n    '''\n    WRITE A FUNCTION TO REMOVE ODD CHARACTERS IN A STRING.\n    '''\n"}], "response": "```python\ndef func(str1):\n    return str1[::2]\n```", "response_code": "\ndef func(str1):\n    return str1[::2]\n"}
{"task_id": 226, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    WRITE A FUNCTION TO COUNT BIDIRECTIONAL TUPLE PAIRS.\n    '''\n"}], "response": "```python\nfrom collections import Counter\n\ndef func(test_list):\n    count = Counter(test_list)\n    bidirectional_pairs = sum(v // 2 for v in count.values())\n    return bidirectional_pairs\n```", "response_code": "\nfrom collections import Counter\n\ndef func(test_list):\n    count = Counter(test_list)\n    bidirectional_pairs = sum(v // 2 for v in count.values())\n    return bidirectional_pairs\n"}
{"task_id": 227, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(L):\n    '''\n    WRITE A FUNCTION TO CONVERT A LIST OF MULTIPLE INTEGERS INTO A SINGLE INTEGER.\n    '''\n"}], "response": "```python\ndef func(L):\n    return int(''.join(map(str, L)))\n```", "response_code": "\ndef func(L):\n    return int(''.join(map(str, L)))\n"}
{"task_id": 228, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    WRITE A FUNCTION TO FIND ALL ADVERBS AND THEIR POSITIONS IN A GIVEN SENTENCE.\n    '''\n"}], "response": "import re\n\ndef find_adverbs(text):\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    positions = [(m.start(0), m.end(0)) for m in re.finditer(r'\\b\\w+ly\\b', text)]\n    return list(zip(adverbs, positions))", "response_code": "import re\n\ndef find_adverbs(text):\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    positions = [(m.start(0), m.end(0)) for m in re.finditer(r'\\b\\w+ly\\b', text)]\n    return list(zip(adverbs, positions))"}
{"task_id": 229, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l):\n    '''\n    WRITE A FUNCTION TO FIND THE SURFACE AREA OF A CUBE.\n    '''\n"}], "response": "```python\ndef func(l):\n    return 6 * (l ** 2)\n```", "response_code": "\ndef func(l):\n    return 6 * (l ** 2)\n"}
{"task_id": 230, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from array import array\ndef func(nums):\n    '''\n    WRITE A FUNCTION TO FIND THE RATIO OF POSITIVE NUMBERS IN AN ARRAY OF INTEGERS.\n    '''\n"}], "response": "```python\nfrom array import array\n\ndef func(nums):\n    if not nums:\n        return 0\n    \n    count_positive = sum(1 for num in nums if num > 0)\n    ratio = count_positive / len(nums)\n    \n    return ratio\n```", "response_code": "\nfrom array import array\n\ndef func(nums):\n    if not nums:\n        return 0\n    \n    count_positive = sum(1 for num in nums if num > 0)\n    ratio = count_positive / len(nums)\n    \n    return ratio\n"}
{"task_id": 231, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE LARGEST NEGATIVE NUMBER FROM THE GIVEN LIST.\n    '''\n"}], "response": "```python\ndef func(list1): \n    neg_nums = [num for num in list1 if num < 0]\n    if not neg_nums:\n        return None\n    return max(neg_nums)\n```", "response_code": "\ndef func(list1): \n    neg_nums = [num for num in list1 if num < 0]\n    if not neg_nums:\n        return None\n    return max(neg_nums)\n"}
{"task_id": 232, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list, K):\n    '''\n    WRITE A FUNCTION TO TRIM EACH TUPLE BY K IN THE GIVEN TUPLE LIST.\n    '''\n"}], "response": "def func(test_list, K):\n    return [tuple(t[K:]) for t in test_list]", "response_code": "def func(test_list, K):\n    return [tuple(t[K:]) for t in test_list]"}
{"task_id": 233, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    WRITE A FUNCTION TO PERFORM INDEX WISE MULTIPLICATION OF TUPLE ELEMENTS IN THE GIVEN TWO TUPLES.\n    '''\n"}], "response": "def func(test_tup1, test_tup2):\n    result = tuple(x * y for x, y in zip(test_tup1, test_tup2))\n    return result", "response_code": "def func(test_tup1, test_tup2):\n    result = tuple(x * y for x, y in zip(test_tup1, test_tup2))\n    return result"}
{"task_id": 234, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import Counter \ndef func(tup, lst): \n    '''\n    WRITE A PYTHON FUNCTION TO COUNT THE OCCURENCE OF ALL ELEMENTS OF LIST IN A TUPLE.\n    '''\n"}], "response": "from collections import Counter\n\ndef func(tup, lst):\n    return Counter(tup)", "response_code": "from collections import Counter\n\ndef func(tup, lst):\n    return Counter(tup)"}
{"task_id": 235, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    WRITE A FUNCTION TO FIND CUBES OF INDIVIDUAL ELEMENTS IN A LIST USING LAMBDA FUNCTION.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return list(map(lambda x: x**3, nums))\n```", "response_code": "\ndef func(nums):\n    return list(map(lambda x: x**3, nums))\n"}
{"task_id": 236, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A FUNCTION TO CALCULATE THE SUM OF PERRIN NUMBERS.\n    '''\n"}], "response": "```python\ndef func(n):\n    perrin = [3, 0, 2]\n    if n == 0:\n        return perrin[0]\n    elif n == 1:\n        return perrin[1]\n    elif n == 2:\n        return perrin[2]\n    else:\n        for i in range(3, n+1):\n            perrin.append(perrin[i-2] + perrin[i-3])\n        return sum(perrin)\n```", "response_code": "\ndef func(n):\n    perrin = [3, 0, 2]\n    if n == 0:\n        return perrin[0]\n    elif n == 1:\n        return perrin[1]\n    elif n == 2:\n        return perrin[2]\n    else:\n        for i in range(3, n+1):\n            perrin.append(perrin[i-2] + perrin[i-3])\n        return sum(perrin)\n"}
{"task_id": 237, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str, l):\n    '''\n    WRITE A FUNCTION TO EXTRACT SPECIFIED SIZE OF STRINGS FROM A GIVE LIST OF STRING VALUES.\n    '''\n"}], "response": "def func(str_list, size):\n    return [s[:size] for s in str_list]", "response_code": "def func(str_list, size):\n    return [s[:size] for s in str_list]"}
{"task_id": 238, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text1):\n    '''\n    WRITE A FUNCTION TO REMOVE ALL WHITESPACES FROM THE GIVEN STRING USING REGEX.\n    '''\n"}], "response": "import re\n\ndef func(text1):\n    return re.sub(r'\\s+', '', text1)", "response_code": "import re\n\ndef func(text1):\n    return re.sub(r'\\s+', '', text1)"}
{"task_id": 239, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(actual_cost,sale_amount): \n    '''\n    WRITE A FUNCTION THAT GIVES LOSS AMOUNT IF THE GIVEN AMOUNT HAS LOSS ELSE RETURN NONE.\n    '''\n"}], "response": "def calculate_loss(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return None", "response_code": "def calculate_loss(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return None"}
{"task_id": 240, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math \ndef func(n) : \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SUM OF EVEN FACTORS OF A NUMBER.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if i != n // i and (n // i) % 2 == 0:\n                sum += n // i\n    return sum", "response_code": "import math\n\ndef func(n):\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if i != n // i and (n // i) % 2 == 0:\n                sum += n // i\n    return sum"}
{"task_id": 241, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    WRITE A FUNCTION THAT MATCHES A WORD CONTAINING 'Z'.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches", "response_code": "import re\n\ndef func(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"}
{"task_id": 242, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(monthnum2):\n    '''\n    WRITE A FUNCTION TO CHECK WHETHER THE GIVEN MONTH NUMBER CONTAINS 31 DAYS OR NOT.\n    '''\n"}], "response": "def func(monthnum2):\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False", "response_code": "def func(monthnum2):\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"}
{"task_id": 243, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(stringlist):\n    '''\n    WRITE A FUNCTION TO REVERSE STRINGS IN A GIVEN LIST OF STRING VALUES.\n    '''\n"}], "response": "```python\ndef func(stringlist):\n    return [string[::-1] for string in stringlist]\n```", "response_code": "\ndef func(stringlist):\n    return [string[::-1] for string in stringlist]\n"}
{"task_id": 244, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SUBLIST HAVING MINIMUM LENGTH.\n    '''\n"}], "response": "```python\ndef func(lst): \n    min_length = len(lst)\n    min_sublist = lst\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) < min_length:\n                min_length = len(lst[i:j])\n                min_sublist = lst[i:j]\n    return min_sublist\n```", "response_code": "\ndef func(lst): \n    min_length = len(lst)\n    min_sublist = lst\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) < min_length:\n                min_length = len(lst[i:j])\n                min_sublist = lst[i:j]\n    return min_sublist\n"}
{"task_id": 245, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l,b):\n    '''\n    WRITE A FUNCTION TO FIND THE AREA OF A RECTANGLE.\n    '''\n"}], "response": "```python\ndef func(l, b):\n    '''\n    Function to find the area of a rectangle.\n    \n    Parameters:\n    l (float): Length of the rectangle\n    b (float): Breadth of the rectangle\n    \n    Returns:\n    float: Area of the rectangle\n    '''\n    return l * b\n```", "response_code": "\ndef func(l, b):\n    '''\n    Function to find the area of a rectangle.\n    \n    Parameters:\n    l (float): Length of the rectangle\n    b (float): Breadth of the rectangle\n    \n    Returns:\n    float: Area of the rectangle\n    '''\n    return l * b\n"}
{"task_id": 246, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(str1):\n    '''\n    WRITE A FUNCTION TO REMOVE UPPERCASE SUBSTRINGS FROM A GIVEN STRING BY USING REGEX.\n    '''\n"}], "response": "import re\n\ndef func(str1):\n    return re.sub(r'[A-Z]+', '', str1)", "response_code": "import re\n\ndef func(str1):\n    return re.sub(r'[A-Z]+', '', str1)"}
{"task_id": 247, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst): \n    '''\n    WRITE A PYTHON FUNCTION TO GET THE FIRST ELEMENT OF EACH SUBLIST.\n    '''\n"}], "response": "```python\ndef func(lst): \n    return [sublist[0] for sublist in lst]\n```", "response_code": "\ndef func(lst): \n    return [sublist[0] for sublist in lst]\n"}
{"task_id": 248, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str):\n    '''\n    WRITE A PYTHON FUNCTION TO COUNT THE UPPER CASE CHARACTERS IN A GIVEN STRING.\n    '''\n"}], "response": "```python\ndef count_uppercase_chars(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count\n```", "response_code": "\ndef count_uppercase_chars(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count\n"}
{"task_id": 249, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A FUNCTION TO FIND ALL POSSIBLE COMBINATIONS OF THE ELEMENTS OF A GIVEN LIST.\n    '''\n"}], "response": "from itertools import permutations\n\ndef func(list1):\n    return list(permutations(list1))", "response_code": "from itertools import permutations\n\ndef func(list1):\n    return list(permutations(list1))"}
{"task_id": 250, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):\n    '''\n    WRITE A FUNCTION TO FIND THE MAXIMUM PRODUCT SUBARRAY OF THE GIVEN ARRAY.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(arr):\n    if not arr:\n        return 0\n    \n    max_prod = arr[0]\n    min_prod = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_prod, min_prod = min_prod, max_prod\n        \n        max_prod = max(arr[i], max_prod * arr[i])\n        min_prod = min(arr[i], min_prod * arr[i])\n        \n        result = max(result, max_prod)\n    \n    return result\n```", "response_code": "\nimport numpy as np\n\ndef func(arr):\n    if not arr:\n        return 0\n    \n    max_prod = arr[0]\n    min_prod = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_prod, min_prod = min_prod, max_prod\n        \n        max_prod = max(arr[i], max_prod * arr[i])\n        min_prod = min(arr[i], min_prod * arr[i])\n        \n        result = max(result, max_prod)\n    \n    return result\n"}
{"task_id": 251, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(dict, n):\n    '''\n    WRITE A FUNCTION TO CHECK IF ALL VALUES ARE SAME IN A DICTIONARY.\n    '''\n"}], "response": "def check_all_values_same(dict):\n    return len(set(dict.values())) == 1", "response_code": "def check_all_values_same(dict):\n    return len(set(dict.values())) == 1"}
{"task_id": 252, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(dict1):\n    '''\n    WRITE A FUNCTION TO DROP EMPTY ITEMS FROM A GIVEN DICTIONARY.\n    '''\n"}], "response": "```python\ndef func(dict1):\n    return {key: value for key, value in dict1.items() if value}\n```", "response_code": "\ndef func(dict1):\n    return {key: value for key, value in dict1.items() if value}\n"}
{"task_id": 253, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):   \n    '''\n    WRITE A FUNCTION TO FIND THE MAXIMUM PRODUCT FORMED BY MULTIPLYING NUMBERS OF AN INCREASING SUBSEQUENCE OF THAT ARRAY.\n    '''\n"}], "response": "```python\nfrom functools import reduce\n\ndef func(arr):\n    if not arr:\n        return 0\n    \n    dp = [arr[0]]\n    for num in arr[1:]:\n        if num > dp[-1]:\n            dp.append(num)\n        else:\n            for i in range(len(dp)):\n                if dp[i] >= num:\n                    dp[i] = num\n                    break\n    \n    return reduce(lambda x, y: x*y, dp)\n```", "response_code": "\nfrom functools import reduce\n\ndef func(arr):\n    if not arr:\n        return 0\n    \n    dp = [arr[0]]\n    for num in arr[1:]:\n        if num > dp[-1]:\n            dp.append(num)\n        else:\n            for i in range(len(dp)):\n                if dp[i] >= num:\n                    dp[i] = num\n                    break\n    \n    return reduce(lambda x, y: x*y, dp)\n"}
{"task_id": 254, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    WRITE A FUNCTION TO FIND THE PAIRWISE ADDITION OF THE ELEMENTS OF THE GIVEN TUPLES.\n    '''\n"}], "response": "```python\ndef func(test_tup):\n    return [sum(pair) for pair in zip(*test_tup)]\n```", "response_code": "\ndef func(test_tup):\n    return [sum(pair) for pair in zip(*test_tup)]\n"}
{"task_id": 255, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr, n): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND REMAINDER OF ARRAY MULTIPLICATION DIVIDED BY N.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(arr, n): \n    return np.prod(arr) % n\n```", "response_code": "\nimport numpy as np\n\ndef func(arr, n): \n    return np.prod(arr) % n\n"}
{"task_id": 256, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l): \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER THE GIVEN LIST CONTAINS CONSECUTIVE NUMBERS OR NOT.\n    '''\n"}], "response": "```python\ndef func(l):\n    return sorted(l) == list(range(min(l), max(l)+1))\n```", "response_code": "\ndef func(l):\n    return sorted(l) == list(range(min(l), max(l)+1))\n"}
{"task_id": 257, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list1, test_list2):\n    '''\n    WRITE A FUNCTION TO FIND THE TUPLE INTERSECTION OF ELEMENTS IN THE GIVEN TUPLE LIST IRRESPECTIVE OF THEIR ORDER.\n    '''\n"}], "response": "from collections import Counter\n\ndef func(test_list1, test_list2):\n    return list((Counter(test_list1) & Counter(test_list2)).elements())", "response_code": "from collections import Counter\n\ndef func(test_list1, test_list2):\n    return list((Counter(test_list1) & Counter(test_list2)).elements())"}
{"task_id": 258, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1,ch,newch):\n    '''\n    WRITE A FUNCTION TO REPLACE CHARACTERS IN A STRING.\n    '''\n"}], "response": "def func(str1, ch, newch):\n    return str1.replace(ch, newch)", "response_code": "def func(str1, ch, newch):\n    return str1.replace(ch, newch)"}
{"task_id": 259, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import Counter\ndef func(dict1):\n    '''\n    WRITE A FUNCTION TO SORT COUNTER BY VALUE.\n    '''\n"}], "response": "```python\nfrom collections import Counter\n\ndef func(dict1):\n    sorted_dict = dict(Counter(dict1).most_common())\n    return sorted_dict\n```", "response_code": "\nfrom collections import Counter\n\ndef func(dict1):\n    sorted_dict = dict(Counter(dict1).most_common())\n    return sorted_dict\n"}
{"task_id": 260, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SUM OF THE LARGEST AND SMALLEST VALUE IN A GIVEN ARRAY.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return max(nums) + min(nums)\n```", "response_code": "\ndef func(nums):\n    return max(nums) + min(nums)\n"}
{"task_id": 261, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(string):\n    '''\n    WRITE A PYTHON FUNCTION TO CONVERT THE GIVEN STRING TO LOWER CASE.\n    '''\n"}], "response": "def func(string):\n    return string.lower()", "response_code": "def func(string):\n    return string.lower()"}
{"task_id": 262, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(str1):\n    '''\n    WRITE A FUNCTION TO REMOVE LOWERCASE SUBSTRINGS FROM A GIVEN STRING.\n    '''\n"}], "response": "import re\n\ndef func(str1):\n    return re.sub(r'[a-z]+', '', str1)", "response_code": "import re\n\ndef func(str1):\n    return re.sub(r'[a-z]+', '', str1)"}
{"task_id": 263, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n) :  \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE FIRST DIGIT OF A GIVEN NUMBER.\n    '''\n"}], "response": "```python\ndef func(n):\n    return int(str(n)[0])\n```", "response_code": "\ndef func(n):\n    return int(str(n)[0])\n"}
{"task_id": 264, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND ODD NUMBERS FROM A MIXED LIST.\n    '''\n"}], "response": "def find_odd_numbers(lst):\n    return [num for num in lst if num % 2 != 0]", "response_code": "def find_odd_numbers(lst):\n    return [num for num in lst if num % 2 != 0]"}
{"task_id": 265, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n) :  \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE DIFFERENCE BETWEEN SUM OF CUBES OF FIRST N NATURAL NUMBERS AND THE SUM OF FIRST N NATURAL NUMBERS.\n    '''\n"}], "response": "def func(n):\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    sum_of_natural_numbers = n * (n + 1) // 2\n    return sum_of_cubes - sum_of_natural_numbers\n\n# Example usage:\n# result = func(5)\n# print(result)", "response_code": "def func(n):\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    sum_of_natural_numbers = n * (n + 1) // 2\n    return sum_of_cubes - sum_of_natural_numbers\n\n# Example usage:\n# result = func(5)\n# print(result)"}
{"task_id": 266, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(A,N) : \n    '''\n    WRITE A PYTHON FUNCTION TO COUNT THE PAIRS WITH XOR AS AN ODD NUMBER.\n    '''\n"}], "response": "```python\ndef func(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count += 1\n    return count\n```", "response_code": "\ndef func(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count += 1\n    return count\n"}
{"task_id": 267, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(string):\n    '''\n    WRITE A FUNCTION TO TOGGLE CHARACTERS CASE IN A STRING.\n    '''\n"}], "response": "```python\ndef func(string):\n    return string.swapcase()\n```", "response_code": "\ndef func(string):\n    return string.swapcase()\n"}
{"task_id": 268, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n1, n2):\n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE DIGIT DISTANCE BETWEEN TWO INTEGERS.\n    '''\n"}], "response": "```python\ndef digit_distance(n1, n2):\n    return sum([int(digit) for digit in str(abs(n1 - n2))])\n\n# Example usage:\n# print(digit_distance(123, 456))\n```", "response_code": "\ndef digit_distance(n1, n2):\n    return sum([int(digit) for digit in str(abs(n1 - n2))])\n\n# Example usage:\n# print(digit_distance(123, 456))\n"}
{"task_id": 269, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a, size):\n    '''\n    WRITE A FUNCTION TO FIND THE LARGEST SUM OF CONTIGUOUS SUBARRAY IN THE GIVEN ARRAY.\n    '''\n"}], "response": "```python\nimport sys\n\ndef func(a, size):\n    max_sum = -sys.maxsize - 1\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n```", "response_code": "\nimport sys\n\ndef func(a, size):\n    max_sum = -sys.maxsize - 1\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n"}
{"task_id": 270, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    WRITE A FUNCTION TO FIND THE UNION OF ELEMENTS OF THE GIVEN TUPLES.\n    '''\n"}], "response": "```python\ndef func(test_tup1, test_tup2):\n    return set(test_tup1).union(set(test_tup2))\n```", "response_code": "\ndef func(test_tup1, test_tup2):\n    return set(test_tup1).union(set(test_tup2))\n"}
{"task_id": 271, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst):  \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE MAXIMUM LENGTH OF SUBLIST.\n    '''\n"}], "response": "```python\ndef func(lst):\n    max_length = 0\n    current_length = 0\n\n    for num in lst:\n        if num == 1:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n\n    max_length = max(max_length, current_length)\n\n    return max_length\n```", "response_code": "\ndef func(lst):\n    max_length = 0\n    current_length = 0\n\n    for num in lst:\n        if num == 1:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n\n    max_length = max(max_length, current_length)\n\n    return max_length\n"}
{"task_id": 272, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    WRITE A FUNCTION TO EXTRACT VALUES BETWEEN QUOTATION MARKS OF A STRING.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    return re.findall(r'\"(.*?)\"', text)", "response_code": "import re\n\ndef func(text):\n    return re.findall(r'\"(.*?)\"', text)"}
{"task_id": 273, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr,n): \n    '''\n    WRITE A PYTHON FUNCTION TO COUNT UNEQUAL ELEMENT PAIRS FROM THE GIVEN ARRAY.\n    '''\n"}], "response": "```python\ndef func(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n```", "response_code": "\ndef func(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n"}
{"task_id": 274, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(word): \n    '''\n    WRITE A PYTHON FUNCTION TO SPLIT A STRING INTO CHARACTERS.\n    '''\n"}], "response": "```python\ndef func(word): \n    return list(word)\n```", "response_code": "\ndef func(word): \n    return list(word)\n"}
{"task_id": 275, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    WRITE A FUNCTION TO GET THE SUM OF A NON-NEGATIVE INTEGER.\n    '''\n"}], "response": "```python\ndef func(n):\n    return sum(int(i) for i in str(n))\n```", "response_code": "\ndef func(n):\n    return sum(int(i) for i in str(n))\n"}
{"task_id": 276, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A FUNCTION TO CHECK WHETHER A SPECIFIED LIST IS SORTED OR NOT.\n    '''\n"}], "response": "def func(list1):\n    return all(list1[i] <= list1[i + 1] for i in range(len(list1) - 1))", "response_code": "def func(list1):\n    return all(list1[i] <= list1[i + 1] for i in range(len(list1) - 1))"}
{"task_id": 277, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(length):\n    '''\n    WRITE A FUNCTION TO CREATE A LIST OF EMPTY DICTIONARIES.\n    '''\n"}], "response": "def func(length):\n    return [{} for _ in range(length)]", "response_code": "def func(length):\n    return [{} for _ in range(length)]"}
{"task_id": 278, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A FUNCTION TO SORT EACH SUBLIST OF STRINGS IN A GIVEN LIST OF LISTS.\n    '''\n"}], "response": "```python\ndef func(list1):\n    return [sorted(sublist) for sublist in list1]\n```", "response_code": "\ndef func(list1):\n    return [sorted(sublist) for sublist in list1]\n"}
{"task_id": 279, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    WRITE A PYTHON FUNCTION TO REMOVE TWO DUPLICATE NUMBERS FROM A GIVEN NUMBER OF LISTS.\n    '''\n"}], "response": "from collections import Counter\n\ndef func(nums):\n    counts = Counter(nums)\n    duplicates = [num for num, count in counts.items() if count > 1]\n    \n    for duplicate in duplicates[:2]:\n        nums.remove(duplicate)\n    \n    return nums", "response_code": "from collections import Counter\n\ndef func(nums):\n    counts = Counter(nums)\n    duplicates = [num for num, count in counts.items() if count > 1]\n    \n    for duplicate in duplicates[:2]:\n        nums.remove(duplicate)\n    \n    return nums"}
{"task_id": 280, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list_data):\n    '''\n    WRITE A PYTHON FUNCTION TO CALCULATE THE PRODUCT OF THE UNIQUE NUMBERS OF A GIVEN LIST.\n    '''\n"}], "response": "```python\ndef func(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product\n```", "response_code": "\ndef func(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product\n"}
{"task_id": 281, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(r,h):\n    '''\n    WRITE A FUNCTION TO FIND THE SURFACE AREA OF A CYLINDER.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(r, h):\n    return 2 * math.pi * r * (r + h)\n```", "response_code": "\nimport math\n\ndef func(r, h):\n    return 2 * math.pi * r * (r + h)\n"}
{"task_id": 282, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(A,B): \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER AN ARRAY IS SUBARRAY OF ANOTHER OR NOT.\n    '''\n"}], "response": "```python\ndef is_subarray(A, B):\n    if len(A) == 0:\n        return True\n    if len(B) == 0:\n        return False\n    for i in range(len(B)):\n        if B[i] == A[0]:\n            if B[i:i+len(A)] == A:\n                return True\n    return False\n```", "response_code": "\ndef is_subarray(A, B):\n    if len(A) == 0:\n        return True\n    if len(B) == 0:\n        return False\n    for i in range(len(B)):\n        if B[i] == A[0]:\n            if B[i:i+len(A)] == A:\n                return True\n    return False\n"}
{"task_id": 283, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE LAST DIGIT IN FACTORIAL OF A GIVEN NUMBER.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(n):\n    factorial = math.factorial(n)\n    last_digit = factorial % 10\n    return last_digit\n```", "response_code": "\nimport math\n\ndef func(n):\n    factorial = math.factorial(n)\n    last_digit = factorial % 10\n    return last_digit\n"}
{"task_id": 284, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1,list2,list3):\n    '''\n    WRITE A FUNCTION TO INTERLEAVE LISTS OF THE SAME LENGTH.\n    '''\n"}], "response": "```python\ndef func(list1, list2, list3):\n    interleaved_list = [val for pair in zip(list1, list2, list3) for val in pair]\n    return interleaved_list\n```", "response_code": "\ndef func(list1, list2, list3):\n    interleaved_list = [val for pair in zip(list1, list2, list3) for val in pair]\n    return interleaved_list\n"}
{"task_id": 285, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    WRITE A FUNCTION TO FIND THE DISSIMILAR ELEMENTS IN THE GIVEN TWO TUPLES.\n    '''\n"}], "response": "```python\ndef func(test_tup1, test_tup2):\n    return tuple(set(test_tup1) ^ set(test_tup2))\n```", "response_code": "\ndef func(test_tup1, test_tup2):\n    return tuple(set(test_tup1) ^ set(test_tup2))\n"}
{"task_id": 286, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tuple, even_fnc): \n    '''\n    WRITE A FUNCTION TO EXTRACT THE EVEN ELEMENTS IN THE NESTED MIXED TUPLE.\n    '''\n"}], "response": "```python\ndef func(test_tuple, even_fnc):\n    even_elements = [item for sublist in test_tuple for item in sublist if even_fnc(item)]\n    return even_elements\n```", "response_code": "\ndef func(test_tuple, even_fnc):\n    even_elements = [item for sublist in test_tuple for item in sublist if even_fnc(item)]\n    return even_elements\n"}
{"task_id": 287, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(b,s): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SURFACE AREA OF THE SQUARE PYRAMID.\n    '''\n"}], "response": "```python\ndef func(b, s):\n    # Importing math package to use square root function\n    import math\n    \n    # Calculate the slant height of the pyramid\n    l = math.sqrt(b**2 + (s/2)**2)\n    \n    # Calculate the surface area of the square pyramid\n    surface_area = b**2 + 2*b*l\n    \n    return surface_area\n```", "response_code": "\ndef func(b, s):\n    # Importing math package to use square root function\n    import math\n    \n    # Calculate the slant height of the pyramid\n    l = math.sqrt(b**2 + (s/2)**2)\n    \n    # Calculate the surface area of the square pyramid\n    surface_area = b**2 + 2*b*l\n    \n    return surface_area\n"}
{"task_id": 288, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(dict1):\n    '''\n    WRITE A FUNCTION TO CHECK IF A DICTIONARY IS EMPTY OR NOT.\n    '''\n"}], "response": "```python\ndef func(dict1):\n    if not dict1:\n        return True\n    else:\n        return False\n```", "response_code": "\ndef func(dict1):\n    if not dict1:\n        return True\n    else:\n        return False\n"}
{"task_id": 289, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(num):\n    '''\n    WRITE A FUNCTION FOR NTH CATALAN NUMBER.\n    '''\n"}], "response": "```python\ndef func(num):\n    if num <= 1:\n        return 1\n    res = 0\n    for i in range(num):\n        res += func(i) * func(num - i - 1)\n    return res\n```", "response_code": "\ndef func(num):\n    if num <= 1:\n        return 1\n    res = 0\n    for i in range(num):\n        res += func(i) * func(num - i - 1)\n    return res\n"}
{"task_id": 290, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    WRITE A FUNCTION TO FIND ALL ADVERBS AND THEIR POSITIONS IN A GIVEN SENTENCE BY USING REGEX.\n    '''\n"}], "response": "import re\n\ndef find_adverbs(text):\n    adverbs = re.finditer(r'\\b\\w+ly\\b', text)\n    adverbs_positions = [(adverb.group(), adverb.start()) for adverb in adverbs]\n    return adverbs_positions", "response_code": "import re\n\ndef find_adverbs(text):\n    adverbs = re.finditer(r'\\b\\w+ly\\b', text)\n    adverbs_positions = [(adverb.group(), adverb.start()) for adverb in adverbs]\n    return adverbs_positions"}
{"task_id": 291, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq\ndef func(items,n):\n    '''\n    WRITE A FUNCTION TO FIND THE N - EXPENSIVE PRICE ITEMS FROM A GIVEN DATASET USING HEAP QUEUE ALGORITHM.\n    '''\n"}], "response": "import heapq\n\ndef func(items, n):\n    return heapq.nlargest(n, items)", "response_code": "import heapq\n\ndef func(items, n):\n    return heapq.nlargest(n, items)"}
{"task_id": 292, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l, n):\n    '''\n    WRITE A PYTHON FUNCTION TO SPLIT THE ARRAY AND ADD THE FIRST PART TO THE END.\n    '''\n"}], "response": "```python\ndef func(l, n):\n    return l[n:] + l[:n]\n```", "response_code": "\ndef func(l, n):\n    return l[n:] + l[:n]\n"}
{"task_id": 293, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(listx):\n    '''\n    WRITE A FUNCTION TO CONVERT A LIST TO A TUPLE.\n    '''\n"}], "response": "def func(listx):\n    return tuple(listx)", "response_code": "def func(listx):\n    return tuple(listx)"}
{"task_id": 294, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE DIFFERENCE BETWEEN LARGEST AND SMALLEST VALUE IN A GIVEN ARRAY.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return max(nums) - min(nums)\n```", "response_code": "\ndef func(nums):\n    return max(nums) - min(nums)\n"}
{"task_id": 295, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a, b):\n    '''\n    WRITE A FUNCTION TO FIND PERFECT SQUARES BETWEEN TWO GIVEN NUMBERS.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(a, b):\n    squares = []\n    for i in range(a, b+1):\n        if math.isqrt(i) ** 2 == i:\n            squares.append(i)\n    return squares\n```", "response_code": "\nimport math\n\ndef func(a, b):\n    squares = []\n    for i in range(a, b+1):\n        if math.isqrt(i) ** 2 == i:\n            squares.append(i)\n    return squares\n"}
{"task_id": 296, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import cmath\ndef func(x,y):\n    '''\n    WRITE A FUNCTION TO CONVERT POLAR COORDINATES TO RECTANGULAR COORDINATES.\n    '''\n"}], "response": "import cmath\n\ndef func(x, y):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    \n    Parameters:\n    x (float): Magnitude\n    y (float): Angle in radians\n    \n    Returns:\n    complex: Rectangular coordinates in the form of a complex number\n    '''\n    return cmath.rect(x, y)", "response_code": "import cmath\n\ndef func(x, y):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    \n    Parameters:\n    x (float): Magnitude\n    y (float): Angle in radians\n    \n    Returns:\n    complex: Rectangular coordinates in the form of a complex number\n    '''\n    return cmath.rect(x, y)"}
{"task_id": 297, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(newList): \n    '''\n    WRITE A PYTHON FUNCTION TO INTERCHANGE THE FIRST AND LAST ELEMENTS IN A LIST.\n    '''\n"}], "response": "def interchange_first_last(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList", "response_code": "def interchange_first_last(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"}
{"task_id": 298, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n,k): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND SUM OF PRODUCT OF BINOMIAL CO-EFFICIENTS.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(n, k):\n    result = 0\n    for i in range(k+1):\n        result += math.comb(n, i) * math.comb(n-i, k-i)\n    return result\n```", "response_code": "\nimport math\n\ndef func(n, k):\n    result = 0\n    for i in range(k+1):\n        result += math.comb(n, i) * math.comb(n-i, k-i)\n    return result\n"}
{"task_id": 299, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(ip):\n    '''\n    WRITE A FUNCTION TO REMOVE LEADING ZEROES FROM AN IP ADDRESS.\n    '''\n"}], "response": "import re\n\ndef func(ip):\n    return re.sub(r'\\b0+(\\d)', r'\\1', ip)", "response_code": "import re\n\ndef func(ip):\n    return re.sub(r'\\b0+(\\d)', r'\\1', ip)"}
{"task_id": 300, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A FUNCTION TO FIND THE DIFFERENCE OF FIRST EVEN AND ODD NUMBER OF A GIVEN LIST.\n    '''\n"}], "response": "def func(list1):\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2 != 0 and odd_num is None:\n            odd_num = num\n        if even_num is not None and odd_num is not None:\n            break\n    return even_num - odd_num", "response_code": "def func(list1):\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2 != 0 and odd_num is None:\n            odd_num = num\n        if even_num is not None and odd_num is not None:\n            break\n    return even_num - odd_num"}
{"task_id": 301, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1,str2) : \n    '''\n    WRITE A PYTHON FUNCTION TO COUNT MINIMUM NUMBER OF SWAPS REQUIRED TO CONVERT ONE BINARY STRING TO ANOTHER.\n    '''\n"}], "response": "```python\ndef func(str1, str2):\n    return sum([1 for i in range(len(str1)) if str1[i] != str2[i]]) // 2\n```", "response_code": "\ndef func(str1, str2):\n    return sum([1 for i in range(len(str1)) if str1[i] != str2[i]]) // 2\n"}
{"task_id": 302, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import sys \ndef func(tuple_list):\n    '''\n    WRITE A FUNCTION TO FIND THE SIZE OF THE GIVEN TUPLE.\n    '''\n"}], "response": "import sys\n\ndef func(tuple_list):\n    '''\n    Function to find the size of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)", "response_code": "import sys\n\ndef func(tuple_list):\n    '''\n    Function to find the size of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)"}
{"task_id": 303, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr1, arr2, k):\n    '''\n    WRITE A FUNCTION TO FIND KTH ELEMENT FROM THE GIVEN TWO SORTED ARRAYS.\n    '''\n"}], "response": "```python\ndef func(arr1, arr2, k):\n    merged_arr = sorted(arr1 + arr2)\n    return merged_arr[k-1]\n```", "response_code": "\ndef func(arr1, arr2, k):\n    merged_arr = sorted(arr1 + arr2)\n    return merged_arr[k-1]\n"}
{"task_id": 304, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(number):\n    '''\n    WRITE A FUNCTION TO CHECK WHETHER THE GIVEN NUMBER IS ARMSTRONG OR NOT.\n    '''\n"}], "response": "def is_armstrong(number):\n    num_str = str(number)\n    num_digits = len(num_str)\n    \n    sum = 0\n    for digit in num_str:\n        sum += int(digit) ** num_digits\n    \n    if sum == number:\n        return True\n    else:\n        return False", "response_code": "def is_armstrong(number):\n    num_str = str(number)\n    num_digits = len(num_str)\n    \n    sum = 0\n    for digit in num_str:\n        sum += int(digit) ** num_digits\n    \n    if sum == number:\n        return True\n    else:\n        return False"}
{"task_id": 305, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(number):\n    '''\n    WRITE A FUNCTION TO FIND SUM AND AVERAGE OF FIRST N NATURAL NUMBERS.\n    '''\n"}], "response": "def func(number):\n    total = (number * (number + 1)) // 2\n    average = total / number\n    return total, average", "response_code": "def func(number):\n    total = (number * (number + 1)) // 2\n    average = total / number\n    return total, average"}
{"task_id": 306, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n) : \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER THE GIVEN NUMBER IS EVEN OR NOT USING BITWISE OPERATOR.\n    '''\n"}], "response": "def func(n):\n    if n & 1 == 0:\n        return True\n    else:\n        return False", "response_code": "def func(n):\n    if n & 1 == 0:\n        return True\n    else:\n        return False"}
{"task_id": 307, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1):\n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE FIRST REPEATED CHARACTER IN A GIVEN STRING.\n    '''\n"}], "response": "```python\ndef func(str1):\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n```", "response_code": "\ndef func(str1):\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n"}
{"task_id": 308, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    WRITE A FUNCTION TO GET A LUCID NUMBER SMALLER THAN OR EQUAL TO N.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n & -n\n```", "response_code": "\ndef func(n):\n    return n & -n\n"}
{"task_id": 309, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s):\n    '''\n    WRITE A FUNCTION TO REVERSE WORDS IN A GIVEN STRING.\n    '''\n"}], "response": "```python\ndef func(s):\n    return ' '.join(s.split()[::-1])\n```", "response_code": "\ndef func(s):\n    return ' '.join(s.split()[::-1])\n"}
{"task_id": 310, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(num):\n    '''\n    WRITE A FUNCTION TO CHECK IF THE GIVEN INTEGER IS A PRIME NUMBER.\n    '''\n"}], "response": "```python\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n```", "response_code": "\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"}
{"task_id": 311, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(degree):\n    '''\n    WRITE A FUNCTION TO CONVERT DEGREES TO RADIANS.\n    '''\n"}], "response": "import math\n\ndef func(degree):\n    radians = math.radians(degree)\n    return radians", "response_code": "import math\n\ndef func(degree):\n    radians = math.radians(degree)\n    return radians"}
{"task_id": 312, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\n\ndef func(text, pattern):\n    '''\n    WRITE A FUNCTION TO SEARCH A LITERALS STRING IN A STRING AND ALSO FIND THE LOCATION WITHIN THE ORIGINAL STRING WHERE THE PATTERN OCCURS BY USING REGEX.\n    '''\n"}], "response": "import re\n\ndef func(text, pattern):\n    matches = re.finditer(pattern, text)\n    locations = [match.start() for match in matches]\n    return locations", "response_code": "import re\n\ndef func(text, pattern):\n    matches = re.finditer(pattern, text)\n    locations = [match.start() for match in matches]\n    return locations"}
{"task_id": 313, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND NTH BELL NUMBER.\n    '''\n"}], "response": "from math import factorial\n\ndef bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    \n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        \n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    return bell[n][0]", "response_code": "from math import factorial\n\ndef bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    \n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        \n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    return bell[n][0]"}
{"task_id": 314, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1, L):\n    '''\n    WRITE A PYTHON FUNCTION TO REMOVE THE K'TH ELEMENT FROM A GIVEN LIST.\n    '''\n"}], "response": "def remove_kth_element(list1, k):\n    del list1[k]\n    return list1", "response_code": "def remove_kth_element(list1, k):\n    del list1[k]\n    return list1"}
{"task_id": 315, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list, N):\n    '''\n    WRITE A FUNCTION TO FIND THE MAXIMUM OF NTH COLUMN FROM THE GIVEN TUPLE LIST.\n    '''\n"}], "response": "```python\ndef func(test_list, N):\n    return max(test_list, key=lambda x: x[N-1])[N-1]\n```", "response_code": "\ndef func(test_list, N):\n    return max(test_list, key=lambda x: x[N-1])[N-1]\n"}
{"task_id": 316, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst):  \n    '''\n    WRITE A PYTHON FUNCTION TO MERGE THE FIRST AND LAST ELEMENTS SEPARATELY IN A LIST OF LISTS.\n    '''\n"}], "response": "```python\ndef merge_first_last_elements(lst):\n    first_elements = [sublist[0] for sublist in lst]\n    last_elements = [sublist[-1] for sublist in lst]\n    return first_elements + last_elements\n```", "response_code": "\ndef merge_first_last_elements(lst):\n    first_elements = [sublist[0] for sublist in lst]\n    last_elements = [sublist[-1] for sublist in lst]\n    return first_elements + last_elements\n"}
{"task_id": 317, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    WRITE A FUNCTION TO FIND THE CUMULATIVE SUM OF ALL THE VALUES THAT ARE PRESENT IN THE GIVEN TUPLE LIST.\n    '''\n"}], "response": "```python\ndef func(test_list):\n    return [sum(test_list[:i+1]) for i in range(len(test_list))]\n```", "response_code": "\ndef func(test_list):\n    return [sum(test_list[:i+1]) for i in range(len(test_list))]\n"}
{"task_id": 318, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    WRITE A FUNCTION TO FIND AVERAGE VALUE OF THE NUMBERS IN A GIVEN TUPLE OF TUPLES.\n    '''\n"}], "response": "```python\ndef func(nums):\n    total_sum = 0\n    total_count = 0\n    for tup in nums:\n        for num in tup:\n            total_sum += num\n            total_count += 1\n    if total_count == 0:\n        return 0\n    return total_sum / total_count\n```", "response_code": "\ndef func(nums):\n    total_sum = 0\n    total_count = 0\n    for tup in nums:\n        for num in tup:\n            total_sum += num\n            total_count += 1\n    if total_count == 0:\n        return 0\n    return total_sum / total_count\n"}
{"task_id": 319, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    WRITE A FUNCTION TO PERFOM THE MODULO OF TUPLE ELEMENTS IN THE GIVEN TWO TUPLES.\n    '''\n"}], "response": "def func(test_tup1, test_tup2):\n    result = tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n    return result", "response_code": "def func(test_tup1, test_tup2):\n    result = tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n    return result"}
{"task_id": 320, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(steps, d): \n    '''\n    WRITE A FUNCTION TO CHECK FOR THE NUMBER OF JUMPS REQUIRED OF GIVEN LENGTH TO REACH A POINT OF FORM (D, 0) FROM ORIGIN IN A 2D PLANE.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(steps, d): \n    x = d // steps\n    y = d % steps\n    if y == 0:\n        return x\n    else:\n        return x + 1\n```", "response_code": "\nimport math\n\ndef func(steps, d): \n    x = d // steps\n    y = d % steps\n    if y == 0:\n        return x\n    else:\n        return x + 1\n"}
{"task_id": 321, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums1,nums2):\n    '''\n    WRITE A FUNCTION TO DIVIDE TWO LISTS USING MAP AND LAMBDA FUNCTION.\n    '''\n"}], "response": "from typing import List\n\ndef func(nums1: List[int], nums2: List[int]) -> List[float]:\n    return list(map(lambda x, y: x / y, nums1, nums2))", "response_code": "from typing import List\n\ndef func(nums1: List[int], nums2: List[int]) -> List[float]:\n    return list(map(lambda x, y: x / y, nums1, nums2))"}
{"task_id": 322, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_str):\n    '''\n    WRITE A FUNCTION TO MOVE ALL THE NUMBERS IN IT TO THE GIVEN STRING.\n    '''\n"}], "response": "```python\ndef func(test_str):\n    return ''.join([char for char in test_str if char.isdigit()])\n```", "response_code": "\ndef func(test_str):\n    return ''.join([char for char in test_str if char.isdigit()])\n"}
{"task_id": 323, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a):\n    '''\n    WRITE A FUNCTION TO FIND THE LARGEST SUBSET WHERE EACH PAIR IS DIVISIBLE.\n    '''\n"}], "response": "```python\nfrom itertools import combinations\n\ndef func(a):\n    def is_divisible(x, y):\n        return x % y == 0 or y % x == 0\n\n    def is_valid_subset(subset):\n        for pair in combinations(subset, 2):\n            if not is_divisible(pair[0], pair[1]):\n                return False\n        return True\n\n    max_subset = []\n    for i in range(1, len(a) + 1):\n        for subset in combinations(a, i):\n            if is_valid_subset(subset) and len(subset) > len(max_subset):\n                max_subset = subset\n\n    return max_subset\n```", "response_code": "\nfrom itertools import combinations\n\ndef func(a):\n    def is_divisible(x, y):\n        return x % y == 0 or y % x == 0\n\n    def is_valid_subset(subset):\n        for pair in combinations(subset, 2):\n            if not is_divisible(pair[0], pair[1]):\n                return False\n        return True\n\n    max_subset = []\n    for i in range(1, len(a) + 1):\n        for subset in combinations(a, i):\n            if is_valid_subset(subset) and len(subset) > len(max_subset):\n                max_subset = subset\n\n    return max_subset\n"}
{"task_id": 324, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr1, arr2, n):\n    '''\n    WRITE A FUNCTION TO FIND THE MEDIAN OF TWO SORTED ARRAYS OF SAME SIZE.\n    '''\n"}], "response": "from typing import List\n\ndef func(arr1: List[int], arr2: List[int], n: int) -> float:\n    combined_arr = arr1 + arr2\n    combined_arr.sort()\n    \n    if n % 2 == 0:\n        median = (combined_arr[n//2 - 1] + combined_arr[n//2]) / 2\n    else:\n        median = combined_arr[n//2]\n    \n    return median", "response_code": "from typing import List\n\ndef func(arr1: List[int], arr2: List[int], n: int) -> float:\n    combined_arr = arr1 + arr2\n    combined_arr.sort()\n    \n    if n % 2 == 0:\n        median = (combined_arr[n//2 - 1] + combined_arr[n//2]) / 2\n    else:\n        median = combined_arr[n//2]\n    \n    return median"}
{"task_id": 325, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums,n):\n    '''\n    WRITE A FUNCTION TO FIND THE N-TH POWER OF INDIVIDUAL ELEMENTS IN A LIST USING LAMBDA FUNCTION.\n    '''\n"}], "response": "```python\ndef func(nums, n):\n    return list(map(lambda x: x**n, nums))\n```", "response_code": "\ndef func(nums, n):\n    return list(map(lambda x: x**n, nums))\n"}
{"task_id": 326, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(string):\n    '''\n    WRITE A PYTHON FUNCTION TO CONVERT THE GIVEN STRING TO UPPER CASE.\n    '''\n"}], "response": "```python\ndef func(string):\n    return string.upper()\n```", "response_code": "\ndef func(string):\n    return string.upper()\n"}
{"task_id": 327, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(newList): \n    '''\n    WRITE A PYTHON FUNCTION TO INTERCHANGE FIRST AND LAST ELEMENTS IN A GIVEN LIST.\n    '''\n"}], "response": "def interchange_first_last(newList):\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList", "response_code": "def interchange_first_last(newList):\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"}
{"task_id": 328, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(r) :  \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE LARGEST TRIANGLE THAT CAN BE INSCRIBED IN THE SEMICIRCLE.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(r):\n    return math.sqrt(3) / 2 * r\n```", "response_code": "\nimport math\n\ndef func(r):\n    return math.sqrt(3) / 2 * r\n"}
{"task_id": 329, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(array,start=0,end=None):\n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SMALLEST MISSING NUMBER FROM THE GIVEN ARRAY.\n    '''\n"}], "response": "```python\ndef func(array,start=0,end=None):\n    if end is None:\n        end = len(array)\n    \n    for i in range(start, end):\n        if array[i] != i:\n            return i\n    \n    return end\n```", "response_code": "\ndef func(array,start=0,end=None):\n    if end is None:\n        end = len(array)\n    \n    for i in range(start, end):\n        if array[i] != i:\n            return i\n    \n    return end\n"}
{"task_id": 330, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(string):\n    '''\n    WRITE A FUNCTION TO REPLACE ALL SPACES IN THE GIVEN STRING WITH CHARACTER * LIST ITEM * LIST ITEM * LIST ITEM * LIST ITEM '%20'.\n    '''\n"}], "response": "```python\ndef func(string):\n    return string.replace(' ', '%20')\n```", "response_code": "\ndef func(string):\n    return string.replace(' ', '%20')\n"}
{"task_id": 331, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND EVEN NUMBERS FROM A MIXED LIST.\n    '''\n"}], "response": "def find_even_numbers(lst):\n    return [num for num in lst if num % 2 == 0]", "response_code": "def find_even_numbers(lst):\n    return [num for num in lst if num % 2 == 0]"}
{"task_id": 332, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(ele, sub = []): \n    '''\n    WRITE A FUNCTION TO EXTRACT ALL THE ADJACENT COORDINATES OF THE GIVEN COORDINATE TUPLE.\n    '''\n"}], "response": "```python\ndef func(ele, sub = []): \n    '''\n    Function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_coords = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    \n    return adj_coords\n```", "response_code": "\ndef func(ele, sub = []): \n    '''\n    Function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_coords = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    \n    return adj_coords\n"}
{"task_id": 333, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(text):\n    '''\n    WRITE A FUNCTION TO REPLACE WHITESPACES WITH AN UNDERSCORE AND VICE VERSA IN A GIVEN STRING BY USING REGEX.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    text = re.sub(r'\\s', '_', text)\n    text = re.sub(r'_', ' ', text)\n    return text", "response_code": "import re\n\ndef func(text):\n    text = re.sub(r'\\s', '_', text)\n    text = re.sub(r'_', ' ', text)\n    return text"}
{"task_id": 334, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(num_list):\n    '''\n    WRITE A PYTHON FUNCTION TO MOVE ALL ZEROES TO THE END OF THE GIVEN LIST.\n    '''\n"}], "response": "```python\ndef func(num_list):\n    num_list.sort(key=lambda x: x == 0)\n```", "response_code": "\ndef func(num_list):\n    num_list.sort(key=lambda x: x == 0)\n"}
{"task_id": 335, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr,n) : \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SUM OF XOR OF ALL PAIRS OF NUMBERS IN THE GIVEN ARRAY.\n    '''\n"}], "response": "```python\ndef func(arr,n) : \n    total = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total += arr[i] ^ arr[j]\n    return total\n```", "response_code": "\ndef func(arr,n) : \n    total = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total += arr[i] ^ arr[j]\n    return total\n"}
{"task_id": 336, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq as hq\ndef func(iterable):\n    '''\n    WRITE A FUNCTION TO PUSH ALL VALUES INTO A HEAP AND THEN POP OFF THE SMALLEST VALUES ONE AT A TIME.\n    '''\n"}], "response": "import heapq as hq\n\ndef func(iterable):\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, value)\n    \n    while heap:\n        print(hq.heappop(heap))", "response_code": "import heapq as hq\n\ndef func(iterable):\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, value)\n    \n    while heap:\n        print(hq.heappop(heap))"}
{"task_id": 337, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(actual_cost,sale_amount): \n    '''\n    WRITE A FUNCTION TO CHECK WHETHER THE GIVEN AMOUNT HAS NO PROFIT AND NO LOSS\n    '''\n"}], "response": "def func(actual_cost, sale_amount):\n    if actual_cost == sale_amount:\n        return \"No profit, no loss\"\n    else:\n        return \"Profit or loss exists\"", "response_code": "def func(actual_cost, sale_amount):\n    if actual_cost == sale_amount:\n        return \"No profit, no loss\"\n    else:\n        return \"Profit or loss exists\""}
{"task_id": 338, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(v,t):\n    '''\n    WRITE A FUNCTION TO CALCULATE WIND CHILL INDEX.\n    '''\n"}], "response": "import math\n\ndef func(v, t):\n    wind_chill_index = 35.74 + 0.6215*t - 35.75*math.pow(v, 0.16) + 0.4275*t*math.pow(v, 0.16)\n    return wind_chill_index", "response_code": "import math\n\ndef func(v, t):\n    wind_chill_index = 35.74 + 0.6215*t - 35.75*math.pow(v, 0.16) + 0.4275*t*math.pow(v, 0.16)\n    return wind_chill_index"}
{"task_id": 339, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(funces):\n    '''\n    WRITE A FUNCTION TO SUM THE LENGTH OF THE NAMES OF A GIVEN LIST OF NAMES AFTER REMOVING THE NAMES THAT START WITH A LOWERCASE LETTER.\n    '''\n"}], "response": "```python\ndef func(funces):\n    total_length = sum(len(name) for name in funces if not name[0].islower())\n    return total_length\n```", "response_code": "\ndef func(funces):\n    total_length = sum(len(name) for name in funces if not name[0].islower())\n    return total_length\n"}
{"task_id": 340, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(items):\n    '''\n    WRITE A FUNCTION TO REMOVE THE PARENTHESIS AREA IN A STRING.\n    '''\n"}], "response": "import re\n\ndef func(items):\n    return re.sub(r'\\(.*?\\)', '', items)", "response_code": "import re\n\ndef func(items):\n    return re.sub(r'\\(.*?\\)', '', items)"}
{"task_id": 341, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A FUNCTION TO FIND THE NTH NONAGONAL NUMBER.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n * (7*n - 5) // 2\n```", "response_code": "\ndef func(n):\n    return n * (7*n - 5) // 2\n"}
{"task_id": 342, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    WRITE A FUNCTION THAT MATCHES A WORD CONTAINING 'Z', NOT AT THE START OR END OF THE WORD.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches", "response_code": "import re\n\ndef func(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"}
{"task_id": 343, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(input, k): \n    '''\n    WRITE A PYTHON FUNCTION TO REVERSE AN ARRAY UPTO A GIVEN POSITION.\n    '''\n"}], "response": "def reverse_array(input, k):\n    return input[:k][::-1] + input[k:]", "response_code": "def reverse_array(input, k):\n    return input[:k][::-1] + input[k:]"}
{"task_id": 344, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup, test_dict):\n    '''\n    WRITE A FUNCTION TO ADD A DICTIONARY TO THE TUPLE.\n    '''\n"}], "response": "def func(test_tup, test_dict):\n    new_tup = (*test_tup, test_dict)\n    return new_tup", "response_code": "def func(test_tup, test_dict):\n    new_tup = (*test_tup, test_dict)\n    return new_tup"}
{"task_id": 345, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(cost):\n    '''\n    WRITE A FUNCTION TO FIND A PATH WITH THE MAXIMUM AVERAGE OVER ALL EXISTING PATHS FOR THE GIVEN SQUARE MATRIX OF SIZE N*N.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(cost):\n    n = len(cost)\n    dp = np.zeros((n, n))\n    \n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    return dp[n-1][n-1] / (2*n - 1)\n```", "response_code": "\nimport numpy as np\n\ndef func(cost):\n    n = len(cost)\n    dp = np.zeros((n, n))\n    \n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    return dp[n-1][n-1] / (2*n - 1)\n"}
{"task_id": 346, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(students,h,w):\n    '''\n    WRITE A FUNCTION TO FILTER THE HEIGHT AND WIDTH OF STUDENTS WHICH ARE STORED IN A DICTIONARY.\n    '''\n"}], "response": "```python\ndef func(students, h, w):\n    filtered_students = {k: v for k, v in students.items() if v['height'] > h and v['width'] > w}\n    return filtered_students\n```", "response_code": "\ndef func(students, h, w):\n    filtered_students = {k: v for k, v in students.items() if v['height'] > h and v['width'] > w}\n    return filtered_students\n"}
{"task_id": 347, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from operator import eq\ndef func(nums1, nums2):\n    '''\n    WRITE A FUNCTION TO COUNT THE SAME PAIR IN TWO GIVEN LISTS USING MAP FUNCTION.\n    '''\n"}], "response": "from operator import eq\n\ndef func(nums1, nums2):\n    return sum(map(eq, nums1, nums2))", "response_code": "from operator import eq\n\ndef func(nums1, nums2):\n    return sum(map(eq, nums1, nums2))"}
{"task_id": 348, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(base, power):\n    '''\n    WRITE A FUNCTION TO CALCULATE THE SUM OF ALL DIGITS OF THE BASE TO THE SPECIFIED POWER.\n    '''\n"}], "response": "```python\ndef func(base, power):\n    return sum(int(digit) for digit in str(base ** power))\n```", "response_code": "\ndef func(base, power):\n    return sum(int(digit) for digit in str(base ** power))\n"}
{"task_id": 349, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text1):\n    '''\n    WRITE A FUNCTION TO EXTRACT VALUES BETWEEN QUOTATION MARKS OF THE GIVEN STRING BY USING REGEX.\n    '''\n"}], "response": "import re\n\ndef func(text1):\n    return re.findall(r'\"(.*?)\"', text1)", "response_code": "import re\n\ndef func(text1):\n    return re.findall(r'\"(.*?)\"', text1)"}
{"task_id": 350, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    WRITE A FUNCTION TO MULTIPLY THE ADJACENT ELEMENTS OF THE GIVEN TUPLE.\n    '''\n"}], "response": "def func(test_tup):\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)", "response_code": "def func(test_tup):\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"}
{"task_id": 351, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst1,lst2):\n    '''\n    WRITE A FUNCTION TO SUM ELEMENTS IN TWO LISTS.\n    '''\n"}], "response": "```python\ndef func(lst1, lst2):\n    return [x + y for x, y in zip(lst1, lst2)]\n```", "response_code": "\ndef func(lst1, lst2):\n    return [x + y for x, y in zip(lst1, lst2)]\n"}
{"task_id": 352, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from itertools import groupby\ndef func(nums):\n    '''\n    WRITE A FUNCTION TO REMOVE CONSECUTIVE DUPLICATES OF A GIVEN LIST.\n    '''\n"}], "response": "from itertools import groupby\n\ndef func(nums):\n    return [key for key, _ in groupby(nums)]", "response_code": "from itertools import groupby\n\ndef func(nums):\n    return [key for key, _ in groupby(nums)]"}
{"task_id": 353, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(r,h):\n    '''\n    WRITE A FUNCTION TO FIND THE LATERAL SURFACE AREA OF A CONE.\n    '''\n"}], "response": "import math\n\ndef func(r, h):\n    lateral_surface_area = math.pi * r * math.sqrt(r**2 + h**2)\n    return lateral_surface_area", "response_code": "import math\n\ndef func(r, h):\n    lateral_surface_area = math.pi * r * math.sqrt(r**2 + h**2)\n    return lateral_surface_area"}
{"task_id": 354, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    WRITE A FUNCTION TO REPLACE ALL OCCURRENCES OF SPACES, COMMAS, OR DOTS WITH A COLON.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    return re.sub(r'[ ,.]', ':', text)", "response_code": "import re\n\ndef func(text):\n    return re.sub(r'[ ,.]', ':', text)"}
{"task_id": 355, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(A, x):\n    '''\n    WRITE A FUNCTION TO FIND THE INDEX OF THE FIRST OCCURRENCE OF A GIVEN NUMBER IN A SORTED ARRAY.\n    '''\n"}], "response": "```python\ndef func(A, x):\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            while mid > 0 and A[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```", "response_code": "\ndef func(A, x):\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            while mid > 0 and A[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n"}
{"task_id": 356, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):\n    '''\n    WRITE A PYTHON FUNCTION TO FIND SUM OF PRODUCTS OF ALL POSSIBLE SUBARRAYS.\n    '''\n"}], "response": "```python\nfrom itertools import combinations\n\ndef func(arr):\n    total_sum = 0\n    for i in range(1, len(arr)+1):\n        for subset in combinations(arr, i):\n            product = 1\n            for num in subset:\n                product *= num\n            total_sum += product\n    return total_sum\n```", "response_code": "\nfrom itertools import combinations\n\ndef func(arr):\n    total_sum = 0\n    for i in range(1, len(arr)+1):\n        for subset in combinations(arr, i):\n            product = 1\n            for num in subset:\n                product *= num\n            total_sum += product\n    return total_sum\n"}
{"task_id": 357, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):  \n    '''\n    WRITE A PYTHON FUNCTION TO TOGGLE BITS OF THE NUMBER EXCEPT THE FIRST AND THE LAST BIT.\n    '''\n"}], "response": "```python\ndef func(n):\n    # Toggle bits of the number except the first and the last bit\n    if n == 0 or n == 1:\n        return n\n    else:\n        first_bit = n & 1\n        last_bit = n & (1 << (n.bit_length() - 1))\n        toggled_bits = ~((first_bit << (n.bit_length() - 1)) | last_bit)\n        return n ^ toggled_bits\n```", "response_code": "\ndef func(n):\n    # Toggle bits of the number except the first and the last bit\n    if n == 0 or n == 1:\n        return n\n    else:\n        first_bit = n & 1\n        last_bit = n & (1 << (n.bit_length() - 1))\n        toggled_bits = ~((first_bit << (n.bit_length() - 1)) | last_bit)\n        return n ^ toggled_bits\n"}
{"task_id": 358, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import bisect\ndef func(a, x):\n    '''\n    WRITE A FUNCTION TO LOCATE THE LEFT INSERTION POINT FOR A SPECIFIED VALUE IN SORTED ORDER.\n    '''\n"}], "response": "import bisect\n\ndef func(a, x):\n    return bisect.bisect_left(a, x)", "response_code": "import bisect\n\ndef func(a, x):\n    return bisect.bisect_left(a, x)"}
{"task_id": 359, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef func(string): \n    '''\n    WRITE A FUNCTION TO CHECK WHETHER THE GIVEN STRING IS STARTING WITH A VOWEL OR NOT USING REGEX.\n    '''\n"}], "response": "import re\n\ndef func(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False", "response_code": "import re\n\ndef func(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"}
{"task_id": 360, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    WRITE A FUNCTION TO CALCULATE THE GEOMETRIC SUM OF N-1.\n    '''\n"}], "response": "```python\ndef func(n):\n    if n == 0:\n        return 1\n    else:\n        return 1 / (2 ** n) + func(n - 1)\n```", "response_code": "\ndef func(n):\n    if n == 0:\n        return 1\n    else:\n        return 1 / (2 ** n) + func(n - 1)\n"}
{"task_id": 361, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math \ndef func(n): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE INDEX OF SMALLEST TRIANGULAR NUMBER WITH N DIGITS.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    index = 1\n    while True:\n        triangular_number = index * (index + 1) // 2\n        if len(str(triangular_number)) >= n:\n            return index\n        index += 1", "response_code": "import math\n\ndef func(n):\n    index = 1\n    while True:\n        triangular_number = index * (index + 1) // 2\n        if len(str(triangular_number)) >= n:\n            return index\n        index += 1"}
{"task_id": 362, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    WRITE A FUNCTION TO CONVERT THE GIVEN TUPLE TO A KEY-VALUE DICTIONARY USING ADJACENT ELEMENTS.\n    '''\n"}], "response": "```python\ndef func(test_tup):\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup), 2)}\n```", "response_code": "\ndef func(test_tup):\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup), 2)}\n"}
{"task_id": 363, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s) :\n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER ALL THE CHARACTERS ARE SAME OR NOT.\n    '''\n"}], "response": "def func(s):\n    return all(char == s[0] for char in s)", "response_code": "def func(s):\n    return all(char == s[0] for char in s)"}
{"task_id": 364, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(side):\n    '''\n    WRITE A FUNCTION TO CALCULATE THE AREA OF A TETRAHEDRON.\n    '''\n"}], "response": "import math\n\ndef func(side):\n    '''\n    Function to calculate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) * side**2", "response_code": "import math\n\ndef func(side):\n    '''\n    Function to calculate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) * side**2"}
{"task_id": 365, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list, m):\n    '''\n    WRITE A FUNCTION TO ROTATE A GIVEN LIST BY SPECIFIED NUMBER OF ITEMS TO THE RIGHT DIRECTION.\n    '''\n"}], "response": "```python\ndef func(lst, m):\n    m = m % len(lst)\n    return lst[-m:] + lst[:-m]\n```", "response_code": "\ndef func(lst, m):\n    m = m % len(lst)\n    return lst[-m:] + lst[:-m]\n"}
{"task_id": 366, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    WRITE A FUNCTION TO CHECK IF THE GIVEN TUPLE HAS ANY NONE VALUE OR NOT.\n    '''\n"}], "response": "def func(test_tup):\n    if None in test_tup:\n        return True\n    else:\n        return False", "response_code": "def func(test_tup):\n    if None in test_tup:\n        return True\n    else:\n        return False"}
{"task_id": 367, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(startnum, endnum):\n    '''\n    WRITE A FUNCTION TO FIND NUMBERS WITHIN A GIVEN RANGE WHERE EVERY NUMBER IS DIVISIBLE BY EVERY DIGIT IT CONTAINS.\n    '''\n"}], "response": "```python\ndef func(startnum, endnum):\n    def is_divisible_by_digits(num):\n        for digit in str(num):\n            if int(digit) == 0 or num % int(digit) != 0:\n                return False\n        return True\n\n    result = []\n    for i in range(startnum, endnum + 1):\n        if is_divisible_by_digits(i):\n            result.append(i)\n    \n    return result\n```", "response_code": "\ndef func(startnum, endnum):\n    def is_divisible_by_digits(num):\n        for digit in str(num):\n            if int(digit) == 0 or num % int(digit) != 0:\n                return False\n        return True\n\n    result = []\n    for i in range(startnum, endnum + 1):\n        if is_divisible_by_digits(i):\n            result.append(i)\n    \n    return result\n"}
{"task_id": 368, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(r,a):\n    '''\n    WRITE A FUNCTION TO FIND AREA OF A SECTOR.\n    '''\n"}], "response": "import math\n\ndef func(r, a):\n    '''\n    Function to find the area of a sector.\n    '''\n    area = 0.5 * r**2 * math.radians(a)\n    return area", "response_code": "import math\n\ndef func(r, a):\n    '''\n    Function to find the area of a sector.\n    '''\n    area = 0.5 * r**2 * math.radians(a)\n    return area"}
{"task_id": 369, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(X, Y, Z): \n    '''\n    WRITE A FUNCTION TO FIND THE LONGEST COMMON SUBSEQUENCE FOR THE GIVEN THREE STRING SEQUENCE.\n    '''\n"}], "response": "```python\nfrom difflib import SequenceMatcher\n\ndef func(X, Y, Z): \n    def lcs(X, Y, Z, m, n, o): \n        L = [[[0 for _ in range(o+1)] for _ in range(n+1)] for _ in range(m+1)] \n\n        for i in range(m+1): \n            for j in range(n+1): \n                for k in range(o+1): \n                    if i == 0 or j == 0 or k == 0: \n                        L[i][j][k] = 0\n                    elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                        L[i][j][k] = L[i-1][j-1][k-1] + 1\n                    else: \n                        L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n\n        index = L[m][n][o] \n        lcs = [\"\"] * (index+1) \n        lcs[index] = \"\" \n\n        i, j, k = m, n, o \n        while i > 0 and j > 0 and k > 0: \n            if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                lcs[index-1] = X[i-1] \n                i -= 1\n                j -= 1\n                k -= 1\n                index -= 1\n            elif L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]: \n                i -= 1\n            elif L[i][j-1][k] > L[i][j][k-1]: \n                j -= 1\n            else: \n                k -= 1\n\n        return \"\".join(lcs) \n\n    return lcs(X, Y, Z, len(X), len(Y), len(Z))\n```", "response_code": "\nfrom difflib import SequenceMatcher\n\ndef func(X, Y, Z): \n    def lcs(X, Y, Z, m, n, o): \n        L = [[[0 for _ in range(o+1)] for _ in range(n+1)] for _ in range(m+1)] \n\n        for i in range(m+1): \n            for j in range(n+1): \n                for k in range(o+1): \n                    if i == 0 or j == 0 or k == 0: \n                        L[i][j][k] = 0\n                    elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                        L[i][j][k] = L[i-1][j-1][k-1] + 1\n                    else: \n                        L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n\n        index = L[m][n][o] \n        lcs = [\"\"] * (index+1) \n        lcs[index] = \"\" \n\n        i, j, k = m, n, o \n        while i > 0 and j > 0 and k > 0: \n            if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                lcs[index-1] = X[i-1] \n                i -= 1\n                j -= 1\n                k -= 1\n                index -= 1\n            elif L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]: \n                i -= 1\n            elif L[i][j-1][k] > L[i][j][k-1]: \n                j -= 1\n            else: \n                k -= 1\n\n        return \"\".join(lcs) \n\n    return lcs(X, Y, Z, len(X), len(Y), len(Z))\n"}
{"task_id": 370, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(str1):\n    '''\n    WRITE A FUNCTION TO PUT SPACES BETWEEN WORDS STARTING WITH CAPITAL LETTERS IN A GIVEN STRING BY USING REGEX.\n    '''\n"}], "response": "import re\n\ndef func(str1):\n    return re.sub(r'([a-z])([A-Z])', r'\\1 \\2', str1)", "response_code": "import re\n\ndef func(str1):\n    return re.sub(r'([a-z])([A-Z])', r'\\1 \\2', str1)"}
{"task_id": 371, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums_str):\n    '''\n    WRITE A FUNCTION TO SORT A GIVEN LIST OF STRINGS OF NUMBERS NUMERICALLY.\n    '''\n"}], "response": "```python\ndef func(nums_str):\n    return sorted(nums_str, key=lambda x: int(x))\n```", "response_code": "\ndef func(nums_str):\n    return sorted(nums_str, key=lambda x: int(x))\n"}
{"task_id": 372, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list, test_tup):\n    '''\n    WRITE A FUNCTION TO ADD THE GIVEN TUPLE TO THE GIVEN LIST.\n    '''\n"}], "response": "def func(test_list, test_tup):\n    test_list.append(test_tup)\n    return test_list", "response_code": "def func(test_list, test_tup):\n    test_list.append(test_tup)\n    return test_list"}
{"task_id": 373, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr, i):\n    '''\n    WRITE A FUNCTION TO CHECK IF THE GIVEN ARRAY REPRESENTS MIN HEAP OR NOT.\n    '''\n"}], "response": "```python\ndef func(arr, i):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if 2*i + 1 < n and arr[i] > arr[2*i + 1]:\n            return False\n        if 2*i + 2 < n and arr[i] > arr[2*i + 2]:\n            return False\n    return True\n```", "response_code": "\ndef func(arr, i):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if 2*i + 1 < n and arr[i] > arr[2*i + 1]:\n            return False\n        if 2*i + 2 < n and arr[i] > arr[2*i + 2]:\n            return False\n    return True\n"}
{"task_id": 374, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A FUNCTION TO FIND THE NTH JACOBSTHAL NUMBER.\n    '''\n"}], "response": "```python\ndef func(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return func(n-1) + 2*func(n-2)\n```", "response_code": "\ndef func(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return func(n-1) + 2*func(n-2)\n"}
{"task_id": 375, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list, K):\n    '''\n    WRITE A FUNCTION TO FIND MINIMUM K RECORDS FROM TUPLE LIST.\n    '''\n"}], "response": "```python\ndef func(test_list, K):\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]\n```", "response_code": "\ndef func(test_list, K):\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]\n"}
{"task_id": 376, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l1, l2, l3):\n    '''\n    WRITE A FUNCTION TO FIND COMMON INDEX ELEMENTS FROM THREE LISTS.\n    '''\n"}], "response": "```python\ndef func(l1, l2, l3):\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(i)\n    return common_elements\n```", "response_code": "\ndef func(l1, l2, l3):\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(i)\n    return common_elements\n"}
{"task_id": 377, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(numbers):\n    '''\n    WRITE A FUNCTION TO FIND THE SECOND SMALLEST NUMBER IN A LIST.\n    '''\n"}], "response": "```python\ndef func(numbers):\n    unique_numbers = list(set(numbers))\n    unique_numbers.sort()\n    return unique_numbers[1]\n```", "response_code": "\ndef func(numbers):\n    unique_numbers = list(set(numbers))\n    unique_numbers.sort()\n    return unique_numbers[1]\n"}
{"task_id": 378, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    WRITE A FUNCTION THAT MATCHES A STRING THAT HAS AN A FOLLOWED BY ZERO OR ONE 'B'.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'ab?'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False", "response_code": "import re\n\ndef func(text):\n    pattern = r'ab?'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"}
{"task_id": 379, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    WRITE A FUNCTION TO COUNT THE PAIRS OF REVERSE STRINGS IN THE GIVEN STRING LIST.\n    '''\n"}], "response": "```python\ndef func(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n```", "response_code": "\ndef func(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"}
{"task_id": 380, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A FUNCTION TO COUNT NUMBER OF UNIQUE LISTS WITHIN A LIST.\n    '''\n"}], "response": "from collections import Counter\n\ndef func(list1):\n    return len(Counter(map(tuple, list1)))", "response_code": "from collections import Counter\n\ndef func(list1):\n    return len(Counter(map(tuple, list1)))"}
{"task_id": 381, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(num):\n    '''\n    WRITE A FUNCTION TO CHECK A DECIMAL WITH A PRECISION OF 2.\n    '''\n"}], "response": "```python\ndef func(num):\n    return round(num, 2)\n```", "response_code": "\ndef func(num):\n    return round(num, 2)\n"}
{"task_id": 382, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):\n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER AN ARRAY CONTAINS ONLY ONE DISTINCT ELEMENT OR NOT.\n    '''\n"}], "response": "```python\ndef func(arr):\n    return len(set(arr)) == 1\n```", "response_code": "\ndef func(arr):\n    return len(set(arr)) == 1\n"}
{"task_id": 383, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(monthnum3):\n    '''\n    WRITE A FUNCTION TO CHECK WHETHER THE GIVEN MONTH NUMBER CONTAINS 30 DAYS OR NOT.\n    '''\n"}], "response": "def func(monthnum):\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    else:\n        return False", "response_code": "def func(monthnum):\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"}
{"task_id": 384, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr,n): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE MINIMUM DIFFERENCE BETWEEN ANY TWO ELEMENTS IN A GIVEN ARRAY.\n    '''\n"}], "response": "```python\ndef func(arr,n): \n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n```", "response_code": "\ndef func(arr,n): \n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n"}
{"task_id": 385, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str):\n    '''\n    WRITE A PYTHON FUNCTION TO COUNT NUMERIC VALUES IN A GIVEN STRING.\n    '''\n"}], "response": "```python\ndef func(str):\n    count = 0\n    for char in str:\n        if char.isnumeric():\n            count += 1\n    return count\n```", "response_code": "\ndef func(str):\n    count = 0\n    for char in str:\n        if char.isnumeric():\n            count += 1\n    return count\n"}
{"task_id": 386, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math \ndef func(n): \n    '''\n    WRITE A FUNCTION TO FIND NTH POLITE NUMBER.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    return int(math.pow(2, n-1)) + n", "response_code": "import math\n\ndef func(n):\n    return int(math.pow(2, n-1)) + n"}
{"task_id": 387, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l1):\n    '''\n    WRITE A FUNCTION TO ITERATE OVER ALL PAIRS OF CONSECUTIVE ITEMS IN A GIVEN LIST.\n    '''\n"}], "response": "```python\ndef func(l1):\n    for i in range(len(l1) - 1):\n        print(l1[i], l1[i+1])\n\n# Example Usage\n# l1 = [1, 2, 3, 4, 5]\n# func(l1)\n```", "response_code": "\ndef func(l1):\n    for i in range(len(l1) - 1):\n        print(l1[i], l1[i+1])\n\n# Example Usage\n# l1 = [1, 2, 3, 4, 5]\n# func(l1)\n"}
{"task_id": 388, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr, sum):\n    '''\n    WRITE A PYTHON FUNCTION TO COUNT THE NUMBER OF PAIRS WHOSE SUM IS EQUAL TO \u2018SUM\u2019.\n    '''\n"}], "response": "```python\ndef func(arr, sum):\n    count = 0\n    seen = set()\n    for num in arr:\n        complement = sum - num\n        if complement in seen:\n            count += 1\n        seen.add(num)\n    return count\n```", "response_code": "\ndef func(arr, sum):\n    count = 0\n    seen = set()\n    for num in arr:\n        complement = sum - num\n        if complement in seen:\n            count += 1\n        seen.add(num)\n    return count\n"}
{"task_id": 389, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(li1,li2):\n    '''\n    WRITE A PYTHON FUNCTION TO GET THE DIFFERENCE BETWEEN TWO LISTS.\n    '''\n"}], "response": "```python\ndef func(li1, li2):\n    return list(set(li1) - set(li2))\n```", "response_code": "\ndef func(li1, li2):\n    return list(set(li1) - set(li2))\n"}
{"task_id": 390, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n) : \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SUM OF FOURTH POWER OF FIRST N ODD NATURAL NUMBERS.\n    '''\n"}], "response": "def func(n):\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**4\n    return sum", "response_code": "def func(n):\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**4\n    return sum"}
{"task_id": 391, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import deque\ndef func(exp):\n    '''\n    WRITE A FUNCTION TO CHECK IF THE GIVEN EXPRESSION IS BALANCED OR NOT.\n    '''\n"}], "response": "from collections import deque\n\ndef func(exp):\n    stack = deque()\n    opening_brackets = ['(', '[', '{']\n    closing_brackets = [')', ']', '}']\n    \n    for char in exp:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack:\n                return False\n            top = stack.pop()\n            if opening_brackets.index(top) != closing_brackets.index(char):\n                return False\n    \n    return len(stack) == 0", "response_code": "from collections import deque\n\ndef func(exp):\n    stack = deque()\n    opening_brackets = ['(', '[', '{']\n    closing_brackets = [')', ']', '}']\n    \n    for char in exp:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack:\n                return False\n            top = stack.pop()\n            if opening_brackets.index(top) != closing_brackets.index(char):\n                return False\n    \n    return len(stack) == 0"}
{"task_id": 392, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_str, K):\n    '''\n    WRITE A FUNCTION TO REMOVE ALL THE WORDS WITH K LENGTH IN THE GIVEN STRING.\n    '''\n"}], "response": "```python\ndef func(test_str, K):\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    return ' '.join(filtered_words)\n```", "response_code": "\ndef func(test_str, K):\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    return ' '.join(filtered_words)\n"}
{"task_id": 393, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text,pattern):\n    '''\n    WRITE A FUNCTION TO FIND THE OCCURRENCE AND POSITION OF THE SUBSTRINGS WITHIN A STRING.\n    '''\n"}], "response": "import re\n\ndef func(text, pattern):\n    matches = re.finditer(pattern, text)\n    occurrences = [(match.group(0), match.start(), match.end()) for match in matches]\n    return occurrences", "response_code": "import re\n\ndef func(text, pattern):\n    matches = re.finditer(pattern, text)\n    occurrences = [(match.group(0), match.start(), match.end()) for match in matches]\n    return occurrences"}
{"task_id": 394, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER EVERY ODD INDEX CONTAINS ODD NUMBERS OF A GIVEN LIST.\n    '''\n"}], "response": "def check_odd_index_odd_numbers(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True", "response_code": "def check_odd_index_odd_numbers(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": 395, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_str):\n    '''\n    WRITE A FUNCTION TO COUNT THOSE CHARACTERS WHICH HAVE VOWELS AS THEIR NEIGHBORS IN THE GIVEN STRING.\n    '''\n"}], "response": "```python\ndef func(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(1, len(test_str) - 1):\n        if test_str[i] in vowels and (test_str[i-1] in vowels or test_str[i+1] in vowels):\n            count += 1\n    return count\n```", "response_code": "\ndef func(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(1, len(test_str) - 1):\n        if test_str[i] in vowels and (test_str[i-1] in vowels or test_str[i+1] in vowels):\n            count += 1\n    return count\n"}
{"task_id": 396, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SUM OF NON-REPEATED ELEMENTS IN A GIVEN ARRAY.\n    '''\n"}], "response": "```python\ndef func(arr): \n    return sum(num for num in set(arr) if arr.count(num) == 1)\n```", "response_code": "\ndef func(arr): \n    return sum(num for num in set(arr) if arr.count(num) == 1)\n"}
{"task_id": 397, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from itertools import groupby\ndef func(list1):\n    '''\n    WRITE A FUNCTION TO PACK CONSECUTIVE DUPLICATES OF A GIVEN LIST ELEMENTS INTO SUBLISTS.\n    '''\n"}], "response": "from itertools import groupby\n\ndef func(list1):\n    return [list(group) for key, group in groupby(list1)]", "response_code": "from itertools import groupby\n\ndef func(list1):\n    return [list(group) for key, group in groupby(list1)]"}
{"task_id": 398, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A FUNCTION TO COUNT THE NUMBER OF UNIQUE LISTS WITHIN A LIST.\n    '''\n"}], "response": "```python\ndef func(list1):\n    return len(set(map(tuple, list1)))\n```", "response_code": "\ndef func(list1):\n    return len(set(map(tuple, list1)))\n"}
{"task_id": 399, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from itertools import combinations \ndef func(test_list):\n    '''\n    WRITE A FUNCTION TO FIND THE COMBINATIONS OF SUMS WITH TUPLES IN THE GIVEN TUPLE LIST.\n    '''\n"}], "response": "from itertools import combinations\n\ndef func(test_list):\n    return list(combinations(test_list, 2))", "response_code": "from itertools import combinations\n\ndef func(test_list):\n    return list(combinations(test_list, 2))"}
{"task_id": 400, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math \ndef func(n) : \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER THE COUNT OF DIVISORS IS EVEN OR ODD.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    if math.isqrt(n) ** 2 == n:\n        return \"Odd\"\n    else:\n        return \"Even\"", "response_code": "import math\n\ndef func(n):\n    if math.isqrt(n) ** 2 == n:\n        return \"Odd\"\n    else:\n        return \"Even\""}
{"task_id": 401, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):\n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SUM OF ALL ODD LENGTH SUBARRAYS.\n    '''\n"}], "response": "```python\ndef sumOddLengthSubarrays(arr):\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n, 2):\n            total_sum += sum(arr[i:j+1])\n    return total_sum\n```", "response_code": "\ndef sumOddLengthSubarrays(arr):\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n, 2):\n            total_sum += sum(arr[i:j+1])\n    return total_sum\n"}
{"task_id": 402, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(r, g, b):\n    '''\n    WRITE A FUNCTION TO CONVERT RGB COLOR TO HSV COLOR.\n    '''\n"}], "response": "from colorsys import rgb_to_hsv\n\ndef func(r, g, b):\n    return rgb_to_hsv(r/255, g/255, b/255)", "response_code": "from colorsys import rgb_to_hsv\n\ndef func(r, g, b):\n    return rgb_to_hsv(r/255, g/255, b/255)"}
{"task_id": 403, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A FUNCTION TO FIND THE PRODUCT OF FIRST EVEN AND ODD NUMBER OF A GIVEN LIST.\n    '''\n"}], "response": "```python\ndef func(list1):\n    even_product = 1\n    odd_product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    return even_product, odd_product\n```", "response_code": "\ndef func(list1):\n    even_product = 1\n    odd_product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    return even_product, odd_product\n"}
{"task_id": 404, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_str):\n    '''\n    WRITE A FUNCTION TO CONVERT TUPLE STRING TO INTEGER TUPLE.\n    '''\n"}], "response": "```python\ndef func(test_str):\n    return tuple(map(int, test_str.strip('()').split(', ')))\n```", "response_code": "\ndef func(test_str):\n    return tuple(map(int, test_str.strip('()').split(', ')))\n"}
{"task_id": 405, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import bisect\ndef func(a, x):\n    '''\n    WRITE A FUNCTION TO LOCATE THE RIGHT INSERTION POINT FOR A SPECIFIED VALUE IN SORTED ORDER.\n    '''\n"}], "response": "import bisect\n\ndef func(a, x):\n    return bisect.bisect_right(a, x)", "response_code": "import bisect\n\ndef func(a, x):\n    return bisect.bisect_right(a, x)"}
{"task_id": 406, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    WRITE A FUNCTION THAT MATCHES A STRING THAT HAS AN A FOLLOWED BY THREE 'B'.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'aB{3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False", "response_code": "import re\n\ndef func(text):\n    pattern = r'aB{3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": 407, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list, test_str):\n    '''\n    WRITE A FUNCTION TO CREATE A NEW TUPLE FROM THE GIVEN STRING AND LIST.\n    '''\n"}], "response": "```python\ndef func(test_list, test_str):\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple\n```", "response_code": "\ndef func(test_list, test_str):\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple\n"}
{"task_id": 408, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER EVERY EVEN INDEX CONTAINS EVEN NUMBERS OF A GIVEN LIST.\n    '''\n"}], "response": "```python\ndef func(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n```", "response_code": "\ndef func(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n"}
{"task_id": 409, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    WRITE A FUNCTION TO REMOVE THE NESTED RECORD FROM THE GIVEN TUPLE.\n    '''\n"}], "response": "```python\ndef func(test_tup):\n    return tuple(item for sublist in test_tup for item in sublist)\n```", "response_code": "\ndef func(test_tup):\n    return tuple(item for sublist in test_tup for item in sublist)\n"}
{"task_id": 410, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(input_list): \n    '''\n    WRITE A PYTHON FUNCTION TO COUNT THE NUMBER OF LISTS IN A GIVEN NUMBER OF LISTS.\n    '''\n"}], "response": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count", "response_code": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"}
{"task_id": 411, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr,x):\n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE LAST POSITION OF AN ELEMENT IN A SORTED ARRAY.\n    '''\n"}], "response": "```python\ndef func(arr, x):\n    left, right = 0, len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result\n```", "response_code": "\ndef func(arr, x):\n    left, right = 0, len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result\n"}
{"task_id": 412, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    WRITE A FUNCTION THAT MATCHES A STRING THAT HAS AN 'A' FOLLOWED BY ANYTHING, ENDING IN 'B'.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'A.*B$'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False", "response_code": "import re\n\ndef func(text):\n    pattern = r'A.*B$'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": 413, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(dict):\n    '''\n    WRITE A FUNCTION TO FIND THE SUM OF ALL ITEMS IN THE GIVEN DICTIONARY.\n    '''\n"}], "response": "```python\ndef func(dict):\n    return sum(dict.values())\n```", "response_code": "\ndef func(dict):\n    return sum(dict.values())\n"}
{"task_id": 414, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SUM OF ALL ODD NATURAL NUMBERS WITHIN THE RANGE L AND R.\n    '''\n"}], "response": "```python\ndef func(n):\n    l, r = 1, n\n    if l % 2 == 0:\n        l += 1\n    if r % 2 == 0:\n        r -= 1\n    num_elements = (r - l) // 2 + 1\n    return num_elements * (l + r) // 2\n```", "response_code": "\ndef func(n):\n    l, r = 1, n\n    if l % 2 == 0:\n        l += 1\n    if r % 2 == 0:\n        r -= 1\n    num_elements = (r - l) // 2 + 1\n    return num_elements * (l + r) // 2\n"}
{"task_id": 415, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):  \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SUM OF AN ARRAY.\n    '''\n"}], "response": "```python\ndef func(arr):\n    return sum(arr)\n```", "response_code": "\ndef func(arr):\n    return sum(arr)\n"}
{"task_id": 416, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n,d):   \n    '''\n    WRITE A PYTHON FUNCTION TO LEFT ROTATE THE BITS OF A GIVEN NUMBER.\n    '''\n"}], "response": "```python\ndef func(n, d):\n    return (n << d) | (n >> (32 - d))\n```", "response_code": "\ndef func(n, d):\n    return (n << d) | (n >> (32 - d))\n"}
{"task_id": 417, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    WRITE A FUNCTION TO REMOVE ALL WHITESPACES FROM A STRING.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    return re.sub(r'\\s+', '', text)", "response_code": "import re\n\ndef func(text):\n    return re.sub(r'\\s+', '', text)"}
{"task_id": 418, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x,y,z):\n    '''\n    WRITE A PYTHON FUNCTION TO COUNT THE NUMBER OF EQUAL NUMBERS FROM THREE GIVEN INTEGERS.\n    '''\n"}], "response": "```python\ndef func(x, y, z):\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count\n```", "response_code": "\ndef func(x, y, z):\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count\n"}
{"task_id": 419, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):   \n    '''\n    WRITE A PYTHON FUNCTION TO COUNT THE NUMBER OF ROTATIONS REQUIRED TO GENERATE A SORTED ARRAY.\n    '''\n"}], "response": "```python\ndef func(arr):\n    n = len(arr)\n    min_val = min(arr)\n    min_index = arr.index(min_val)\n    return min_index\n```", "response_code": "\ndef func(arr):\n    n = len(arr)\n    min_val = min(arr)\n    min_index = arr.index(min_val)\n    return min_index\n"}
{"task_id": 420, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n) :\n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER THE GIVEN NUMBER IS A PERFECT SQUARE OR NOT.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(n):\n    return math.isqrt(n) ** 2 == n\n```", "response_code": "\nimport math\n\ndef func(n):\n    return math.isqrt(n) ** 2 == n\n"}
{"task_id": 421, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr): \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER THE PRODUCT OF NUMBERS IS EVEN OR NOT.\n    '''\n"}], "response": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0", "response_code": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"}
{"task_id": 422, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lists):\n    '''\n    WRITE A FUNCTION TO FIND THE LIST IN A LIST OF LISTS WHOSE SUM OF ELEMENTS IS THE HIGHEST.\n    '''\n"}], "response": "```python\ndef func(lists):\n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    \n    return max_list\n```", "response_code": "\ndef func(lists):\n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    \n    return max_list\n"}
{"task_id": 423, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_str):\n    '''\n    WRITE A FUNCTION TO FIND MAXIMUM RUN OF UPPERCASE CHARACTERS IN THE GIVEN STRING.\n    '''\n"}], "response": "```python\ndef func(test_str):\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    \n    return max_run\n```", "response_code": "\ndef func(test_str):\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    \n    return max_run\n"}
{"task_id": 424, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE FIRST ODD NUMBER IN A GIVEN LIST OF NUMBERS.\n    '''\n"}], "response": "```python\ndef func(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n```", "response_code": "\ndef func(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n"}
{"task_id": 425, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup, K):\n    '''\n    WRITE A FUNCTION TO CHECK IF THE GIVEN TUPLES CONTAIN THE K OR NOT.\n    '''\n"}], "response": "def func(test_tup, K):\n    return any(K in tup for tup in test_tup)", "response_code": "def func(test_tup, K):\n    return any(K in tup for tup in test_tup)"}
{"task_id": 426, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    WRITE A FUNCTION TO CHECK IF EACH ELEMENT OF SECOND TUPLE IS SMALLER THAN ITS CORRESPONDING INDEX IN FIRST TUPLE.\n    '''\n"}], "response": "def func(test_tup1, test_tup2):\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= i:\n            return False\n    return True", "response_code": "def func(test_tup1, test_tup2):\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= i:\n            return False\n    return True"}
