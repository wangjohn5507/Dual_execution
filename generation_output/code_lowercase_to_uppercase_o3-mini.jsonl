{"task_id": 0, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    WRITE A FUNCTION TO FIND THE SIMILAR ELEMENTS FROM THE GIVEN TWO TUPLE LISTS.\n    '''\n"}], "response": "```python\ndef func(test_tup1, test_tup2):\n    return list(set(test_tup1) & set(test_tup2))\n```", "response_code": "\ndef func(test_tup1, test_tup2):\n    return list(set(test_tup1) & set(test_tup2))\n"}
{"task_id": 1, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(n):\n    '''\n    WRITE A PYTHON FUNCTION TO IDENTIFY NON-PRIME NUMBERS.\n    '''\n"}], "response": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef identify_non_prime_numbers(n):\n    non_prime_numbers = []\n    for num in range(2, n+1):\n        if not is_prime(num):\n            non_prime_numbers.append(num)\n    return non_prime_numbers", "response_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef identify_non_prime_numbers(n):\n    non_prime_numbers = []\n    for num in range(2, n+1):\n        if not is_prime(num):\n            non_prime_numbers.append(num)\n    return non_prime_numbers"}
{"task_id": 2, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq as hq\ndef func(nums,n):\n    '''\n    WRITE A FUNCTION TO FIND THE LARGEST INTEGERS FROM A GIVEN LIST OF NUMBERS USING HEAP QUEUE ALGORITHM.\n    '''\n"}], "response": "import heapq as hq\n\ndef func(nums, n):\n    return hq.nlargest(n, nums)", "response_code": "import heapq as hq\n\ndef func(nums, n):\n    return hq.nlargest(n, nums)"}
{"task_id": 3, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x): \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER THE TWO NUMBERS DIFFER AT ONE BIT POSITION ONLY OR NOT.\n    '''\n"}], "response": "```python\ndef func(x):\n    return bin(x).count('1') == 1\n```", "response_code": "\ndef func(x):\n    return bin(x).count('1') == 1\n"}
{"task_id": 4, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    WRITE A FUNCTION TO FIND ALL WORDS WHICH ARE AT LEAST 4 CHARACTERS LONG IN A STRING BY USING REGEX.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)", "response_code": "import re\n\ndef func(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)"}
{"task_id": 5, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    WRITE A FUNCTION TO FIND SQUARES OF INDIVIDUAL ELEMENTS IN A LIST USING LAMBDA FUNCTION.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return list(map(lambda x: x**2, nums))\n```", "response_code": "\ndef func(nums):\n    return list(map(lambda x: x**2, nums))\n"}
{"task_id": 6, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE MINIMUM NUMBER OF ROTATIONS REQUIRED TO GET THE SAME STRING.\n    '''\n"}], "response": "```python\ndef func(s):\n    n = len(s)\n    s += s\n    for i in range(1, n+1):\n        if n % i == 0:\n            if s[:i] * (n//i) == s:\n                return i\n    return n\n```", "response_code": "\ndef func(s):\n    n = len(s)\n    s += s\n    for i in range(1, n+1):\n        if n % i == 0:\n            if s[:i] * (n//i) == s:\n                return i\n    return n\n"}
{"task_id": 7, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s,ch): \n    '''\n    WRITE A PYTHON FUNCTION TO REMOVE FIRST AND LAST OCCURRENCE OF A GIVEN CHARACTER FROM THE STRING.\n    '''\n"}], "response": "```python\ndef func(s, ch):\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    \n    if first_occurrence != -1 and last_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n    \n    return s\n```", "response_code": "\ndef func(s, ch):\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    \n    if first_occurrence != -1 and last_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n    \n    return s\n"}
{"task_id": 8, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(M):\n    '''\n    WRITE A FUNCTION TO SORT A GIVEN MATRIX IN ASCENDING ORDER ACCORDING TO THE SUM OF ITS ROWS.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(M):\n    row_sums = np.sum(M, axis=1)\n    sorted_indices = np.argsort(row_sums)\n    sorted_M = M[sorted_indices]\n    \n    return sorted_M\n```", "response_code": "\nimport numpy as np\n\ndef func(M):\n    row_sums = np.sum(M, axis=1)\n    sorted_indices = np.argsort(row_sums)\n    sorted_M = M[sorted_indices]\n    \n    return sorted_M\n"}
{"task_id": 9, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l,b,h) : \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE VOLUME OF A TRIANGULAR PRISM.\n    '''\n"}], "response": "```python\ndef func(l, b, h):\n    return 0.5 * l * b * h\n```", "response_code": "\ndef func(l, b, h):\n    return 0.5 * l * b * h\n"}
{"task_id": 10, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    WRITE A FUNCTION TO FIND SEQUENCES OF LOWERCASE LETTERS JOINED WITH AN UNDERSCORE.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'[a-z]+_[a-z]+'\n    sequences = re.findall(pattern, text)\n    return sequences", "response_code": "import re\n\ndef func(text):\n    pattern = r'[a-z]+_[a-z]+'\n    sequences = re.findall(pattern, text)\n    return sequences"}
{"task_id": 11, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a):\n    '''\n    WRITE A FUNCTION TO FIND THE PERIMETER OF A SQUARE.\n    '''\n"}], "response": "```python\ndef find_perimeter_of_square(side_length):\n    return 4 * side_length\n```", "response_code": "\ndef find_perimeter_of_square(side_length):\n    return 4 * side_length\n"}
{"task_id": 12, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "NO_OF_CHARS = 256\ndef func(string): \n    '''\n    WRITE A FUNCTION TO REMOVE CHARACTERS FROM THE FIRST STRING WHICH ARE PRESENT IN THE SECOND STRING.\n    '''\n"}], "response": "```python\nNO_OF_CHARS = 256\n\ndef func(string): \n    '''\n    Function to remove characters from the first string which are present in the second string.\n    '''\n```", "response_code": "\nNO_OF_CHARS = 256\n\ndef func(string): \n    '''\n    Function to remove characters from the first string which are present in the second string.\n    '''\n"}
{"task_id": 13, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arraynums):\n    '''\n    WRITE A FUNCTION TO FIND WHETHER A GIVEN ARRAY OF INTEGERS CONTAINS ANY DUPLICATE ELEMENT.\n    '''\n"}], "response": "```python\ndef func(arraynums):\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True\n```", "response_code": "\ndef func(arraynums):\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True\n"}
{"task_id": 14, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x): \n    '''\n    WRITE A FUNCTION TO CHECK IF THE GIVEN NUMBER IS WOODBALL OR NOT.\n    '''\n"}], "response": "```python\ndef func(x):\n    if x < 0:\n        return False\n    else:\n        return (int(x ** 0.5) ** 2 == x)\n```", "response_code": "\ndef func(x):\n    if x < 0:\n        return False\n    else:\n        return (int(x ** 0.5) ** 2 == x)\n"}
{"task_id": 15, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(num):    \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK IF A GIVEN NUMBER IS ONE LESS THAN TWICE ITS REVERSE.\n    '''\n"}], "response": "```python\ndef func(num):\n    reverse_num = int(str(num)[::-1])\n    if num == 2 * reverse_num - 1:\n        return True\n    else:\n        return False\n```", "response_code": "\ndef func(num):\n    reverse_num = int(str(num)[::-1])\n    if num == 2 * reverse_num - 1:\n        return True\n    else:\n        return False\n"}
{"task_id": 16, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr) : \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE LARGEST NUMBER THAT CAN BE FORMED WITH THE GIVEN DIGITS.\n    '''\n"}], "response": "from itertools import permutations\n\ndef func(arr):\n    perm = permutations(arr)\n    max_num = 0\n    for p in perm:\n        num = int(''.join(p))\n        if num > max_num:\n            max_num = num\n    return max_num", "response_code": "from itertools import permutations\n\ndef func(arr):\n    perm = permutations(arr)\n    max_num = 0\n    for p in perm:\n        num = int(''.join(p))\n        if num > max_num:\n            max_num = num\n    return max_num"}
{"task_id": 17, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x,y): \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER THE GIVEN TWO INTEGERS HAVE OPPOSITE SIGN OR NOT.\n    '''\n"}], "response": "def check_opposite_sign(x, y):\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False", "response_code": "def check_opposite_sign(x, y):\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False"}
{"task_id": 18, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A FUNCTION TO FIND THE NTH OCTAGONAL NUMBER.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n * (3 * n - 2)\n```", "response_code": "\ndef func(n):\n    return n * (3 * n - 2)\n"}
{"task_id": 19, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import defaultdict\ndef func(s):\n    '''\n    WRITE A PYTHON FUNCTION TO COUNT NUMBER OF SUBSTRINGS WITH THE SUM OF DIGITS EQUAL TO THEIR LENGTH.\n    '''\n"}], "response": "```python\nfrom collections import defaultdict\n\ndef func(s):\n    def count_substrings(s):\n        count = 0\n        prefix_sum = 0\n        sum_count = defaultdict(int)\n        sum_count[0] = 1\n\n        for char in s:\n            prefix_sum += int(char)\n            count += sum_count[prefix_sum - len(str(prefix_sum))]\n            sum_count[prefix_sum] += 1\n\n        return count\n\n    return count_substrings(s)\n```", "response_code": "\nfrom collections import defaultdict\n\ndef func(s):\n    def count_substrings(s):\n        count = 0\n        prefix_sum = 0\n        sum_count = defaultdict(int)\n        sum_count[0] = 1\n\n        for char in s:\n            prefix_sum += int(char)\n            count += sum_count[prefix_sum - len(str(prefix_sum))]\n            sum_count[prefix_sum] += 1\n\n        return count\n\n    return count_substrings(s)\n"}
