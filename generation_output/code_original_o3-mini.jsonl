{"task_id": 0, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n"}], "response": "```python\ndef func(test_tup1, test_tup2):\n    return list(set(test_tup1) & set(test_tup2))\n```", "response_code": "\ndef func(test_tup1, test_tup2):\n    return list(set(test_tup1) & set(test_tup2))\n"}
{"task_id": 1, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False", "response_code": "import math\n\ndef func(n):\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": 2, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq as hq\ndef func(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n"}], "response": "import heapq as hq\n\ndef func(nums, n):\n    return hq.nlargest(n, nums)", "response_code": "import heapq as hq\n\ndef func(nums, n):\n    return hq.nlargest(n, nums)"}
{"task_id": 3, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n"}], "response": "```python\ndef func(x): \n    return bin(x).count('1') == 1\n```", "response_code": "\ndef func(x): \n    return bin(x).count('1') == 1\n"}
{"task_id": 4, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)", "response_code": "import re\n\ndef func(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)"}
{"task_id": 5, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return [num**2 for num in nums]\n```", "response_code": "\ndef func(nums):\n    return [num**2 for num in nums]\n"}
{"task_id": 6, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n"}], "response": "```python\ndef func(str): \n    n = len(str)\n    for i in range(1, n+1):\n        if n % i == 0:\n            if str == str[:i] * (n//i):\n                return i\n    return n\n```", "response_code": "\ndef func(str): \n    n = len(str)\n    for i in range(1, n+1):\n        if n % i == 0:\n            if str == str[:i] * (n//i):\n                return i\n    return n\n"}
{"task_id": 7, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n"}], "response": "```python\ndef func(s, ch):\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    \n    if first_occurrence != -1 and last_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n    \n    return s\n```", "response_code": "\ndef func(s, ch):\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    \n    if first_occurrence != -1 and last_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n    \n    return s\n"}
{"task_id": 8, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(M):\n    return M[np.argsort(np.sum(M, axis=1))]\n```", "response_code": "\nimport numpy as np\n\ndef func(M):\n    return M[np.argsort(np.sum(M, axis=1))]\n"}
{"task_id": 9, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n"}], "response": "```python\ndef func(l, b, h):\n    return 0.5 * l * b * h\n```", "response_code": "\ndef func(l, b, h):\n    return 0.5 * l * b * h\n"}
{"task_id": 10, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    return bool(re.search(r'\\b[a-z]+_[a-z]+\\b', text))", "response_code": "import re\n\ndef func(text):\n    return bool(re.search(r'\\b[a-z]+_[a-z]+\\b', text))"}
{"task_id": 11, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n"}], "response": "```python\ndef func(a):\n    return 4 * a\n```", "response_code": "\ndef func(a):\n    return 4 * a\n"}
{"task_id": 12, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "NO_OF_CHARS = 256\ndef func(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n"}], "response": "```python\nNO_OF_CHARS = 256\n\ndef func(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if string is None:\n        return None\n\n    input_set = set(string)\n    result = [ch for ch in string if ch not in input_set]\n    return ''.join(result)\n```", "response_code": "\nNO_OF_CHARS = 256\n\ndef func(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if string is None:\n        return None\n\n    input_set = set(string)\n    result = [ch for ch in string if ch not in input_set]\n    return ''.join(result)\n"}
{"task_id": 13, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n"}], "response": "def func(arraynums):\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True", "response_code": "def func(arraynums):\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True"}
{"task_id": 14, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n"}], "response": "import math\n\ndef func(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 0:\n        return False\n    sqrt_x = math.sqrt(x)\n    return int(sqrt_x) == sqrt_x and int(math.sqrt(sqrt_x)) == math.sqrt(sqrt_x)", "response_code": "import math\n\ndef func(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 0:\n        return False\n    sqrt_x = math.sqrt(x)\n    return int(sqrt_x) == sqrt_x and int(math.sqrt(sqrt_x)) == math.sqrt(sqrt_x)"}
{"task_id": 15, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n"}], "response": "def func(num):\n    reverse_num = int(str(num)[::-1])\n    if num == 2 * reverse_num - 1:\n        return True\n    else:\n        return False", "response_code": "def func(num):\n    reverse_num = int(str(num)[::-1])\n    if num == 2 * reverse_num - 1:\n        return True\n    else:\n        return False"}
{"task_id": 16, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n"}], "response": "from itertools import permutations\n\ndef func(arr):\n    perm = permutations(arr)\n    max_num = 0\n    for p in perm:\n        num = int(''.join(map(str, p)))\n        max_num = max(max_num, num)\n    return max_num", "response_code": "from itertools import permutations\n\ndef func(arr):\n    perm = permutations(arr)\n    max_num = 0\n    for p in perm:\n        num = int(''.join(map(str, p)))\n        max_num = max(max_num, num)\n    return max_num"}
{"task_id": 17, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n"}], "response": "def func(x, y):\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False", "response_code": "def func(x, y):\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False"}
{"task_id": 18, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n * (3 * n - 2)\n```", "response_code": "\ndef func(n):\n    return n * (3 * n - 2)\n"}
{"task_id": 19, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import defaultdict\ndef func(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n"}], "response": "from collections import defaultdict\n\ndef func(s):\n    count = 0\n    prefix_sum = defaultdict(int)\n    prefix_sum[0] = 1\n    current_sum = 0\n\n    for i in range(len(s)):\n        current_sum += int(s[i])\n        count += prefix_sum[current_sum - i - 1]\n        prefix_sum[current_sum - i - 1] += 1\n\n    return count", "response_code": "from collections import defaultdict\n\ndef func(s):\n    count = 0\n    prefix_sum = defaultdict(int)\n    prefix_sum[0] = 1\n    current_sum = 0\n\n    for i in range(len(s)):\n        current_sum += int(s[i])\n        count += prefix_sum[current_sum - i - 1]\n        prefix_sum[current_sum - i - 1] += 1\n\n    return count"}
