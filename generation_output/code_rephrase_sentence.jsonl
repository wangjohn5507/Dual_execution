{"task_id": 0, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function that identifies the common elements between two lists of tuples.\n    '''\n"}], "response": "```python\ndef func(test_tup1, test_tup2):\n    return list(set(test_tup1) & set(test_tup2))\n```", "response_code": "\ndef func(test_tup1, test_tup2):\n    return list(set(test_tup1) & set(test_tup2))\n"}
{"task_id": 1, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(n):\n    '''\n    Create a Python function that can detect numbers that are not prime.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "response_code": "import math\n\ndef func(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": 2, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq as hq\ndef func(nums,n):\n    '''\n    Create a function that utilizes the heap queue algorithm to identify the highest integers within a provided list of numbers.\n    '''\n"}], "response": "import heapq as hq\n\ndef func(nums, n):\n    return hq.nlargest(n, nums)", "response_code": "import heapq as hq\n\ndef func(nums, n):\n    return hq.nlargest(n, nums)"}
{"task_id": 3, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x): \n    '''\n    Create a Python function that determines if two numbers differ at only one bit position.\n    '''\n"}], "response": "```python\ndef func(x):\n    return bin(x).count('1') == 1\n```", "response_code": "\ndef func(x):\n    return bin(x).count('1') == 1\n"}
{"task_id": 4, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that uses regex to identify all words in a string that contain a minimum of 4 characters.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)", "response_code": "import re\n\ndef func(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)"}
{"task_id": 5, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a lambda function to calculate the squares of each element in a list.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return list(map(lambda x: x**2, nums))\n```", "response_code": "\ndef func(nums):\n    return list(map(lambda x: x**2, nums))\n"}
{"task_id": 6, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str): \n    '''\n    Create a Python function that determines the minimum number of rotations needed to achieve the same string.\n    '''\n"}], "response": "```python\ndef func(s):\n    n = len(s)\n    s += s\n    for i in range(1, n+1):\n        if n % i == 0:\n            if s[:i] * (n//i) == s:\n                return i\n    return n\n```", "response_code": "\ndef func(s):\n    n = len(s)\n    s += s\n    for i in range(1, n+1):\n        if n % i == 0:\n            if s[:i] * (n//i) == s:\n                return i\n    return n\n"}
{"task_id": 7, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s,ch): \n    '''\n    Create a Python function that eliminates the first and last instances of a specified character from a string.\n    '''\n"}], "response": "```python\ndef func(s, ch):\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    \n    if first_index != -1 and last_index != -1:\n        s = s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n    \n    return s\n```", "response_code": "\ndef func(s, ch):\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    \n    if first_index != -1 and last_index != -1:\n        s = s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n    \n    return s\n"}
{"task_id": 8, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(M):\n    '''\n    Create a function that arranges a provided matrix in ascending order based on the sum of its rows.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(M):\n    row_sums = np.sum(M, axis=1)\n    sorted_indices = np.argsort(row_sums)\n    sorted_M = M[sorted_indices]\n    \n    return sorted_M\n```", "response_code": "\nimport numpy as np\n\ndef func(M):\n    row_sums = np.sum(M, axis=1)\n    sorted_indices = np.argsort(row_sums)\n    sorted_M = M[sorted_indices]\n    \n    return sorted_M\n"}
{"task_id": 9, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l,b,h) : \n    '''\n    Create a Python function that calculates the volume of a triangular prism.\n    '''\n"}], "response": "```python\ndef func(l, b, h):\n    return 0.5 * l * b * h\n```", "response_code": "\ndef func(l, b, h):\n    return 0.5 * l * b * h\n"}
{"task_id": 10, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that identifies sequences of lowercase letters connected by an underscore.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'\\b[a-z]+(?:_[a-z]+)+\\b'\n    return re.findall(pattern, text)", "response_code": "import re\n\ndef func(text):\n    pattern = r'\\b[a-z]+(?:_[a-z]+)+\\b'\n    return re.findall(pattern, text)"}
{"task_id": 11, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a):\n    '''\n    Create a function that calculates the perimeter of a square.\n    '''\n"}], "response": "```python\ndef func(a):\n    return 4 * a\n```", "response_code": "\ndef func(a):\n    return 4 * a\n"}
{"task_id": 12, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "NO_OF_CHARS = 256\ndef func(string): \n    '''\n    Create a function that eliminates characters from the first string that are found in the second string.\n    '''\n"}], "response": "```python\nNO_OF_CHARS = 256\n\ndef func(string): \n    '''\n    Create a function that eliminates characters from the first string that are found in the second string.\n    '''\n```", "response_code": "\nNO_OF_CHARS = 256\n\ndef func(string): \n    '''\n    Create a function that eliminates characters from the first string that are found in the second string.\n    '''\n"}
{"task_id": 13, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arraynums):\n    '''\n    Create a function that determines if a provided array of integers has any duplicate elements.\n    '''\n"}], "response": "```python\ndef func(arraynums):\n    return len(arraynums) != len(set(arraynums))\n```", "response_code": "\ndef func(arraynums):\n    return len(arraynums) != len(set(arraynums))\n"}
{"task_id": 14, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x): \n    '''\n    Create a function that determines whether the provided number is woodball.\n    '''\n"}], "response": "```python\ndef func(x):\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False\n```", "response_code": "\ndef func(x):\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": 15, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(num):    \n    '''\n    Create a Python function that verifies if a specified number is equal to one less than double its reverse.\n    '''\n"}], "response": "def func(num):\n    reverse_num = int(str(num)[::-1])\n    if num == (2 * reverse_num) - 1:\n        return True\n    else:\n        return False", "response_code": "def func(num):\n    reverse_num = int(str(num)[::-1])\n    if num == (2 * reverse_num) - 1:\n        return True\n    else:\n        return False"}
{"task_id": 16, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr) : \n    '''\n    Create a Python function that determines the highest possible number using the provided digits.\n    '''\n"}], "response": "from itertools import permutations\n\ndef func(arr):\n    max_num = 0\n    for perm in permutations(arr):\n        num = int(''.join(map(str, perm)))\n        max_num = max(max_num, num)\n    return max_num", "response_code": "from itertools import permutations\n\ndef func(arr):\n    max_num = 0\n    for perm in permutations(arr):\n        num = int(''.join(map(str, perm)))\n        max_num = max(max_num, num)\n    return max_num"}
{"task_id": 17, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x,y): \n    '''\n    Create a Python function that determines if two given integers have opposite signs.\n    '''\n"}], "response": "```python\ndef func(x, y):\n    return (x < 0) ^ (y < 0)\n```", "response_code": "\ndef func(x, y):\n    return (x < 0) ^ (y < 0)\n"}
{"task_id": 18, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function that calculates the nth octagonal number.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n * (3 * n - 2)\n```", "response_code": "\ndef func(n):\n    return n * (3 * n - 2)\n"}
{"task_id": 19, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import defaultdict\ndef func(s):\n    '''\n    Create a Python function that calculates the number of substrings where the sum of the digits is equal to the length of the substring.\n    '''\n"}], "response": "from collections import defaultdict\n\ndef func(s):\n    count = 0\n    prefix_sum = defaultdict(int)\n    prefix_sum[0] = 1\n    current_sum = 0\n    \n    for i in range(len(s)):\n        current_sum += int(s[i])\n        count += prefix_sum[current_sum - i - 1]\n        prefix_sum[current_sum] += 1\n    \n    return count", "response_code": "from collections import defaultdict\n\ndef func(s):\n    count = 0\n    prefix_sum = defaultdict(int)\n    prefix_sum[0] = 1\n    current_sum = 0\n    \n    for i in range(len(s)):\n        current_sum += int(s[i])\n        count += prefix_sum[current_sum - i - 1]\n        prefix_sum[current_sum] += 1\n    \n    return count"}
{"task_id": 20, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(xs):\n    '''\n    Create a Python function that identifies the smallest number within a given list.\n    '''\n"}], "response": "```python\ndef func(xs):\n    return min(xs)\n```", "response_code": "\ndef func(xs):\n    return min(xs)\n"}
{"task_id": 21, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Create a function that can determine the largest difference between pairs within a provided list of tuples.\n    '''\n"}], "response": "```python\ndef func(test_list):\n    max_diff = 0\n    for tup in test_list:\n        diff = abs(max(tup) - min(tup))\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n```", "response_code": "\ndef func(test_list):\n    max_diff = 0\n    for tup in test_list:\n        diff = abs(max(tup) - min(tup))\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"}
{"task_id": 22, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(subjectmarks):\n    '''\n    Create a lambda function to sort a list of tuples.\n    '''\n"}], "response": "from typing import List\n\ndef func(subjectmarks: List[tuple]):\n    return sorted(subjectmarks, key=lambda x: x[1])", "response_code": "from typing import List\n\ndef func(subjectmarks: List[tuple]):\n    return sorted(subjectmarks, key=lambda x: x[1])"}
{"task_id": 23, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(data_list):\n    '''\n    Create a recursive function that calculates the sum of a list.\n    '''\n"}], "response": "```python\ndef func(data_list):\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + func(data_list[1:])\n```", "response_code": "\ndef func(data_list):\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + func(data_list[1:])\n"}
{"task_id": 24, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list):\n    '''\n    Create a Python function that calculates the number of positive numbers in a given list.\n    '''\n"}], "response": "```python\ndef func(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n```", "response_code": "\ndef func(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n"}
{"task_id": 25, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):   \n    '''\n    Create a function that calculates the possible partitions of a set of bell numbers.\n    '''\n"}], "response": "```python\nfrom sympy import bell\n\ndef func(n):\n    return bell(n)\n```", "response_code": "\nfrom sympy import bell\n\ndef func(n):\n    return bell(n)\n"}
{"task_id": 26, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(A): \n    '''\n    Create a Python function that determines if the provided array is monotonic.\n    '''\n"}], "response": "```python\ndef is_monotonic(A):\n    return all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n```", "response_code": "\ndef is_monotonic(A):\n    return all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n"}
{"task_id": 27, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l, s):\n    '''\n    Create a function that determines if a sublist is present in a list.\n    '''\n"}], "response": "```python\ndef func(l, s):\n    '''\n    Create a function that determines if a sublist is present in a list.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n```", "response_code": "\ndef func(l, s):\n    '''\n    Create a function that determines if a sublist is present in a list.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"}
{"task_id": 28, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(Input):\n    '''\n    Create a function that determines if all the provided tuples are of the same length.\n    '''\n"}], "response": "def func(Input):\n    return all(len(t) == len(Input[0]) for t in Input)", "response_code": "def func(Input):\n    return all(len(t) == len(Input[0]) for t in Input)"}
{"task_id": 29, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a function that implements comb sort to arrange a list of elements.\n    '''\n"}], "response": "```python\ndef func(nums):\n    gap = len(nums)\n    shrink = 1.3\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / shrink))\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums\n```", "response_code": "\ndef func(nums):\n    gap = len(nums)\n    shrink = 1.3\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / shrink))\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums\n"}
{"task_id": 30, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a Python function that determines if a given number can be expressed as the difference of two squares.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(n):\n    '''\n    Create a Python function that determines if a given number can be expressed as the difference of two squares.\n    '''\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if math.isqrt(n + i*i) ** 2 == n + i*i:\n            return True\n    return False\n```", "response_code": "\nimport math\n\ndef func(n):\n    '''\n    Create a Python function that determines if a given number can be expressed as the difference of two squares.\n    '''\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if math.isqrt(n + i*i) ** 2 == n + i*i:\n            return True\n    return False\n"}
{"task_id": 31, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(colors, patterns):    \n    '''\n    Create a function that verifies if it adheres to the sequence provided in the patterns array.\n    '''\n"}], "response": "```python\ndef func(colors, patterns):\n    return all(color == pattern for color, pattern in zip(colors, patterns))\n```", "response_code": "\ndef func(colors, patterns):\n    return all(color == pattern for color, pattern in zip(colors, patterns))\n"}
{"task_id": 32, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list, K):\n    '''\n    Create a function that identifies tuples in a list where all elements are divisible by k.\n    '''\n"}], "response": "```python\ndef func(test_list, K):\n    return [tup for tup in test_list if all(ele % K == 0 for ele in tup)]\n```", "response_code": "\ndef func(test_list, K):\n    return [tup for tup in test_list if all(ele % K == 0 for ele in tup)]\n"}
{"task_id": 33, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a Python function that calculates the difference between the sum of even digits and the sum of odd digits.\n    '''\n"}], "response": "```python\ndef func(n):\n    even_sum = 0\n    odd_sum = 0\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    return even_sum - odd_sum\n```", "response_code": "\ndef func(n):\n    even_sum = 0\n    odd_sum = 0\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    return even_sum - odd_sum\n"}
{"task_id": 34, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s): \n    '''\n    Create a Python function that determines if the length of a word is odd.\n    '''\n"}], "response": "def is_length_odd(s):\n    return len(s) % 2 != 0", "response_code": "def is_length_odd(s):\n    return len(s) % 2 != 0"}
{"task_id": 35, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function that calculates the nth tetrahedral number.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n * (n + 1) * (n + 2) // 6\n```", "response_code": "\ndef func(n):\n    return n * (n + 1) * (n + 2) // 6\n"}
{"task_id": 36, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(r):\n    '''\n    Create a function that calculates the volume of a sphere.\n    '''\n"}], "response": "import math\n\ndef func(r):\n    '''\n    Create a function that calculates the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume", "response_code": "import math\n\ndef func(r):\n    '''\n    Create a function that calculates the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"}
{"task_id": 37, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(strr):  \n    '''\n    Create a Python function that calculates the character resulting from adding all the characters in the provided string.\n    '''\n"}], "response": "```python\ndef func(strr):\n    total = sum(ord(char) for char in strr)\n    return chr(total)\n```", "response_code": "\ndef func(strr):\n    total = sum(ord(char) for char in strr)\n    return chr(total)\n"}
{"task_id": 38, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function that determines the n-th number in the Newman Conway sequence.\n    '''\n"}], "response": "def newman_conway(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    else:\n        sequence = [0] * (n + 1)\n        sequence[1] = 1\n        sequence[2] = 1\n        for i in range(3, n + 1):\n            sequence[i] = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]]\n        return sequence[n]", "response_code": "def newman_conway(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    else:\n        sequence = [0] * (n + 1)\n        sequence[1] = 1\n        sequence[2] = 1\n        for i in range(3, n + 1):\n            sequence[i] = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]]\n        return sequence[n]"}
{"task_id": 39, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(r):\n    '''\n    Create a function that calculates the surface area of a sphere.\n    '''\n"}], "response": "import math\n\ndef func(r):\n    return 4 * math.pi * r**2", "response_code": "import math\n\ndef func(r):\n    return 4 * math.pi * r**2"}
{"task_id": 40, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    Create a function that calculates the nth centered hexagonal number.\n    '''\n"}], "response": "```python\ndef func(n):\n    return 3*n*(n-1) + 1\n```", "response_code": "\ndef func(n):\n    return 3*n*(n-1) + 1\n"}
{"task_id": 41, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import collections as ct\ndef func(dict1,dict2, dict3):\n    '''\n    Create a function that combines three dictionaries into one.\n    '''\n"}], "response": "import collections as ct\n\ndef func(dict1, dict2, dict3):\n    combined_dict = ct.ChainMap(dict1, dict2, dict3)\n    return combined_dict", "response_code": "import collections as ct\n\ndef func(dict1, dict2, dict3):\n    combined_dict = ct.ChainMap(dict1, dict2, dict3)\n    return combined_dict"}
{"task_id": 42, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import collections\ndef func(list1):\n    '''\n    Create a function that calculates the frequency of each element in a given list.\n    '''\n"}], "response": "import collections\n\ndef func(list1):\n    return collections.Counter(list1)", "response_code": "import collections\n\ndef func(list1):\n    return collections.Counter(list1)"}
{"task_id": 43, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(N):\n    '''\n    Create a function that identifies the nearest number smaller than n.\n    '''\n"}], "response": "```python\ndef func(N):\n    return N - 1\n```", "response_code": "\ndef func(N):\n    return N - 1\n"}
{"task_id": 44, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a Python function that determines the longest word's length.\n    '''\n"}], "response": "```python\ndef func(list1):\n    return max(len(word) for word in list1)\n```", "response_code": "\ndef func(list1):\n    return max(len(word) for word in list1)\n"}
{"task_id": 45, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1, sub_str):\n    '''\n    Create a function that verifies the existence of a substring within a provided list of strings.\n    '''\n"}], "response": "def func(str1, sub_str):\n    return sub_str in str1", "response_code": "def func(str1, sub_str):\n    return sub_str in str1"}
{"task_id": 46, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function that determines if the provided number is undulating.\n    '''\n"}], "response": "```python\ndef func(n): \n    '''\n    Create a function that determines if the provided number is undulating.\n    '''\n    str_n = str(n)\n    if len(str_n) < 3:\n        return False\n    increasing = False\n    decreasing = False\n    for i in range(2, len(str_n)):\n        if (str_n[i-2] < str_n[i-1] > str_n[i]) or (str_n[i-2] > str_n[i-1] < str_n[i]):\n            increasing = True\n        elif (str_n[i-2] > str_n[i-1] < str_n[i]) or (str_n[i-2] < str_n[i-1] > str_n[i]):\n            decreasing = True\n    return increasing and decreasing\n```", "response_code": "\ndef func(n): \n    '''\n    Create a function that determines if the provided number is undulating.\n    '''\n    str_n = str(n)\n    if len(str_n) < 3:\n        return False\n    increasing = False\n    decreasing = False\n    for i in range(2, len(str_n)):\n        if (str_n[i-2] < str_n[i-1] > str_n[i]) or (str_n[i-2] > str_n[i-1] < str_n[i]):\n            increasing = True\n        elif (str_n[i-2] > str_n[i-1] < str_n[i]) or (str_n[i-2] < str_n[i-1] > str_n[i]):\n            decreasing = True\n    return increasing and decreasing\n"}
{"task_id": 47, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,b):\n    '''\n    Create a function that computes the result of raising 'a' to the power of 'b'.\n    '''\n"}], "response": "```python\ndef func(a, b):\n    return a ** b\n```", "response_code": "\ndef func(a, b):\n    return a ** b\n"}
{"task_id": 48, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from operator import itemgetter \ndef func(test_list):\n    '''\n    Create a function that retrieves the index of the smallest value in the provided tuples.\n    '''\n"}], "response": "from operator import itemgetter\n\ndef func(test_list):\n    return min(enumerate(test_list), key=itemgetter(1))[0]", "response_code": "from operator import itemgetter\n\ndef func(test_list):\n    return min(enumerate(test_list), key=itemgetter(1))[0]"}
{"task_id": 49, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst):  \n    '''\n    Create a Python function that determines the shortest length of a sublist.\n    '''\n"}], "response": "```python\ndef func(lst):\n    return min(len(sublist) for sublist in lst)\n```", "response_code": "\ndef func(lst):\n    return min(len(sublist) for sublist in lst)\n"}
{"task_id": 50, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    Create a Python function that calculates the quantity of divisors for a specified integer.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2 if n/i != i else 1\n    return count\n```", "response_code": "\nimport math\n\ndef func(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2 if n/i != i else 1\n    return count\n"}
{"task_id": 51, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function that calculates the frequency of each element in a list of lists.\n    '''\n"}], "response": "from collections import Counter\n\ndef func(list1):\n    flat_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flat_list))", "response_code": "from collections import Counter\n\ndef func(list1):\n    flat_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flat_list))"}
{"task_id": 52, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(numbers):  \n    '''\n    Create a function that multiplies all the numbers in a list and then divides the result by the length of the list.\n    '''\n"}], "response": "```python\ndef func(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n```", "response_code": "\ndef func(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n"}
{"task_id": 53, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function that will convert the provided decimal number into binary form.\n    '''\n"}], "response": "```python\ndef func(n):\n    return bin(n)[2:]\n```", "response_code": "\ndef func(n):\n    return bin(n)[2:]\n"}
{"task_id": 54, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import sys\ndef func(num):\n    '''\n    Create a function that determines the next smallest palindrome for a given number.\n    '''\n"}], "response": "import sys\n\ndef func(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n\n    return num", "response_code": "import sys\n\ndef func(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n\n    return num"}
{"task_id": 55, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr, k):\n    '''\n    Create a function that locates the kth element within the provided array.\n    '''\n"}], "response": "```python\ndef func(arr, k):\n    return arr[k-1]\n```", "response_code": "\ndef func(arr, k):\n    return arr[k-1]\n"}
{"task_id": 56, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(word):\n    '''\n    Create a function that transforms a snake case string into a camel case string.\n    '''\n"}], "response": "```python\nimport re\n\ndef func(word):\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n```", "response_code": "\nimport re\n\ndef func(word):\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n"}
{"task_id": 57, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n, m): \n    '''\n    Create a function that calculates the Eulerian number a(n, m).\n    '''\n"}], "response": "```python\nfrom math import comb\n\ndef func(n, m): \n    return sum((-1)**(m-k) * comb(n+1, k) * (m+1-k)**n for k in range(1, m+2))\n```", "response_code": "\nfrom math import comb\n\ndef func(n, m): \n    return sum((-1)**(m-k) * comb(n+1, k) * (m+1-k)**n for k in range(1, m+2))\n"}
{"task_id": 58, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(input_list):\n    '''\n    Create a lambda function to sort the strings within each sublist of a given list of lists.\n    '''\n"}], "response": "```python\ndef func(input_list):\n    return list(map(lambda x: sorted(x, key=lambda s: s.lower()), input_list))\n```", "response_code": "\ndef func(input_list):\n    return list(map(lambda x: sorted(x, key=lambda s: s.lower()), input_list))\n"}
{"task_id": 59, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst):   \n    '''\n    Create a Python function that counts the number of true boolean values in a provided list.\n    '''\n"}], "response": "```python\ndef count_true(lst):\n    return sum(1 for item in lst if item is True)\n```", "response_code": "\ndef count_true(lst):\n    return sum(1 for item in lst if item is True)\n"}
{"task_id": 60, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list, test_tup):\n    '''\n    Create a function that combines the provided list with the provided tuples.\n    '''\n"}], "response": "def func(test_list, test_tup):\n    return test_list + list(test_tup)", "response_code": "def func(test_list, test_tup):\n    return test_list + list(test_tup)"}
{"task_id": 61, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq\ndef func(num1,num2,num3):\n    '''\n    Create a function that uses the heap queue algorithm to combine several sorted inputs into one sorted iterator.\n    '''\n"}], "response": "import heapq\n\ndef func(num1, num2, num3):\n    '''\n    Create a function that uses the heap queue algorithm to combine several sorted inputs into one sorted iterator.\n    '''\n    heap = []\n    for i in num1, num2, num3:\n        for j in i:\n            heapq.heappush(heap, j)\n    \n    while heap:\n        yield heapq.heappop(heap)", "response_code": "import heapq\n\ndef func(num1, num2, num3):\n    '''\n    Create a function that uses the heap queue algorithm to combine several sorted inputs into one sorted iterator.\n    '''\n    heap = []\n    for i in num1, num2, num3:\n        for j in i:\n            heapq.heappush(heap, j)\n    \n    while heap:\n        yield heapq.heappop(heap)"}
{"task_id": 62, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s,n): \n    '''\n    Create a Python function that calculates the number of rotations of a binary string that has an odd value.\n    '''\n"}], "response": "```python\ndef func(s, n):\n    count = 0\n    for i in range(n):\n        if int(s, 2) % 2 != 0:\n            return count\n        s = s[-1] + s[:-1]\n        count += 1\n    return -1\n```", "response_code": "\ndef func(s, n):\n    count = 0\n    for i in range(n):\n        if int(s, 2) % 2 != 0:\n            return count\n        s = s[-1] + s[:-1]\n        count += 1\n    return -1\n"}
{"task_id": 63, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nestedlist):\n    '''\n    Create a function that identifies common elements within nested lists.\n    '''\n"}], "response": "```python\ndef func(nestedlist):\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements = common_elements.intersection(set(sublist))\n    return list(common_elements)\n```", "response_code": "\ndef func(nestedlist):\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements = common_elements.intersection(set(sublist))\n    return list(common_elements)\n"}
{"task_id": 64, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(text):\n    '''\n    Create a function that verifies whether a given string is an integer or not.\n    '''\n"}], "response": "```python\ndef func(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n```", "response_code": "\ndef func(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"}
{"task_id": 65, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function that verifies if all dictionaries within a list are either empty or not.\n    '''\n"}], "response": "```python\ndef func(list1):\n    for d in list1:\n        if not isinstance(d, dict):\n            return False\n        if d:\n            return True\n    return False\n```", "response_code": "\ndef func(list1):\n    for d in list1:\n        if not isinstance(d, dict):\n            return False\n        if d:\n            return True\n    return False\n"}
{"task_id": 66, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a function that transforms a tuple of positive integers into a single integer.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return int(''.join(map(str, nums)))\n```", "response_code": "\ndef func(nums):\n    return int(''.join(map(str, nums)))\n"}
{"task_id": 67, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Create a function that changes any elements in the list that can be converted to float.\n    '''\n"}], "response": "```python\ndef func(test_list):\n    return [float(i) if i.replace('.', '', 1).isdigit() else i for i in test_list]\n```", "response_code": "\ndef func(test_list):\n    return [float(i) if i.replace('.', '', 1).isdigit() else i for i in test_list]\n"}
{"task_id": 68, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(string): \n    '''\n    Create a function that transforms a string into a list.\n    '''\n"}], "response": "```python\ndef func(string): \n    return list(string)\n```", "response_code": "\ndef func(string): \n    return list(string)\n"}
{"task_id": 69, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):\n    '''\n    Create a Python function that identifies the element that occurs only once in a sorted array.\n    '''\n"}], "response": "```python\ndef func(arr):\n    for i in range(len(arr)):\n        if i == 0 and arr[i] != arr[i+1]:\n            return arr[i]\n        elif i == len(arr)-1 and arr[i] != arr[i-1]:\n            return arr[i]\n        elif arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\n```", "response_code": "\ndef func(arr):\n    for i in range(len(arr)):\n        if i == 0 and arr[i] != arr[i+1]:\n            return arr[i]\n        elif i == len(arr)-1 and arr[i] != arr[i-1]:\n            return arr[i]\n        elif arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\n"}
{"task_id": 70, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function that determines the highest product from pairs of tuples in a specified list.\n    '''\n"}], "response": "```python\ndef func(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] + list1[i][1] * list1[j][1]\n            max_product = max(max_product, product)\n    return max_product\n```", "response_code": "\ndef func(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] + list1[i][1] * list1[j][1]\n            max_product = max(max_product, product)\n    return max_product\n"}
{"task_id": 71, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(limit):\n    '''\n    Create a function that calculates the sum of all amicable numbers within a given range starting from 1.\n    '''\n"}], "response": "```python\ndef func(limit):\n    def sum_divisors(n):\n        divisors_sum = 0\n        for i in range(1, n):\n            if n % i == 0:\n                divisors_sum += i\n        return divisors_sum\n\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        sum1 = sum_divisors(num)\n        sum2 = sum_divisors(sum1)\n        if num == sum2 and num != sum1:\n            amicable_numbers.append(num)\n\n    return sum(amicable_numbers)\n```", "response_code": "\ndef func(limit):\n    def sum_divisors(n):\n        divisors_sum = 0\n        for i in range(1, n):\n            if n % i == 0:\n                divisors_sum += i\n        return divisors_sum\n\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        sum1 = sum_divisors(num)\n        sum2 = sum_divisors(sum1)\n        if num == sum2 and num != sum1:\n            amicable_numbers.append(num)\n\n    return sum(amicable_numbers)\n"}
{"task_id": 72, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import cmath\ndef func(a,b):\n    '''\n    Create a function that calculates the angle of a complex number.\n    '''\n"}], "response": "import cmath\n\ndef func(a, b):\n    '''\n    Create a function that calculates the angle of a complex number.\n    '''\n    complex_num = complex(a, b)\n    angle = cmath.phase(complex_num)\n    \n    return angle", "response_code": "import cmath\n\ndef func(a, b):\n    '''\n    Create a function that calculates the angle of a complex number.\n    '''\n    complex_num = complex(a, b)\n    angle = cmath.phase(complex_num)\n    \n    return angle"}
{"task_id": 73, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(string): \n    '''\n    Create a function that determines the largest difference between the count of 0s and 1s in any substring of the provided binary string.\n    '''\n"}], "response": "```python\ndef func(string): \n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    diff = 0\n    for char in string: \n        if char == '0': \n            count_0 += 1\n        else: \n            count_1 += 1\n        diff = count_0 - count_1\n        if diff > max_diff: \n            max_diff = diff\n        if diff < 0: \n            count_0 = 0\n            count_1 = 0\n    return max_diff\n```", "response_code": "\ndef func(string): \n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    diff = 0\n    for char in string: \n        if char == '0': \n            count_0 += 1\n        else: \n            count_1 += 1\n        diff = count_0 - count_1\n        if diff > max_diff: \n            max_diff = diff\n        if diff < 0: \n            count_0 = 0\n            count_1 = 0\n    return max_diff\n"}
{"task_id": 74, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,b): \n    '''\n    Create a Python function that calculates the total of shared divisors between two specified numbers.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(a, b):\n    shared_divisors = set()\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            shared_divisors.add(i)\n    return sum(shared_divisors)\n```", "response_code": "\nimport math\n\ndef func(a, b):\n    shared_divisors = set()\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            shared_divisors.add(i)\n    return sum(shared_divisors)\n"}
{"task_id": 75, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x, y):\n    '''\n    Create a function in Python that multiplies two integers without utilizing the * operator.\n    '''\n"}], "response": "```python\ndef func(x, y):\n    if y == 0:\n        return 0\n    elif y > 0:\n        return x + func(x, y - 1)\n    else:\n        return -func(x, -y)\n```", "response_code": "\ndef func(x, y):\n    if y == 0:\n        return 0\n    elif y > 0:\n        return x + func(x, y - 1)\n    else:\n        return -func(x, -y)\n"}
{"task_id": 76, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n, str):\n    '''\n    Create a function that filters out words from a list that are longer than a specified length, n.\n    '''\n"}], "response": "def func(n, str):\n    return [word for word in str if len(word) <= n]", "response_code": "def func(n, str):\n    return [word for word in str if len(word) <= n]"}
{"task_id": 77, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(my_matrix):\n    '''\n    Create a function that can determine a magic square.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(my_matrix):\n    '''\n    Create a function that can determine a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = n * (n**2 + 1) // 2\n\n    if np.sum(my_matrix, axis=0).all() == magic_sum and np.sum(my_matrix, axis=1).all() == magic_sum:\n        diag_sum1 = np.trace(my_matrix)\n        diag_sum2 = np.trace(np.fliplr(my_matrix))\n        if diag_sum1 == magic_sum and diag_sum2 == magic_sum:\n            return True\n    return False\n```", "response_code": "\nimport numpy as np\n\ndef func(my_matrix):\n    '''\n    Create a function that can determine a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = n * (n**2 + 1) // 2\n\n    if np.sum(my_matrix, axis=0).all() == magic_sum and np.sum(my_matrix, axis=1).all() == magic_sum:\n        diag_sum1 = np.trace(my_matrix)\n        diag_sum2 = np.trace(np.fliplr(my_matrix))\n        if diag_sum1 == magic_sum and diag_sum2 == magic_sum:\n            return True\n    return False\n"}
{"task_id": 78, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import defaultdict\ndef func(nums):\n    '''\n    Create a function that identifies the item in a given list that appears most frequently.\n    '''\n"}], "response": "from collections import defaultdict\n\ndef func(nums):\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n    most_frequent_item = max(count_dict, key=count_dict.get)\n    return most_frequent_item", "response_code": "from collections import defaultdict\n\ndef func(nums):\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n    most_frequent_item = max(count_dict, key=count_dict.get)\n    return most_frequent_item"}
{"task_id": 79, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1):\n    '''\n    Create a Python function that reverses the vowels in a given string.\n    '''\n"}], "response": "```python\ndef reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] in vowels and s[j] in vowels:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n        elif s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n    return \"\".join(s)\n```", "response_code": "\ndef reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] in vowels and s[j] in vowels:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n        elif s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n    return \"\".join(s)\n"}
{"task_id": 80, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(tup1):\n    '''\n    Create a function that changes a tuple into a string.\n    '''\n"}], "response": "def func(tup1):\n    return ''.join(map(str, tup1))", "response_code": "def func(tup1):\n    return ''.join(map(str, tup1))"}
{"task_id": 81, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a lambda function that calculates the sum of the negative numbers in a provided list of numbers.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return lambda: sum(num for num in nums if num < 0)\n```", "response_code": "\ndef func(nums):\n    return lambda: sum(num for num in nums if num < 0)\n"}
{"task_id": 82, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function that calculates the nth hexagonal number.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n * (2 * n - 1)\n```", "response_code": "\ndef func(n):\n    return n * (2 * n - 1)\n"}
{"task_id": 83, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from array import array\ndef func(nums):\n    '''\n    Create a function that calculates the proportion of zeros in an array of whole numbers.\n    '''\n"}], "response": "from array import array\n\ndef func(nums):\n    count_zeros = nums.count(0)\n    total_elements = len(nums)\n    proportion_zeros = count_zeros / total_elements\n    return proportion_zeros", "response_code": "from array import array\n\ndef func(nums):\n    count_zeros = nums.count(0)\n    total_elements = len(nums)\n    proportion_zeros = count_zeros / total_elements\n    return proportion_zeros"}
{"task_id": 84, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a Python function that determines if a given number can be expressed as the sum of non-zero powers of 2.\n    '''\n"}], "response": "```python\ndef func(n): \n    if n <= 0: \n        return False\n    return bin(n).count('1') == 1\n```", "response_code": "\ndef func(n): \n    if n <= 0: \n        return False\n    return bin(n).count('1') == 1\n"}
{"task_id": 85, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(r):\n    '''\n    Create a function that calculates the circumference of a circle.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(r):\n    return 2 * math.pi * r\n```", "response_code": "\nimport math\n\ndef func(r):\n    return 2 * math.pi * r\n"}
{"task_id": 86, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Create a function that retrieves elements that appear only once in the provided list of tuples.\n    '''\n"}], "response": "```python\nfrom collections import Counter\n\ndef func(test_list):\n    count_dict = Counter([item for sublist in test_list for item in sublist])\n    return [key for key, value in count_dict.items() if value == 1]\n```", "response_code": "\nfrom collections import Counter\n\ndef func(test_list):\n    count_dict = Counter([item for sublist in test_list for item in sublist])\n    return [key for key, value in count_dict.items() if value == 1]\n"}
{"task_id": 87, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a function that utilizes pancake sort to arrange a list of elements.\n    '''\n"}], "response": "```python\ndef func(nums):\n    def flip(arr, k):\n        i = 0\n        while i < k // 2:\n            arr[i], arr[k - i - 1] = arr[k - i - 1], arr[i]\n            i += 1\n\n    def find_max_index(arr, n):\n        max_index = 0\n        for i in range(n):\n            if arr[i] > arr[max_index]:\n                max_index = i\n        return max_index\n\n    def pancake_sort(arr):\n        n = len(arr)\n        curr_size = n\n        while curr_size > 1:\n            max_index = find_max_index(arr, curr_size)\n            if max_index != curr_size - 1:\n                flip(arr, max_index + 1)\n                flip(arr, curr_size)\n            curr_size -= 1\n        return arr\n\n    return pancake_sort(nums)\n```", "response_code": "\ndef func(nums):\n    def flip(arr, k):\n        i = 0\n        while i < k // 2:\n            arr[i], arr[k - i - 1] = arr[k - i - 1], arr[i]\n            i += 1\n\n    def find_max_index(arr, n):\n        max_index = 0\n        for i in range(n):\n            if arr[i] > arr[max_index]:\n                max_index = i\n        return max_index\n\n    def pancake_sort(arr):\n        n = len(arr)\n        curr_size = n\n        while curr_size > 1:\n            max_index = find_max_index(arr, curr_size)\n            if max_index != curr_size - 1:\n                flip(arr, max_index + 1)\n                flip(arr, curr_size)\n            curr_size -= 1\n        return arr\n\n    return pancake_sort(nums)\n"}
{"task_id": 88, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1,list2,list3):\n    '''\n    Create a function that counts the occurrences of identical pairs in three provided lists.\n    '''\n"}], "response": "from collections import Counter\n\ndef func(list1, list2, list3):\n    count = Counter(zip(list1, list2, list3))\n    return sum(val for val in count.values() if val > 1)", "response_code": "from collections import Counter\n\ndef func(list1, list2, list3):\n    count = Counter(zip(list1, list2, list3))\n    return sum(val for val in count.values() if val > 1)"}
{"task_id": 89, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(Input): \n    '''\n    Create a function that determines the quantity of lists within the provided tuple.\n    '''\n"}], "response": "def func(Input): \n    return sum(isinstance(i, list) for i in Input)", "response_code": "def func(Input): \n    return sum(isinstance(i, list) for i in Input)"}
{"task_id": 90, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr): \n    '''\n    Create a Python function that determines the largest difference between two elements within a provided array.\n    '''\n"}], "response": "```python\ndef func(arr): \n    return max(arr) - min(arr)\n```", "response_code": "\ndef func(arr): \n    return max(arr) - min(arr)\n"}
{"task_id": 91, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a, b, n):\n    '''\n    Create a function that determines the values of x and y which satisfy the equation ax + by = n.\n    '''\n"}], "response": "```python\ndef func(a, b, n):\n    '''\n    Create a function that determines the values of x and y which satisfy the equation ax + by = n.\n    '''\n    if n % gcd(a, b) != 0:\n        return None\n    \n    def extended_gcd(a, b):\n        if a == 0:\n            return (b, 0, 1)\n        else:\n            g, y, x = extended_gcd(b % a, a)\n            return (g, x - (b // a) * y, y)\n    \n    def find_xy(a, b, n):\n        g, x, y = extended_gcd(a, b)\n        x *= n // g\n        y *= n // g\n        return x, y\n    \n    from math import gcd\n    return find_xy(a, b, n)\n```", "response_code": "\ndef func(a, b, n):\n    '''\n    Create a function that determines the values of x and y which satisfy the equation ax + by = n.\n    '''\n    if n % gcd(a, b) != 0:\n        return None\n    \n    def extended_gcd(a, b):\n        if a == 0:\n            return (b, 0, 1)\n        else:\n            g, y, x = extended_gcd(b % a, a)\n            return (g, x - (b // a) * y, y)\n    \n    def find_xy(a, b, n):\n        g, x, y = extended_gcd(a, b)\n        x *= n // g\n        y *= n // g\n        return x, y\n    \n    from math import gcd\n    return find_xy(a, b, n)\n"}
{"task_id": 92, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1, list2):\n    '''\n    Create a function that eliminates any elements from a specified list that are also found in a separate list.\n    '''\n"}], "response": "def func(list1, list2):\n    return [x for x in list1 if x not in list2]", "response_code": "def func(list1, list2):\n    return [x for x in list1 if x not in list2]"}
{"task_id": 93, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    Create a function that computes the sum of positive integers starting from n and decreasing by 2 until the result is less than or equal to 0.\n    '''\n"}], "response": "```python\ndef func(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total\n```", "response_code": "\ndef func(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total\n"}
{"task_id": 94, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from math import tan, pi\ndef func(s, l):\n    '''\n    Create a function that computes the area of a regular polygon.\n    '''\n"}], "response": "```python\nfrom math import tan, pi\n\ndef func(s, l):\n    '''\n    Create a function that computes the area of a regular polygon.\n    '''\n    return (s * l**2) / (4 * tan(pi / s))\n```", "response_code": "\nfrom math import tan, pi\n\ndef func(s, l):\n    '''\n    Create a function that computes the area of a regular polygon.\n    '''\n    return (s * l**2) / (4 * tan(pi / s))\n"}
{"task_id": 95, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math \ndef func(n): \n    '''\n    Create a Python function that verifies if the sum of divisors is equal or not.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    sum_divisors = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            sum_divisors += i\n            if i != n // i:\n                sum_divisors += n // i\n\n    return sum_divisors == n", "response_code": "import math\n\ndef func(n):\n    sum_divisors = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            sum_divisors += i\n            if i != n // i:\n                sum_divisors += n // i\n\n    return sum_divisors == n"}
{"task_id": 96, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1): \n    '''\n    Create a Python function that counts the number of characters in a given string that are in the same position in the English alphabet, regardless of case.\n    '''\n"}], "response": "```python\ndef func(str1): \n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(ord('a') + i) or str1[i].upper() == chr(ord('A') + i):\n            count += 1\n    return count\n```", "response_code": "\ndef func(str1): \n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(ord('a') + i) or str1[i].upper() == chr(ord('A') + i):\n            count += 1\n    return count\n"}
{"task_id": 97, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(A): \n    '''\n    Create a Python function that calculates the number of pairs with an even XOR.\n    '''\n"}], "response": "```python\ndef func(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n```", "response_code": "\ndef func(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"}
{"task_id": 98, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a Python function that determines the smallest power of 2 that is greater than or equal to n.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(n): \n    return 2 ** math.ceil(math.log2(n))\n```", "response_code": "\nimport math\n\ndef func(n): \n    return 2 ** math.ceil(math.log2(n))\n"}
{"task_id": 99, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,x): \n    '''\n    Create a Python function that calculates the occurrence of a specific number within a provided array.\n    '''\n"}], "response": "```python\ndef func(a, x):\n    return a.count(x)\n```", "response_code": "\ndef func(a, x):\n    return a.count(x)\n"}
{"task_id": 100, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1, m, n):                                                                                                                                                                                                \n    '''\n    Create a function that calculates the total of the numbers within a list based on a specified range of indices.\n    '''\n"}], "response": "```python\ndef func(list1, m, n):\n    return sum(list1[m:n+1])\n```", "response_code": "\ndef func(list1, m, n):\n    return sum(list1[m:n+1])\n"}
{"task_id": 101, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(a):\n    '''\n    Create a function that calculates the perimeter of a pentagon.\n    '''\n"}], "response": "import math\n\ndef func(a):\n    perimeter = 5 * a\n    return perimeter", "response_code": "import math\n\ndef func(a):\n    perimeter = 5 * a\n    return perimeter"}
{"task_id": 102, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s):\n    '''\n    Create a function that counts the number of times the characters 'std' appear in the provided string.\n    '''\n"}], "response": "```python\ndef func(s):\n    return s.count('std')\n```", "response_code": "\ndef func(s):\n    return s.count('std')\n"}
{"task_id": 103, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tuple):\n    '''\n    Create a function that verifies whether all elements in a tuple share the same data type.\n    '''\n"}], "response": "def func(test_tuple):\n    data_types = set([type(item) for item in test_tuple])\n    return len(data_types) == 1", "response_code": "def func(test_tuple):\n    data_types = set([type(item) for item in test_tuple])\n    return len(data_types) == 1"}
{"task_id": 104, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr, n, x):\n    '''\n    Create a function that verifies the presence of a majority element in the provided sorted array.\n    '''\n"}], "response": "```python\ndef func(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2\n```", "response_code": "\ndef func(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2\n"}
{"task_id": 105, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a Python function that calculates the number of set bits in a given number.\n    '''\n"}], "response": "```python\ndef func(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```", "response_code": "\ndef func(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"}
{"task_id": 106, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str):\n    '''\n    Create a Python function that eliminates characters with odd index values from a specified string.\n    '''\n"}], "response": "def remove_odd_index_chars(input_str):\n    return input_str[::2]", "response_code": "def remove_odd_index_chars(input_str):\n    return input_str[::2]"}
{"task_id": 107, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,b,c): \n    '''\n    Create a function that determines the smallest value among three numbers.\n    '''\n"}], "response": "def func(a, b, c):\n    return min(a, b, c)", "response_code": "def func(a, b, c):\n    return min(a, b, c)"}
{"task_id": 108, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n,l,r):  \n    '''\n    Create a Python function that verifies if all bits within a specified range are not set.\n    '''\n"}], "response": "```python\ndef func(n, l, r):\n    mask = (1 << (r - l + 1)) - 1\n    mask = mask << l\n    return n & mask == 0\n```", "response_code": "\ndef func(n, l, r):\n    mask = (1 << (r - l + 1)) - 1\n    mask = mask << l\n    return n & mask == 0\n"}
{"task_id": 109, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr, n):\n    '''\n    Create a function that organizes the elements of the provided array so that negative elements come before positive ones.\n    '''\n"}], "response": "```python\ndef func(arr, n):\n    arr.sort()\n    return arr\n```", "response_code": "\ndef func(arr, n):\n    arr.sort()\n    return arr\n"}
{"task_id": 110, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1,char):\n    '''\n    Create a function that replaces empty spaces with a specified character in a given string.\n    '''\n"}], "response": "```python\ndef func(str1, char):\n    return str1.replace(' ', char)\n```", "response_code": "\ndef func(str1, char):\n    return str1.replace(' ', char)\n"}
{"task_id": 111, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq\ndef func(list1,n):\n    '''\n    Create a function that retrieves the n largest items from a dataset.\n    '''\n"}], "response": "import heapq\n\ndef func(list1, n):\n    return heapq.nlargest(n, list1)", "response_code": "import heapq\n\ndef func(list1, n):\n    return heapq.nlargest(n, list1)"}
{"task_id": 112, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(r,h):\n    '''\n    Create a function that calculates the lateral surface area of a cylinder.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(r, h):\n    return 2 * math.pi * r * h\n```", "response_code": "\nimport math\n\ndef func(r, h):\n    return 2 * math.pi * r * h\n"}
{"task_id": 113, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l):\n    '''\n    Create a function that calculates the volume of a cube.\n    '''\n"}], "response": "```python\ndef func(l):\n    return l ** 3\n```", "response_code": "\ndef func(l):\n    return l ** 3\n"}
{"task_id": 114, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a Python function that will modify all even bits of a specified number.\n    '''\n"}], "response": "```python\ndef func(n):\n    return int(''.join(['1' if i % 2 == 0 else bit for i, bit in enumerate(bin(n)[2:])]), 2)\n```", "response_code": "\ndef func(n):\n    return int(''.join(['1' if i % 2 == 0 else bit for i, bit in enumerate(bin(n)[2:])]), 2)\n"}
{"task_id": 115, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import Counter \ndef func(test_list):\n    '''\n    Create a function that checks for the frequency of records that occur the same number of times in the provided tuples.\n    '''\n"}], "response": "from collections import Counter\n\ndef func(test_list):\n    count_dict = Counter(test_list)\n    result = {}\n    for key, value in count_dict.items():\n        if list(count_dict.values()).count(value) > 1:\n            result[key] = value\n    return result", "response_code": "from collections import Counter\n\ndef func(test_list):\n    count_dict = Counter(test_list)\n    result = {}\n    for key, value in count_dict.items():\n        if list(count_dict.values()).count(value) > 1:\n            result[key] = value\n    return result"}
{"task_id": 116, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str): \n    '''\n    Create a Python function that calculates the total number of non-empty substrings in a provided string.\n    '''\n"}], "response": "```python\ndef func(s):\n    return int(len(s) * (len(s) + 1) / 2)\n```", "response_code": "\ndef func(s):\n    return int(len(s) * (len(s) + 1) / 2)\n"}
{"task_id": 117, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(m,n): \n    '''\n    Create a function that calculates the number of potential sequences of length n, where each subsequent element is at least double the previous element but no greater than m.\n    '''\n"}], "response": "```python\ndef func(m, n):\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    dp[0][1] = 1\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            for k in range(j // 2, j):\n                dp[i][j] += dp[i - 1][k]\n\n    return sum(dp[n])\n\n# Example usage:\n# print(func(10, 3))  # Output: 22\n```", "response_code": "\ndef func(m, n):\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    dp[0][1] = 1\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            for k in range(j // 2, j):\n                dp[i][j] += dp[i - 1][k]\n\n    return sum(dp[n])\n\n# Example usage:\n# print(func(10, 3))  # Output: 22\n"}
{"task_id": 118, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1,list2):\n    '''\n    Create a function that swaps the final element of a list with a different list.\n    '''\n"}], "response": "def func(list1, list2):\n    list1[-1], list2[-1] = list2[-1], list1[-1]", "response_code": "def func(list1, list2):\n    list1[-1], list2[-1] = list2[-1], list1[-1]"}
{"task_id": 119, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1):\n    '''\n    Create a function that calculates the total number of characters in a given string.\n    '''\n"}], "response": "```python\ndef func(str1):\n    return len(str1)\n```", "response_code": "\ndef func(str1):\n    return len(str1)\n"}
{"task_id": 120, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math  \ndef func(N): \n    '''\n    Create a Python function that determines the next perfect square larger than a specified number.\n    '''\n"}], "response": "import math\n\ndef func(N):\n    return math.ceil(math.sqrt(N)) ** 2", "response_code": "import math\n\ndef func(N):\n    return math.ceil(math.sqrt(N)) ** 2"}
{"task_id": 121, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr): \n    '''\n    Create a function that can determine the highest sum of a bi-tonic sub-sequence within a provided array.\n    '''\n"}], "response": "```python\ndef func(arr): \n    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n\n    inc[0] = arr[0]\n    dec[n-1] = arr[n-1]\n\n    for i in range(1, n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n\n    for i in range(n-2, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n\n    return max_sum\n```", "response_code": "\ndef func(arr): \n    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n\n    inc[0] = arr[0]\n    dec[n-1] = arr[n-1]\n\n    for i in range(1, n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n\n    for i in range(n-2, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n\n    return max_sum\n"}
{"task_id": 122, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(number):\n    '''\n    Create a function that calculates square roots using the Babylonian algorithm.\n    '''\n"}], "response": "import math\n\ndef func(number):\n    guess = number / 2\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(new_guess - guess) < 0.0001:\n            return new_guess\n        guess = new_guess", "response_code": "import math\n\ndef func(number):\n    guess = number / 2\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(new_guess - guess) < 0.0001:\n            return new_guess\n        guess = new_guess"}
{"task_id": 123, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str): \n    '''\n    Create a function that identifies the longest palindromic subsequence within a provided string.\n    '''\n"}], "response": "```python\ndef longest_palindromic_subsequence(s):\n    n = len(s)\n    dp = [[0]*n for _ in range(n)]\n    \n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]\n```", "response_code": "\ndef longest_palindromic_subsequence(s):\n    n = len(s)\n    dp = [[0]*n for _ in range(n)]\n    \n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]\n"}
{"task_id": 124, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    Create a function that computes the sum of the reciprocals of the integers from 1 to n.\n    '''\n"}], "response": "```python\ndef func(n):\n    return sum(1/i for i in range(1, n+1))\n```", "response_code": "\ndef func(n):\n    return sum(1/i for i in range(1, n+1))\n"}
{"task_id": 125, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(array_nums1,array_nums2):\n    '''\n    Create a lambda function to determine the common elements between two arrays.\n    '''\n"}], "response": "```python\ndef func(array_nums1, array_nums2):\n    '''\n    Create a lambda function to determine the common elements between two arrays.\n    '''\n    common_elements = list(filter(lambda x: x in array_nums1, array_nums2))\n    return common_elements\n```", "response_code": "\ndef func(array_nums1, array_nums2):\n    '''\n    Create a lambda function to determine the common elements between two arrays.\n    '''\n    common_elements = list(filter(lambda x: x in array_nums1, array_nums2))\n    return common_elements\n"}
{"task_id": 126, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(tup, x): \n    '''\n    Create a Python function that counts the number of times an element appears in a tuple.\n    '''\n"}], "response": "def count_element(tup, x):\n    return tup.count(x)", "response_code": "def count_element(tup, x):\n    return tup.count(x)"}
{"task_id": 127, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list,element):\n    '''\n    Create a function that inserts an element before every element in a list.\n    '''\n"}], "response": "def func(lst, element):\n    new_list = []\n    for item in lst:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list", "response_code": "def func(lst, element):\n    new_list = []\n    for item in lst:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list"}
{"task_id": 128, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import cmath  \ndef func(numbers):    \n    '''\n    Create a Python function that transforms complex numbers into polar coordinates.\n    '''\n"}], "response": "import cmath\n\ndef func(numbers):\n    polar_coordinates = [cmath.polar(num) for num in numbers]\n    return polar_coordinates", "response_code": "import cmath\n\ndef func(numbers):\n    polar_coordinates = [cmath.polar(num) for num in numbers]\n    return polar_coordinates"}
{"task_id": 129, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a Python function that counts the number of integers in a specified list.\n    '''\n"}], "response": "```python\ndef func(list1):\n    return sum(isinstance(x, int) for x in list1)\n```", "response_code": "\ndef func(list1):\n    return sum(isinstance(x, int) for x in list1)\n"}
{"task_id": 130, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from itertools import combinations_with_replacement \ndef func(l, n):\n    '''\n    Create a function that selects a specified number of colors from a pool of three different colors and generates all possible combinations with repetitions.\n    '''\n"}], "response": "from itertools import combinations_with_replacement\n\ndef func(l, n):\n    return list(combinations_with_replacement(l, n))", "response_code": "from itertools import combinations_with_replacement\n\ndef func(l, n):\n    return list(combinations_with_replacement(l, n))"}
{"task_id": 131, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    Create a Python function that calculates the quantity of prime numbers that are smaller than a specified non-negative number.\n    '''\n"}], "response": "```python\ndef func(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n\n    return count\n```", "response_code": "\ndef func(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n\n    return count\n"}
{"task_id": 132, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,b):\n    '''\n    Create a function that exchanges the values of two numbers.\n    '''\n"}], "response": "def func(a, b):\n    return b, a", "response_code": "def func(a, b):\n    return b, a"}
{"task_id": 133, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function that maximizes two given tuples.\n    '''\n"}], "response": "```python\ndef func(test_tup1, test_tup2):\n    return tuple(max(pair) for pair in zip(test_tup1, test_tup2))\n```", "response_code": "\ndef func(test_tup1, test_tup2):\n    return tuple(max(pair) for pair in zip(test_tup1, test_tup2))\n"}
{"task_id": 134, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function that identifies the nth Newman\u2013Shanks\u2013Williams prime.\n    '''\n"}], "response": "```python\ndef func(n): \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def newman_shanks_williams_prime(n):\n        count = 0\n        num = 0\n        while count < n:\n            num += 1\n            if is_prime(num):\n                if is_prime(2*num + 1):\n                    count += 1\n        return num\n\n    return newman_shanks_williams_prime(n)\n```", "response_code": "\ndef func(n): \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def newman_shanks_williams_prime(n):\n        count = 0\n        num = 0\n        while count < n:\n            num += 1\n            if is_prime(num):\n                if is_prime(2*num + 1):\n                    count += 1\n        return num\n\n    return newman_shanks_williams_prime(n)\n"}
{"task_id": 135, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function that divides the tuples provided using mathematical operations.\n    '''\n"}], "response": "def func(test_tup1, test_tup2):\n    result_tup = tuple(x / y for x, y in zip(test_tup1, test_tup2))\n    return result_tup", "response_code": "def func(test_tup1, test_tup2):\n    result_tup = tuple(x / y for x, y in zip(test_tup1, test_tup2))\n    return result_tup"}
{"task_id": 136, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1, L):\n    '''\n    Create a function that divides a specified list into two parts, with the length of the first part predetermined.\n    '''\n"}], "response": "```python\ndef func(list1, L):\n    return list1[:L], list1[L:]\n```", "response_code": "\ndef func(list1, L):\n    return list1[:L], list1[L:]\n"}
{"task_id": 137, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(h_age):\n    '''\n    Create a function that determines a dog's age in terms of dog years.\n    '''\n"}], "response": "```python\ndef func(h_age):\n    return h_age * 7\n```", "response_code": "\ndef func(h_age):\n    return h_age * 7\n"}
{"task_id": 138, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(S, step):\n    '''\n    Create a function that divides a list into sublists containing every nth element.\n    '''\n"}], "response": "```python\ndef func(S, step):\n    return [S[i::step] for i in range(step)]\n```", "response_code": "\ndef func(S, step):\n    return [S[i::step] for i in range(step)]\n"}
{"task_id": 139, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l):\n    '''\n    Create a function that calculates the lateral surface area of a cube.\n    '''\n"}], "response": "```python\ndef func(l):\n    return 4 * l * l\n```", "response_code": "\ndef func(l):\n    return 4 * l * l\n"}
{"task_id": 140, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):  \n    '''\n    Create a Python function that calculates the sum of the squares of the first n odd natural numbers.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n**2\n```", "response_code": "\ndef func(n):\n    return n**2\n"}
{"task_id": 141, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function that calculates the nth star number.\n    '''\n"}], "response": "def func(n):\n    return n * (2 * n - 1)", "response_code": "def func(n):\n    return n * (2 * n - 1)"}
{"task_id": 142, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(k):\n    '''\n    Create a function that determines the ASCII value of a character.\n    '''\n"}], "response": "```python\ndef func(k):\n    return ord(k)\n```", "response_code": "\ndef func(k):\n    return ord(k)\n"}
{"task_id": 143, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):  \n    '''\n    Create a Python function that calculates the total of even numbers located at even indexes.\n    '''\n"}], "response": "```python\ndef func(arr):\n    total = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n    return total\n```", "response_code": "\ndef func(arr):\n    total = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n    return total\n"}
{"task_id": 144, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a Python function that calculates the sum of the fifth power of the first n even natural numbers.\n    '''\n"}], "response": "def sum_of_fifth_power(n):\n    return sum([i**5 for i in range(2, 2*n+1, 2)])", "response_code": "def sum_of_fifth_power(n):\n    return sum([i**5 for i in range(2, 2*n+1, 2)])"}
{"task_id": 145, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Create a function that extracts the last element from a list of tuple records.\n    '''\n"}], "response": "def func(test_list):\n    return [t[-1] for t in test_list]", "response_code": "def func(test_list):\n    return [t[-1] for t in test_list]"}
{"task_id": 146, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function that subtracts the values of one tuple from the values of another tuple at the same index.\n    '''\n"}], "response": "def func(test_tup1, test_tup2):\n    return tuple(x - y for x, y in zip(test_tup1, test_tup2))", "response_code": "def func(test_tup1, test_tup2):\n    return tuple(x - y for x, y in zip(test_tup1, test_tup2))"}
{"task_id": 147, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math  \ndef func( n): \n    '''\n    Create a Python function that calculates the sum of binomial coefficients at even indices.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    total_sum = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            total_sum += math.comb(n, i)\n    return total_sum", "response_code": "import math\n\ndef func(n):\n    total_sum = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            total_sum += math.comb(n, i)\n    return total_sum"}
{"task_id": 148, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(r,h):\n    '''\n    Create a function that calculates the volume of a cylinder.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(r, h):\n    return math.pi * r**2 * h\n```", "response_code": "\nimport math\n\ndef func(r, h):\n    return math.pi * r**2 * h\n"}
{"task_id": 149, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(dict,n):\n    '''\n    Create a function that will sort a dictionary based on its values.\n    '''\n"}], "response": "```python\ndef func(dict, n):\n    sorted_dict = dict(sorted(dict.items(), key=lambda x: x[1]))\n    return dict(list(sorted_dict.items())[:n])\n```", "response_code": "\ndef func(dict, n):\n    sorted_dict = dict(sorted(dict.items(), key=lambda x: x[1]))\n    return dict(list(sorted_dict.items())[:n])\n"}
{"task_id": 150, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    Create a function that determines the number of occurrences of an element before a specified record in the provided tuple.\n    '''\n"}], "response": "def func(test_tup):\n    def count_occurrences(tup, element, record):\n        return tup[:record].count(element)\n\n    return count_occurrences(test_tup, element, record)", "response_code": "def func(test_tup):\n    def count_occurrences(tup, element, record):\n        return tup[:record].count(element)\n\n    return count_occurrences(test_tup, element, record)"}
{"task_id": 151, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function that calculates the decagonal number at position n.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n * (7 * n - 5)\n```", "response_code": "\ndef func(n):\n    return n * (7 * n - 5)\n"}
{"task_id": 152, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(dlist, item):\n    '''\n    Create a function that uses sequential search to find an element in the provided array.\n    '''\n"}], "response": "def func(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True\n    return False", "response_code": "def func(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True\n    return False"}
{"task_id": 153, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Create a Python function that verifies whether the elements in a provided list are distinct.\n    '''\n"}], "response": "def func(test_list):\n    return len(test_list) == len(set(test_list)", "response_code": "def func(test_list):\n    return len(test_list) == len(set(test_list)"}
{"task_id": 154, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums1,nums2):\n    '''\n    Create a function that subtracts two lists using the map and lambda functions.\n    '''\n"}], "response": "from typing import List\n\ndef func(nums1: List[int], nums2: List[int]) -> List[int]:\n    return list(map(lambda x, y: x - y, nums1, nums2))", "response_code": "from typing import List\n\ndef func(nums1: List[int], nums2: List[int]) -> List[int]:\n    return list(map(lambda x, y: x - y, nums1, nums2))"}
{"task_id": 155, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a Python function that verifies if the frequency of each digit is not greater than the digit itself.\n    '''\n"}], "response": "```python\ndef func(n):\n    num_str = str(n)\n    for digit in num_str:\n        if num_str.count(digit) > int(digit):\n            return False\n    return True\n```", "response_code": "\ndef func(n):\n    num_str = str(n)\n    for digit in num_str:\n        if num_str.count(digit) > int(digit):\n            return False\n    return True\n"}
{"task_id": 156, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list,element):\n    '''\n    Create a function that verifies if all elements in a list match a specified string.\n    '''\n"}], "response": "def func(lst, element):\n    return all(item == element for item in lst)", "response_code": "def func(lst, element):\n    return all(item == element for item in lst)"}
{"task_id": 157, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that identifies a string containing an 'a' followed by two or three 'b'.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'a(bb|bbb)'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False", "response_code": "import re\n\ndef func(text):\n    pattern = r'a(bb|bbb)'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": 158, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a, n, k): \n    '''\n    Create a function that identifies the highest sum of consecutive elements in an array that has been repeated k times.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(a, n, k): \n    max_sum = 0\n    for i in range(len(a)-n+1):\n        current_sum = sum(a[i:i+n]) * k\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n```", "response_code": "\nimport numpy as np\n\ndef func(a, n, k): \n    max_sum = 0\n    for i in range(len(a)-n+1):\n        current_sum = sum(a[i:i+n]) * k\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n"}
{"task_id": 159, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):  \n    '''\n    Create a Python function that calculates the sum of the squares of the first n even natural numbers.\n    '''\n"}], "response": "def sum_of_squares_of_even_numbers(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**2\n    return sum", "response_code": "def sum_of_squares_of_even_numbers(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**2\n    return sum"}
{"task_id": 160, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function that identifies the list of lists with the longest length.\n    '''\n"}], "response": "```python\ndef func(list1):\n    max_length = max(len(sublist) for sublist in list1)\n    longest_lists = [sublist for sublist in list1 if len(sublist) == max_length]\n    return longest_lists\n```", "response_code": "\ndef func(list1):\n    max_length = max(len(sublist) for sublist in list1)\n    longest_lists = [sublist for sublist in list1 if len(sublist) == max_length]\n    return longest_lists\n"}
{"task_id": 161, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n, k): \n    '''\n    Create a function that calculates the number of possible ways to paint a fence with n posts and k colors, ensuring that no more than 2 adjacent posts have the same color.\n    '''\n"}], "response": "from math import factorial\n\ndef func(n, k): \n    if n == 0: \n        return 0\n    if n == 1: \n        return k\n    same, diff = 0, k\n    for i in range(2, n+1): \n        same, diff = diff, (same + diff) * (k-1)\n    return same + diff", "response_code": "from math import factorial\n\ndef func(n, k): \n    if n == 0: \n        return 0\n    if n == 1: \n        return k\n    same, diff = 0, k\n    for i in range(2, n+1): \n        same, diff = diff, (same + diff) * (k-1)\n    return same + diff"}
{"task_id": 162, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n,m):  \n    '''\n    Create a Python function that calculates the quotient of two numbers.\n    '''\n"}], "response": "def func(n, m):\n    return n / m", "response_code": "def func(n, m):\n    return n / m"}
{"task_id": 163, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(w,h):\n    '''\n    Create a function that calculates the length of the third side in a right-angled triangle.\n    '''\n"}], "response": "import math\n\ndef func(w, h):\n    return math.sqrt(w**2 + h**2)", "response_code": "import math\n\ndef func(w, h):\n    return math.sqrt(w**2 + h**2)"}
{"task_id": 164, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(listval):\n    '''\n    Create a function that can determine the highest value within a list containing different data types.\n    '''\n"}], "response": "```python\ndef func(listval):\n    return max(listval)\n```", "response_code": "\ndef func(listval):\n    return max(listval)\n"}
{"task_id": 165, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(number):\n    '''\n    Create a function that calculates the total sum of a number's divisors.\n    '''\n"}], "response": "```python\ndef func(number):\n    total_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total_sum += i\n    return total_sum\n```", "response_code": "\ndef func(number):\n    total_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total_sum += i\n    return total_sum\n"}
{"task_id": 166, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr): \n    '''\n    Create a Python function that calculates the number of inversions in an array.\n    '''\n"}], "response": "from typing import List\n\ndef func(arr: List[int]) -> int:\n    def merge(arr, temp, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp[k] = arr[i]\n                k += 1\n                i += 1\n            else:\n                temp[k] = arr[j]\n                k += 1\n                j += 1\n                inv_count += (mid - i + 1)\n\n        while i <= mid:\n            temp[k] = arr[i]\n            k += 1\n            i += 1\n\n        while j <= right:\n            temp[k] = arr[j]\n            k += 1\n            j += 1\n\n        for i in range(left, right + 1):\n            arr[i] = temp[i]\n\n        return inv_count\n\n    def merge_sort(arr, temp, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort(arr, temp, left, mid)\n            inv_count += merge_sort(arr, temp, mid + 1, right)\n            inv_count += merge(arr, temp, left, mid, right)\n        return inv_count\n\n    n = len(arr)\n    temp = [0] * n\n    return merge_sort(arr, temp, 0, n - 1)", "response_code": "from typing import List\n\ndef func(arr: List[int]) -> int:\n    def merge(arr, temp, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp[k] = arr[i]\n                k += 1\n                i += 1\n            else:\n                temp[k] = arr[j]\n                k += 1\n                j += 1\n                inv_count += (mid - i + 1)\n\n        while i <= mid:\n            temp[k] = arr[i]\n            k += 1\n            i += 1\n\n        while j <= right:\n            temp[k] = arr[j]\n            k += 1\n            j += 1\n\n        for i in range(left, right + 1):\n            arr[i] = temp[i]\n\n        return inv_count\n\n    def merge_sort(arr, temp, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort(arr, temp, left, mid)\n            inv_count += merge_sort(arr, temp, mid + 1, right)\n            inv_count += merge(arr, temp, left, mid, right)\n        return inv_count\n\n    n = len(arr)\n    temp = [0] * n\n    return merge_sort(arr, temp, 0, n - 1)"}
{"task_id": 167, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function that can flatten a nested list structure.\n    '''\n"}], "response": "```python\ndef flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n```", "response_code": "\ndef flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n"}
{"task_id": 168, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import defaultdict\ndef func(stdata):\n    '''\n    Create a function that calculates the highest total value from a list of tuples.\n    '''\n"}], "response": "from collections import defaultdict\n\ndef func(stdata):\n    max_total = 0\n    data_dict = defaultdict(int)\n    \n    for tup in stdata:\n        key, value = tup\n        data_dict[key] += value\n    \n    max_total = max(data_dict.values())\n    \n    return max_total", "response_code": "from collections import defaultdict\n\ndef func(stdata):\n    max_total = 0\n    data_dict = defaultdict(int)\n    \n    for tup in stdata:\n        key, value = tup\n        data_dict[key] += value\n    \n    max_total = max(data_dict.values())\n    \n    return max_total"}
{"task_id": 169, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function that calculates the number of binary sequences with a length of 2n where the sum of the first n bits is equal to the sum of the last n bits.\n    '''\n"}], "response": "```python\ndef func(n): \n    return int((1/(n+1)) * comb(2*n, n))\n```", "response_code": "\ndef func(n): \n    return int((1/(n+1)) * comb(2*n, n))\n"}
{"task_id": 170, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(d):\n    '''\n    Create a function that determines the depth of a dictionary.\n    '''\n"}], "response": "```python\ndef func(d):\n    if isinstance(d, dict):\n        return 1 + (max(func(v) for v in d.values()) if d else 0)\n    else:\n        return 0\n```", "response_code": "\ndef func(d):\n    if isinstance(d, dict):\n        return 1 + (max(func(v) for v in d.values()) if d else 0)\n    else:\n        return 0\n"}
{"task_id": 171, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr,ranges,rotations,index) :  \n    '''\n    Create a Python function that can determine the element at a specified index after a certain number of rotations.\n    '''\n"}], "response": "```python\ndef func(arr, ranges, rotations, index):\n    n = len(arr)\n    for i in range(rotations):\n        left, right = ranges[i]\n        arr = arr[:left] + arr[right+1:] + arr[left:right+1]\n    return arr[index]\n```", "response_code": "\ndef func(arr, ranges, rotations, index):\n    n = len(arr)\n    for i in range(rotations):\n        left, right = ranges[i]\n        arr = arr[:left] + arr[right+1:] + arr[left:right+1]\n    return arr[index]\n"}
{"task_id": 172, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(words):\n    '''\n    Create a function that compares two words from a list of words that all begin with the letter 'p'.\n    '''\n"}], "response": "import re\n\ndef func(words):\n    for i in range(len(words)):\n        for j in range(i+1, len(words)):\n            if re.match(r'^p', words[i]) and re.match(r'^p', words[j]):\n                print(f\"Comparing {words[i]} and {words[j]}\")", "response_code": "import re\n\ndef func(words):\n    for i in range(len(words)):\n        for j in range(i+1, len(words)):\n            if re.match(r'^p', words[i]) and re.match(r'^p', words[j]):\n                print(f\"Comparing {words[i]} and {words[j]}\")"}
{"task_id": 173, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a, n, index, k):\n    '''\n    Create a function that calculates the maximum sum of an increasing subsequence from the beginning up to the ith index, including a specified kth element that comes after i (where k > i).\n    '''\n"}], "response": "```python\ndef func(a, n, index, k):\n    dp = [0] * n\n    dp[index] = a[index]\n    for i in range(index+1, k):\n        for j in range(index, i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    return max(dp)\n```", "response_code": "\ndef func(a, n, index, k):\n    dp = [0] * n\n    dp[index] = a[index]\n    for i in range(index+1, k):\n        for j in range(index, i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    return max(dp)\n"}
{"task_id": 174, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from copy import deepcopy\ndef func(tuplex,m,n):\n    '''\n    Create a function that retrieves the colon of a tuple.\n    '''\n"}], "response": "```python\nfrom copy import deepcopy\n\ndef func(tuplex, m, n):\n    '''\n    Create a function that retrieves the colon of a tuple.\n    '''\n```", "response_code": "\nfrom copy import deepcopy\n\ndef func(tuplex, m, n):\n    '''\n    Create a function that retrieves the colon of a tuple.\n    '''\n"}
{"task_id": 175, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums1, nums2, N):\n    '''\n    Create a function that identifies the specified number of highest products from two provided lists.\n    '''\n"}], "response": "```python\nimport itertools\n\ndef func(nums1, nums2, N):\n    products = [a*b for a in nums1 for b in nums2]\n    highest_products = sorted(products, reverse=True)[:N]\n    return highest_products\n```", "response_code": "\nimport itertools\n\ndef func(nums1, nums2, N):\n    products = [a*b for a in nums1 for b in nums2]\n    highest_products = sorted(products, reverse=True)[:N]\n    return highest_products\n"}
{"task_id": 176, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,b):   \n    '''\n    Create a Python function that determines the larger of two numbers.\n    '''\n"}], "response": "```python\ndef func(a, b):\n    return max(a, b)\n```", "response_code": "\ndef func(a, b):\n    return max(a, b)\n"}
{"task_id": 177, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1):\n    '''\n    Create a function that transforms a provided string into a tuple.\n    '''\n"}], "response": "```python\ndef func(str1):\n    return tuple(str1)\n```", "response_code": "\ndef func(str1):\n    return tuple(str1)\n"}
{"task_id": 178, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a Python function that will identify and set the leftmost bit that is not currently set.\n    '''\n"}], "response": "```python\ndef func(n): \n    return n | (n + 1)\n```", "response_code": "\ndef func(n): \n    return n | (n + 1)\n"}
{"task_id": 179, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(r,h):\n    '''\n    Create a function that calculates the volume of a cone.\n    '''\n"}], "response": "import math\n\ndef func(r, h):\n    volume = (1/3) * math.pi * r**2 * h\n    return volume", "response_code": "import math\n\ndef func(r, h):\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"}
{"task_id": 180, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a Python function that determines the largest power of 2 that is less than or equal to n.\n    '''\n"}], "response": "```python\ndef largest_power_of_2(n):\n    power = 0\n    while 2**power <= n:\n        power += 1\n    return 2**(power-1)\n```", "response_code": "\ndef largest_power_of_2(n):\n    power = 0\n    while 2**power <= n:\n        power += 1\n    return 2**(power-1)\n"}
{"task_id": 181, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function that calculates the nth Lucas number.\n    '''\n"}], "response": "```python\ndef func(n): \n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return func(n-1) + func(n-2)\n```", "response_code": "\ndef func(n): \n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return func(n-1) + func(n-2)\n"}
{"task_id": 182, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list_, string):\n    '''\n    Create a function that adds a specified string to the start of each item in a list.\n    '''\n"}], "response": "def func(list_, string):\n    return [string + item for item in list_]", "response_code": "def func(list_, string):\n    return [string + item for item in list_]"}
{"task_id": 183, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l1, l2, l3):\n    '''\n    Create a function that converts multiple lists into a nested dictionary.\n    '''\n"}], "response": "```python\ndef func(l1, l2, l3):\n    nested_dict = {}\n    nested_dict['list1'] = l1\n    nested_dict['list2'] = l2\n    nested_dict['list3'] = l3\n    return nested_dict\n```", "response_code": "\ndef func(l1, l2, l3):\n    nested_dict = {}\n    nested_dict['list1'] = l1\n    nested_dict['list2'] = l2\n    nested_dict['list3'] = l3\n    return nested_dict\n"}
{"task_id": 184, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    Create a function that calculates the highest sum achievable by utilizing the equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n"}], "response": "```python\ndef func(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return max(func(n//2) + func(n//3) + func(n//4) + func(n//5), n)\n```", "response_code": "\ndef func(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return max(func(n//2) + func(n//3) + func(n//4) + func(n//5), n)\n"}
{"task_id": 185, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(input_list):\n    '''\n    Create a lambda function to determine the list with the longest length.\n    '''\n"}], "response": "```python\ndef func(input_list):\n    return max(input_list, key=lambda x: len(x))\n```", "response_code": "\ndef func(input_list):\n    return max(input_list, key=lambda x: len(x))\n"}
{"task_id": 186, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    Create a function that determines whether a given tuple is unique or not.\n    '''\n"}], "response": "def func(test_tup):\n    return len(test_tup) == len(set(test_tup))", "response_code": "def func(test_tup):\n    return len(test_tup) == len(set(test_tup))"}
{"task_id": 187, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1):\n    '''\n    Create a Python function that identifies the initial character in a provided string that does not repeat.\n    '''\n"}], "response": "from collections import Counter\n\ndef func(str1):\n    char_count = Counter(str1)\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "response_code": "from collections import Counter\n\ndef func(str1):\n    char_count = Counter(str1)\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None"}
{"task_id": 188, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef func(string): \n    '''\n    Create a function that uses regex to determine if a string begins and ends with the same character.\n    '''\n"}], "response": "import re\n\ndef func(string): \n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    return re.match(regex, string) is not None", "response_code": "import re\n\ndef func(string): \n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    return re.match(regex, string) is not None"}
{"task_id": 189, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,b,c):\n    '''\n    Create a function that calculates the median of three given numbers.\n    '''\n"}], "response": "```python\ndef func(a, b, c):\n    return sorted([a, b, c])[1]\n```", "response_code": "\ndef func(a, b, c):\n    return sorted([a, b, c])[1]\n"}
{"task_id": 190, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a function that calculates the total of all the digits in each number within a specified list.\n    '''\n"}], "response": "def func(nums):\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total", "response_code": "def func(nums):\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"}
{"task_id": 191, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function that calculates the bitwise xor operation on the provided tuples.\n    '''\n"}], "response": "```python\ndef func(test_tup1, test_tup2):\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n```", "response_code": "\ndef func(test_tup1, test_tup2):\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n"}
{"task_id": 192, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Create a function that retrieves the occurrence of distinct tuples in the provided list without considering the order.\n    '''\n"}], "response": "from collections import Counter\n\ndef func(test_list):\n    return Counter([tuple(sorted(item)) for item in test_list])", "response_code": "from collections import Counter\n\ndef func(test_list):\n    return Counter([tuple(sorted(item)) for item in test_list])"}
{"task_id": 193, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function that adds the elements of two nested tuples together based on their indexes.\n    '''\n"}], "response": "def func(test_tup1, test_tup2):\n    result = tuple(x + y for x, y in zip(test_tup1, test_tup2))\n    return result", "response_code": "def func(test_tup1, test_tup2):\n    result = tuple(x + y for x, y in zip(test_tup1, test_tup2))\n    return result"}
{"task_id": 194, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,b):   \n    '''\n    Create a Python function that determines the smaller of two numbers.\n    '''\n"}], "response": "```python\ndef func(a, b):\n    return min(a, b)\n```", "response_code": "\ndef func(a, b):\n    return min(a, b)\n"}
{"task_id": 195, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(tuplex,tuple1): \n    '''\n    Create a function that verifies if an element is present in a tuple.\n    '''\n"}], "response": "def func(tuplex, tuple1):\n    if tuplex in tuple1:\n        return True\n    else:\n        return False", "response_code": "def func(tuplex, tuple1):\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"}
{"task_id": 196, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x): \n    '''\n    Create a Python function that determines the parity of a specified number.\n    '''\n"}], "response": "def func(x):\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"", "response_code": "def func(x):\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""}
{"task_id": 197, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    Create a function that rearranges the digits of a given number to find the next largest number.\n    '''\n"}], "response": "```python\ndef func(n):\n    n = list(str(n))\n    i = len(n) - 1\n    while i > 0 and n[i-1] >= n[i]:\n        i -= 1\n    if i <= 0:\n        return -1\n    j = len(n) - 1\n    while n[j] <= n[i-1]:\n        j -= 1\n    n[i-1], n[j] = n[j], n[i-1]\n    n[i:] = n[len(n)-1:i-1:-1]\n    return int(''.join(n))\n```", "response_code": "\ndef func(n):\n    n = list(str(n))\n    i = len(n) - 1\n    while i > 0 and n[i-1] >= n[i]:\n        i -= 1\n    if i <= 0:\n        return -1\n    j = len(n) - 1\n    while n[j] <= n[i-1]:\n        j -= 1\n    n[i-1], n[j] = n[j], n[i-1]\n    n[i:] = n[len(n)-1:i-1:-1]\n    return int(''.join(n))\n"}
{"task_id": 198, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq\ndef func(nums1, nums2, k):\n    '''\n    Create a function that identifies k pairs, each containing one element from the first array and one element from the second array.\n    '''\n"}], "response": "import heapq\n\ndef func(nums1, nums2, k):\n    min_heap = []\n    if not nums1 or not nums2:\n        return []\n\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (num1 + num2, num1, num2))\n            else:\n                if num1 + num2 < min_heap[0][0]:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap, (num1 + num2, num1, num2))\n                else:\n                    break\n\n    return [(pair[1], pair[2]) for pair in min_heap]", "response_code": "import heapq\n\ndef func(nums1, nums2, k):\n    min_heap = []\n    if not nums1 or not nums2:\n        return []\n\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (num1 + num2, num1, num2))\n            else:\n                if num1 + num2 < min_heap[0][0]:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap, (num1 + num2, num1, num2))\n                else:\n                    break\n\n    return [(pair[1], pair[2]) for pair in min_heap]"}
{"task_id": 199, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function that determines the smallest product from pairs of tuples in a specified list.\n    '''\n"}], "response": "```python\ndef func(list1):\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            min_product = min(min_product, product)\n    return min_product\n```", "response_code": "\ndef func(list1):\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            min_product = min(min_product, product)\n    return min_product\n"}
{"task_id": 200, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(listval):\n    '''\n    Create a function that can determine the smallest value within a list containing different data types.\n    '''\n"}], "response": "def func(listval):\n    return min(listval)", "response_code": "def func(listval):\n    return min(listval)"}
{"task_id": 201, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(word):\n    '''\n    Create a function that uses regex to transform the provided snake case string into camel case.\n    '''\n"}], "response": "import re\n\ndef func(word):\n    return re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)", "response_code": "import re\n\ndef func(word):\n    return re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)"}
{"task_id": 202, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l):\n    '''\n    Create a Python function that eliminates odd numbers from a provided list.\n    '''\n"}], "response": "```python\ndef func(l):\n    return [x for x in l if x % 2 == 0]\n```", "response_code": "\ndef func(l):\n    return [x for x in l if x % 2 == 0]\n"}
{"task_id": 203, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1, n):\n    '''\n    Create a function that retrieves the nth element from a provided list of tuples.\n    '''\n"}], "response": "```python\ndef func(list1, n):\n    return [item[n] for item in list1]\n```", "response_code": "\ndef func(list1, n):\n    return [item[n] for item in list1]\n"}
{"task_id": 204, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1,list2):  \n    '''\n    Create a Python function that verifies if a value is present in a sequence.\n    '''\n"}], "response": "from typing import Any\n\ndef func(list1: list, list2: list) -> bool:\n    '''\n    Create a Python function that verifies if a value is present in a sequence.\n    '''\n    for val in list1:\n        if val in list2:\n            return True\n    return False", "response_code": "from typing import Any\n\ndef func(list1: list, list2: list) -> bool:\n    '''\n    Create a Python function that verifies if a value is present in a sequence.\n    '''\n    for val in list1:\n        if val in list2:\n            return True\n    return False"}
{"task_id": 205, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr): \n    '''\n    Create a Python function that identifies the pair of integers with the highest product from a given array.\n    '''\n"}], "response": "```python\ndef func(arr): \n    arr.sort()\n    return arr[-1] * arr[-2]\n```", "response_code": "\ndef func(arr): \n    arr.sort()\n    return arr[-1] * arr[-2]\n"}
{"task_id": 206, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(Input): \n    '''\n    Create a function that identifies the first element that is common among all tuples in a given list.\n    '''\n"}], "response": "from collections import Counter\n\ndef func(Input): \n    if not Input:\n        return None\n    \n    common_elements = set(Input[0])\n    \n    for tup in Input[1:]:\n        common_elements = common_elements.intersection(set(tup))\n    \n    if common_elements:\n        return list(common_elements)[0]\n    else:\n        return None", "response_code": "from collections import Counter\n\ndef func(Input): \n    if not Input:\n        return None\n    \n    common_elements = set(Input[0])\n    \n    for tup in Input[1:]:\n        common_elements = common_elements.intersection(set(tup))\n    \n    if common_elements:\n        return list(common_elements)[0]\n    else:\n        return None"}
{"task_id": 207, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst): \n    '''\n    Create a Python function that identifies the sublist with the longest length.\n    '''\n"}], "response": "```python\ndef func(lst): \n    return max(lst, key=len)\n```", "response_code": "\ndef func(lst): \n    return max(lst, key=len)\n"}
{"task_id": 208, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function that rounds each number in a specified list, then calculates the total sum of the rounded numbers multiplied by the length of the list.\n    '''\n"}], "response": "```python\ndef func(list1):\n    rounded_sum = sum(round(num) for num in list1)\n    total_sum = rounded_sum * len(list1)\n    return total_sum\n```", "response_code": "\ndef func(list1):\n    rounded_sum = sum(round(num) for num in list1)\n    total_sum = rounded_sum * len(list1)\n    return total_sum\n"}
{"task_id": 209, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a Python function that calculates the sum of the cubes of the first n even natural numbers.\n    '''\n"}], "response": "def sum_of_cubes_of_even_numbers(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**3\n    return sum", "response_code": "def sum_of_cubes_of_even_numbers(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**3\n    return sum"}
{"task_id": 210, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    Create a function that combines each element of a tuple using a specified delimiter.\n    '''\n"}], "response": "def func(test_tup):\n    return '-'.join(test_tup)", "response_code": "def func(test_tup):\n    return '-'.join(test_tup)"}
{"task_id": 211, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):  \n    '''\n    Create a Python function that calculates the average of the cubes of the first n natural numbers.\n    '''\n"}], "response": "def func(n):\n    total = sum([i**3 for i in range(1, n+1)])\n    average = total / n\n    return average", "response_code": "def func(n):\n    total = sum([i**3 for i in range(1, n+1)])\n    average = total / n\n    return average"}
{"task_id": 212, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tuple):\n    '''\n    Create a function that retrieves the last element of each string in the provided tuple.\n    '''\n"}], "response": "def func(test_tuple):\n    return [string[-1] for string in test_tuple]", "response_code": "def func(test_tuple):\n    return [string[-1] for string in test_tuple]"}
{"task_id": 213, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1, x): \n    '''\n    Create a function that calculates the quantity of sublists that include a specific element.\n    '''\n"}], "response": "```python\ndef func(list1, x): \n    return sum(1 for sublist in list1 if x in sublist)\n```", "response_code": "\ndef func(list1, x): \n    return sum(1 for sublist in list1 if x in sublist)\n"}
{"task_id": 214, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a lambda function to filter out odd numbers.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))\n```", "response_code": "\ndef func(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))\n"}
{"task_id": 215, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(dt):\n    '''\n    Create a function that uses regex to change a date from yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n"}], "response": "import re\n\ndef func(dt):\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)", "response_code": "import re\n\ndef func(dt):\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)"}
{"task_id": 216, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(my_list):\n    '''\n    Create a function that utilizes shell sort to arrange the provided array.\n    '''\n"}], "response": "```python\ndef func(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n```", "response_code": "\ndef func(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n"}
{"task_id": 217, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function that retrieves the individual elements and pairs from two given tuples.\n    '''\n"}], "response": "def func(test_tup1, test_tup2):\n    individual_elements = list(test_tup1) + list(test_tup2)\n    pairs = list(zip(test_tup1, test_tup2))\n    \n    return individual_elements, pairs", "response_code": "def func(test_tup1, test_tup2):\n    individual_elements = list(test_tup1) + list(test_tup2)\n    pairs = list(zip(test_tup1, test_tup2))\n    \n    return individual_elements, pairs"}
{"task_id": 218, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a, b, c): \n    '''\n    Create a function that determines the directrix of a parabola.\n    '''\n"}], "response": "```python\ndef func(a, b, c): \n    '''\n    Create a function that determines the directrix of a parabola.\n    '''\n    return (-b)/(2*a)\n```", "response_code": "\ndef func(a, b, c): \n    '''\n    Create a function that determines the directrix of a parabola.\n    '''\n    return (-b)/(2*a)\n"}
{"task_id": 219, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1, list2):\n    '''\n    Create a function that accepts two lists and outputs true if they share at least one element.\n    '''\n"}], "response": "def func(list1, list2):\n    return any(item in list1 for item in list2)", "response_code": "def func(list1, list2):\n    return any(item in list1 for item in list2)"}
{"task_id": 220, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(base1,base2,height):\n    '''\n    Create a function that calculates the median of a trapezium.\n    '''\n"}], "response": "```python\ndef func(base1, base2, height):\n    return (base1 + base2) / 2 * height\n```", "response_code": "\ndef func(base1, base2, height):\n    return (base1 + base2) / 2 * height\n"}
{"task_id": 221, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr, number):\n    '''\n    Create a function that determines if the input number is larger than any of the elements in the provided array.\n    '''\n"}], "response": "def func(arr, number):\n    return any(number > x for x in arr)", "response_code": "def func(arr, number):\n    return any(number > x for x in arr)"}
{"task_id": 222, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that identifies a string containing an 'a' followed by one or more 'b's.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'a+b+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False", "response_code": "import re\n\ndef func(text):\n    pattern = r'a+b+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": 223, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n) :\n    '''\n    Create a Python function that determines the final digit of a specified number.\n    '''\n"}], "response": "def func(n):\n    return n % 10", "response_code": "def func(n):\n    return n % 10"}
{"task_id": 224, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a Python function that displays negative numbers from a list.\n    '''\n"}], "response": "```python\ndef func(list1):\n    for num in list1:\n        if num < 0:\n            print(num)\n```", "response_code": "\ndef func(list1):\n    for num in list1:\n        if num < 0:\n            print(num)\n"}
{"task_id": 225, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1):\n    '''\n    Create a function that eliminates characters with odd indexes in a string.\n    '''\n"}], "response": "def eliminate_odd_indexes(str1):\n    return str1[::2]", "response_code": "def eliminate_odd_indexes(str1):\n    return str1[::2]"}
{"task_id": 226, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Create a function that counts pairs of tuples that are bidirectional.\n    '''\n"}], "response": "from collections import Counter\n\ndef func(test_list):\n    count = Counter((tuple(sorted(pair)) for pair in test_list))\n    bidirectional_pairs = sum(count[pair] > 1 for pair in count)\n    return bidirectional_pairs", "response_code": "from collections import Counter\n\ndef func(test_list):\n    count = Counter((tuple(sorted(pair)) for pair in test_list))\n    bidirectional_pairs = sum(count[pair] > 1 for pair in count)\n    return bidirectional_pairs"}
{"task_id": 227, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(L):\n    '''\n    Create a function that transforms a list of several integers into a singular integer.\n    '''\n"}], "response": "```python\ndef func(L):\n    return int(''.join(map(str, L)))\n```", "response_code": "\ndef func(L):\n    return int(''.join(map(str, L)))\n"}
{"task_id": 228, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that identifies all adverbs and their locations within a provided sentence.\n    '''\n"}], "response": "import re\n\ndef find_adverbs(text):\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    adverb_locations = [(m.group(0), m.start(), m.end()) for m in re.finditer(r'\\b\\w+ly\\b', text)]\n    return adverb_locations", "response_code": "import re\n\ndef find_adverbs(text):\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    adverb_locations = [(m.group(0), m.start(), m.end()) for m in re.finditer(r'\\b\\w+ly\\b', text)]\n    return adverb_locations"}
{"task_id": 229, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l):\n    '''\n    Create a function that calculates the surface area of a cube.\n    '''\n"}], "response": "```python\ndef func(l):\n    return 6 * l**2\n```", "response_code": "\ndef func(l):\n    return 6 * l**2\n"}
{"task_id": 230, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from array import array\ndef func(nums):\n    '''\n    Create a function that calculates the proportion of positive numbers in an array of integers.\n    '''\n"}], "response": "from array import array\n\ndef func(nums):\n    count_positive = sum(1 for num in nums if num > 0)\n    total_numbers = len(nums)\n    \n    if total_numbers == 0:\n        return 0\n    else:\n        return count_positive / total_numbers", "response_code": "from array import array\n\ndef func(nums):\n    count_positive = sum(1 for num in nums if num > 0)\n    total_numbers = len(nums)\n    \n    if total_numbers == 0:\n        return 0\n    else:\n        return count_positive / total_numbers"}
{"task_id": 231, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1): \n    '''\n    Create a Python function that identifies the largest negative number in a provided list.\n    '''\n"}], "response": "```python\ndef func(list1): \n    neg_nums = [num for num in list1 if num < 0]\n    if neg_nums:\n        return max(neg_nums)\n    else:\n        return None\n```", "response_code": "\ndef func(list1): \n    neg_nums = [num for num in list1 if num < 0]\n    if neg_nums:\n        return max(neg_nums)\n    else:\n        return None\n"}
{"task_id": 232, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list, K):\n    '''\n    Create a function that trims each tuple by k in the provided list of tuples.\n    '''\n"}], "response": "```python\ndef func(test_list, K):\n    return [tuple(t[K:]) for t in test_list]\n```", "response_code": "\ndef func(test_list, K):\n    return [tuple(t[K:]) for t in test_list]\n"}
{"task_id": 233, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function that multiplies the elements of two tuples together based on their corresponding indices.\n    '''\n"}], "response": "```python\ndef func(test_tup1, test_tup2):\n    result = tuple(x * y for x, y in zip(test_tup1, test_tup2))\n    return result\n```", "response_code": "\ndef func(test_tup1, test_tup2):\n    result = tuple(x * y for x, y in zip(test_tup1, test_tup2))\n    return result\n"}
{"task_id": 234, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import Counter \ndef func(tup, lst): \n    '''\n    Create a Python function that counts the frequency of each element in a list within a tuple.\n    '''\n"}], "response": "from collections import Counter\n\ndef func(tup, lst):\n    return Counter(tup[lst])", "response_code": "from collections import Counter\n\ndef func(tup, lst):\n    return Counter(tup[lst])"}
{"task_id": 235, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a lambda function to calculate the cube of each element in a list.\n    '''\n"}], "response": "```python\ndef func(nums):\n    cube = lambda x: x**3\n    return list(map(cube, nums))\n```", "response_code": "\ndef func(nums):\n    cube = lambda x: x**3\n    return list(map(cube, nums))\n"}
{"task_id": 236, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function that computes the total of Perrin numbers.\n    '''\n"}], "response": "```python\ndef func(n):\n    if n == 0:\n        return 3\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    a, b, c = 3, 0, 2\n    for _ in range(3, n+1):\n        a, b, c = b, c, a + b\n    return c\n```", "response_code": "\ndef func(n):\n    if n == 0:\n        return 3\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    a, b, c = 3, 0, 2\n    for _ in range(3, n+1):\n        a, b, c = b, c, a + b\n    return c\n"}
{"task_id": 237, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str, l):\n    '''\n    Create a function that retrieves strings of a specific size from a provided list of strings.\n    '''\n"}], "response": "```python\ndef func(str_list, size):\n    return [s for s in str_list if len(s) == size]\n```", "response_code": "\ndef func(str_list, size):\n    return [s for s in str_list if len(s) == size]\n"}
{"task_id": 238, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text1):\n    '''\n    Create a function that utilizes regex to eliminate all spaces from the provided string.\n    '''\n"}], "response": "import re\n\ndef func(text1):\n    return re.sub(r'\\s+', '', text1)", "response_code": "import re\n\ndef func(text1):\n    return re.sub(r'\\s+', '', text1)"}
{"task_id": 239, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(actual_cost,sale_amount): \n    '''\n    Create a function that returns the loss amount if the specified amount incurs a loss, otherwise return none.\n    '''\n"}], "response": "def calculate_loss(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return None", "response_code": "def calculate_loss(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return None"}
{"task_id": 240, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math \ndef func(n) : \n    '''\n    Create a Python function that calculates the total of even factors for a given number.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    total = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                total += i\n            if i != n // i and (n // i) % 2 == 0:\n                total += n // i\n    return total", "response_code": "import math\n\ndef func(n):\n    total = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                total += i\n            if i != n // i and (n // i) % 2 == 0:\n                total += n // i\n    return total"}
{"task_id": 241, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that identifies a word with the letter 'z'.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    words_with_z = re.findall(pattern, text)\n    return words_with_z", "response_code": "import re\n\ndef func(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    words_with_z = re.findall(pattern, text)\n    return words_with_z"}
{"task_id": 242, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(monthnum2):\n    '''\n    Create a function that determines if the specified month has 31 days.\n    '''\n"}], "response": "```python\ndef func(monthnum2):\n    thirty_one_days = [1, 3, 5, 7, 8, 10, 12]\n    if monthnum2 in thirty_one_days:\n        return True\n    else:\n        return False\n```", "response_code": "\ndef func(monthnum2):\n    thirty_one_days = [1, 3, 5, 7, 8, 10, 12]\n    if monthnum2 in thirty_one_days:\n        return True\n    else:\n        return False\n"}
{"task_id": 243, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(stringlist):\n    '''\n    Create a function that reverses strings within a list of string values.\n    '''\n"}], "response": "```python\ndef func(stringlist):\n    return [string[::-1] for string in stringlist]\n```", "response_code": "\ndef func(stringlist):\n    return [string[::-1] for string in stringlist]\n"}
{"task_id": 244, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst): \n    '''\n    Create a Python function that identifies the sublist with the shortest length.\n    '''\n"}], "response": "```python\ndef func(lst): \n    return min(lst, key=len)\n```", "response_code": "\ndef func(lst): \n    return min(lst, key=len)\n"}
{"task_id": 245, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l,b):\n    '''\n    Create a function that calculates the area of a rectangle.\n    '''\n"}], "response": "```python\ndef func(l, b):\n    return l * b\n```", "response_code": "\ndef func(l, b):\n    return l * b\n"}
{"task_id": 246, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(str1):\n    '''\n    Create a function that utilizes regex to eliminate uppercase portions of a provided string.\n    '''\n"}], "response": "import re\n\ndef func(str1):\n    return re.sub(r'[A-Z]', '', str1)", "response_code": "import re\n\ndef func(str1):\n    return re.sub(r'[A-Z]', '', str1)"}
{"task_id": 247, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst): \n    '''\n    Create a Python function that retrieves the initial element from every sub-list.\n    '''\n"}], "response": "def get_initial_elements(lst):\n    return [sublist[0] for sublist in lst]", "response_code": "def get_initial_elements(lst):\n    return [sublist[0] for sublist in lst]"}
{"task_id": 248, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str):\n    '''\n    Create a Python function that calculates the number of uppercase letters in a provided string.\n    '''\n"}], "response": "```python\ndef count_uppercase_letters(s):\n    return sum(1 for char in s if char.isupper())\n```", "response_code": "\ndef count_uppercase_letters(s):\n    return sum(1 for char in s if char.isupper())\n"}
{"task_id": 249, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function that generates all potential combinations of the items in a specified list.\n    '''\n"}], "response": "from itertools import permutations\n\ndef func(list1):\n    return list(permutations(list1))", "response_code": "from itertools import permutations\n\ndef func(list1):\n    return list(permutations(list1))"}
{"task_id": 250, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):\n    '''\n    Create a function that can identify the largest product subarray within a provided array.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(arr):\n    max_ending_here = min_ending_here = max_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        temp = max_ending_here\n        max_ending_here = max(arr[i], arr[i] * max_ending_here, arr[i] * min_ending_here)\n        min_ending_here = min(arr[i], arr[i] * temp, arr[i] * min_ending_here)\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n```", "response_code": "\nimport numpy as np\n\ndef func(arr):\n    max_ending_here = min_ending_here = max_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        temp = max_ending_here\n        max_ending_here = max(arr[i], arr[i] * max_ending_here, arr[i] * min_ending_here)\n        min_ending_here = min(arr[i], arr[i] * temp, arr[i] * min_ending_here)\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n"}
{"task_id": 251, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(dict, n):\n    '''\n    Create a function that verifies if all values in a dictionary are identical.\n    '''\n"}], "response": "def func(dict, n):\n    values = list(dict.values())\n    return all(value == values[0] for value in values)", "response_code": "def func(dict, n):\n    values = list(dict.values())\n    return all(value == values[0] for value in values)"}
{"task_id": 252, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(dict1):\n    '''\n    Create a function that removes any empty items from a provided dictionary.\n    '''\n"}], "response": "```python\ndef func(dict1):\n    return {key: value for key, value in dict1.items() if value}\n```", "response_code": "\ndef func(dict1):\n    return {key: value for key, value in dict1.items() if value}\n"}
{"task_id": 253, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):   \n    '''\n    Create a function that calculates the highest possible product by multiplying numbers from a subset of the array that is in ascending order.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(arr):\n    arr.sort()\n    n = len(arr)\n    return max(arr[-1]*arr[-2]*arr[-3], arr[0]*arr[1]*arr[-1])\n```", "response_code": "\nimport numpy as np\n\ndef func(arr):\n    arr.sort()\n    n = len(arr)\n    return max(arr[-1]*arr[-2]*arr[-3], arr[0]*arr[1]*arr[-1])\n"}
{"task_id": 254, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    Create a function that calculates the sum of each pair of elements in the provided tuples.\n    '''\n"}], "response": "def func(test_tup):\n    return [sum(pair) for pair in test_tup]", "response_code": "def func(test_tup):\n    return [sum(pair) for pair in test_tup]"}
{"task_id": 255, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr, n): \n    '''\n    Create a Python function that calculates the remainder of the product of an array divided by n.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(arr, n): \n    return np.prod(arr) % n\n```", "response_code": "\nimport numpy as np\n\ndef func(arr, n): \n    return np.prod(arr) % n\n"}
{"task_id": 256, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l): \n    '''\n    Create a Python function that determines if a list contains consecutive numbers.\n    '''\n"}], "response": "```python\ndef func(l): \n    return sorted(l) == list(range(min(l), max(l)+1))\n```", "response_code": "\ndef func(l): \n    return sorted(l) == list(range(min(l), max(l)+1))\n"}
{"task_id": 257, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list1, test_list2):\n    '''\n    Create a function that can identify the common elements in a list of tuples, regardless of their order.\n    '''\n"}], "response": "from collections import Counter\n\ndef func(test_list1, test_list2):\n    return [item for item, count in Counter(test_list1).items() if count > 1 and item in test_list2]", "response_code": "from collections import Counter\n\ndef func(test_list1, test_list2):\n    return [item for item, count in Counter(test_list1).items() if count > 1 and item in test_list2]"}
{"task_id": 258, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1,ch,newch):\n    '''\n    Create a function that can substitute characters within a given string.\n    '''\n"}], "response": "def func(str1, ch, newch):\n    return str1.replace(ch, newch)", "response_code": "def func(str1, ch, newch):\n    return str1.replace(ch, newch)"}
{"task_id": 259, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import Counter\ndef func(dict1):\n    '''\n    Create a function that organizes a counter based on its values.\n    '''\n"}], "response": "```python\nfrom collections import Counter\n\ndef func(dict1):\n    sorted_dict = dict(Counter(dict1).most_common())\n    return sorted_dict\n```", "response_code": "\nfrom collections import Counter\n\ndef func(dict1):\n    sorted_dict = dict(Counter(dict1).most_common())\n    return sorted_dict\n"}
{"task_id": 260, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a Python function that calculates the sum of the highest and lowest values in a provided array.\n    '''\n"}], "response": "def func(nums):\n    return sum([min(nums), max(nums)])", "response_code": "def func(nums):\n    return sum([min(nums), max(nums)])"}
{"task_id": 261, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(string):\n    '''\n    Create a Python function that changes the provided string to lowercase.\n    '''\n"}], "response": "def func(string):\n    return string.lower()", "response_code": "def func(string):\n    return string.lower()"}
{"task_id": 262, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(str1):\n    '''\n    Create a function that eliminates lowercase sections from a provided string.\n    '''\n"}], "response": "import re\n\ndef func(str1):\n    return re.sub(r'[a-z]+', '', str1)", "response_code": "import re\n\ndef func(str1):\n    return re.sub(r'[a-z]+', '', str1)"}
{"task_id": 263, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n) :  \n    '''\n    Create a Python function that identifies the initial digit of a provided number.\n    '''\n"}], "response": "```python\ndef func(n):\n    return int(str(n)[0])\n```", "response_code": "\ndef func(n):\n    return int(str(n)[0])\n"}
{"task_id": 264, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list): \n    '''\n    Create a Python function that identifies odd numbers within a list containing both odd and even numbers.\n    '''\n"}], "response": "```python\ndef func(lst):\n    return [num for num in lst if num % 2 != 0]\n```", "response_code": "\ndef func(lst):\n    return [num for num in lst if num % 2 != 0]\n"}
{"task_id": 265, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n) :  \n    '''\n    Create a Python function that calculates the difference between the sum of the cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n"}], "response": "def func(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers", "response_code": "def func(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers"}
{"task_id": 266, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(A,N) : \n    '''\n    Create a Python function that calculates the number of pairs with an odd XOR.\n    '''\n"}], "response": "```python\ndef func(A, N):\n    count_odd_xor = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count_odd_xor += 1\n    return count_odd_xor\n```", "response_code": "\ndef func(A, N):\n    count_odd_xor = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count_odd_xor += 1\n    return count_odd_xor\n"}
{"task_id": 267, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(string):\n    '''\n    Create a function that switches the case of characters in a string.\n    '''\n"}], "response": "```python\ndef func(string):\n    return string.swapcase()\n```", "response_code": "\ndef func(string):\n    return string.swapcase()\n"}
{"task_id": 268, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n1, n2):\n    '''\n    Create a Python function that calculates the digit distance between two integers.\n    '''\n"}], "response": "```python\ndef func(n1, n2):\n    return sum([int(digit) for digit in str(abs(n1 - n2))])\n```", "response_code": "\ndef func(n1, n2):\n    return sum([int(digit) for digit in str(abs(n1 - n2))])\n"}
{"task_id": 269, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a, size):\n    '''\n    Create a function that can determine the maximum sum of a continuous subarray within a provided array.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(a, size):\n    return np.max(np.convolve(a, np.ones(size), mode='valid'))\n```", "response_code": "\nimport numpy as np\n\ndef func(a, size):\n    return np.max(np.convolve(a, np.ones(size), mode='valid'))\n"}
{"task_id": 270, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function that determines the combined elements of the provided tuples.\n    '''\n"}], "response": "```python\ndef func(test_tup1, test_tup2):\n    return test_tup1 + test_tup2\n```", "response_code": "\ndef func(test_tup1, test_tup2):\n    return test_tup1 + test_tup2\n"}
{"task_id": 271, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst):  \n    '''\n    Create a Python function that determines the longest length of a sublist.\n    '''\n"}], "response": "```python\ndef func(lst):\n    return max(len(sublist) for sublist in lst)\n```", "response_code": "\ndef func(lst):\n    return max(len(sublist) for sublist in lst)\n"}
{"task_id": 272, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that retrieves values enclosed in quotation marks from a string.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    return re.findall(r'\"(.*?)\"', text)", "response_code": "import re\n\ndef func(text):\n    return re.findall(r'\"(.*?)\"', text)"}
{"task_id": 273, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr,n): \n    '''\n    Create a Python function that counts the number of pairs of unequal elements in a given array.\n    '''\n"}], "response": "```python\ndef func(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n```", "response_code": "\ndef func(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n"}
{"task_id": 274, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(word): \n    '''\n    Create a Python function that separates a string into individual characters.\n    '''\n"}], "response": "```python\ndef func(word): \n    return list(word)\n```", "response_code": "\ndef func(word): \n    return list(word)\n"}
{"task_id": 275, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    Create a function that calculates the total of a non-negative whole number.\n    '''\n"}], "response": "```python\ndef func(n):\n    total = 0\n    for digit in str(n):\n        total += int(digit)\n    return total\n```", "response_code": "\ndef func(n):\n    total = 0\n    for digit in str(n):\n        total += int(digit)\n    return total\n"}
{"task_id": 276, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function that determines if a given list is in sorted order or not.\n    '''\n"}], "response": "def func(list1):\n    return all(list1[i] <= list1[i + 1] for i in range(len(list1) - 1))", "response_code": "def func(list1):\n    return all(list1[i] <= list1[i + 1] for i in range(len(list1) - 1))"}
{"task_id": 277, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(length):\n    '''\n    Create a function that generates a list containing empty dictionaries.\n    '''\n"}], "response": "def func(length):\n    return [{} for _ in range(length)]", "response_code": "def func(length):\n    return [{} for _ in range(length)]"}
{"task_id": 278, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function that sorts the strings within each sublist of a given list of lists.\n    '''\n"}], "response": "```python\ndef func(list1):\n    for sublist in list1:\n        sublist.sort()\n    return list1\n```", "response_code": "\ndef func(list1):\n    for sublist in list1:\n        sublist.sort()\n    return list1\n"}
{"task_id": 279, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a Python function that eliminates two duplicate numbers from a set of lists.\n    '''\n"}], "response": "```python\ndef func(nums):\n    unique_nums = set(nums)\n    for num in unique_nums:\n        if nums.count(num) > 1:\n            nums.remove(num)\n    return nums\n```", "response_code": "\ndef func(nums):\n    unique_nums = set(nums)\n    for num in unique_nums:\n        if nums.count(num) > 1:\n            nums.remove(num)\n    return nums\n"}
{"task_id": 280, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list_data):\n    '''\n    Create a Python function that finds the product of the distinct numbers in a provided list.\n    '''\n"}], "response": "```python\ndef func(list_data):\n    distinct_numbers = set(list_data)\n    product = 1\n    for num in distinct_numbers:\n        product *= num\n    return product\n```", "response_code": "\ndef func(list_data):\n    distinct_numbers = set(list_data)\n    product = 1\n    for num in distinct_numbers:\n        product *= num\n    return product\n"}
{"task_id": 281, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(r,h):\n    '''\n    Create a function that calculates the surface area of a cylinder.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(r, h):\n    return 2 * math.pi * r * (r + h)\n```", "response_code": "\nimport math\n\ndef func(r, h):\n    return 2 * math.pi * r * (r + h)\n"}
{"task_id": 282, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(A,B): \n    '''\n    Create a Python function that determines if an array is a subarray of another array.\n    '''\n"}], "response": "from typing import List\n\ndef is_subarray(A: List[int], B: List[int]) -> bool:\n    return all(elem in B for elem in A)", "response_code": "from typing import List\n\ndef is_subarray(A: List[int], B: List[int]) -> bool:\n    return all(elem in B for elem in A)"}
{"task_id": 283, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a Python function that determines the last digit of the factorial of a specified number.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    factorial = math.factorial(n)\n    last_digit = factorial % 10\n    return last_digit", "response_code": "import math\n\ndef func(n):\n    factorial = math.factorial(n)\n    last_digit = factorial % 10\n    return last_digit"}
{"task_id": 284, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1,list2,list3):\n    '''\n    Create a function that interleaves lists of equal length.\n    '''\n"}], "response": "```python\ndef func(list1, list2, list3):\n    interleaved_list = [val for pair in zip(list1, list2, list3) for val in pair]\n    return interleaved_list\n```", "response_code": "\ndef func(list1, list2, list3):\n    interleaved_list = [val for pair in zip(list1, list2, list3) for val in pair]\n    return interleaved_list\n"}
{"task_id": 285, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function that identifies the unique elements in two given tuples.\n    '''\n"}], "response": "```python\ndef func(test_tup1, test_tup2):\n    unique_elements = set(test_tup1).symmetric_difference(set(test_tup2))\n    return unique_elements\n```", "response_code": "\ndef func(test_tup1, test_tup2):\n    unique_elements = set(test_tup1).symmetric_difference(set(test_tup2))\n    return unique_elements\n"}
{"task_id": 286, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tuple, even_fnc): \n    '''\n    Create a function that retrieves the even elements from a mixed tuple that contains nested tuples.\n    '''\n"}], "response": "```python\ndef func(test_tuple, even_fnc):\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.extend(func(item, even_fnc))\n        elif even_fnc(item):\n            result.append(item)\n    return result\n```", "response_code": "\ndef func(test_tuple, even_fnc):\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.extend(func(item, even_fnc))\n        elif even_fnc(item):\n            result.append(item)\n    return result\n"}
{"task_id": 287, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(b,s): \n    '''\n    Create a Python function that calculates the surface area of a square pyramid.\n    '''\n"}], "response": "```python\ndef func(b, s):\n    return b**2 + 2*b*(s**2 + b**2)**0.5\n```", "response_code": "\ndef func(b, s):\n    return b**2 + 2*b*(s**2 + b**2)**0.5\n"}
{"task_id": 288, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(dict1):\n    '''\n    Create a function that determines whether a dictionary is empty or not.\n    '''\n"}], "response": "```python\ndef func(dict1):\n    if not dict1:\n        return True\n    else:\n        return False\n```", "response_code": "\ndef func(dict1):\n    if not dict1:\n        return True\n    else:\n        return False\n"}
{"task_id": 289, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(num):\n    '''\n    Create a function that calculates the nth Catalan number.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(num):\n    return math.factorial(2*num) // (math.factorial(num+1) * math.factorial(num))\n```", "response_code": "\nimport math\n\ndef func(num):\n    return math.factorial(2*num) // (math.factorial(num+1) * math.factorial(num))\n"}
{"task_id": 290, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that uses regex to identify all adverbs and their locations within a provided sentence.\n    '''\n"}], "response": "import re\n\ndef find_adverbs(text):\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    adverb_positions = [(m.group(0), m.start(), m.end()) for m in re.finditer(r'\\b\\w+ly\\b', text)]\n    return adverb_positions", "response_code": "import re\n\ndef find_adverbs(text):\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    adverb_positions = [(m.group(0), m.start(), m.end()) for m in re.finditer(r'\\b\\w+ly\\b', text)]\n    return adverb_positions"}
{"task_id": 291, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq\ndef func(items,n):\n    '''\n    Create a function that uses the heap queue algorithm to identify the n most costly items in a provided dataset.\n    '''\n"}], "response": "import heapq\n\ndef func(items, n):\n    return heapq.nlargest(n, items)", "response_code": "import heapq\n\ndef func(items, n):\n    return heapq.nlargest(n, items)"}
{"task_id": 292, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l, n):\n    '''\n    Create a Python function that divides the array and appends the initial portion to the end.\n    '''\n"}], "response": "```python\ndef func(l, n):\n    return l[n:] + l[:n]\n```", "response_code": "\ndef func(l, n):\n    return l[n:] + l[:n]\n"}
{"task_id": 293, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(listx):\n    '''\n    Create a function that transforms a list into a tuple.\n    '''\n"}], "response": "```python\ndef func(listx):\n    return tuple(listx)\n```", "response_code": "\ndef func(listx):\n    return tuple(listx)\n"}
{"task_id": 294, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a Python function that calculates the difference between the largest and smallest values in a provided array.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return max(nums) - min(nums)\n```", "response_code": "\ndef func(nums):\n    return max(nums) - min(nums)\n"}
{"task_id": 295, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a, b):\n    '''\n    Create a function that identifies all perfect squares within a specified range of numbers.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(a, b):\n    '''\n    Create a function that identifies all perfect squares within a specified range of numbers.\n    '''\n    perfect_squares = [x for x in range(a, b+1) if math.isqrt(x)**2 == x]\n    return perfect_squares\n```", "response_code": "\nimport math\n\ndef func(a, b):\n    '''\n    Create a function that identifies all perfect squares within a specified range of numbers.\n    '''\n    perfect_squares = [x for x in range(a, b+1) if math.isqrt(x)**2 == x]\n    return perfect_squares\n"}
{"task_id": 296, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import cmath\ndef func(x,y):\n    '''\n    Create a function that transforms polar coordinates into rectangular coordinates.\n    '''\n"}], "response": "import cmath\n\ndef func(x, y):\n    '''\n    Create a function that transforms polar coordinates into rectangular coordinates.\n    '''\n    z = cmath.rect(x, y)\n    return z", "response_code": "import cmath\n\ndef func(x, y):\n    '''\n    Create a function that transforms polar coordinates into rectangular coordinates.\n    '''\n    z = cmath.rect(x, y)\n    return z"}
{"task_id": 297, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(newList): \n    '''\n    Create a Python function that swaps the first and last elements of a list.\n    '''\n"}], "response": "def swap_first_last(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList", "response_code": "def swap_first_last(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"}
{"task_id": 298, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n,k): \n    '''\n    Create a Python function that calculates the sum of the products of binomial coefficients.\n    '''\n"}], "response": "from math import comb\n\ndef func(n, k):\n    total_sum = 0\n    for i in range(k+1):\n        total_sum += comb(n, i) * comb(n-i, k-i)\n    return total_sum", "response_code": "from math import comb\n\ndef func(n, k):\n    total_sum = 0\n    for i in range(k+1):\n        total_sum += comb(n, i) * comb(n-i, k-i)\n    return total_sum"}
{"task_id": 299, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(ip):\n    '''\n    Create a function that eliminates any leading zeros from an IP address.\n    '''\n"}], "response": "import re\n\ndef func(ip):\n    return re.sub(r'\\b0+(\\d)', r'\\1', ip)", "response_code": "import re\n\ndef func(ip):\n    return re.sub(r'\\b0+(\\d)', r'\\1', ip)"}
{"task_id": 300, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function that calculates the difference between the first even and odd numbers in a provided list.\n    '''\n"}], "response": "```python\ndef func(list1):\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2 != 0 and odd_num is None:\n            odd_num = num\n        if even_num is not None and odd_num is not None:\n            return abs(even_num - odd_num)\n    return None\n```", "response_code": "\ndef func(list1):\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2 != 0 and odd_num is None:\n            odd_num = num\n        if even_num is not None and odd_num is not None:\n            return abs(even_num - odd_num)\n    return None\n"}
{"task_id": 301, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1,str2) : \n    '''\n    Create a Python function that calculates the minimum number of swaps needed to transform one binary string into another.\n    '''\n"}], "response": "```python\ndef min_swaps(str1, str2):\n    return sum([1 for i in range(len(str1)) if str1[i] != str2[i]]) // 2\n```", "response_code": "\ndef min_swaps(str1, str2):\n    return sum([1 for i in range(len(str1)) if str1[i] != str2[i]]) // 2\n"}
{"task_id": 302, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import sys \ndef func(tuple_list):\n    '''\n    Create a function that determines the length of the provided tuple.\n    '''\n"}], "response": "import sys\n\ndef func(tuple_list):\n    return len(tuple_list)", "response_code": "import sys\n\ndef func(tuple_list):\n    return len(tuple_list)"}
{"task_id": 303, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr1, arr2, k):\n    '''\n    Create a function that determines the kth element in two sorted arrays.\n    '''\n"}], "response": "```python\ndef func(arr1, arr2, k):\n    merged_arr = sorted(arr1 + arr2)\n    return merged_arr[k-1]\n```", "response_code": "\ndef func(arr1, arr2, k):\n    merged_arr = sorted(arr1 + arr2)\n    return merged_arr[k-1]\n"}
{"task_id": 304, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(number):\n    '''\n    Create a function that determines if a given number is an Armstrong number.\n    '''\n"}], "response": "def is_armstrong_number(number):\n    num_str = str(number)\n    num_digits = len(num_str)\n    \n    sum = 0\n    for digit in num_str:\n        sum += int(digit) ** num_digits\n    \n    return sum == number", "response_code": "def is_armstrong_number(number):\n    num_str = str(number)\n    num_digits = len(num_str)\n    \n    sum = 0\n    for digit in num_str:\n        sum += int(digit) ** num_digits\n    \n    return sum == number"}
{"task_id": 305, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(number):\n    '''\n    Create a function that calculates the sum and average of the first n natural numbers.\n    '''\n"}], "response": "```python\ndef func(number):\n    total_sum = number * (number + 1) // 2\n    average = total_sum / number\n    return total_sum, average\n```", "response_code": "\ndef func(number):\n    total_sum = number * (number + 1) // 2\n    average = total_sum / number\n    return total_sum, average\n"}
{"task_id": 306, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n) : \n    '''\n    Create a Python function that uses a bitwise operator to determine if a given number is even.\n    '''\n"}], "response": "def func(n):\n    return n & 1 == 0", "response_code": "def func(n):\n    return n & 1 == 0"}
{"task_id": 307, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1):\n    '''\n    Create a Python function that identifies the initial repeated character in a provided string.\n    '''\n"}], "response": "```python\ndef func(str1):\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n```", "response_code": "\ndef func(str1):\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n"}
{"task_id": 308, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    Create a function that retrieves a lucid number that is less than or equal to n.\n    '''\n"}], "response": "```python\ndef func(n):\n    lucid_number = 1\n    while lucid_number * 2 <= n:\n        lucid_number *= 2\n    return lucid_number\n```", "response_code": "\ndef func(n):\n    lucid_number = 1\n    while lucid_number * 2 <= n:\n        lucid_number *= 2\n    return lucid_number\n"}
{"task_id": 309, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s):\n    '''\n    Create a function that reverses the order of words in a provided string.\n    '''\n"}], "response": "```python\ndef func(s):\n    return ' '.join(s.split()[::-1])\n```", "response_code": "\ndef func(s):\n    return ' '.join(s.split()[::-1])\n"}
{"task_id": 310, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(num):\n    '''\n    Create a function that determines whether the provided integer is a prime number.\n    '''\n"}], "response": "```python\nimport math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n```", "response_code": "\nimport math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n"}
{"task_id": 311, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(degree):\n    '''\n    Create a function that converts degrees to radians.\n    '''\n"}], "response": "import math\n\ndef func(degree):\n    '''\n    Create a function that converts degrees to radians.\n    '''\n    return math.radians(degree)", "response_code": "import math\n\ndef func(degree):\n    '''\n    Create a function that converts degrees to radians.\n    '''\n    return math.radians(degree)"}
{"task_id": 312, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\n\ndef func(text, pattern):\n    '''\n    Create a function that uses regex to search for a specific string within another string and determine the location of the pattern within the original string.\n    '''\n"}], "response": "import re\n\ndef func(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.start()\n    else:\n        return -1", "response_code": "import re\n\ndef func(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.start()\n    else:\n        return -1"}
{"task_id": 313, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a Python function that calculates the nth Bell number.\n    '''\n"}], "response": "from math import factorial\n\ndef bell_number(n):\n    bell = [0] * (n+1)\n    bell[0] = 1\n    for i in range(1, n+1):\n        bell[i] = 0\n        for j in range(i):\n            bell[i] += bell[j] * factorial(i-1) // (factorial(j) * factorial(i-1-j))\n    return bell[n]", "response_code": "from math import factorial\n\ndef bell_number(n):\n    bell = [0] * (n+1)\n    bell[0] = 1\n    for i in range(1, n+1):\n        bell[i] = 0\n        for j in range(i):\n            bell[i] += bell[j] * factorial(i-1) // (factorial(j) * factorial(i-1-j))\n    return bell[n]"}
{"task_id": 314, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1, L):\n    '''\n    Create a Python function that deletes the element at index k from a specified list.\n    '''\n"}], "response": "def delete_element_at_index(list1, k):\n    del list1[k]\n    return list1", "response_code": "def delete_element_at_index(list1, k):\n    del list1[k]\n    return list1"}
{"task_id": 315, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list, N):\n    '''\n    Create a function that can determine the highest value in the nth column of a provided list of tuples.\n    '''\n"}], "response": "def func(test_list, N):\n    return max(row[N] for row in test_list)", "response_code": "def func(test_list, N):\n    return max(row[N] for row in test_list)"}
{"task_id": 316, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst):  \n    '''\n    Create a Python function that combines the first and last elements of each sublist in a list.\n    '''\n"}], "response": "```python\ndef combine_first_last(lst):\n    return [sublist[0] + sublist[-1] for sublist in lst]\n```", "response_code": "\ndef combine_first_last(lst):\n    return [sublist[0] + sublist[-1] for sublist in lst]\n"}
{"task_id": 317, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Create a function that calculates the total sum of all values in a given list of tuples.\n    '''\n"}], "response": "def func(test_list):\n    total_sum = sum(sum(tup) for tup in test_list)\n    return total_sum", "response_code": "def func(test_list):\n    total_sum = sum(sum(tup) for tup in test_list)\n    return total_sum"}
{"task_id": 318, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a function that calculates the average value of the numbers within a tuple containing multiple tuples.\n    '''\n"}], "response": "```python\ndef func(nums):\n    total_sum = 0\n    total_count = 0\n    for tup in nums:\n        total_sum += sum(tup)\n        total_count += len(tup)\n    return total_sum / total_count\n```", "response_code": "\ndef func(nums):\n    total_sum = 0\n    total_count = 0\n    for tup in nums:\n        total_sum += sum(tup)\n        total_count += len(tup)\n    return total_sum / total_count\n"}
{"task_id": 319, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function that calculates the modulo of elements in two tuples.\n    '''\n"}], "response": "def func(test_tup1, test_tup2):\n    return tuple(x % y for x, y in zip(test_tup1, test_tup2))", "response_code": "def func(test_tup1, test_tup2):\n    return tuple(x % y for x, y in zip(test_tup1, test_tup2))"}
{"task_id": 320, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(steps, d): \n    '''\n    Create a function that determines the number of jumps needed to reach a point (d, 0) from the origin in a 2D plane, given a specific jump length.\n    '''\n"}], "response": "```python\ndef func(steps, d): \n    return (d + steps - 1) // steps\n```", "response_code": "\ndef func(steps, d): \n    return (d + steps - 1) // steps\n"}
{"task_id": 321, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums1,nums2):\n    '''\n    Create a function that uses map and lambda to divide two lists.\n    '''\n"}], "response": "from typing import List\n\ndef func(nums1: List[int], nums2: List[int]) -> List[float]:\n    return list(map(lambda x, y: x / y, nums1, nums2))", "response_code": "from typing import List\n\ndef func(nums1: List[int], nums2: List[int]) -> List[float]:\n    return list(map(lambda x, y: x / y, nums1, nums2))"}
{"task_id": 322, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_str):\n    '''\n    Create a function that transfers all the numbers from the input to the specified string.\n    '''\n"}], "response": "```python\ndef func(test_str):\n    return ''.join([char for char in test_str if char.isdigit()])\n```", "response_code": "\ndef func(test_str):\n    return ''.join([char for char in test_str if char.isdigit()])\n"}
{"task_id": 323, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a):\n    '''\n    Create a function that identifies the largest subset in which every pair of elements is divisible.\n    '''\n"}], "response": "```python\nfrom itertools import combinations\n\ndef func(a):\n    def is_divisible(pair):\n        return pair[0] % pair[1] == 0 or pair[1] % pair[0] == 0\n\n    max_subset = []\n    for i in range(1, len(a) + 1):\n        for subset in combinations(a, i):\n            if all(is_divisible(pair) for pair in combinations(subset, 2)):\n                max_subset = subset\n\n    return max_subset\n```", "response_code": "\nfrom itertools import combinations\n\ndef func(a):\n    def is_divisible(pair):\n        return pair[0] % pair[1] == 0 or pair[1] % pair[0] == 0\n\n    max_subset = []\n    for i in range(1, len(a) + 1):\n        for subset in combinations(a, i):\n            if all(is_divisible(pair) for pair in combinations(subset, 2)):\n                max_subset = subset\n\n    return max_subset\n"}
{"task_id": 324, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr1, arr2, n):\n    '''\n    Create a function that calculates the median of two sorted arrays that are the same size.\n    '''\n"}], "response": "from statistics import median\n\ndef func(arr1, arr2, n):\n    combined_arr = arr1 + arr2\n    combined_arr.sort()\n    return median(combined_arr)", "response_code": "from statistics import median\n\ndef func(arr1, arr2, n):\n    combined_arr = arr1 + arr2\n    combined_arr.sort()\n    return median(combined_arr)"}
{"task_id": 325, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums,n):\n    '''\n    Create a lambda function that calculates the n-th power of each element in a list.\n    '''\n"}], "response": "```python\ndef func(nums, n):\n    power_func = lambda x: x**n\n    return list(map(power_func, nums))\n```", "response_code": "\ndef func(nums, n):\n    power_func = lambda x: x**n\n    return list(map(power_func, nums))\n"}
{"task_id": 326, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(string):\n    '''\n    Create a Python function that changes the provided string to uppercase.\n    '''\n"}], "response": "```python\ndef func(string):\n    return string.upper()\n```", "response_code": "\ndef func(string):\n    return string.upper()\n"}
{"task_id": 327, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(newList): \n    '''\n    Create a Python function that swaps the first and last elements of a provided list.\n    '''\n"}], "response": "```python\ndef func(newList): \n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n```", "response_code": "\ndef func(newList): \n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"}
{"task_id": 328, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(r) :  \n    '''\n    Create a Python function that determines the largest triangle that can fit inside a semicircle.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(r):\n    '''\n    Determine the largest triangle that can fit inside a semicircle.\n    \n    Parameters:\n    r (float): Radius of the semicircle\n    \n    Returns:\n    float: Area of the largest triangle that can fit inside the semicircle\n    '''\n    return (r**2) / 2\n```", "response_code": "\nimport math\n\ndef func(r):\n    '''\n    Determine the largest triangle that can fit inside a semicircle.\n    \n    Parameters:\n    r (float): Radius of the semicircle\n    \n    Returns:\n    float: Area of the largest triangle that can fit inside the semicircle\n    '''\n    return (r**2) / 2\n"}
{"task_id": 329, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(array,start=0,end=None):\n    '''\n    Create a Python function that identifies the smallest missing number in a provided array.\n    '''\n"}], "response": "```python\ndef func(array, start=0, end=None):\n    if end is None:\n        end = max(array)\n    for i in range(start, end):\n        if i not in array:\n            return i\n    return end\n```", "response_code": "\ndef func(array, start=0, end=None):\n    if end is None:\n        end = max(array)\n    for i in range(start, end):\n        if i not in array:\n            return i\n    return end\n"}
{"task_id": 330, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(string):\n    '''\n    Create a function that replaces all spaces in the provided string with the characters '%20'.\n    '''\n"}], "response": "```python\ndef func(string):\n    return string.replace(' ', '%20')\n```", "response_code": "\ndef func(string):\n    return string.replace(' ', '%20')\n"}
{"task_id": 331, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list): \n    '''\n    Create a Python function that identifies even numbers within a list containing a mix of numbers.\n    '''\n"}], "response": "```python\ndef func(lst):\n    return [num for num in lst if num % 2 == 0]\n```", "response_code": "\ndef func(lst):\n    return [num for num in lst if num % 2 == 0]\n"}
{"task_id": 332, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(ele, sub = []): \n    '''\n    Create a function that retrieves all neighboring coordinates of a specified coordinate tuple.\n    '''\n"}], "response": "```python\ndef func(ele, sub = []): \n    '''\n    Create a function that retrieves all neighboring coordinates of a specified coordinate tuple.\n    '''\n    x, y = ele\n    neighbors = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    return neighbors\n```", "response_code": "\ndef func(ele, sub = []): \n    '''\n    Create a function that retrieves all neighboring coordinates of a specified coordinate tuple.\n    '''\n    x, y = ele\n    neighbors = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    return neighbors\n"}
{"task_id": 333, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(text):\n    '''\n    Create a function that uses regex to swap whitespaces with underscores and vice versa in a provided string.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    return re.sub(r'(\\s+)', '_', re.sub(r'(_+)', ' ', text))", "response_code": "import re\n\ndef func(text):\n    return re.sub(r'(\\s+)', '_', re.sub(r'(_+)', ' ', text))"}
{"task_id": 334, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(num_list):\n    '''\n    Create a Python function that shifts all zeros to the end of a provided list.\n    '''\n"}], "response": "```python\ndef func(num_list):\n    num_list.sort(key=lambda x: x == 0)\n```", "response_code": "\ndef func(num_list):\n    num_list.sort(key=lambda x: x == 0)\n"}
{"task_id": 335, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr,n) : \n    '''\n    Create a Python function that calculates the sum of the XOR of all pairs of numbers in the provided array.\n    '''\n"}], "response": "```python\ndef func(arr,n):\n    total = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total += arr[i] ^ arr[j]\n    return total\n```", "response_code": "\ndef func(arr,n):\n    total = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total += arr[i] ^ arr[j]\n    return total\n"}
{"task_id": 336, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq as hq\ndef func(iterable):\n    '''\n    Create a function that adds all values to a heap and then removes the smallest values individually.\n    '''\n"}], "response": "import heapq as hq\n\ndef func(iterable):\n    heap = list(iterable)\n    hq.heapify(heap)\n    \n    while heap:\n        print(hq.heappop(heap))", "response_code": "import heapq as hq\n\ndef func(iterable):\n    heap = list(iterable)\n    hq.heapify(heap)\n    \n    while heap:\n        print(hq.heappop(heap))"}
{"task_id": 337, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(actual_cost,sale_amount): \n    '''\n    Create a function that determines if the specified amount results in neither profit nor loss.\n    '''\n"}], "response": "def func(actual_cost, sale_amount):\n    if actual_cost == sale_amount:\n        return \"Neither profit nor loss\"\n    else:\n        return \"Profit or loss\"", "response_code": "def func(actual_cost, sale_amount):\n    if actual_cost == sale_amount:\n        return \"Neither profit nor loss\"\n    else:\n        return \"Profit or loss\""}
{"task_id": 338, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(v,t):\n    '''\n    Create a function that computes the wind chill index.\n    '''\n"}], "response": "import math\n\ndef func(v, t):\n    '''\n    Create a function that computes the wind chill index.\n    '''\n    if v < 4.8 or t > 10:\n        return None\n    else:\n        wci = 13.12 + 0.6215*t - 11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n        return wci", "response_code": "import math\n\ndef func(v, t):\n    '''\n    Create a function that computes the wind chill index.\n    '''\n    if v < 4.8 or t > 10:\n        return None\n    else:\n        wci = 13.12 + 0.6215*t - 11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n        return wci"}
{"task_id": 339, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(funces):\n    '''\n    Create a function that calculates the total length of names in a list after excluding those that begin with a lowercase letter.\n    '''\n"}], "response": "```python\ndef func(funces):\n    total_length = sum(len(name) for name in funces if not name[0].islower())\n    return total_length\n```", "response_code": "\ndef func(funces):\n    total_length = sum(len(name) for name in funces if not name[0].islower())\n    return total_length\n"}
{"task_id": 340, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(items):\n    '''\n    Create a function that eliminates the content within parentheses in a given string.\n    '''\n"}], "response": "import re\n\ndef func(items):\n    return re.sub(r'\\(.*?\\)', '', items)", "response_code": "import re\n\ndef func(items):\n    return re.sub(r'\\(.*?\\)', '', items)"}
{"task_id": 341, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function that calculates the nonagonal number at position n.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n * (7*n - 5) // 2\n```", "response_code": "\ndef func(n):\n    return n * (7*n - 5) // 2\n"}
{"task_id": 342, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that identifies a word with the letter 'z' in the middle, not at the beginning or end.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    result = re.findall(pattern, text)\n    return result", "response_code": "import re\n\ndef func(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    result = re.findall(pattern, text)\n    return result"}
{"task_id": 343, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(input, k): \n    '''\n    Create a Python function that reverses an array up to a specified position.\n    '''\n"}], "response": "def func(input, k): \n    return input[:k][::-1] + input[k:]", "response_code": "def func(input, k): \n    return input[:k][::-1] + input[k:]"}
{"task_id": 344, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup, test_dict):\n    '''\n    Create a function that adds a dictionary to a tuple.\n    '''\n"}], "response": "def func(test_tup, test_dict):\n    test_tup += (test_dict,)\n    return test_tup", "response_code": "def func(test_tup, test_dict):\n    test_tup += (test_dict,)\n    return test_tup"}
{"task_id": 345, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(cost):\n    '''\n    Create a function that determines the path with the highest average among all paths in a square matrix of size n*n.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(cost):\n    n = len(cost)\n    dp = np.zeros((n, n))\n    \n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    return dp[n-1][n-1] / (2*n-1)\n```", "response_code": "\nimport numpy as np\n\ndef func(cost):\n    n = len(cost)\n    dp = np.zeros((n, n))\n    \n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    return dp[n-1][n-1] / (2*n-1)\n"}
{"task_id": 346, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(students,h,w):\n    '''\n    Create a function that filters the height and width values of students stored in a dictionary.\n    '''\n"}], "response": "```python\ndef func(students, h, w):\n    filtered_students = {k: v for k, v in students.items() if v['height'] > h and v['width'] > w}\n    return filtered_students\n```", "response_code": "\ndef func(students, h, w):\n    filtered_students = {k: v for k, v in students.items() if v['height'] > h and v['width'] > w}\n    return filtered_students\n"}
{"task_id": 347, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from operator import eq\ndef func(nums1, nums2):\n    '''\n    Create a function that uses the map function to count identical pairs in two provided lists.\n    '''\n"}], "response": "from operator import eq\n\ndef func(nums1, nums2):\n    return sum(map(eq, nums1, nums2))", "response_code": "from operator import eq\n\ndef func(nums1, nums2):\n    return sum(map(eq, nums1, nums2))"}
{"task_id": 348, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(base, power):\n    '''\n    Create a function that adds up all the digits of the base raised to the given power.\n    '''\n"}], "response": "```python\ndef func(base, power):\n    return sum(int(digit) for digit in str(base ** power))\n```", "response_code": "\ndef func(base, power):\n    return sum(int(digit) for digit in str(base ** power))\n"}
{"task_id": 349, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text1):\n    '''\n    Create a function that uses regex to retrieve values enclosed in quotation marks from a provided string.\n    '''\n"}], "response": "import re\n\ndef func(text1):\n    return re.findall(r'\"(.*?)\"', text1)", "response_code": "import re\n\ndef func(text1):\n    return re.findall(r'\"(.*?)\"', text1)"}
{"task_id": 350, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    Create a function that multiplies the neighboring elements in the provided tuple.\n    '''\n"}], "response": "def func(test_tup):\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)", "response_code": "def func(test_tup):\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"}
{"task_id": 351, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst1,lst2):\n    '''\n    Create a function that adds up the elements in two lists.\n    '''\n"}], "response": "```python\ndef func(lst1, lst2):\n    return [x + y for x, y in zip(lst1, lst2)]\n```", "response_code": "\ndef func(lst1, lst2):\n    return [x + y for x, y in zip(lst1, lst2)]\n"}
{"task_id": 352, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from itertools import groupby\ndef func(nums):\n    '''\n    Create a function that eliminates consecutive duplicates from a provided list.\n    '''\n"}], "response": "from itertools import groupby\n\ndef func(nums):\n    return [key for key, group in groupby(nums)]", "response_code": "from itertools import groupby\n\ndef func(nums):\n    return [key for key, group in groupby(nums)]"}
{"task_id": 353, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(r,h):\n    '''\n    Create a function that calculates the lateral surface area of a cone.\n    '''\n"}], "response": "import math\n\ndef func(r, h):\n    lateral_surface_area = math.pi * r * math.sqrt(r**2 + h**2)\n    return lateral_surface_area", "response_code": "import math\n\ndef func(r, h):\n    lateral_surface_area = math.pi * r * math.sqrt(r**2 + h**2)\n    return lateral_surface_area"}
{"task_id": 354, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that replaces any instances of spaces, commas, or dots with a colon.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    return re.sub(r'[ ,.]', ':', text)", "response_code": "import re\n\ndef func(text):\n    return re.sub(r'[ ,.]', ':', text)"}
{"task_id": 355, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(A, x):\n    '''\n    Create a function that determines the position of the first instance of a specified number in an array that has been sorted.\n    '''\n"}], "response": "```python\ndef func(A, x):\n    return A.index(x)\n```", "response_code": "\ndef func(A, x):\n    return A.index(x)\n"}
{"task_id": 356, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):\n    '''\n    Create a Python function that calculates the sum of the products of all potential subarrays.\n    '''\n"}], "response": "```python\nfrom itertools import combinations\n\ndef func(arr):\n    total_sum = 0\n    for i in range(1, len(arr) + 1):\n        for subset in combinations(arr, i):\n            product = 1\n            for num in subset:\n                product *= num\n            total_sum += product\n    return total_sum\n```", "response_code": "\nfrom itertools import combinations\n\ndef func(arr):\n    total_sum = 0\n    for i in range(1, len(arr) + 1):\n        for subset in combinations(arr, i):\n            product = 1\n            for num in subset:\n                product *= num\n            total_sum += product\n    return total_sum\n"}
{"task_id": 357, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):  \n    '''\n    Create a Python function that switches the bits of a number, excluding the first and last bits.\n    '''\n"}], "response": "```python\ndef func(n):\n    mask = 0b01111110\n    return n ^ mask\n```", "response_code": "\ndef func(n):\n    mask = 0b01111110\n    return n ^ mask\n"}
{"task_id": 358, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import bisect\ndef func(a, x):\n    '''\n    Create a function that finds the index where a specified value should be inserted in a sorted list.\n    '''\n"}], "response": "import bisect\n\ndef func(a, x):\n    return bisect.bisect_left(a, x)", "response_code": "import bisect\n\ndef func(a, x):\n    return bisect.bisect_left(a, x)"}
{"task_id": 359, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef func(string): \n    '''\n    Create a function that uses regex to determine if a given string begins with a vowel.\n    '''\n"}], "response": "import re\n\ndef func(string): \n    '''\n    Create a function that uses regex to determine if a given string begins with a vowel.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return re.match(regex, string) is not None", "response_code": "import re\n\ndef func(string): \n    '''\n    Create a function that uses regex to determine if a given string begins with a vowel.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return re.match(regex, string) is not None"}
{"task_id": 360, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    Create a function that computes the geometric sum up to n-1.\n    '''\n"}], "response": "```python\ndef func(n):\n    if n == 0:\n        return 1\n    else:\n        return 1 + 1/2**n + func(n-1)\n```", "response_code": "\ndef func(n):\n    if n == 0:\n        return 1\n    else:\n        return 1 + 1/2**n + func(n-1)\n"}
{"task_id": 361, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math \ndef func(n): \n    '''\n    Create a Python function that determines the index of the smallest triangular number with n digits.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    index = 1\n    while True:\n        triangular_number = index * (index + 1) // 2\n        if int(math.log10(triangular_number)) + 1 >= n:\n            return index\n        index += 1", "response_code": "import math\n\ndef func(n):\n    index = 1\n    while True:\n        triangular_number = index * (index + 1) // 2\n        if int(math.log10(triangular_number)) + 1 >= n:\n            return index\n        index += 1"}
{"task_id": 362, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    Create a function that transforms the provided tuple into a dictionary with key-value pairs using consecutive elements.\n    '''\n"}], "response": "def func(test_tup):\n    return dict(zip(test_tup[::2], test_tup[1::2]))", "response_code": "def func(test_tup):\n    return dict(zip(test_tup[::2], test_tup[1::2]))"}
{"task_id": 363, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s) :\n    '''\n    Create a Python function that verifies if all characters are identical or not.\n    '''\n"}], "response": "def func(s):\n    return all(char == s[0] for char in s)", "response_code": "def func(s):\n    return all(char == s[0] for char in s)"}
{"task_id": 364, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(side):\n    '''\n    Create a function that calculates the area of a tetrahedron.\n    '''\n"}], "response": "import math\n\ndef func(side):\n    return (math.sqrt(3) * side ** 2) / 4 * side / 3", "response_code": "import math\n\ndef func(side):\n    return (math.sqrt(3) * side ** 2) / 4 * side / 3"}
{"task_id": 365, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list, m):\n    '''\n    Create a function that rotates a given list to the right by a specified number of items.\n    '''\n"}], "response": "```python\ndef func(lst, m):\n    m = m % len(lst)\n    return lst[-m:] + lst[:-m]\n```", "response_code": "\ndef func(lst, m):\n    m = m % len(lst)\n    return lst[-m:] + lst[:-m]\n"}
{"task_id": 366, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    Create a function that verifies whether the provided tuple contains any null values.\n    '''\n"}], "response": "def func(test_tup):\n    if None in test_tup:\n        return True\n    else:\n        return False", "response_code": "def func(test_tup):\n    if None in test_tup:\n        return True\n    else:\n        return False"}
{"task_id": 367, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(startnum, endnum):\n    '''\n    Create a function that identifies numbers in a specified range that are divisible by each of their individual digits.\n    '''\n"}], "response": "```python\ndef func(startnum, endnum):\n    def is_divisible_by_digits(num):\n        for digit in str(num):\n            if int(digit) == 0 or num % int(digit) != 0:\n                return False\n        return True\n\n    result = []\n    for i in range(startnum, endnum + 1):\n        if is_divisible_by_digits(i):\n            result.append(i)\n    \n    return result\n```", "response_code": "\ndef func(startnum, endnum):\n    def is_divisible_by_digits(num):\n        for digit in str(num):\n            if int(digit) == 0 or num % int(digit) != 0:\n                return False\n        return True\n\n    result = []\n    for i in range(startnum, endnum + 1):\n        if is_divisible_by_digits(i):\n            result.append(i)\n    \n    return result\n"}
{"task_id": 368, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(r,a):\n    '''\n    Create a function that calculates the area of a sector.\n    '''\n"}], "response": "import math\n\ndef func(r, a):\n    '''\n    Create a function that calculates the area of a sector.\n    '''\n    return 0.5 * r**2 * math.radians(a)", "response_code": "import math\n\ndef func(r, a):\n    '''\n    Create a function that calculates the area of a sector.\n    '''\n    return 0.5 * r**2 * math.radians(a)"}
{"task_id": 369, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(X, Y, Z): \n    '''\n    Create a function that identifies the longest common subsequence among three given strings.\n    '''\n"}], "response": "```python\nfrom difflib import SequenceMatcher\n\ndef func(X, Y, Z): \n    seq1 = SequenceMatcher(None, X, Y).find_longest_match(0, len(X), 0, len(Y))\n    seq2 = SequenceMatcher(None, Y, Z).find_longest_match(0, len(Y), 0, len(Z))\n    seq3 = SequenceMatcher(None, X, Z).find_longest_match(0, len(X), 0, len(Z))\n    \n    return X[seq3.a: seq3.a + seq3.size]\n```", "response_code": "\nfrom difflib import SequenceMatcher\n\ndef func(X, Y, Z): \n    seq1 = SequenceMatcher(None, X, Y).find_longest_match(0, len(X), 0, len(Y))\n    seq2 = SequenceMatcher(None, Y, Z).find_longest_match(0, len(Y), 0, len(Z))\n    seq3 = SequenceMatcher(None, X, Z).find_longest_match(0, len(X), 0, len(Z))\n    \n    return X[seq3.a: seq3.a + seq3.size]\n"}
{"task_id": 370, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(str1):\n    '''\n    Create a function that uses regex to insert spaces between words that begin with capital letters in a provided string.\n    '''\n"}], "response": "import re\n\ndef func(str1):\n    return re.sub(r'([a-z])([A-Z])', r'\\1 \\2', str1)", "response_code": "import re\n\ndef func(str1):\n    return re.sub(r'([a-z])([A-Z])', r'\\1 \\2', str1)"}
{"task_id": 371, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums_str):\n    '''\n    Create a function that sorts a list of strings containing numbers in numerical order.\n    '''\n"}], "response": "```python\ndef func(nums_str):\n    return sorted(nums_str, key=lambda x: int(x))\n```", "response_code": "\ndef func(nums_str):\n    return sorted(nums_str, key=lambda x: int(x))\n"}
{"task_id": 372, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list, test_tup):\n    '''\n    Create a function that appends the provided tuple to the provided list.\n    '''\n"}], "response": "def func(test_list, test_tup):\n    test_list.append(test_tup)", "response_code": "def func(test_list, test_tup):\n    test_list.append(test_tup)"}
{"task_id": 373, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr, i):\n    '''\n    Create a function that determines whether the provided array is a minimum heap or not.\n    '''\n"}], "response": "import heapq\n\ndef func(arr, i):\n    return all(arr[i] <= arr[2*i+1] and arr[i] <= arr[2*i+2] for i in range((len(arr)-2)//2))", "response_code": "import heapq\n\ndef func(arr, i):\n    return all(arr[i] <= arr[2*i+1] and arr[i] <= arr[2*i+2] for i in range((len(arr)-2)//2))"}
{"task_id": 374, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function that calculates the nth Jacobsthal number.\n    '''\n"}], "response": "```python\ndef func(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return func(n-1) + 2*func(n-2)\n```", "response_code": "\ndef func(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return func(n-1) + 2*func(n-2)\n"}
{"task_id": 375, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list, K):\n    '''\n    Create a function that retrieves the smallest k records from a list of tuples.\n    '''\n"}], "response": "```python\ndef func(test_list, K):\n    return sorted(test_list, key=lambda x: x[1])[:K]\n```", "response_code": "\ndef func(test_list, K):\n    return sorted(test_list, key=lambda x: x[1])[:K]\n"}
{"task_id": 376, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l1, l2, l3):\n    '''\n    Create a function that identifies the common elements at the same index position in three lists.\n    '''\n"}], "response": "```python\ndef func(l1, l2, l3):\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n```", "response_code": "\ndef func(l1, l2, l3):\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n"}
{"task_id": 377, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(numbers):\n    '''\n    Create a function that identifies the second smallest number within a given list.\n    '''\n"}], "response": "```python\ndef func(numbers):\n    unique_numbers = list(set(numbers))\n    unique_numbers.sort()\n    return unique_numbers[1]\n```", "response_code": "\ndef func(numbers):\n    unique_numbers = list(set(numbers))\n    unique_numbers.sort()\n    return unique_numbers[1]\n"}
{"task_id": 378, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that identifies a string containing an 'a' followed by either zero or one 'b'.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'a(b{0,1})'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False", "response_code": "import re\n\ndef func(text):\n    pattern = r'a(b{0,1})'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": 379, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Create a function that counts the number of pairs of strings in a list that are reverse of each other.\n    '''\n"}], "response": "from collections import Counter\n\ndef func(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count", "response_code": "from collections import Counter\n\ndef func(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"}
{"task_id": 380, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function that calculates the total number of distinct lists in a given list.\n    '''\n"}], "response": "```python\ndef func(list1):\n    return len(set(map(tuple, list1)))\n```", "response_code": "\ndef func(list1):\n    return len(set(map(tuple, list1)))\n"}
{"task_id": 381, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(num):\n    '''\n    Create a function that verifies a decimal number with a precision of 2.\n    '''\n"}], "response": "```python\ndef func(num):\n    if isinstance(num, (int, float)):\n        if isinstance(num, int):\n            return True\n        elif isinstance(num, float):\n            if num.is_integer():\n                return True\n            else:\n                decimal_part = str(num).split('.')[1]\n                if len(decimal_part) <= 2:\n                    return True\n    return False\n```", "response_code": "\ndef func(num):\n    if isinstance(num, (int, float)):\n        if isinstance(num, int):\n            return True\n        elif isinstance(num, float):\n            if num.is_integer():\n                return True\n            else:\n                decimal_part = str(num).split('.')[1]\n                if len(decimal_part) <= 2:\n                    return True\n    return False\n"}
{"task_id": 382, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):\n    '''\n    Create a Python function that determines if an array has only one unique element or not.\n    '''\n"}], "response": "```python\ndef func(arr):\n    return len(set(arr)) == 1\n```", "response_code": "\ndef func(arr):\n    return len(set(arr)) == 1\n"}
{"task_id": 383, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(monthnum3):\n    '''\n    Create a function that determines if a given month number has 30 days.\n    '''\n"}], "response": "```python\ndef func(monthnum):\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n```", "response_code": "\ndef func(monthnum):\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n"}
{"task_id": 384, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr,n): \n    '''\n    Create a Python function that determines the smallest difference between two elements within a specified array.\n    '''\n"}], "response": "```python\ndef func(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n```", "response_code": "\ndef func(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n"}
{"task_id": 385, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str):\n    '''\n    Create a Python function that calculates the number of numerical values in a provided string.\n    '''\n"}], "response": "```python\ndef func(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n```", "response_code": "\ndef func(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n"}
{"task_id": 386, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math \ndef func(n): \n    '''\n    Create a function that can determine the nth polite number.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    return n * (n + 1) // 2 + 1", "response_code": "import math\n\ndef func(n):\n    return n * (n + 1) // 2 + 1"}
{"task_id": 387, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l1):\n    '''\n    Create a function that loops through each pair of consecutive items in a provided list.\n    '''\n"}], "response": "def func(l1):\n    for i in range(len(l1) - 1):\n        pair = (l1[i], l1[i+1])\n        print(pair)", "response_code": "def func(l1):\n    for i in range(len(l1) - 1):\n        pair = (l1[i], l1[i+1])\n        print(pair)"}
{"task_id": 388, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr, sum):\n    '''\n    Create a Python function that calculates the quantity of pairs with a sum equal to 'sum'.\n    '''\n"}], "response": "```python\ndef func(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n```", "response_code": "\ndef func(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"}
{"task_id": 389, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(li1,li2):\n    '''\n    Create a Python function that calculates the variance between two lists.\n    '''\n"}], "response": "import numpy as np\n\ndef func(li1, li2):\n    return np.var(li1) - np.var(li2)", "response_code": "import numpy as np\n\ndef func(li1, li2):\n    return np.var(li1) - np.var(li2)"}
{"task_id": 390, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n) : \n    '''\n    Create a Python function that calculates the sum of the fourth power of the first n odd natural numbers.\n    '''\n"}], "response": "def func(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**4\n    return sum", "response_code": "def func(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**4\n    return sum"}
{"task_id": 391, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import deque\ndef func(exp):\n    '''\n    Create a function that determines whether the provided expression is balanced.\n    '''\n"}], "response": "from collections import deque\n\ndef func(exp):\n    stack = deque()\n    opening_brackets = ['(', '[', '{']\n    closing_brackets = [')', ']', '}']\n    \n    for char in exp:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack:\n                return False\n            top = stack.pop()\n            if opening_brackets.index(top) != closing_brackets.index(char):\n                return False\n    \n    return len(stack) == 0", "response_code": "from collections import deque\n\ndef func(exp):\n    stack = deque()\n    opening_brackets = ['(', '[', '{']\n    closing_brackets = [')', ']', '}']\n    \n    for char in exp:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack:\n                return False\n            top = stack.pop()\n            if opening_brackets.index(top) != closing_brackets.index(char):\n                return False\n    \n    return len(stack) == 0"}
{"task_id": 392, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_str, K):\n    '''\n    Create a function that eliminates all words of a specific length from the provided string.\n    '''\n"}], "response": "```python\ndef func(test_str, K):\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    return ' '.join(filtered_words)\n```", "response_code": "\ndef func(test_str, K):\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    return ' '.join(filtered_words)\n"}
{"task_id": 393, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text,pattern):\n    '''\n    Create a function that identifies the location and frequency of substrings within a given string.\n    '''\n"}], "response": "import re\n\ndef func(text, pattern):\n    matches = re.finditer(pattern, text)\n    locations = []\n    frequencies = {}\n    \n    for match in matches:\n        start = match.start()\n        end = match.end()\n        locations.append((start, end))\n        \n        substring = text[start:end]\n        if substring in frequencies:\n            frequencies[substring] += 1\n        else:\n            frequencies[substring] = 1\n    \n    return locations, frequencies", "response_code": "import re\n\ndef func(text, pattern):\n    matches = re.finditer(pattern, text)\n    locations = []\n    frequencies = {}\n    \n    for match in matches:\n        start = match.start()\n        end = match.end()\n        locations.append((start, end))\n        \n        substring = text[start:end]\n        if substring in frequencies:\n            frequencies[substring] += 1\n        else:\n            frequencies[substring] = 1\n    \n    return locations, frequencies"}
{"task_id": 394, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a Python function that verifies if all odd indexes in a provided list contain odd numbers.\n    '''\n"}], "response": "def verify_odd_indexes(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True", "response_code": "def verify_odd_indexes(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": 395, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_str):\n    '''\n    Create a function that counts characters in a string that are surrounded by vowels.\n    '''\n"}], "response": "```python\ndef func(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(1, len(test_str) - 1):\n        if test_str[i] not in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n```", "response_code": "\ndef func(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(1, len(test_str) - 1):\n        if test_str[i] not in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n"}
{"task_id": 396, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr): \n    '''\n    Create a Python function that calculates the sum of unique elements in a provided array.\n    '''\n"}], "response": "```python\ndef func(arr): \n    return sum(set(arr))\n```", "response_code": "\ndef func(arr): \n    return sum(set(arr))\n"}
{"task_id": 397, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from itertools import groupby\ndef func(list1):\n    '''\n    Create a function that groups consecutive duplicate elements of a list into sublists.\n    '''\n"}], "response": "from itertools import groupby\n\ndef func(list1):\n    return [list(group) for key, group in groupby(list1)]", "response_code": "from itertools import groupby\n\ndef func(list1):\n    return [list(group) for key, group in groupby(list1)]"}
{"task_id": 398, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function that calculates the quantity of distinct lists in a given list.\n    '''\n"}], "response": "```python\ndef func(list1):\n    return len(set(map(tuple, list1)))\n```", "response_code": "\ndef func(list1):\n    return len(set(map(tuple, list1)))\n"}
{"task_id": 399, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from itertools import combinations \ndef func(test_list):\n    '''\n    Create a function that calculates the combinations of sums using tuples from a specified list of tuples.\n    '''\n"}], "response": "```python\nfrom itertools import combinations\n\ndef func(test_list):\n    return list(combinations(test_list, 2))\n```", "response_code": "\nfrom itertools import combinations\n\ndef func(test_list):\n    return list(combinations(test_list, 2))\n"}
{"task_id": 400, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math \ndef func(n) : \n    '''\n    Create a Python function that determines if the number of divisors is odd or even.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    if math.isqrt(n) ** 2 == n:\n        return \"Odd\"\n    else:\n        return \"Even\"", "response_code": "import math\n\ndef func(n):\n    if math.isqrt(n) ** 2 == n:\n        return \"Odd\"\n    else:\n        return \"Even\""}
{"task_id": 401, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):\n    '''\n    Create a Python function that calculates the total sum of subarrays with odd lengths.\n    '''\n"}], "response": "```python\ndef func(arr):\n    total_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr), 2):\n            total_sum += sum(arr[i:j+1])\n    return total_sum\n```", "response_code": "\ndef func(arr):\n    total_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr), 2):\n            total_sum += sum(arr[i:j+1])\n    return total_sum\n"}
{"task_id": 402, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(r, g, b):\n    '''\n    Create a function that transforms an RGB color to an HSV color.\n    '''\n"}], "response": "```python\nfrom colorsys import rgb_to_hsv\n\ndef func(r, g, b):\n    return rgb_to_hsv(r/255, g/255, b/255)\n```", "response_code": "\nfrom colorsys import rgb_to_hsv\n\ndef func(r, g, b):\n    return rgb_to_hsv(r/255, g/255, b/255)\n"}
{"task_id": 403, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function that calculates the product of the first even and odd numbers in a provided list.\n    '''\n"}], "response": "```python\ndef func(list1):\n    even_product = 1\n    odd_product = 1\n    for num in list1:\n        if num % 2 == 0 and even_product == 1:\n            even_product = num\n        elif num % 2 != 0 and odd_product == 1:\n            odd_product = num\n    return even_product * odd_product\n```", "response_code": "\ndef func(list1):\n    even_product = 1\n    odd_product = 1\n    for num in list1:\n        if num % 2 == 0 and even_product == 1:\n            even_product = num\n        elif num % 2 != 0 and odd_product == 1:\n            odd_product = num\n    return even_product * odd_product\n"}
{"task_id": 404, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_str):\n    '''\n    Create a function that converts a tuple of strings to a tuple of integers.\n    '''\n"}], "response": "```python\ndef func(test_str):\n    return tuple(int(s) for s in test_str)\n```", "response_code": "\ndef func(test_str):\n    return tuple(int(s) for s in test_str)\n"}
{"task_id": 405, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import bisect\ndef func(a, x):\n    '''\n    Create a function that finds the correct position to insert a given value in a sorted list.\n    '''\n"}], "response": "import bisect\n\ndef func(a, x):\n    return bisect.bisect_left(a, x)", "response_code": "import bisect\n\ndef func(a, x):\n    return bisect.bisect_left(a, x)"}
{"task_id": 406, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that identifies a string containing an 'a' followed by three 'b's.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'a(b{3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False", "response_code": "import re\n\ndef func(text):\n    pattern = r'a(b{3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"}
{"task_id": 407, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list, test_str):\n    '''\n    Create a function that generates a new tuple using the provided string and list.\n    '''\n"}], "response": "def func(test_list, test_str):\n    return tuple(test_list) + (test_str,)", "response_code": "def func(test_list, test_str):\n    return tuple(test_list) + (test_str,)"}
{"task_id": 408, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a Python function that verifies if all even indexes in a provided list contain even numbers.\n    '''\n"}], "response": "def func(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True", "response_code": "def func(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": 409, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    Create a function that eliminates the nested record from the provided tuple.\n    '''\n"}], "response": "```python\ndef func(test_tup):\n    return tuple(item for sublist in test_tup for item in sublist)\n```", "response_code": "\ndef func(test_tup):\n    return tuple(item for sublist in test_tup for item in sublist)\n"}
{"task_id": 410, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(input_list): \n    '''\n    Create a Python function that calculates the total number of lists within a specified set of lists.\n    '''\n"}], "response": "```python\ndef func(input_list): \n    return sum(isinstance(i, list) for i in input_list)\n```", "response_code": "\ndef func(input_list): \n    return sum(isinstance(i, list) for i in input_list)\n"}
{"task_id": 411, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr,x):\n    '''\n    Create a Python function that determines the final index of an element within an array that has been sorted.\n    '''\n"}], "response": "```python\ndef func(arr, x):\n    return arr.index(x)\n```", "response_code": "\ndef func(arr, x):\n    return arr.index(x)\n"}
{"task_id": 412, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that identifies a string containing an 'a' followed by any character and ending with 'b'.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'a.b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False", "response_code": "import re\n\ndef func(text):\n    pattern = r'a.b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": 413, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(dict):\n    '''\n    Create a function that calculates the total sum of all elements within the provided dictionary.\n    '''\n"}], "response": "```python\ndef func(dict):\n    return sum(dict.values())\n```", "response_code": "\ndef func(dict):\n    return sum(dict.values())\n"}
{"task_id": 414, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a Python function that calculates the total of all odd natural numbers between the given range l and r.\n    '''\n"}], "response": "```python\ndef func(n): \n    total = 0\n    for i in range(1, n+1, 2):\n        total += i\n    return total\n```", "response_code": "\ndef func(n): \n    total = 0\n    for i in range(1, n+1, 2):\n        total += i\n    return total\n"}
{"task_id": 415, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):  \n    '''\n    Create a Python function that calculates the sum of an array.\n    '''\n"}], "response": "```python\ndef func(arr):\n    return sum(arr)\n```", "response_code": "\ndef func(arr):\n    return sum(arr)\n"}
{"task_id": 416, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n,d):   \n    '''\n    Create a Python function that rotates the bits of a specified number to the left.\n    '''\n"}], "response": "```python\ndef func(n, d):\n    return (n << d) | (n >> (32 - d))\n```", "response_code": "\ndef func(n, d):\n    return (n << d) | (n >> (32 - d))\n"}
{"task_id": 417, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that eliminates all spaces from a given string.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    return re.sub(r'\\s+', '', text)", "response_code": "import re\n\ndef func(text):\n    return re.sub(r'\\s+', '', text)"}
{"task_id": 418, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x,y,z):\n    '''\n    Create a Python function that calculates the quantity of identical numbers among three provided integers.\n    '''\n"}], "response": "```python\ndef func(x, y, z):\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0\n```", "response_code": "\ndef func(x, y, z):\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0\n"}
{"task_id": 419, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):   \n    '''\n    Create a Python function that calculates the number of rotations needed to produce a sorted array.\n    '''\n"}], "response": "```python\ndef func(arr):\n    n = len(arr)\n    min_val = min(arr)\n    min_index = arr.index(min_val)\n    rotations = n - min_index\n    return rotations\n```", "response_code": "\ndef func(arr):\n    n = len(arr)\n    min_val = min(arr)\n    min_index = arr.index(min_val)\n    rotations = n - min_index\n    return rotations\n"}
{"task_id": 420, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n) :\n    '''\n    Create a Python function that determines if a given number is a perfect square.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(n):\n    return math.isqrt(n) ** 2 == n\n```", "response_code": "\nimport math\n\ndef func(n):\n    return math.isqrt(n) ** 2 == n\n"}
{"task_id": 421, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr): \n    '''\n    Create a Python function that determines if the product of numbers is even.\n    '''\n"}], "response": "```python\ndef func(arr): \n    '''\n    Create a Python function that determines if the product of numbers is even.\n    '''\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False\n```", "response_code": "\ndef func(arr): \n    '''\n    Create a Python function that determines if the product of numbers is even.\n    '''\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False\n"}
{"task_id": 422, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lists):\n    '''\n    Create a function that identifies the list within a list of lists with the greatest sum of elements.\n    '''\n"}], "response": "```python\ndef func(lists):\n    max_sum = float('-inf')\n    max_list = None\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list\n```", "response_code": "\ndef func(lists):\n    max_sum = float('-inf')\n    max_list = None\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list\n"}
{"task_id": 423, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_str):\n    '''\n    Create a function that identifies the longest consecutive sequence of uppercase letters in a provided string.\n    '''\n"}], "response": "```python\nimport re\n\ndef func(test_str):\n    max_seq = ''\n    current_seq = ''\n    \n    for char in test_str:\n        if char.isupper():\n            current_seq += char\n        else:\n            if len(current_seq) > len(max_seq):\n                max_seq = current_seq\n            current_seq = ''\n    \n    if len(current_seq) > len(max_seq):\n        max_seq = current_seq\n    \n    return max_seq\n```", "response_code": "\nimport re\n\ndef func(test_str):\n    max_seq = ''\n    current_seq = ''\n    \n    for char in test_str:\n        if char.isupper():\n            current_seq += char\n        else:\n            if len(current_seq) > len(max_seq):\n                max_seq = current_seq\n            current_seq = ''\n    \n    if len(current_seq) > len(max_seq):\n        max_seq = current_seq\n    \n    return max_seq\n"}
{"task_id": 424, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a Python function that identifies the initial odd number within a provided list of numbers.\n    '''\n"}], "response": "```python\ndef func(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n```", "response_code": "\ndef func(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n"}
{"task_id": 425, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup, K):\n    '''\n    Create a function that verifies whether the specified tuples include the element k.\n    '''\n"}], "response": "def func(test_tup, K):\n    return any(K in tup for tup in test_tup)", "response_code": "def func(test_tup, K):\n    return any(K in tup for tup in test_tup)"}
{"task_id": 426, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function that verifies if every element in the second tuple is less than the element at the corresponding index in the first tuple.\n    '''\n"}], "response": "def func(test_tup1, test_tup2):\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True", "response_code": "def func(test_tup1, test_tup2):\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"}
