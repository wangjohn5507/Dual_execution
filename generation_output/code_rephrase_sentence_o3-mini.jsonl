{"task_id": 0, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function that identifies the common elements between two lists of tuples.\n    '''\n"}], "response": "from typing import List, Tuple\n\ndef func(test_tup1: List[Tuple], test_tup2: List[Tuple]) -> List[Tuple]:\n    common_elements = []\n    for tup1 in test_tup1:\n        for tup2 in test_tup2:\n            if set(tup1) == set(tup2):\n                common_elements.append(tup1)\n    return common_elements", "response_code": "from typing import List, Tuple\n\ndef func(test_tup1: List[Tuple], test_tup2: List[Tuple]) -> List[Tuple]:\n    common_elements = []\n    for tup1 in test_tup1:\n        for tup2 in test_tup2:\n            if set(tup1) == set(tup2):\n                common_elements.append(tup1)\n    return common_elements"}
{"task_id": 1, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(n):\n    '''\n    Create a Python function that can detect numbers that are not prime.\n    '''\n"}], "response": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "response_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": 2, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq as hq\ndef func(nums,n):\n    '''\n    Create a function that utilizes the heap queue algorithm to identify the highest integers within a provided list of numbers.\n    '''\n"}], "response": "import heapq as hq\n\ndef func(nums, n):\n    return hq.nlargest(n, nums)", "response_code": "import heapq as hq\n\ndef func(nums, n):\n    return hq.nlargest(n, nums)"}
{"task_id": 3, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x): \n    '''\n    Create a Python function that determines if two numbers differ at only one bit position.\n    '''\n"}], "response": "```python\ndef func(x):\n    return bin(x).count('1') == 1\n```", "response_code": "\ndef func(x):\n    return bin(x).count('1') == 1\n"}
{"task_id": 4, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that uses regex to identify all words in a string that contain a minimum of 4 characters.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)", "response_code": "import re\n\ndef func(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)"}
{"task_id": 5, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a lambda function to calculate the squares of each element in a list.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return list(map(lambda x: x**2, nums))\n```", "response_code": "\ndef func(nums):\n    return list(map(lambda x: x**2, nums))\n"}
{"task_id": 6, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str): \n    '''\n    Create a Python function that determines the minimum number of rotations needed to achieve the same string.\n    '''\n"}], "response": "```python\ndef func(s):\n    n = len(s)\n    s += s\n    for i in range(1, n+1):\n        if n % i == 0:\n            if s[:i] * (n//i) == s:\n                return i\n    return n\n```", "response_code": "\ndef func(s):\n    n = len(s)\n    s += s\n    for i in range(1, n+1):\n        if n % i == 0:\n            if s[:i] * (n//i) == s:\n                return i\n    return n\n"}
{"task_id": 7, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s,ch): \n    '''\n    Create a Python function that eliminates the first and last instances of a specified character from a string.\n    '''\n"}], "response": "```python\ndef func(s, ch):\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    \n    if first_index != -1 and last_index != -1:\n        s = s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n    \n    return s\n```", "response_code": "\ndef func(s, ch):\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    \n    if first_index != -1 and last_index != -1:\n        s = s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n    \n    return s\n"}
{"task_id": 8, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(M):\n    '''\n    Create a function that arranges a provided matrix in ascending order based on the sum of its rows.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(M):\n    return M[np.argsort(np.sum(M, axis=1))]\n```", "response_code": "\nimport numpy as np\n\ndef func(M):\n    return M[np.argsort(np.sum(M, axis=1))]\n"}
{"task_id": 9, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l,b,h) : \n    '''\n    Create a Python function that calculates the volume of a triangular prism.\n    '''\n"}], "response": "```python\ndef func(l, b, h):\n    return 0.5 * l * b * h\n```", "response_code": "\ndef func(l, b, h):\n    return 0.5 * l * b * h\n"}
{"task_id": 10, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that identifies sequences of lowercase letters connected by an underscore.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches", "response_code": "import re\n\ndef func(text):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches"}
{"task_id": 11, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a):\n    '''\n    Create a function that calculates the perimeter of a square.\n    '''\n"}], "response": "```python\ndef func(a):\n    return 4 * a\n```", "response_code": "\ndef func(a):\n    return 4 * a\n"}
{"task_id": 12, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "NO_OF_CHARS = 256\ndef func(string): \n    '''\n    Create a function that eliminates characters from the first string that are found in the second string.\n    '''\n"}], "response": "```python\nNO_OF_CHARS = 256\n\ndef func(string): \n    '''\n    Create a function that eliminates characters from the first string that are found in the second string.\n    '''\n    if len(string) < 2:\n        return string\n    \n    # Create a list to store characters to be removed\n    remove_chars = [False] * NO_OF_CHARS\n    \n    # Mark characters from second string to be removed\n    for char in string[1]:\n        remove_chars[ord(char)] = True\n    \n    # Filter characters from first string\n    filtered_string = ''.join([char for char in string[0] if not remove_chars[ord(char)]])\n    \n    return filtered_string\n```", "response_code": "\nNO_OF_CHARS = 256\n\ndef func(string): \n    '''\n    Create a function that eliminates characters from the first string that are found in the second string.\n    '''\n    if len(string) < 2:\n        return string\n    \n    # Create a list to store characters to be removed\n    remove_chars = [False] * NO_OF_CHARS\n    \n    # Mark characters from second string to be removed\n    for char in string[1]:\n        remove_chars[ord(char)] = True\n    \n    # Filter characters from first string\n    filtered_string = ''.join([char for char in string[0] if not remove_chars[ord(char)]])\n    \n    return filtered_string\n"}
{"task_id": 13, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arraynums):\n    '''\n    Create a function that determines if a provided array of integers has any duplicate elements.\n    '''\n"}], "response": "```python\ndef func(arraynums):\n    return len(arraynums) != len(set(arraynums))\n```", "response_code": "\ndef func(arraynums):\n    return len(arraynums) != len(set(arraynums))\n"}
{"task_id": 14, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x): \n    '''\n    Create a function that determines whether the provided number is woodball.\n    '''\n"}], "response": "```python\ndef func(x):\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False\n```", "response_code": "\ndef func(x):\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": 15, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(num):    \n    '''\n    Create a Python function that verifies if a specified number is equal to one less than double its reverse.\n    '''\n"}], "response": "def func(num):\n    reverse_num = int(str(num)[::-1])\n    if num == (2 * reverse_num) - 1:\n        return True\n    else:\n        return False", "response_code": "def func(num):\n    reverse_num = int(str(num)[::-1])\n    if num == (2 * reverse_num) - 1:\n        return True\n    else:\n        return False"}
{"task_id": 16, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr) : \n    '''\n    Create a Python function that determines the highest possible number using the provided digits.\n    '''\n"}], "response": "from itertools import permutations\n\ndef func(arr):\n    max_num = 0\n    for perm in permutations(arr):\n        num = int(''.join(map(str, perm)))\n        max_num = max(max_num, num)\n    return max_num", "response_code": "from itertools import permutations\n\ndef func(arr):\n    max_num = 0\n    for perm in permutations(arr):\n        num = int(''.join(map(str, perm)))\n        max_num = max(max_num, num)\n    return max_num"}
{"task_id": 17, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x,y): \n    '''\n    Create a Python function that determines if two given integers have opposite signs.\n    '''\n"}], "response": "def have_opposite_signs(x, y):\n    return (x < 0) ^ (y < 0)", "response_code": "def have_opposite_signs(x, y):\n    return (x < 0) ^ (y < 0)"}
{"task_id": 18, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function that calculates the nth octagonal number.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n * (3 * n - 2)\n```", "response_code": "\ndef func(n):\n    return n * (3 * n - 2)\n"}
{"task_id": 19, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import defaultdict\ndef func(s):\n    '''\n    Create a Python function that calculates the number of substrings where the sum of the digits is equal to the length of the substring.\n    '''\n"}], "response": "from collections import defaultdict\n\ndef func(s):\n    count = 0\n    prefix_sum = defaultdict(int)\n    prefix_sum[0] = 1\n    current_sum = 0\n    \n    for i in range(len(s)):\n        current_sum += int(s[i])\n        count += prefix_sum[current_sum - i - 1]\n        prefix_sum[current_sum] += 1\n    \n    return count", "response_code": "from collections import defaultdict\n\ndef func(s):\n    count = 0\n    prefix_sum = defaultdict(int)\n    prefix_sum[0] = 1\n    current_sum = 0\n    \n    for i in range(len(s)):\n        current_sum += int(s[i])\n        count += prefix_sum[current_sum - i - 1]\n        prefix_sum[current_sum] += 1\n    \n    return count"}
