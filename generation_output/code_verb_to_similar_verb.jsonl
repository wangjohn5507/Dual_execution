{"task_id": 0, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function to identify the matching elements from the provided two tuple lists.\n    '''\n"}], "response": "```python\ndef func(test_tup1, test_tup2):\n    return tuple(set(test_tup1) & set(test_tup2))\n```", "response_code": "\ndef func(test_tup1, test_tup2):\n    return tuple(set(test_tup1) & set(test_tup2))\n"}
{"task_id": 1, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(n):\n    '''\n    Create a python function to detect non-prime numbers.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    '''\n    Create a python function to detect non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "response_code": "import math\n\ndef func(n):\n    '''\n    Create a python function to detect non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": 2, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq as hq\ndef func(nums,n):\n    '''\n    Create a function to determine the highest integers from a provided list of numbers using the heap queue algorithm.\n    '''\n"}], "response": "import heapq as hq\n\ndef func(nums, n):\n    return hq.nlargest(n, nums)", "response_code": "import heapq as hq\n\ndef func(nums, n):\n    return hq.nlargest(n, nums)"}
{"task_id": 3, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x): \n    '''\n    Compose a python function to verify if the two numbers vary at one bit position only or not.\n    '''\n"}], "response": "```python\ndef func(x):\n    return bin(x).count('1') == 1\n```", "response_code": "\ndef func(x):\n    return bin(x).count('1') == 1\n"}
{"task_id": 4, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Compose a function to detect all words that are a minimum of 4 characters in length in a string by utilizing regex.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)", "response_code": "import re\n\ndef func(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)"}
{"task_id": 5, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a function to calculate squares of individual elements in a list using a lambda function.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return list(map(lambda x: x**2, nums))\n```", "response_code": "\ndef func(nums):\n    return list(map(lambda x: x**2, nums))\n"}
{"task_id": 6, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str): \n    '''\n    Compose a python function to determine the minimum number of rotations needed to achieve the identical string.\n    '''\n"}], "response": "```python\ndef min_rotations_to_identical_string(s):\n    n = len(s)\n    s += s\n    for i in range(1, n+1):\n        if n % i == 0:\n            if s[:i] * (n // i) == s:\n                return i\n    return n\n\n# Example usage:\n# print(min_rotations_to_identical_string(\"abcabcabc\"))  # Output: 3\n```", "response_code": "\ndef min_rotations_to_identical_string(s):\n    n = len(s)\n    s += s\n    for i in range(1, n+1):\n        if n % i == 0:\n            if s[:i] * (n // i) == s:\n                return i\n    return n\n\n# Example usage:\n# print(min_rotations_to_identical_string(\"abcabcabc\"))  # Output: 3\n"}
{"task_id": 7, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s,ch): \n    '''\n    Create a python function to delete first and last occurrence of a specified character from the string.\n    '''\n"}], "response": "```python\ndef func(s, ch):\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    \n    if first_index != -1 and last_index != -1:\n        s = s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n    \n    return s\n```", "response_code": "\ndef func(s, ch):\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    \n    if first_index != -1 and last_index != -1:\n        s = s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n    \n    return s\n"}
{"task_id": 8, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(M):\n    '''\n    Create a function to arrange a given matrix in ascending order based on the total of its rows.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(M):\n    return M[np.argsort(np.sum(M, axis=1))]\n```", "response_code": "\nimport numpy as np\n\ndef func(M):\n    return M[np.argsort(np.sum(M, axis=1))]\n"}
{"task_id": 9, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l,b,h) : \n    '''\n    Compose a python function to determine the volume of a triangular prism.\n    '''\n"}], "response": "```python\ndef func(l, b, h):\n    return 0.5 * l * b * h\n```", "response_code": "\ndef func(l, b, h):\n    return 0.5 * l * b * h\n"}
{"task_id": 10, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Compose a function to detect sequences of lowercase letters connected with an underscore.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches", "response_code": "import re\n\ndef func(text):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches"}
{"task_id": 11, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a):\n    '''\n    Compose a function to determine the perimeter of a square.\n    '''\n"}], "response": "```python\ndef func(a):\n    return 4 * a\n```", "response_code": "\ndef func(a):\n    return 4 * a\n"}
{"task_id": 12, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "NO_OF_CHARS = 256\ndef func(string): \n    '''\n    Create a function to eliminate characters from the first string that exist in the second string.\n    '''\n"}], "response": "```python\nNO_OF_CHARS = 256\n\ndef func(string): \n    '''\n    Create a function to eliminate characters from the first string that exist in the second string.\n    '''\n```", "response_code": "\nNO_OF_CHARS = 256\n\ndef func(string): \n    '''\n    Create a function to eliminate characters from the first string that exist in the second string.\n    '''\n"}
{"task_id": 13, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arraynums):\n    '''\n    Create a function to determine if a provided array of integers includes any duplicate elements.\n    '''\n"}], "response": "def func(arraynums):\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True", "response_code": "def func(arraynums):\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True"}
{"task_id": 14, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x): \n    '''\n    Compose a function to verify if the provided number is woodball or not.\n    '''\n"}], "response": "```python\ndef func(x):\n    if x < 1:\n        return False\n    while x % 2 == 0:\n        x /= 2\n    while x % 3 == 0:\n        x /= 3\n    while x % 5 == 0:\n        x /= 5\n    return x == 1\n```", "response_code": "\ndef func(x):\n    if x < 1:\n        return False\n    while x % 2 == 0:\n        x /= 2\n    while x % 3 == 0:\n        x /= 3\n    while x % 5 == 0:\n        x /= 5\n    return x == 1\n"}
{"task_id": 15, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(num):    \n    '''\n    Create a python function to verify if a provided number is one less than double its reverse.\n    '''\n"}], "response": "def func(num):\n    reverse_num = int(str(num)[::-1])\n    if num == 2 * reverse_num + 1:\n        return True\n    else:\n        return False", "response_code": "def func(num):\n    reverse_num = int(str(num)[::-1])\n    if num == 2 * reverse_num + 1:\n        return True\n    else:\n        return False"}
{"task_id": 16, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr) : \n    '''\n    Compose a python function to determine the greatest number that can be created with the provided digits.\n    '''\n"}], "response": "from itertools import permutations\n\ndef func(arr):\n    max_num = 0\n    for perm in permutations(arr):\n        num = int(''.join(map(str, perm)))\n        max_num = max(max_num, num)\n    return max_num", "response_code": "from itertools import permutations\n\ndef func(arr):\n    max_num = 0\n    for perm in permutations(arr):\n        num = int(''.join(map(str, perm)))\n        max_num = max(max_num, num)\n    return max_num"}
{"task_id": 17, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x,y): \n    '''\n    Create a python function to verify if the provided two integers possess opposite signs or not.\n    '''\n"}], "response": "```python\ndef func(x, y):\n    return (x < 0) ^ (y < 0)\n```", "response_code": "\ndef func(x, y):\n    return (x < 0) ^ (y < 0)\n"}
{"task_id": 18, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function to determine the nth octagonal number.\n    '''\n"}], "response": "```python\ndef func(n): \n    return n * (3*n - 2)\n```", "response_code": "\ndef func(n): \n    return n * (3*n - 2)\n"}
{"task_id": 19, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import defaultdict\ndef func(s):\n    '''\n    Create a python function to calculate the number of substrings with the sum of digits equal to their length.\n    '''\n"}], "response": "from collections import defaultdict\n\ndef func(s):\n    count = 0\n    prefix_sum = 0\n    sum_count = defaultdict(int)\n    sum_count[0] = 1\n    \n    for digit in s:\n        prefix_sum += int(digit)\n        count += sum_count[prefix_sum - len(str(prefix_sum))]\n        sum_count[prefix_sum] += 1\n    \n    return count", "response_code": "from collections import defaultdict\n\ndef func(s):\n    count = 0\n    prefix_sum = 0\n    sum_count = defaultdict(int)\n    sum_count[0] = 1\n    \n    for digit in s:\n        prefix_sum += int(digit)\n        count += sum_count[prefix_sum - len(str(prefix_sum))]\n        sum_count[prefix_sum] += 1\n    \n    return count"}
{"task_id": 20, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(xs):\n    '''\n    Compose a python function to determine the smallest number in a list.\n    '''\n"}], "response": "```python\ndef func(xs):\n    return min(xs)\n```", "response_code": "\ndef func(xs):\n    return min(xs)\n"}
{"task_id": 21, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Create a function to determine the largest difference between pairs in the provided tuple list.\n    '''\n"}], "response": "```python\ndef func(test_list):\n    return max(test_list) - min(test_list)\n```", "response_code": "\ndef func(test_list):\n    return max(test_list) - min(test_list)\n"}
{"task_id": 22, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(subjectmarks):\n    '''\n    Compose a function to arrange a list of tuples using lambda.\n    '''\n"}], "response": "from operator import itemgetter\n\ndef func(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])", "response_code": "from operator import itemgetter\n\ndef func(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])"}
{"task_id": 23, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(data_list):\n    '''\n    Create a function for recursively adding a list.\n    '''\n"}], "response": "```python\ndef func(data_list):\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + func(data_list[1:])\n```", "response_code": "\ndef func(data_list):\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + func(data_list[1:])\n"}
{"task_id": 24, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list):\n    '''\n    Compose a python function to tally positive numbers in a list.\n    '''\n"}], "response": "```python\ndef func(lst):\n    return len([num for num in lst if num > 0])\n```", "response_code": "\ndef func(lst):\n    return len([num for num in lst if num > 0])\n"}
{"task_id": 25, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):   \n    '''\n    Compose a function to determine the quantity of methods to divide a group of bell numbers.\n    '''\n"}], "response": "```python\nfrom math import factorial\n\ndef func(n):\n    return factorial(2*n - 1) // (factorial(n) * factorial(n-1))\n```", "response_code": "\nfrom math import factorial\n\ndef func(n):\n    return factorial(2*n - 1) // (factorial(n) * factorial(n-1))\n"}
{"task_id": 26, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(A): \n    '''\n    Create a python function to verify if the provided array is monotonic or not.\n    '''\n"}], "response": "```python\ndef is_monotonic(A):\n    return all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n```", "response_code": "\ndef is_monotonic(A):\n    return all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n"}
{"task_id": 27, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l, s):\n    '''\n    Compose a function to verify if a list includes the specified sublist or not.\n    '''\n"}], "response": "```python\ndef func(l, s):\n    '''\n    Compose a function to verify if a list includes the specified sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n```", "response_code": "\ndef func(l, s):\n    '''\n    Compose a function to verify if a list includes the specified sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"}
{"task_id": 28, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(Input):\n    '''\n    Compose a function to determine if all the provided tuples possess identical lengths or not.\n    '''\n"}], "response": "def func(Input):\n    return all(len(t) == len(Input[0]) for t in Input)", "response_code": "def func(Input):\n    return all(len(t) == len(Input[0]) for t in Input)"}
{"task_id": 29, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a function to arrange a list of elements using comb sort.\n    '''\n"}], "response": "```python\ndef func(nums):\n    '''\n    Create a function to arrange a list of elements using comb sort.\n    '''\n    gap = len(nums)\n    shrink = 1.3\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / shrink))\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n```", "response_code": "\ndef func(nums):\n    '''\n    Create a function to arrange a list of elements using comb sort.\n    '''\n    gap = len(nums)\n    shrink = 1.3\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / shrink))\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n"}
{"task_id": 30, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Compose a python function to verify if the provided number can be expressed as the subtraction of two squares or not.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(n): \n    '''\n    Compose a python function to verify if the provided number can be expressed as the subtraction of two squares or not.\n    '''\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if math.isqrt(n + i*i) ** 2 == n + i*i:\n            return True\n    return False\n```", "response_code": "\nimport math\n\ndef func(n): \n    '''\n    Compose a python function to verify if the provided number can be expressed as the subtraction of two squares or not.\n    '''\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if math.isqrt(n + i*i) ** 2 == n + i*i:\n            return True\n    return False\n"}
{"task_id": 31, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(colors, patterns):    \n    '''\n    Create a function to verify if it adheres to the sequence provided in the patterns array.\n    '''\n"}], "response": "```python\ndef func(colors, patterns):\n    return all(pattern in colors for pattern in patterns)\n```", "response_code": "\ndef func(colors, patterns):\n    return all(pattern in colors for pattern in patterns)\n"}
{"task_id": 32, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list, K):\n    '''\n    Create a function to identify tuples that contain elements divisible by k from the provided list of tuples.\n    '''\n"}], "response": "```python\ndef func(test_list, K):\n    return [tup for tup in test_list if all(ele % K == 0 for ele in tup)]\n```", "response_code": "\ndef func(test_list, K):\n    return [tup for tup in test_list if all(ele % K == 0 for ele in tup)]\n"}
{"task_id": 33, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Compose a python function to determine the disparity between the total of even and odd digits.\n    '''\n"}], "response": "```python\ndef func(n):\n    even_sum = sum(int(digit) for digit in str(n) if int(digit) % 2 == 0)\n    odd_sum = sum(int(digit) for digit in str(n) if int(digit) % 2 != 0)\n    return even_sum - odd_sum\n```", "response_code": "\ndef func(n):\n    even_sum = sum(int(digit) for digit in str(n) if int(digit) % 2 == 0)\n    odd_sum = sum(int(digit) for digit in str(n) if int(digit) % 2 != 0)\n    return even_sum - odd_sum\n"}
{"task_id": 34, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s): \n    '''\n    Compose a python function to verify if the length of the word is odd or not.\n    '''\n"}], "response": "def is_length_odd(s):\n    return len(s) % 2 != 0", "response_code": "def is_length_odd(s):\n    return len(s) % 2 != 0"}
{"task_id": 35, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Compose a function to determine the nth tetrahedral number.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n * (n + 1) * (n + 2) // 6\n```", "response_code": "\ndef func(n):\n    return n * (n + 1) * (n + 2) // 6\n"}
{"task_id": 36, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(r):\n    '''\n    Compose a function to determine the volume of a sphere.\n    '''\n"}], "response": "import math\n\ndef func(r):\n    '''\n    Compose a function to determine the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume", "response_code": "import math\n\ndef func(r):\n    '''\n    Compose a function to determine the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"}
{"task_id": 37, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(strr):  \n    '''\n    Compose a python function to determine the character created by combining all the characters of the provided string.\n    '''\n"}], "response": "```python\ndef func(strr):\n    return chr(sum(ord(char) for char in strr) % 256)\n```", "response_code": "\ndef func(strr):\n    return chr(sum(ord(char) for char in strr) % 256)\n"}
{"task_id": 38, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function to determine the n-th number in the newman conway sequence.\n    '''\n"}], "response": "def newman_conway(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    \n    dp = [0] * (n + 1)\n    dp[1] = 1\n    dp[2] = 1\n    \n    for i in range(3, n + 1):\n        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]]\n    \n    return dp[n]", "response_code": "def newman_conway(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    \n    dp = [0] * (n + 1)\n    dp[1] = 1\n    dp[2] = 1\n    \n    for i in range(3, n + 1):\n        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]]\n    \n    return dp[n]"}
{"task_id": 39, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(r):\n    '''\n    Compose a function to determine the surface area of a sphere.\n    '''\n"}], "response": "import math\n\ndef func(r):\n    return 4 * math.pi * r**2", "response_code": "import math\n\ndef func(r):\n    return 4 * math.pi * r**2"}
{"task_id": 40, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    Compose a function to determine the nth centered hexagonal number.\n    '''\n"}], "response": "```python\ndef func(n):\n    return 3*n*(n-1) + 1\n```", "response_code": "\ndef func(n):\n    return 3*n*(n-1) + 1\n"}
{"task_id": 41, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import collections as ct\ndef func(dict1,dict2, dict3):\n    '''\n    Compose a function to combine three dictionaries into a single expression.\n    '''\n"}], "response": "import collections as ct\n\ndef func(dict1, dict2, dict3):\n    combined_dict = {**dict1, **dict2, **dict3}\n    return combined_dict", "response_code": "import collections as ct\n\ndef func(dict1, dict2, dict3):\n    combined_dict = {**dict1, **dict2, **dict3}\n    return combined_dict"}
{"task_id": 42, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import collections\ndef func(list1):\n    '''\n    Compose a function to obtain the frequency of the elements in a list.\n    '''\n"}], "response": "import collections\n\ndef func(list1):\n    return collections.Counter(list1)", "response_code": "import collections\n\ndef func(list1):\n    return collections.Counter(list1)"}
{"task_id": 43, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(N):\n    '''\n    Compose a function to determine the nearest lesser number to n.\n    '''\n"}], "response": "```python\ndef func(N):\n    return N - 1\n```", "response_code": "\ndef func(N):\n    return N - 1\n"}
{"task_id": 44, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Compose a python function to determine the length of the longest word.\n    '''\n"}], "response": "```python\ndef func(list1):\n    return max(len(word) for word in list1)\n```", "response_code": "\ndef func(list1):\n    return max(len(word) for word in list1)\n"}
{"task_id": 45, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1, sub_str):\n    '''\n    Compose a function to verify if a substring exists in a provided list of string values.\n    '''\n"}], "response": "def func(str1, sub_str):\n    return sub_str in str1", "response_code": "def func(str1, sub_str):\n    return sub_str in str1"}
{"task_id": 46, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Compose a function to verify if the provided number is undulating or not.\n    '''\n"}], "response": "```python\ndef is_undulating(n):\n    n_str = str(n)\n    if len(n_str) < 3:\n        return False\n    for i in range(1, len(n_str) - 1):\n        if n_str[i-1] < n_str[i] < n_str[i+1] or n_str[i-1] > n_str[i] > n_str[i+1]:\n            continue\n        else:\n            return False\n    return True\n```", "response_code": "\ndef is_undulating(n):\n    n_str = str(n)\n    if len(n_str) < 3:\n        return False\n    for i in range(1, len(n_str) - 1):\n        if n_str[i-1] < n_str[i] < n_str[i+1] or n_str[i-1] > n_str[i] > n_str[i+1]:\n            continue\n        else:\n            return False\n    return True\n"}
{"task_id": 47, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,b):\n    '''\n    Compose a function to determine the result of raising 'a' to the exponent 'b'.\n    '''\n"}], "response": "```python\ndef func(a, b):\n    return a ** b\n```", "response_code": "\ndef func(a, b):\n    return a ** b\n"}
{"task_id": 48, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from operator import itemgetter \ndef func(test_list):\n    '''\n    Compose a function to retrieve the index minimum value record from the provided tuples.\n    '''\n"}], "response": "from operator import itemgetter\n\ndef func(test_list):\n    return min(enumerate(test_list), key=itemgetter(1))[0]", "response_code": "from operator import itemgetter\n\ndef func(test_list):\n    return min(enumerate(test_list), key=itemgetter(1))[0]"}
{"task_id": 49, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst):  \n    '''\n    Compose a python function to determine the smallest length of sublist.\n    '''\n"}], "response": "```python\ndef func(lst):\n    return min(len(sublist) for sublist in lst)\n```", "response_code": "\ndef func(lst):\n    return min(len(sublist) for sublist in lst)\n"}
{"task_id": 50, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    Create a python function to determine the quantity of divisors for a specified integer.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2 if n/i != i else 1\n    return count\n```", "response_code": "\nimport math\n\ndef func(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2 if n/i != i else 1\n    return count\n"}
{"task_id": 51, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Compose a function to determine the frequency count of a list of lists.\n    '''\n"}], "response": "```python\nfrom collections import Counter\n\ndef func(list1):\n    '''\n    Compose a function to determine the frequency count of a list of lists.\n    '''\n    return dict(Counter(tuple(sublist) for sublist in list1))\n```", "response_code": "\nfrom collections import Counter\n\ndef func(list1):\n    '''\n    Compose a function to determine the frequency count of a list of lists.\n    '''\n    return dict(Counter(tuple(sublist) for sublist in list1))\n"}
{"task_id": 52, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(numbers):  \n    '''\n    Create a function to calculate the product of all the numbers in a list and then divide by the number of elements in the list.\n    '''\n"}], "response": "```python\ndef func(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n```", "response_code": "\ndef func(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n"}
{"task_id": 53, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Compose a function to transform the provided decimal number into its binary equivalent.\n    '''\n"}], "response": "```python\ndef func(n):\n    return bin(n)[2:]\n```", "response_code": "\ndef func(n):\n    return bin(n)[2:]\n"}
{"task_id": 54, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import sys\ndef func(num):\n    '''\n    Compose a function to determine the subsequent smallest palindrome of a specified number.\n    '''\n"}], "response": "import sys\n\ndef func(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n\n    return num", "response_code": "import sys\n\ndef func(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n\n    return num"}
{"task_id": 55, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr, k):\n    '''\n    Create a function to locate the kth element in the provided array.\n    '''\n"}], "response": "```python\ndef func(arr, k):\n    arr.sort()\n    return arr[k-1]\n```", "response_code": "\ndef func(arr, k):\n    arr.sort()\n    return arr[k-1]\n"}
{"task_id": 56, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(word):\n    '''\n    Create a function to transform snake case string to camel case string.\n    '''\n"}], "response": "```python\ndef snake_to_camel(word):\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n```", "response_code": "\ndef snake_to_camel(word):\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n"}
{"task_id": 57, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n, m): \n    '''\n    Create a function to determine the eulerian number a(n, m).\n    '''\n"}], "response": "```python\nfrom math import comb\n\ndef func(n, m): \n    return comb(n, m) * sum((-1)**(m-k) * comb(m, k) * (m-k)**n for k in range(m+1))\n```", "response_code": "\nfrom math import comb\n\ndef func(n, m): \n    return comb(n, m) * sum((-1)**(m-k) * comb(m, k) * (m-k)**n for k in range(m+1))\n"}
{"task_id": 58, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(input_list):\n    '''\n    Create a function to arrange each sublist of strings in a provided list of lists using a lambda function.\n    '''\n"}], "response": "```python\ndef func(input_list):\n    return list(map(lambda x: sorted(x), input_list))\n```", "response_code": "\ndef func(input_list):\n    return list(map(lambda x: sorted(x), input_list))\n"}
{"task_id": 59, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst):   \n    '''\n    Compose a python function to tally true booleans in the provided list.\n    '''\n"}], "response": "```python\ndef func(lst):\n    return lst.count(True)\n```", "response_code": "\ndef func(lst):\n    return lst.count(True)\n"}
{"task_id": 60, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list, test_tup):\n    '''\n    Compose a function to append the provided list to the provided tuples.\n    '''\n"}], "response": "def func(test_list, test_tup):\n    for tup in test_tup:\n        tup += (test_list,)\n    return test_tup", "response_code": "def func(test_list, test_tup):\n    for tup in test_tup:\n        tup += (test_list,)\n    return test_tup"}
{"task_id": 61, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq\ndef func(num1,num2,num3):\n    '''\n    Compose a function to combine multiple sorted inputs into a single sorted iterator using the heap queue algorithm.\n    '''\n"}], "response": "import heapq\n\ndef func(num1, num2, num3):\n    '''\n    Compose a function to combine multiple sorted inputs into a single sorted iterator using the heap queue algorithm.\n    '''\n    heap = []\n    for i in num1, num2, num3:\n        for j in i:\n            heapq.heappush(heap, j)\n    \n    while heap:\n        yield heapq.heappop(heap)", "response_code": "import heapq\n\ndef func(num1, num2, num3):\n    '''\n    Compose a function to combine multiple sorted inputs into a single sorted iterator using the heap queue algorithm.\n    '''\n    heap = []\n    for i in num1, num2, num3:\n        for j in i:\n            heapq.heappush(heap, j)\n    \n    while heap:\n        yield heapq.heappop(heap)"}
{"task_id": 62, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s,n): \n    '''\n    Create a python function to determine the number of rotations of a binary string with an odd value.\n    '''\n"}], "response": "```python\ndef func(s, n):\n    count = 0\n    for i in range(n):\n        if int(s, 2) % 2 == 1:\n            return count\n        s = s[-1] + s[:-1]\n        count += 1\n    return -1\n```", "response_code": "\ndef func(s, n):\n    count = 0\n    for i in range(n):\n        if int(s, 2) % 2 == 1:\n            return count\n        s = s[-1] + s[:-1]\n        count += 1\n    return -1\n"}
{"task_id": 63, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nestedlist):\n    '''\n    Create a function to identify shared elements in provided nested lists.\n    '''\n"}], "response": "```python\ndef func(nestedlist):\n    '''\n    Create a function to identify shared elements in provided nested lists.\n    '''\n    return list(set.intersection(*map(set, nestedlist)))\n```", "response_code": "\ndef func(nestedlist):\n    '''\n    Create a function to identify shared elements in provided nested lists.\n    '''\n    return list(set.intersection(*map(set, nestedlist)))\n"}
{"task_id": 64, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(text):\n    '''\n    Compose a function to verify if a string symbolizes an integer or not.\n    '''\n"}], "response": "```python\ndef func(text):\n    return text.isdigit()\n```", "response_code": "\ndef func(text):\n    return text.isdigit()\n"}
{"task_id": 65, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function to verify if all dictionaries in a list are empty or not.\n    '''\n"}], "response": "def func(list1):\n    for item in list1:\n        if item:\n            return False\n    return True", "response_code": "def func(list1):\n    for item in list1:\n        if item:\n            return False\n    return True"}
{"task_id": 66, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Compose a function to transform a provided tuple of positive integers into an integer.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return int(''.join(map(str, nums)))\n```", "response_code": "\ndef func(nums):\n    return int(''.join(map(str, nums)))\n"}
{"task_id": 67, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Create a function to transform all potential convertible elements in the list to float.\n    '''\n"}], "response": "```python\ndef func(test_list):\n    return [float(i) if i.replace('.', '', 1).isdigit() else i for i in test_list]\n```", "response_code": "\ndef func(test_list):\n    return [float(i) if i.replace('.', '', 1).isdigit() else i for i in test_list]\n"}
{"task_id": 68, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(string): \n    '''\n    Compose a function to transform a string into a list.\n    '''\n"}], "response": "def func(string): \n    return list(string)", "response_code": "def func(string): \n    return list(string)"}
{"task_id": 69, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):\n    '''\n    Compose a python function to detect the element that occurs singularly in a sorted array.\n    '''\n"}], "response": "```python\ndef func(arr):\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1 or arr[i] != arr[i + 1]:\n            return arr[i]\n    return None\n```", "response_code": "\ndef func(arr):\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1 or arr[i] != arr[i + 1]:\n            return arr[i]\n    return None\n"}
{"task_id": 70, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function to determine the highest product from the pairs of tuples in a specified list.\n    '''\n"}], "response": "```python\ndef func(list1):\n    max_product = 0\n    for pair in list1:\n        product = pair[0] * pair[1]\n        if product > max_product:\n            max_product = product\n    return max_product\n```", "response_code": "\ndef func(list1):\n    max_product = 0\n    for pair in list1:\n        product = pair[0] * pair[1]\n        if product > max_product:\n            max_product = product\n    return max_product\n"}
{"task_id": 71, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(limit):\n    '''\n    Create a function to calculate the total of all amicable numbers from 1 to a specified number.\n    '''\n"}], "response": "```python\ndef func(limit):\n    def sum_divisors(n):\n        total = 0\n        for i in range(1, n):\n            if n % i == 0:\n                total += i\n        return total\n\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        sum_i = sum_divisors(i)\n        if sum_i != i and sum_divisors(sum_i) == i:\n            amicable_numbers.append(i)\n\n    return sum(amicable_numbers)\n```", "response_code": "\ndef func(limit):\n    def sum_divisors(n):\n        total = 0\n        for i in range(1, n):\n            if n % i == 0:\n                total += i\n        return total\n\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        sum_i = sum_divisors(i)\n        if sum_i != i and sum_divisors(sum_i) == i:\n            amicable_numbers.append(i)\n\n    return sum(amicable_numbers)\n"}
{"task_id": 72, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import cmath\ndef func(a,b):\n    '''\n    Create a function to obtain the angle of a complex number.\n    '''\n"}], "response": "import cmath\n\ndef func(a, b):\n    '''\n    Create a function to obtain the angle of a complex number.\n    '''\n    complex_num = complex(a, b)\n    angle = cmath.phase(complex_num)\n    \n    return angle", "response_code": "import cmath\n\ndef func(a, b):\n    '''\n    Create a function to obtain the angle of a complex number.\n    '''\n    complex_num = complex(a, b)\n    angle = cmath.phase(complex_num)\n    \n    return angle"}
{"task_id": 73, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(string): \n    '''\n    Create a function to determine the maximum difference between the count of 0s and count of 1s in any sub-string of the provided binary string.\n    '''\n"}], "response": "```python\ndef func(string): \n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    diff = 0\n    \n    for char in string: \n        if char == '0': \n            count_0 += 1\n        else: \n            count_1 += 1\n        \n        diff = count_0 - count_1\n        if diff > max_diff: \n            max_diff = diff\n    \n    return max_diff\n```", "response_code": "\ndef func(string): \n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    diff = 0\n    \n    for char in string: \n        if char == '0': \n            count_0 += 1\n        else: \n            count_1 += 1\n        \n        diff = count_0 - count_1\n        if diff > max_diff: \n            max_diff = diff\n    \n    return max_diff\n"}
{"task_id": 74, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,b): \n    '''\n    Create a python function to calculate the total of shared divisors of two specified numbers.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(a, b):\n    shared_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            shared_divisors.append(i)\n    return sum(shared_divisors)\n```", "response_code": "\nimport math\n\ndef func(a, b):\n    shared_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            shared_divisors.append(i)\n    return sum(shared_divisors)\n"}
{"task_id": 75, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x, y):\n    '''\n    Create a function to calculate the product of two integers without using the * operator in python.\n    '''\n"}], "response": "```python\ndef func(x, y):\n    result = 0\n    for i in range(abs(y)):\n        result += x\n    if y < 0:\n        result = -result\n    return result\n```", "response_code": "\ndef func(x, y):\n    result = 0\n    for i in range(abs(y)):\n        result += x\n    if y < 0:\n        result = -result\n    return result\n"}
{"task_id": 76, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n, str):\n    '''\n    Compose a function to filter words that exceed a length of n from a provided list of words.\n    '''\n"}], "response": "```python\ndef func(n, words):\n    return [word for word in words if len(word) <= n]\n```", "response_code": "\ndef func(n, words):\n    return [word for word in words if len(word) <= n]\n"}
{"task_id": 77, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(my_matrix):\n    '''\n    Create a function to compute magic square.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(my_matrix):\n    '''\n    Create a function to compute magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = n * (n**2 + 1) // 2\n\n    row_sums = np.sum(my_matrix, axis=1)\n    col_sums = np.sum(my_matrix, axis=0)\n    diag_sum1 = np.trace(my_matrix)\n    diag_sum2 = np.trace(np.fliplr(my_matrix))\n\n    if all(val == magic_sum for val in row_sums) and all(val == magic_sum for val in col_sums) and diag_sum1 == magic_sum and diag_sum2 == magic_sum:\n        return True\n    else:\n        return False\n```", "response_code": "\nimport numpy as np\n\ndef func(my_matrix):\n    '''\n    Create a function to compute magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = n * (n**2 + 1) // 2\n\n    row_sums = np.sum(my_matrix, axis=1)\n    col_sums = np.sum(my_matrix, axis=0)\n    diag_sum1 = np.trace(my_matrix)\n    diag_sum2 = np.trace(np.fliplr(my_matrix))\n\n    if all(val == magic_sum for val in row_sums) and all(val == magic_sum for val in col_sums) and diag_sum1 == magic_sum and diag_sum2 == magic_sum:\n        return True\n    else:\n        return False\n"}
{"task_id": 78, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import defaultdict\ndef func(nums):\n    '''\n    Compose a function to determine the item with highest frequency in a provided list.\n    '''\n"}], "response": "from collections import defaultdict\n\ndef func(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    most_common = [key for key, value in freq.items() if value == max_freq]\n    return most_common[0]", "response_code": "from collections import defaultdict\n\ndef func(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    most_common = [key for key, value in freq.items() if value == max_freq]\n    return most_common[0]"}
{"task_id": 79, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1):\n    '''\n    Compose a python function to invert only the vowels of a provided string.\n    '''\n"}], "response": "```python\ndef func(str1):\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    i, j = 0, len(str_list) - 1\n    while i < j:\n        if str_list[i] in vowels and str_list[j] in vowels:\n            str_list[i], str_list[j] = str_list[j], str_list[i]\n            i += 1\n            j -= 1\n        elif str_list[i] not in vowels:\n            i += 1\n        elif str_list[j] not in vowels:\n            j -= 1\n    return ''.join(str_list)\n```", "response_code": "\ndef func(str1):\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    i, j = 0, len(str_list) - 1\n    while i < j:\n        if str_list[i] in vowels and str_list[j] in vowels:\n            str_list[i], str_list[j] = str_list[j], str_list[i]\n            i += 1\n            j -= 1\n        elif str_list[i] not in vowels:\n            i += 1\n        elif str_list[j] not in vowels:\n            j -= 1\n    return ''.join(str_list)\n"}
{"task_id": 80, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(tup1):\n    '''\n    Compose a function to transform tuple to a string.\n    '''\n"}], "response": "```python\ndef func(tup1):\n    return ' '.join(map(str, tup1))\n```", "response_code": "\ndef func(tup1):\n    return ' '.join(map(str, tup1))\n"}
{"task_id": 81, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a function to determine the total of the negative numbers in a provided list of numbers using a lambda function.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return sum(filter(lambda x: x < 0, nums))\n```", "response_code": "\ndef func(nums):\n    return sum(filter(lambda x: x < 0, nums))\n"}
{"task_id": 82, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Compose a function to determine the nth hexagonal number.\n    '''\n"}], "response": "```python\ndef func(n): \n    return n * (2 * n - 1)\n```", "response_code": "\ndef func(n): \n    return n * (2 * n - 1)\n"}
{"task_id": 83, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from array import array\ndef func(nums):\n    '''\n    Compose a function to determine the proportion of zeroes in an array of integers.\n    '''\n"}], "response": "from array import array\n\ndef func(nums):\n    count_zeros = nums.count(0)\n    total_elements = len(nums)\n    \n    if total_elements == 0:\n        return 0\n    else:\n        return count_zeros / total_elements", "response_code": "from array import array\n\ndef func(nums):\n    count_zeros = nums.count(0)\n    total_elements = len(nums)\n    \n    if total_elements == 0:\n        return 0\n    else:\n        return count_zeros / total_elements"}
{"task_id": 84, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a python function to verify if the provided number is able to be expressed as the sum of non-zero powers of 2 or not.\n    '''\n"}], "response": "```python\ndef func(n): \n    return n & (n - 1) == 0 and n != 0\n```", "response_code": "\ndef func(n): \n    return n & (n - 1) == 0 and n != 0\n"}
{"task_id": 85, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(r):\n    '''\n    Compose a function to determine the circumference of a circle.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(r):\n    return 2 * math.pi * r\n```", "response_code": "\nimport math\n\ndef func(r):\n    return 2 * math.pi * r\n"}
{"task_id": 86, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Compose a function to retrieve elements that appear individually in the provided tuple list.\n    '''\n"}], "response": "```python\ndef func(test_list):\n    res = []\n    for tup in test_list:\n        for ele in tup:\n            if test_list.count((ele,)) == 1:\n                res.append(ele)\n    return res\n```", "response_code": "\ndef func(test_list):\n    res = []\n    for tup in test_list:\n        for ele in tup:\n            if test_list.count((ele,)) == 1:\n                res.append(ele)\n    return res\n"}
{"task_id": 87, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Compose a function to arrange a list of elements using pancake sort.\n    '''\n"}], "response": "```python\ndef pancake_sort(arr):\n    def flip(sublist, k):\n        i = 0\n        while i < k / 2:\n            sublist[i], sublist[k-i-1] = sublist[k-i-1], sublist[i]\n            i += 1\n\n    def find_max_index(arr, n):\n        max_index = 0\n        for i in range(n):\n            if arr[i] > arr[max_index]:\n                max_index = i\n        return max_index\n\n    def pancake_sort_helper(arr, n):\n        curr_size = n\n        while curr_size > 1:\n            max_index = find_max_index(arr, curr_size)\n            if max_index != curr_size - 1:\n                flip(arr, max_index + 1)\n                flip(arr, curr_size)\n            curr_size -= 1\n\n    pancake_sort_helper(arr, len(arr))\n    return arr\n```", "response_code": "\ndef pancake_sort(arr):\n    def flip(sublist, k):\n        i = 0\n        while i < k / 2:\n            sublist[i], sublist[k-i-1] = sublist[k-i-1], sublist[i]\n            i += 1\n\n    def find_max_index(arr, n):\n        max_index = 0\n        for i in range(n):\n            if arr[i] > arr[max_index]:\n                max_index = i\n        return max_index\n\n    def pancake_sort_helper(arr, n):\n        curr_size = n\n        while curr_size > 1:\n            max_index = find_max_index(arr, curr_size)\n            if max_index != curr_size - 1:\n                flip(arr, max_index + 1)\n                flip(arr, curr_size)\n            curr_size -= 1\n\n    pancake_sort_helper(arr, len(arr))\n    return arr\n"}
{"task_id": 88, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1,list2,list3):\n    '''\n    Compose a function to tally the identical pair in three provided lists.\n    '''\n"}], "response": "```python\nfrom collections import Counter\n\ndef func(list1, list2, list3):\n    count = Counter(list1) + Counter(list2) + Counter(list3)\n    identical_pairs = sum(value // 2 for value in count.values())\n    return identical_pairs\n```", "response_code": "\nfrom collections import Counter\n\ndef func(list1, list2, list3):\n    count = Counter(list1) + Counter(list2) + Counter(list3)\n    identical_pairs = sum(value // 2 for value in count.values())\n    return identical_pairs\n"}
{"task_id": 89, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(Input): \n    '''\n    Create a function to determine the quantity of lists within the provided tuple.\n    '''\n"}], "response": "def func(Input): \n    return sum(isinstance(i, list) for i in Input)", "response_code": "def func(Input): \n    return sum(isinstance(i, list) for i in Input)"}
{"task_id": 90, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr): \n    '''\n    Create a python function to determine the largest difference between any two elements in a provided array.\n    '''\n"}], "response": "```python\ndef func(arr): \n    return max(arr) - min(arr)\n```", "response_code": "\ndef func(arr): \n    return max(arr) - min(arr)\n"}
{"task_id": 91, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a, b, n):\n    '''\n    Create a function to determine x and y that fulfills ax + by = n.\n    '''\n"}], "response": "```python\ndef func(a, b, n):\n    '''\n    Create a function to determine x and y that fulfills ax + by = n.\n    '''\n    def extended_gcd(a, b):\n        if a == 0:\n            return (b, 0, 1)\n        else:\n            g, y, x = extended_gcd(b % a, a)\n            return (g, x - (b // a) * y, y)\n\n    gcd, x, y = extended_gcd(a, b)\n    \n    if n % gcd != 0:\n        return None\n    \n    x *= n // gcd\n    y *= n // gcd\n    \n    return x, y\n```", "response_code": "\ndef func(a, b, n):\n    '''\n    Create a function to determine x and y that fulfills ax + by = n.\n    '''\n    def extended_gcd(a, b):\n        if a == 0:\n            return (b, 0, 1)\n        else:\n            g, y, x = extended_gcd(b % a, a)\n            return (g, x - (b // a) * y, y)\n\n    gcd, x, y = extended_gcd(a, b)\n    \n    if n % gcd != 0:\n        return None\n    \n    x *= n // gcd\n    y *= n // gcd\n    \n    return x, y\n"}
{"task_id": 92, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1, list2):\n    '''\n    Create a function to delete all elements from a specified list found in another list.\n    '''\n"}], "response": "```python\ndef func(list1, list2):\n    for item in list2:\n        if item in list1:\n            list1.remove(item)\n    return list1\n```", "response_code": "\ndef func(list1, list2):\n    for item in list2:\n        if item in list1:\n            list1.remove(item)\n    return list1\n"}
{"task_id": 93, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    Create a function to determine the total of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n    '''\n"}], "response": "```python\ndef func(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total\n```", "response_code": "\ndef func(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total\n"}
{"task_id": 94, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from math import tan, pi\ndef func(s, l):\n    '''\n    Compose a function to determine the area of a regular polygon.\n    '''\n"}], "response": "```python\nfrom math import tan, pi\n\ndef func(s, l):\n    '''\n    Compose a function to determine the area of a regular polygon.\n    '''\n    def area_of_regular_polygon(s, l):\n        return (0.25 * s * l**2) / tan(pi / s)\n    \n    return area_of_regular_polygon(s, l)\n```", "response_code": "\nfrom math import tan, pi\n\ndef func(s, l):\n    '''\n    Compose a function to determine the area of a regular polygon.\n    '''\n    def area_of_regular_polygon(s, l):\n        return (0.25 * s * l**2) / tan(pi / s)\n    \n    return area_of_regular_polygon(s, l)\n"}
{"task_id": 95, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math \ndef func(n): \n    '''\n    Create a python function to verify if the total of divisors is equal or not.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    total = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n    return total == n", "response_code": "import math\n\ndef func(n):\n    total = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n    return total == n"}
{"task_id": 96, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1): \n    '''\n    Compose a python function to tally characters at identical position in a provided string (lower and uppercase characters) as in english alphabet.\n    '''\n"}], "response": "```python\ndef func(str1): \n    import string\n    alphabet = string.ascii_lowercase\n    result = {char: 0 for char in alphabet}\n    \n    for char in str1:\n        if char.lower() in alphabet:\n            result[char.lower()] += 1\n    \n    return result\n```", "response_code": "\ndef func(str1): \n    import string\n    alphabet = string.ascii_lowercase\n    result = {char: 0 for char in alphabet}\n    \n    for char in str1:\n        if char.lower() in alphabet:\n            result[char.lower()] += 1\n    \n    return result\n"}
{"task_id": 97, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(A): \n    '''\n    Create a python function to calculate the pairs with xor as an even number.\n    '''\n"}], "response": "```python\ndef func(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n```", "response_code": "\ndef func(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"}
{"task_id": 98, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a python function to determine the smallest power of 2 that is greater than or equal to n.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(n): \n    return 2 ** math.ceil(math.log2(n))\n```", "response_code": "\nimport math\n\ndef func(n): \n    return 2 ** math.ceil(math.log2(n))\n"}
{"task_id": 99, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,x): \n    '''\n    Create a python function to determine the occurrence of a number in a provided array.\n    '''\n"}], "response": "```python\ndef func(a, x):\n    return a.count(x)\n```", "response_code": "\ndef func(a, x):\n    return a.count(x)\n"}
