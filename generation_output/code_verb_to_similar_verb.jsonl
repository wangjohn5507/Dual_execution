{"task_id": 0, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function to identify the matching elements from the provided two tuple lists.\n    '''\n"}], "response": "```python\ndef func(test_tup1, test_tup2):\n    return tuple(set(test_tup1) & set(test_tup2))\n```", "response_code": "\ndef func(test_tup1, test_tup2):\n    return tuple(set(test_tup1) & set(test_tup2))\n"}
{"task_id": 1, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(n):\n    '''\n    Create a python function to detect non-prime numbers.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "response_code": "import math\n\ndef func(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": 2, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq as hq\ndef func(nums,n):\n    '''\n    Create a function to determine the highest integers from a provided list of numbers using the heap queue algorithm.\n    '''\n"}], "response": "import heapq as hq\n\ndef func(nums, n):\n    return hq.nlargest(n, nums)", "response_code": "import heapq as hq\n\ndef func(nums, n):\n    return hq.nlargest(n, nums)"}
{"task_id": 3, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x): \n    '''\n    Compose a python function to verify if the two numbers vary at one bit position only or not.\n    '''\n"}], "response": "```python\ndef func(x):\n    return bin(x).count('1') == 1\n```", "response_code": "\ndef func(x):\n    return bin(x).count('1') == 1\n"}
{"task_id": 4, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Compose a function to detect all words that are a minimum of 4 characters in length in a string by utilizing regex.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)", "response_code": "import re\n\ndef func(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)"}
{"task_id": 5, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a function to calculate squares of individual elements in a list using a lambda function.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return list(map(lambda x: x**2, nums))\n```", "response_code": "\ndef func(nums):\n    return list(map(lambda x: x**2, nums))\n"}
{"task_id": 6, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str): \n    '''\n    Compose a python function to determine the minimum number of rotations needed to achieve the identical string.\n    '''\n"}], "response": "```python\ndef min_rotations_to_identical_string(s):\n    n = len(s)\n    s += s\n    for i in range(1, n+1):\n        if n % i == 0:\n            if s[:i] * (n // i) == s:\n                return i\n    return n\n\n# Example usage:\n# print(min_rotations_to_identical_string(\"abcabcabc\"))  # Output: 3\n```", "response_code": "\ndef min_rotations_to_identical_string(s):\n    n = len(s)\n    s += s\n    for i in range(1, n+1):\n        if n % i == 0:\n            if s[:i] * (n // i) == s:\n                return i\n    return n\n\n# Example usage:\n# print(min_rotations_to_identical_string(\"abcabcabc\"))  # Output: 3\n"}
{"task_id": 7, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s,ch): \n    '''\n    Create a python function to delete first and last occurrence of a specified character from the string.\n    '''\n"}], "response": "```python\ndef func(s, ch):\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    \n    if first_index != -1 and last_index != -1:\n        s = s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n    \n    return s\n```", "response_code": "\ndef func(s, ch):\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    \n    if first_index != -1 and last_index != -1:\n        s = s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n    \n    return s\n"}
{"task_id": 8, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(M):\n    '''\n    Create a function to arrange a given matrix in ascending order based on the total of its rows.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(M):\n    return M[np.argsort(np.sum(M, axis=1))]\n```", "response_code": "\nimport numpy as np\n\ndef func(M):\n    return M[np.argsort(np.sum(M, axis=1))]\n"}
{"task_id": 9, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l,b,h) : \n    '''\n    Compose a python function to determine the volume of a triangular prism.\n    '''\n"}], "response": "```python\ndef func(l, b, h):\n    return 0.5 * l * b * h\n```", "response_code": "\ndef func(l, b, h):\n    return 0.5 * l * b * h\n"}
{"task_id": 10, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Compose a function to detect sequences of lowercase letters connected with an underscore.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches", "response_code": "import re\n\ndef func(text):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches"}
{"task_id": 11, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a):\n    '''\n    Compose a function to determine the perimeter of a square.\n    '''\n"}], "response": "```python\ndef func(a):\n    return 4 * a\n```", "response_code": "\ndef func(a):\n    return 4 * a\n"}
{"task_id": 12, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "NO_OF_CHARS = 256\ndef func(string): \n    '''\n    Create a function to eliminate characters from the first string that exist in the second string.\n    '''\n"}], "response": "```python\ndef func(string): \n    NO_OF_CHARS = 256\n    count = [0] * NO_OF_CHARS\n    res = \"\"\n    \n    for i in string:\n        count[ord(i)] += 1\n    \n    for i in string:\n        if count[ord(i)] == 0:\n            res += i\n    \n    return res\n```", "response_code": "\ndef func(string): \n    NO_OF_CHARS = 256\n    count = [0] * NO_OF_CHARS\n    res = \"\"\n    \n    for i in string:\n        count[ord(i)] += 1\n    \n    for i in string:\n        if count[ord(i)] == 0:\n            res += i\n    \n    return res\n"}
{"task_id": 13, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arraynums):\n    '''\n    Create a function to determine if a provided array of integers includes any duplicate elements.\n    '''\n"}], "response": "def func(arraynums):\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True", "response_code": "def func(arraynums):\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True"}
{"task_id": 14, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x): \n    '''\n    Compose a function to verify if the provided number is woodball or not.\n    '''\n"}], "response": "```python\ndef is_woodball(x):\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False\n```", "response_code": "\ndef is_woodball(x):\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": 15, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(num):    \n    '''\n    Create a python function to verify if a provided number is one less than double its reverse.\n    '''\n"}], "response": "def func(num):\n    reverse_num = int(str(num)[::-1])\n    if num == 2 * reverse_num + 1:\n        return True\n    else:\n        return False", "response_code": "def func(num):\n    reverse_num = int(str(num)[::-1])\n    if num == 2 * reverse_num + 1:\n        return True\n    else:\n        return False"}
{"task_id": 16, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr) : \n    '''\n    Compose a python function to determine the greatest number that can be created with the provided digits.\n    '''\n"}], "response": "from itertools import permutations\n\ndef func(arr):\n    max_num = 0\n    for perm in permutations(arr):\n        num = int(''.join(map(str, perm)))\n        max_num = max(max_num, num)\n    return max_num", "response_code": "from itertools import permutations\n\ndef func(arr):\n    max_num = 0\n    for perm in permutations(arr):\n        num = int(''.join(map(str, perm)))\n        max_num = max(max_num, num)\n    return max_num"}
{"task_id": 17, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x,y): \n    '''\n    Create a python function to verify if the provided two integers possess opposite signs or not.\n    '''\n"}], "response": "def func(x, y):\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False", "response_code": "def func(x, y):\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False"}
{"task_id": 18, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function to determine the nth octagonal number.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n * (3 * n - 2)\n```", "response_code": "\ndef func(n):\n    return n * (3 * n - 2)\n"}
{"task_id": 19, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import defaultdict\ndef func(s):\n    '''\n    Create a python function to calculate the number of substrings with the sum of digits equal to their length.\n    '''\n"}], "response": "```python\nfrom collections import defaultdict\n\ndef func(s):\n    count = 0\n    prefix_sum = 0\n    sum_count = defaultdict(int)\n    sum_count[0] = 1\n\n    for digit in s:\n        prefix_sum += int(digit)\n        count += sum_count[prefix_sum - len(str(prefix_sum))]\n        sum_count[prefix_sum - len(str(prefix_sum))] += 1\n\n    return count\n```", "response_code": "\nfrom collections import defaultdict\n\ndef func(s):\n    count = 0\n    prefix_sum = 0\n    sum_count = defaultdict(int)\n    sum_count[0] = 1\n\n    for digit in s:\n        prefix_sum += int(digit)\n        count += sum_count[prefix_sum - len(str(prefix_sum))]\n        sum_count[prefix_sum - len(str(prefix_sum))] += 1\n\n    return count\n"}
{"task_id": 20, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(xs):\n    '''\n    Compose a python function to determine the smallest number in a list.\n    '''\n"}], "response": "```python\ndef func(xs):\n    return min(xs)\n```", "response_code": "\ndef func(xs):\n    return min(xs)\n"}
{"task_id": 21, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Create a function to determine the largest difference between pairs in the provided tuple list.\n    '''\n"}], "response": "def func(test_list):\n    return max(test_list) - min(test_list)", "response_code": "def func(test_list):\n    return max(test_list) - min(test_list)"}
{"task_id": 22, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(subjectmarks):\n    '''\n    Compose a function to arrange a list of tuples using lambda.\n    '''\n"}], "response": "from operator import itemgetter\n\ndef func(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])", "response_code": "from operator import itemgetter\n\ndef func(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])"}
{"task_id": 23, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(data_list):\n    '''\n    Create a function for recursively adding a list.\n    '''\n"}], "response": "```python\ndef func(data_list):\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + func(data_list[1:])\n```", "response_code": "\ndef func(data_list):\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + func(data_list[1:])\n"}
{"task_id": 24, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list):\n    '''\n    Compose a python function to tally positive numbers in a list.\n    '''\n"}], "response": "```python\ndef func(lst):\n    return len([num for num in lst if num > 0])\n```", "response_code": "\ndef func(lst):\n    return len([num for num in lst if num > 0])\n"}
{"task_id": 25, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):   \n    '''\n    Compose a function to determine the quantity of methods to divide a group of bell numbers.\n    '''\n"}], "response": "```python\nfrom math import factorial\n\ndef func(n):\n    return factorial(2*n - 1) // (factorial(n) * factorial(n-1))\n```", "response_code": "\nfrom math import factorial\n\ndef func(n):\n    return factorial(2*n - 1) // (factorial(n) * factorial(n-1))\n"}
{"task_id": 26, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(A): \n    '''\n    Create a python function to verify if the provided array is monotonic or not.\n    '''\n"}], "response": "```python\ndef is_monotonic(A):\n    return all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n```", "response_code": "\ndef is_monotonic(A):\n    return all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n"}
{"task_id": 27, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l, s):\n    '''\n    Compose a function to verify if a list includes the specified sublist or not.\n    '''\n"}], "response": "```python\ndef func(l, s):\n    '''\n    Compose a function to verify if a list includes the specified sublist or not.\n    '''\n    return any(s == l[i:i+len(s)] for i in range(len(l) - len(s) + 1)\n```", "response_code": "\ndef func(l, s):\n    '''\n    Compose a function to verify if a list includes the specified sublist or not.\n    '''\n    return any(s == l[i:i+len(s)] for i in range(len(l) - len(s) + 1)\n"}
{"task_id": 28, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(Input):\n    '''\n    Compose a function to determine if all the provided tuples possess identical lengths or not.\n    '''\n"}], "response": "def func(Input):\n    return all(len(t) == len(Input[0]) for t in Input)", "response_code": "def func(Input):\n    return all(len(t) == len(Input[0]) for t in Input)"}
{"task_id": 29, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a function to arrange a list of elements using comb sort.\n    '''\n"}], "response": "```python\ndef func(nums):\n    '''\n    Create a function to arrange a list of elements using comb sort.\n    '''\n    gap = len(nums)\n    shrink = 1.3\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / shrink))\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n```", "response_code": "\ndef func(nums):\n    '''\n    Create a function to arrange a list of elements using comb sort.\n    '''\n    gap = len(nums)\n    shrink = 1.3\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / shrink))\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n"}
{"task_id": 30, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Compose a python function to verify if the provided number can be expressed as the subtraction of two squares or not.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(n): \n    '''\n    Compose a python function to verify if the provided number can be expressed as the subtraction of two squares or not.\n    '''\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if math.isqrt(n + i*i) ** 2 == n + i*i:\n            return True\n    return False\n```", "response_code": "\nimport math\n\ndef func(n): \n    '''\n    Compose a python function to verify if the provided number can be expressed as the subtraction of two squares or not.\n    '''\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if math.isqrt(n + i*i) ** 2 == n + i*i:\n            return True\n    return False\n"}
{"task_id": 31, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(colors, patterns):    \n    '''\n    Create a function to verify if it adheres to the sequence provided in the patterns array.\n    '''\n"}], "response": "```python\ndef func(colors, patterns):\n    return all(color == pattern for color, pattern in zip(colors, patterns))\n```", "response_code": "\ndef func(colors, patterns):\n    return all(color == pattern for color, pattern in zip(colors, patterns))\n"}
{"task_id": 32, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list, K):\n    '''\n    Create a function to identify tuples that contain elements divisible by k from the provided list of tuples.\n    '''\n"}], "response": "```python\ndef func(test_list, K):\n    return [tup for tup in test_list if all(ele % K == 0 for ele in tup)]\n```", "response_code": "\ndef func(test_list, K):\n    return [tup for tup in test_list if all(ele % K == 0 for ele in tup)]\n"}
{"task_id": 33, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Compose a python function to determine the disparity between the total of even and odd digits.\n    '''\n"}], "response": "def func(n):\n    even_sum = 0\n    odd_sum = 0\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    return even_sum - odd_sum", "response_code": "def func(n):\n    even_sum = 0\n    odd_sum = 0\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    return even_sum - odd_sum"}
{"task_id": 34, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s): \n    '''\n    Compose a python function to verify if the length of the word is odd or not.\n    '''\n"}], "response": "def is_length_odd(s):\n    return len(s) % 2 != 0", "response_code": "def is_length_odd(s):\n    return len(s) % 2 != 0"}
{"task_id": 35, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Compose a function to determine the nth tetrahedral number.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n * (n + 1) * (n + 2) // 6\n```", "response_code": "\ndef func(n):\n    return n * (n + 1) * (n + 2) // 6\n"}
{"task_id": 36, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(r):\n    '''\n    Compose a function to determine the volume of a sphere.\n    '''\n"}], "response": "import math\n\ndef func(r):\n    '''\n    Compose a function to determine the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume", "response_code": "import math\n\ndef func(r):\n    '''\n    Compose a function to determine the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"}
{"task_id": 37, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(strr):  \n    '''\n    Compose a python function to determine the character created by combining all the characters of the provided string.\n    '''\n"}], "response": "```python\ndef func(strr):\n    return chr(sum(ord(char) for char in strr) % 256)\n```", "response_code": "\ndef func(strr):\n    return chr(sum(ord(char) for char in strr) % 256)\n"}
{"task_id": 38, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function to determine the n-th number in the newman conway sequence.\n    '''\n"}], "response": "```python\ndef newman_conway(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    else:\n        sequence = [0] * (n + 1)\n        sequence[1] = 1\n        sequence[2] = 1\n        for i in range(3, n + 1):\n            sequence[i] = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]]\n        return sequence[n]\n```", "response_code": "\ndef newman_conway(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    else:\n        sequence = [0] * (n + 1)\n        sequence[1] = 1\n        sequence[2] = 1\n        for i in range(3, n + 1):\n            sequence[i] = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]]\n        return sequence[n]\n"}
{"task_id": 39, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(r):\n    '''\n    Compose a function to determine the surface area of a sphere.\n    '''\n"}], "response": "import math\n\ndef func(r):\n    return 4 * math.pi * r**2", "response_code": "import math\n\ndef func(r):\n    return 4 * math.pi * r**2"}
{"task_id": 40, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    Compose a function to determine the nth centered hexagonal number.\n    '''\n"}], "response": "```python\ndef func(n):\n    return 3*n*(n-1) + 1\n```", "response_code": "\ndef func(n):\n    return 3*n*(n-1) + 1\n"}
{"task_id": 41, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import collections as ct\ndef func(dict1,dict2, dict3):\n    '''\n    Compose a function to combine three dictionaries into a single expression.\n    '''\n"}], "response": "import collections as ct\n\ndef func(dict1, dict2, dict3):\n    combined_dict = {**dict1, **dict2, **dict3}\n    return combined_dict", "response_code": "import collections as ct\n\ndef func(dict1, dict2, dict3):\n    combined_dict = {**dict1, **dict2, **dict3}\n    return combined_dict"}
{"task_id": 42, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import collections\ndef func(list1):\n    '''\n    Compose a function to obtain the frequency of the elements in a list.\n    '''\n"}], "response": "import collections\n\ndef func(list1):\n    return collections.Counter(list1)", "response_code": "import collections\n\ndef func(list1):\n    return collections.Counter(list1)"}
{"task_id": 43, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(N):\n    '''\n    Compose a function to determine the nearest lesser number to n.\n    '''\n"}], "response": "```python\ndef func(N):\n    return N - 1\n```", "response_code": "\ndef func(N):\n    return N - 1\n"}
{"task_id": 44, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Compose a python function to determine the length of the longest word.\n    '''\n"}], "response": "```python\ndef func(list1):\n    return max(len(word) for word in list1)\n```", "response_code": "\ndef func(list1):\n    return max(len(word) for word in list1)\n"}
{"task_id": 45, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1, sub_str):\n    '''\n    Compose a function to verify if a substring exists in a provided list of string values.\n    '''\n"}], "response": "```python\ndef func(str1, sub_str):\n    return sub_str in str1\n```", "response_code": "\ndef func(str1, sub_str):\n    return sub_str in str1\n"}
{"task_id": 46, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Compose a function to verify if the provided number is undulating or not.\n    '''\n"}], "response": "```python\ndef is_undulating(n):\n    str_n = str(n)\n    if len(str_n) < 3:\n        return False\n    for i in range(1, len(str_n) - 1):\n        if (str_n[i-1] < str_n[i] < str_n[i+1]) or (str_n[i-1] > str_n[i] > str_n[i+1]):\n            continue\n        else:\n            return False\n    return True\n```", "response_code": "\ndef is_undulating(n):\n    str_n = str(n)\n    if len(str_n) < 3:\n        return False\n    for i in range(1, len(str_n) - 1):\n        if (str_n[i-1] < str_n[i] < str_n[i+1]) or (str_n[i-1] > str_n[i] > str_n[i+1]):\n            continue\n        else:\n            return False\n    return True\n"}
{"task_id": 47, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,b):\n    '''\n    Compose a function to determine the result of raising 'a' to the exponent 'b'.\n    '''\n"}], "response": "```python\ndef func(a, b):\n    return a ** b\n```", "response_code": "\ndef func(a, b):\n    return a ** b\n"}
{"task_id": 48, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from operator import itemgetter \ndef func(test_list):\n    '''\n    Compose a function to retrieve the index minimum value record from the provided tuples.\n    '''\n"}], "response": "from operator import itemgetter\n\ndef func(test_list):\n    return min(enumerate(test_list), key=itemgetter(1))[0]", "response_code": "from operator import itemgetter\n\ndef func(test_list):\n    return min(enumerate(test_list), key=itemgetter(1))[0]"}
{"task_id": 49, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst):  \n    '''\n    Compose a python function to determine the smallest length of sublist.\n    '''\n"}], "response": "```python\ndef func(lst):\n    return min(len(sublist) for sublist in lst)\n```", "response_code": "\ndef func(lst):\n    return min(len(sublist) for sublist in lst)\n"}
{"task_id": 50, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    Create a python function to determine the quantity of divisors for a specified integer.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2 if n/i != i else 1\n    return count\n```", "response_code": "\nimport math\n\ndef func(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2 if n/i != i else 1\n    return count\n"}
{"task_id": 51, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Compose a function to determine the frequency count of a list of lists.\n    '''\n"}], "response": "```python\nfrom collections import Counter\n\ndef func(list1):\n    '''\n    Compose a function to determine the frequency count of a list of lists.\n    '''\n    return dict(Counter(tuple(sublist) for sublist in list1))\n```", "response_code": "\nfrom collections import Counter\n\ndef func(list1):\n    '''\n    Compose a function to determine the frequency count of a list of lists.\n    '''\n    return dict(Counter(tuple(sublist) for sublist in list1))\n"}
{"task_id": 52, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(numbers):  \n    '''\n    Create a function to calculate the product of all the numbers in a list and then divide by the number of elements in the list.\n    '''\n"}], "response": "```python\ndef func(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n```", "response_code": "\ndef func(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n"}
{"task_id": 53, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Compose a function to transform the provided decimal number into its binary equivalent.\n    '''\n"}], "response": "```python\ndef func(n):\n    return bin(n)[2:]\n```", "response_code": "\ndef func(n):\n    return bin(n)[2:]\n"}
{"task_id": 54, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import sys\ndef func(num):\n    '''\n    Compose a function to determine the subsequent smallest palindrome of a specified number.\n    '''\n"}], "response": "import sys\n\ndef func(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n\n    return num", "response_code": "import sys\n\ndef func(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n\n    return num"}
{"task_id": 55, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr, k):\n    '''\n    Create a function to locate the kth element in the provided array.\n    '''\n"}], "response": "```python\ndef func(arr, k):\n    arr.sort()\n    return arr[k-1]\n```", "response_code": "\ndef func(arr, k):\n    arr.sort()\n    return arr[k-1]\n"}
{"task_id": 56, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(word):\n    '''\n    Create a function to transform snake case string to camel case string.\n    '''\n"}], "response": "```python\ndef snake_to_camel(word):\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n\n# Example usage:\n# print(snake_to_camel('hello_world'))  # Output: 'HelloWorld'\n```", "response_code": "\ndef snake_to_camel(word):\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n\n# Example usage:\n# print(snake_to_camel('hello_world'))  # Output: 'HelloWorld'\n"}
{"task_id": 57, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n, m): \n    '''\n    Create a function to determine the eulerian number a(n, m).\n    '''\n"}], "response": "```python\nfrom math import comb\n\ndef func(n, m): \n    return comb(n, m) * (n - m + 1)\n```", "response_code": "\nfrom math import comb\n\ndef func(n, m): \n    return comb(n, m) * (n - m + 1)\n"}
{"task_id": 58, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(input_list):\n    '''\n    Create a function to arrange each sublist of strings in a provided list of lists using a lambda function.\n    '''\n"}], "response": "from typing import List\n\ndef func(input_list: List[List[str]]) -> List[List[str]]:\n    return sorted(input_list, key=lambda x: ' '.join(x))", "response_code": "from typing import List\n\ndef func(input_list: List[List[str]]) -> List[List[str]]:\n    return sorted(input_list, key=lambda x: ' '.join(x))"}
{"task_id": 59, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst):   \n    '''\n    Compose a python function to tally true booleans in the provided list.\n    '''\n"}], "response": "```python\ndef func(lst):\n    return lst.count(True)\n```", "response_code": "\ndef func(lst):\n    return lst.count(True)\n"}
{"task_id": 60, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list, test_tup):\n    '''\n    Compose a function to append the provided list to the provided tuples.\n    '''\n"}], "response": "def func(test_list, test_tup):\n    return [tup + (test_list,) for tup in test_tup]", "response_code": "def func(test_list, test_tup):\n    return [tup + (test_list,) for tup in test_tup]"}
{"task_id": 61, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq\ndef func(num1,num2,num3):\n    '''\n    Compose a function to combine multiple sorted inputs into a single sorted iterator using the heap queue algorithm.\n    '''\n"}], "response": "import heapq\n\ndef func(num1, num2, num3):\n    '''\n    Compose a function to combine multiple sorted inputs into a single sorted iterator using the heap queue algorithm.\n    '''\n    heap = []\n    for i in num1, num2, num3:\n        for j in i:\n            heapq.heappush(heap, j)\n    \n    while heap:\n        yield heapq.heappop(heap)", "response_code": "import heapq\n\ndef func(num1, num2, num3):\n    '''\n    Compose a function to combine multiple sorted inputs into a single sorted iterator using the heap queue algorithm.\n    '''\n    heap = []\n    for i in num1, num2, num3:\n        for j in i:\n            heapq.heappush(heap, j)\n    \n    while heap:\n        yield heapq.heappop(heap)"}
{"task_id": 62, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s,n): \n    '''\n    Create a python function to determine the number of rotations of a binary string with an odd value.\n    '''\n"}], "response": "```python\ndef func(s, n):\n    count = 0\n    for i in range(n):\n        if int(s, 2) % 2 == 1:\n            return count\n        s = s[-1] + s[:-1]\n        count += 1\n    return -1\n```", "response_code": "\ndef func(s, n):\n    count = 0\n    for i in range(n):\n        if int(s, 2) % 2 == 1:\n            return count\n        s = s[-1] + s[:-1]\n        count += 1\n    return -1\n"}
{"task_id": 63, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nestedlist):\n    '''\n    Create a function to identify shared elements in provided nested lists.\n    '''\n"}], "response": "```python\ndef func(nestedlist):\n    '''\n    Create a function to identify shared elements in provided nested lists.\n    '''\n    return list(set.intersection(*map(set, nestedlist)))\n```", "response_code": "\ndef func(nestedlist):\n    '''\n    Create a function to identify shared elements in provided nested lists.\n    '''\n    return list(set.intersection(*map(set, nestedlist)))\n"}
{"task_id": 64, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(text):\n    '''\n    Compose a function to verify if a string symbolizes an integer or not.\n    '''\n"}], "response": "```python\ndef func(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n```", "response_code": "\ndef func(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"}
{"task_id": 65, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function to verify if all dictionaries in a list are empty or not.\n    '''\n"}], "response": "def func(list1):\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True", "response_code": "def func(list1):\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True"}
{"task_id": 66, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Compose a function to transform a provided tuple of positive integers into an integer.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return int(''.join(map(str, nums)))\n```", "response_code": "\ndef func(nums):\n    return int(''.join(map(str, nums)))\n"}
{"task_id": 67, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Create a function to transform all potential convertible elements in the list to float.\n    '''\n"}], "response": "```python\ndef func(test_list):\n    return [float(i) if i.replace('.', '', 1).isdigit() else i for i in test_list]\n```", "response_code": "\ndef func(test_list):\n    return [float(i) if i.replace('.', '', 1).isdigit() else i for i in test_list]\n"}
{"task_id": 68, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(string): \n    '''\n    Compose a function to transform a string into a list.\n    '''\n"}], "response": "```python\ndef func(string): \n    return list(string)\n```", "response_code": "\ndef func(string): \n    return list(string)\n"}
{"task_id": 69, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):\n    '''\n    Compose a python function to detect the element that occurs singularly in a sorted array.\n    '''\n"}], "response": "from typing import List\n\ndef func(arr: List[int]) -> int:\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1 or arr[i] != arr[i + 1]:\n            return arr[i]", "response_code": "from typing import List\n\ndef func(arr: List[int]) -> int:\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1 or arr[i] != arr[i + 1]:\n            return arr[i]"}
{"task_id": 70, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function to determine the highest product from the pairs of tuples in a specified list.\n    '''\n"}], "response": "```python\nfrom itertools import combinations\n\ndef func(list1):\n    max_product = float('-inf')\n    for pair in combinations(list1, 2):\n        product = pair[0][0] * pair[1][0]\n        if product > max_product:\n            max_product = product\n    return max_product\n```", "response_code": "\nfrom itertools import combinations\n\ndef func(list1):\n    max_product = float('-inf')\n    for pair in combinations(list1, 2):\n        product = pair[0][0] * pair[1][0]\n        if product > max_product:\n            max_product = product\n    return max_product\n"}
{"task_id": 71, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(limit):\n    '''\n    Create a function to calculate the total of all amicable numbers from 1 to a specified number.\n    '''\n"}], "response": "```python\ndef func(limit):\n    def sum_divisors(n):\n        total = 0\n        for i in range(1, n):\n            if n % i == 0:\n                total += i\n        return total\n\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        sum_i = sum_divisors(i)\n        if sum_i != i and sum_divisors(sum_i) == i and i not in amicable_numbers:\n            amicable_numbers.extend([i, sum_i])\n\n    return sum(amicable_numbers)\n```", "response_code": "\ndef func(limit):\n    def sum_divisors(n):\n        total = 0\n        for i in range(1, n):\n            if n % i == 0:\n                total += i\n        return total\n\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        sum_i = sum_divisors(i)\n        if sum_i != i and sum_divisors(sum_i) == i and i not in amicable_numbers:\n            amicable_numbers.extend([i, sum_i])\n\n    return sum(amicable_numbers)\n"}
{"task_id": 72, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import cmath\ndef func(a,b):\n    '''\n    Create a function to obtain the angle of a complex number.\n    '''\n"}], "response": "import cmath\n\ndef func(a, b):\n    '''\n    Create a function to obtain the angle of a complex number.\n    '''\n    complex_num = complex(a, b)\n    angle = cmath.phase(complex_num)\n    \n    return angle", "response_code": "import cmath\n\ndef func(a, b):\n    '''\n    Create a function to obtain the angle of a complex number.\n    '''\n    complex_num = complex(a, b)\n    angle = cmath.phase(complex_num)\n    \n    return angle"}
{"task_id": 73, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(string): \n    '''\n    Create a function to determine the maximum difference between the count of 0s and count of 1s in any sub-string of the provided binary string.\n    '''\n"}], "response": "```python\ndef func(string): \n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    diff = 0\n    \n    for char in string: \n        if char == '0': \n            count_0 += 1\n        else: \n            count_1 += 1\n        \n        diff = count_0 - count_1\n        if diff > max_diff: \n            max_diff = diff\n    \n    return max_diff\n```", "response_code": "\ndef func(string): \n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    diff = 0\n    \n    for char in string: \n        if char == '0': \n            count_0 += 1\n        else: \n            count_1 += 1\n        \n        diff = count_0 - count_1\n        if diff > max_diff: \n            max_diff = diff\n    \n    return max_diff\n"}
{"task_id": 74, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,b): \n    '''\n    Create a python function to calculate the total of shared divisors of two specified numbers.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(a, b):\n    shared_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            shared_divisors.append(i)\n    return sum(shared_divisors)\n```", "response_code": "\nimport math\n\ndef func(a, b):\n    shared_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            shared_divisors.append(i)\n    return sum(shared_divisors)\n"}
{"task_id": 75, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x, y):\n    '''\n    Create a function to calculate the product of two integers without using the * operator in python.\n    '''\n"}], "response": "```python\ndef func(x, y):\n    result = 0\n    for i in range(abs(y)):\n        result += x\n    if y < 0:\n        result = -result\n    return result\n```", "response_code": "\ndef func(x, y):\n    result = 0\n    for i in range(abs(y)):\n        result += x\n    if y < 0:\n        result = -result\n    return result\n"}
{"task_id": 76, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n, str):\n    '''\n    Compose a function to filter words that exceed a length of n from a provided list of words.\n    '''\n"}], "response": "```python\ndef func(n, word_list):\n    return [word for word in word_list if len(word) <= n]\n```", "response_code": "\ndef func(n, word_list):\n    return [word for word in word_list if len(word) <= n]\n"}
{"task_id": 77, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(my_matrix):\n    '''\n    Create a function to compute magic square.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(my_matrix):\n    '''\n    Create a function to compute magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = n * (n**2 + 1) // 2\n    row_sums = np.sum(my_matrix, axis=1)\n    col_sums = np.sum(my_matrix, axis=0)\n    diag_sum1 = np.trace(my_matrix)\n    diag_sum2 = np.trace(np.fliplr(my_matrix))\n    \n    if all(val == magic_sum for val in row_sums) and all(val == magic_sum for val in col_sums) and diag_sum1 == magic_sum and diag_sum2 == magic_sum:\n        return True\n    else:\n        return False\n```", "response_code": "\nimport numpy as np\n\ndef func(my_matrix):\n    '''\n    Create a function to compute magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = n * (n**2 + 1) // 2\n    row_sums = np.sum(my_matrix, axis=1)\n    col_sums = np.sum(my_matrix, axis=0)\n    diag_sum1 = np.trace(my_matrix)\n    diag_sum2 = np.trace(np.fliplr(my_matrix))\n    \n    if all(val == magic_sum for val in row_sums) and all(val == magic_sum for val in col_sums) and diag_sum1 == magic_sum and diag_sum2 == magic_sum:\n        return True\n    else:\n        return False\n"}
{"task_id": 78, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import defaultdict\ndef func(nums):\n    '''\n    Compose a function to determine the item with highest frequency in a provided list.\n    '''\n"}], "response": "from collections import defaultdict\n\ndef func(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    most_common = [key for key, value in freq.items() if value == max_freq]\n    return most_common[0]", "response_code": "from collections import defaultdict\n\ndef func(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    most_common = [key for key, value in freq.items() if value == max_freq]\n    return most_common[0]"}
{"task_id": 79, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1):\n    '''\n    Compose a python function to invert only the vowels of a provided string.\n    '''\n"}], "response": "```python\ndef func(str1):\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    i, j = 0, len(str_list) - 1\n    while i < j:\n        if str_list[i] in vowels and str_list[j] in vowels:\n            str_list[i], str_list[j] = str_list[j], str_list[i]\n            i += 1\n            j -= 1\n        elif str_list[i] not in vowels:\n            i += 1\n        elif str_list[j] not in vowels:\n            j -= 1\n    return ''.join(str_list)\n```", "response_code": "\ndef func(str1):\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    i, j = 0, len(str_list) - 1\n    while i < j:\n        if str_list[i] in vowels and str_list[j] in vowels:\n            str_list[i], str_list[j] = str_list[j], str_list[i]\n            i += 1\n            j -= 1\n        elif str_list[i] not in vowels:\n            i += 1\n        elif str_list[j] not in vowels:\n            j -= 1\n    return ''.join(str_list)\n"}
{"task_id": 80, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(tup1):\n    '''\n    Compose a function to transform tuple to a string.\n    '''\n"}], "response": "def func(tup1):\n    return ' '.join(map(str, tup1))", "response_code": "def func(tup1):\n    return ' '.join(map(str, tup1))"}
{"task_id": 81, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a function to determine the total of the negative numbers in a provided list of numbers using a lambda function.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return sum(filter(lambda x: x < 0, nums))\n```", "response_code": "\ndef func(nums):\n    return sum(filter(lambda x: x < 0, nums))\n"}
{"task_id": 82, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Compose a function to determine the nth hexagonal number.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n * (2 * n - 1)\n```", "response_code": "\ndef func(n):\n    return n * (2 * n - 1)\n"}
{"task_id": 83, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from array import array\ndef func(nums):\n    '''\n    Compose a function to determine the proportion of zeroes in an array of integers.\n    '''\n"}], "response": "```python\nfrom array import array\n\ndef func(nums):\n    if not nums:\n        return 0\n    \n    count_zeros = nums.count(0)\n    proportion_zeros = count_zeros / len(nums)\n    \n    return proportion_zeros\n```", "response_code": "\nfrom array import array\n\ndef func(nums):\n    if not nums:\n        return 0\n    \n    count_zeros = nums.count(0)\n    proportion_zeros = count_zeros / len(nums)\n    \n    return proportion_zeros\n"}
{"task_id": 84, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a python function to verify if the provided number is able to be expressed as the sum of non-zero powers of 2 or not.\n    '''\n"}], "response": "```python\ndef func(n): \n    return n & (n - 1) == 0 and n != 0\n```", "response_code": "\ndef func(n): \n    return n & (n - 1) == 0 and n != 0\n"}
{"task_id": 85, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(r):\n    '''\n    Compose a function to determine the circumference of a circle.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(r):\n    return 2 * math.pi * r\n```", "response_code": "\nimport math\n\ndef func(r):\n    return 2 * math.pi * r\n"}
{"task_id": 86, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Compose a function to retrieve elements that appear individually in the provided tuple list.\n    '''\n"}], "response": "```python\ndef func(test_list):\n    res = []\n    for tup in test_list:\n        for ele in tup:\n            if test_list.count((ele,)) == 1:\n                res.append(ele)\n    return res\n```", "response_code": "\ndef func(test_list):\n    res = []\n    for tup in test_list:\n        for ele in tup:\n            if test_list.count((ele,)) == 1:\n                res.append(ele)\n    return res\n"}
{"task_id": 87, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Compose a function to arrange a list of elements using pancake sort.\n    '''\n"}], "response": "```python\ndef pancake_sort(arr):\n    def flip(sublist, k):\n        i = 0\n        while i < k / 2:\n            sublist[i], sublist[k-i-1] = sublist[k-i-1], sublist[i]\n            i += 1\n    \n    def find_max_index(arr, n):\n        max_index = 0\n        for i in range(n):\n            if arr[i] > arr[max_index]:\n                max_index = i\n        return max_index\n    \n    def pancake_sort_helper(arr, n):\n        curr_size = n\n        while curr_size > 1:\n            max_index = find_max_index(arr, curr_size)\n            if max_index != curr_size - 1:\n                flip(arr, max_index + 1)\n                flip(arr, curr_size)\n            curr_size -= 1\n    \n    pancake_sort_helper(arr, len(arr))\n    return arr\n```", "response_code": "\ndef pancake_sort(arr):\n    def flip(sublist, k):\n        i = 0\n        while i < k / 2:\n            sublist[i], sublist[k-i-1] = sublist[k-i-1], sublist[i]\n            i += 1\n    \n    def find_max_index(arr, n):\n        max_index = 0\n        for i in range(n):\n            if arr[i] > arr[max_index]:\n                max_index = i\n        return max_index\n    \n    def pancake_sort_helper(arr, n):\n        curr_size = n\n        while curr_size > 1:\n            max_index = find_max_index(arr, curr_size)\n            if max_index != curr_size - 1:\n                flip(arr, max_index + 1)\n                flip(arr, curr_size)\n            curr_size -= 1\n    \n    pancake_sort_helper(arr, len(arr))\n    return arr\n"}
{"task_id": 88, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1,list2,list3):\n    '''\n    Compose a function to tally the identical pair in three provided lists.\n    '''\n"}], "response": "```python\nfrom collections import Counter\n\ndef func(list1, list2, list3):\n    count = Counter(list1 + list2 + list3)\n    identical_pairs = sum(value // 2 for value in count.values())\n    return identical_pairs\n```", "response_code": "\nfrom collections import Counter\n\ndef func(list1, list2, list3):\n    count = Counter(list1 + list2 + list3)\n    identical_pairs = sum(value // 2 for value in count.values())\n    return identical_pairs\n"}
{"task_id": 89, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(Input): \n    '''\n    Create a function to determine the quantity of lists within the provided tuple.\n    '''\n"}], "response": "def func(Input): \n    return sum(isinstance(i, list) for i in Input)", "response_code": "def func(Input): \n    return sum(isinstance(i, list) for i in Input)"}
{"task_id": 90, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr): \n    '''\n    Create a python function to determine the largest difference between any two elements in a provided array.\n    '''\n"}], "response": "```python\ndef func(arr): \n    return max(arr) - min(arr)\n```", "response_code": "\ndef func(arr): \n    return max(arr) - min(arr)\n"}
{"task_id": 91, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a, b, n):\n    '''\n    Create a function to determine x and y that fulfills ax + by = n.\n    '''\n"}], "response": "```python\ndef func(a, b, n):\n    '''\n    Create a function to determine x and y that fulfills ax + by = n.\n    '''\n    def extended_gcd(a, b):\n        if a == 0:\n            return (b, 0, 1)\n        else:\n            g, y, x = extended_gcd(b % a, a)\n            return (g, x - (b // a) * y, y)\n\n    gcd, x, y = extended_gcd(a, b)\n    \n    if n % gcd != 0:\n        return None\n    \n    x *= n // gcd\n    y *= n // gcd\n    \n    return x, y\n```", "response_code": "\ndef func(a, b, n):\n    '''\n    Create a function to determine x and y that fulfills ax + by = n.\n    '''\n    def extended_gcd(a, b):\n        if a == 0:\n            return (b, 0, 1)\n        else:\n            g, y, x = extended_gcd(b % a, a)\n            return (g, x - (b // a) * y, y)\n\n    gcd, x, y = extended_gcd(a, b)\n    \n    if n % gcd != 0:\n        return None\n    \n    x *= n // gcd\n    y *= n // gcd\n    \n    return x, y\n"}
{"task_id": 92, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1, list2):\n    '''\n    Create a function to delete all elements from a specified list found in another list.\n    '''\n"}], "response": "def func(list1, list2):\n    return [x for x in list1 if x not in list2]", "response_code": "def func(list1, list2):\n    return [x for x in list1 if x not in list2]"}
{"task_id": 93, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    Create a function to determine the total of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n    '''\n"}], "response": "```python\ndef func(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total\n```", "response_code": "\ndef func(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total\n"}
{"task_id": 94, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from math import tan, pi\ndef func(s, l):\n    '''\n    Compose a function to determine the area of a regular polygon.\n    '''\n"}], "response": "```python\nfrom math import tan, pi\n\ndef func(s, l):\n    '''\n    Compose a function to determine the area of a regular polygon.\n    '''\n    def area_of_regular_polygon(s, l):\n        return (s * l**2) / (4 * tan(pi / s))\n    \n    return area_of_regular_polygon(s, l)\n```", "response_code": "\nfrom math import tan, pi\n\ndef func(s, l):\n    '''\n    Compose a function to determine the area of a regular polygon.\n    '''\n    def area_of_regular_polygon(s, l):\n        return (s * l**2) / (4 * tan(pi / s))\n    \n    return area_of_regular_polygon(s, l)\n"}
{"task_id": 95, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math \ndef func(n): \n    '''\n    Create a python function to verify if the total of divisors is equal or not.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    total = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n    return total == n", "response_code": "import math\n\ndef func(n):\n    total = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n    return total == n"}
{"task_id": 96, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1): \n    '''\n    Compose a python function to tally characters at identical position in a provided string (lower and uppercase characters) as in english alphabet.\n    '''\n"}], "response": "```python\ndef func(str1): \n    import string\n    alphabet = string.ascii_lowercase\n    result = {}\n    for char in str1:\n        if char.lower() in alphabet:\n            index = alphabet.index(char.lower())\n            if char.isupper():\n                char = char.lower()\n            if index in result:\n                result[index].append(char)\n            else:\n                result[index] = [char]\n    return result\n```", "response_code": "\ndef func(str1): \n    import string\n    alphabet = string.ascii_lowercase\n    result = {}\n    for char in str1:\n        if char.lower() in alphabet:\n            index = alphabet.index(char.lower())\n            if char.isupper():\n                char = char.lower()\n            if index in result:\n                result[index].append(char)\n            else:\n                result[index] = [char]\n    return result\n"}
{"task_id": 97, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(A): \n    '''\n    Create a python function to calculate the pairs with xor as an even number.\n    '''\n"}], "response": "```python\ndef func(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n```", "response_code": "\ndef func(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"}
{"task_id": 98, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a python function to determine the smallest power of 2 that is greater than or equal to n.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(n): \n    return 2 ** math.ceil(math.log2(n))\n```", "response_code": "\nimport math\n\ndef func(n): \n    return 2 ** math.ceil(math.log2(n))\n"}
{"task_id": 99, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,x): \n    '''\n    Create a python function to determine the occurrence of a number in a provided array.\n    '''\n"}], "response": "```python\ndef func(a, x):\n    return a.count(x)\n```", "response_code": "\ndef func(a, x):\n    return a.count(x)\n"}
{"task_id": 100, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1, m, n):                                                                                                                                                                                                \n    '''\n    Compose a function to determine the total of the numbers in a list within the boundaries of a specified range.\n    '''\n"}], "response": "```python\ndef func(list1, m, n):\n    return sum(num for num in list1 if m <= num <= n)\n```", "response_code": "\ndef func(list1, m, n):\n    return sum(num for num in list1 if m <= num <= n)\n"}
{"task_id": 101, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(a):\n    '''\n    Compose a function to determine the perimeter of a pentagon.\n    '''\n"}], "response": "import math\n\ndef func(a):\n    perimeter = 5 * a\n    return perimeter", "response_code": "import math\n\ndef func(a):\n    perimeter = 5 * a\n    return perimeter"}
{"task_id": 102, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s):\n    '''\n    Create a function to locate the presence of characters 'std' in the provided string.\n    '''\n"}], "response": "```python\ndef func(s):\n    return 'std' in s\n```", "response_code": "\ndef func(s):\n    return 'std' in s\n"}
{"task_id": 103, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tuple):\n    '''\n    Create a function to verify if all the elements in tuple possess the same data type or not.\n    '''\n"}], "response": "def func(test_tuple):\n    data_types = set([type(item) for item in test_tuple])\n    return len(data_types) == 1", "response_code": "def func(test_tuple):\n    data_types = set([type(item) for item in test_tuple])\n    return len(data_types) == 1"}
{"task_id": 104, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr, n, x):\n    '''\n    Create a function to verify the presence of a majority element in the provided sorted array.\n    '''\n"}], "response": "```python\ndef func(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2\n```", "response_code": "\ndef func(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2\n"}
{"task_id": 105, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a python function to calculate set bits of a provided number.\n    '''\n"}], "response": "def func(n): \n    return bin(n).count('1')", "response_code": "def func(n): \n    return bin(n).count('1')"}
{"task_id": 106, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str):\n    '''\n    Create a python function to eliminate the characters with odd index values of a provided string.\n    '''\n"}], "response": "def eliminate_odd_index_chars(input_str):\n    return input_str[::2]", "response_code": "def eliminate_odd_index_chars(input_str):\n    return input_str[::2]"}
{"task_id": 107, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,b,c): \n    '''\n    Create a function to determine the minimum of three numbers.\n    '''\n"}], "response": "```python\ndef func(a, b, c):\n    return min(a, b, c)\n```", "response_code": "\ndef func(a, b, c):\n    return min(a, b, c)\n"}
{"task_id": 108, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n,l,r):  \n    '''\n    Create a python function to verify if all the bits are clear in the specified range or not.\n    '''\n"}], "response": "```python\ndef func(n, l, r):\n    for i in range(l, r+1):\n        if n & (1 << i):\n            return False\n    return True\n```", "response_code": "\ndef func(n, l, r):\n    for i in range(l, r+1):\n        if n & (1 << i):\n            return False\n    return True\n"}
{"task_id": 109, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr, n):\n    '''\n    Create a function to rearrange the elements of the provided array so that all negative elements precede positive ones.\n    '''\n"}], "response": "```python\ndef func(arr, n):\n    arr.sort()\n    return arr\n```", "response_code": "\ndef func(arr, n):\n    arr.sort()\n    return arr\n"}
{"task_id": 110, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1,char):\n    '''\n    Create a function to substitute blank spaces with any character in a string.\n    '''\n"}], "response": "```python\ndef func(str1, char):\n    return str1.replace(' ', char)\n```", "response_code": "\ndef func(str1, char):\n    return str1.replace(' ', char)\n"}
{"task_id": 111, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq\ndef func(list1,n):\n    '''\n    Compose a function to retrieve the n largest items from a dataset.\n    '''\n"}], "response": "import heapq\n\ndef func(list1, n):\n    return heapq.nlargest(n, list1)", "response_code": "import heapq\n\ndef func(list1, n):\n    return heapq.nlargest(n, list1)"}
{"task_id": 112, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(r,h):\n    '''\n    Compose a function to determine the lateral surface area of a cylinder.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(r, h):\n    return 2 * math.pi * r * h\n```", "response_code": "\nimport math\n\ndef func(r, h):\n    return 2 * math.pi * r * h\n"}
{"task_id": 113, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l):\n    '''\n    Compose a function to determine the volume of a cube.\n    '''\n"}], "response": "```python\ndef func(l):\n    return l ** 3\n```", "response_code": "\ndef func(l):\n    return l ** 3\n"}
{"task_id": 114, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a python function to assign all even bits of a given number.\n    '''\n"}], "response": "```python\ndef func(n): \n    return n & 0xAAAAAAAA\n```", "response_code": "\ndef func(n): \n    return n & 0xAAAAAAAA\n"}
{"task_id": 115, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import Counter \ndef func(test_list):\n    '''\n    Create a function to verify the instances of records that happen at the same time in the provided tuples.\n    '''\n"}], "response": "from collections import Counter\n\ndef func(test_list):\n    return Counter(test_list)", "response_code": "from collections import Counter\n\ndef func(test_list):\n    return Counter(test_list)"}
{"task_id": 116, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str): \n    '''\n    Create a python function to calculate the quantity of non-empty substrings of a provided string.\n    '''\n"}], "response": "```python\ndef func(s):\n    return len(s) * (len(s) + 1) // 2 - 1\n```", "response_code": "\ndef func(s):\n    return len(s) * (len(s) + 1) // 2 - 1\n"}
{"task_id": 117, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(m,n): \n    '''\n    Create a function to determine the quantity of potential sequences of length n where each subsequent element is greater than or equal to double the previous element but less than or equal to m.\n    '''\n"}], "response": "```python\ndef func(m, n):\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, m + 1):\n        dp[1][i] = 1\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            for k in range(j // 2, j + 1):\n                dp[i][j] += dp[i - 1][k]\n    return sum(dp[n])\n\n# Example usage:\n# print(func(5, 3))\n```", "response_code": "\ndef func(m, n):\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, m + 1):\n        dp[1][i] = 1\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            for k in range(j // 2, j + 1):\n                dp[i][j] += dp[i - 1][k]\n    return sum(dp[n])\n\n# Example usage:\n# print(func(5, 3))\n"}
{"task_id": 118, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1,list2):\n    '''\n    Compose a function to substitute the final element of the list with a different list.\n    '''\n"}], "response": "```python\ndef func(list1, list2):\n    list1[-1] = list2\n    return list1\n```", "response_code": "\ndef func(list1, list2):\n    list1[-1] = list2\n    return list1\n"}
{"task_id": 119, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1):\n    '''\n    Compose a function to calculate the total characters in a string.\n    '''\n"}], "response": "```python\ndef func(str1):\n    return len(str1)\n```", "response_code": "\ndef func(str1):\n    return len(str1)\n"}
{"task_id": 120, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math  \ndef func(N): \n    '''\n    Compose a python function to determine the subsequent perfect square larger than a specified number.\n    '''\n"}], "response": "import math\n\ndef func(N):\n    return math.ceil(math.sqrt(N)) ** 2", "response_code": "import math\n\ndef func(N):\n    return math.ceil(math.sqrt(N)) ** 2"}
{"task_id": 121, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr): \n    '''\n    Create a function to determine the highest total of a bi-tonic sub-sequence for the provided array.\n    '''\n"}], "response": "```python\ndef func(arr): \n    n = len(arr)\n    lis = [0] * n\n    lds = [0] * n\n\n    for i in range(n):\n        lis[i] = arr[i]\n        lds[i] = arr[i]\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lis[i] = max(lis[i], lis[j] + arr[i])\n            if arr[n - 1 - i] > arr[n - 1 - j]:\n                lds[n - 1 - i] = max(lds[n - 1 - i], lds[n - 1 - j] + arr[n - 1 - i])\n\n    max_sum = lis[0] + lds[0] - arr[0]\n    for i in range(1, n):\n        max_sum = max(max_sum, lis[i] + lds[i] - arr[i])\n\n    return max_sum\n```", "response_code": "\ndef func(arr): \n    n = len(arr)\n    lis = [0] * n\n    lds = [0] * n\n\n    for i in range(n):\n        lis[i] = arr[i]\n        lds[i] = arr[i]\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lis[i] = max(lis[i], lis[j] + arr[i])\n            if arr[n - 1 - i] > arr[n - 1 - j]:\n                lds[n - 1 - i] = max(lds[n - 1 - i], lds[n - 1 - j] + arr[n - 1 - i])\n\n    max_sum = lis[0] + lds[0] - arr[0]\n    for i in range(1, n):\n        max_sum = max(max_sum, lis[i] + lds[i] - arr[i])\n\n    return max_sum\n"}
{"task_id": 122, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(number):\n    '''\n    Compose a function for calculating square roots using the Babylonian method.\n    '''\n"}], "response": "import math\n\ndef func(number):\n    guess = number / 2\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(new_guess - guess) < 0.0001:\n            return new_guess\n        guess = new_guess", "response_code": "import math\n\ndef func(number):\n    guess = number / 2\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(new_guess - guess) < 0.0001:\n            return new_guess\n        guess = new_guess"}
{"task_id": 123, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str): \n    '''\n    Compose a function to determine the longest palindromic subsequence in the provided string.\n    '''\n"}], "response": "```python\ndef longest_palindromic_subsequence(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]\n```", "response_code": "\ndef longest_palindromic_subsequence(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]\n"}
{"task_id": 124, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    Compose a function to determine the harmonic sum of n-1.\n    '''\n"}], "response": "```python\ndef func(n):\n    '''\n    Compose a function to determine the harmonic sum of n-1.\n    '''\n    def harmonic_sum(n):\n        if n == 1:\n            return 1\n        else:\n            return 1/n + harmonic_sum(n-1)\n    \n    return harmonic_sum(n-1)\n```", "response_code": "\ndef func(n):\n    '''\n    Compose a function to determine the harmonic sum of n-1.\n    '''\n    def harmonic_sum(n):\n        if n == 1:\n            return 1\n        else:\n            return 1/n + harmonic_sum(n-1)\n    \n    return harmonic_sum(n-1)\n"}
{"task_id": 125, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(array_nums1,array_nums2):\n    '''\n    Create a function to determine the intersection of two arrays using a lambda function.\n    '''\n"}], "response": "```python\nfrom typing import List\n\ndef func(array_nums1: List[int], array_nums2: List[int]):\n    intersection = list(filter(lambda x: x in array_nums1, array_nums2))\n    return intersection\n```", "response_code": "\nfrom typing import List\n\ndef func(array_nums1: List[int], array_nums2: List[int]):\n    intersection = list(filter(lambda x: x in array_nums1, array_nums2))\n    return intersection\n"}
{"task_id": 126, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(tup, x): \n    '''\n    Compose a python function to tally the instances of an element in a tuple.\n    '''\n"}], "response": "from collections import Counter\n\ndef func(tup, x): \n    return Counter(tup)[x]", "response_code": "from collections import Counter\n\ndef func(tup, x): \n    return Counter(tup)[x]"}
{"task_id": 127, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list,element):\n    '''\n    Create a function to add an element before each element of a list.\n    '''\n"}], "response": "def func(lst, element):\n    new_list = [element]\n    for item in lst:\n        new_list.append(item)\n        new_list.append(element)\n    return new_list", "response_code": "def func(lst, element):\n    new_list = [element]\n    for item in lst:\n        new_list.append(item)\n        new_list.append(element)\n    return new_list"}
{"task_id": 128, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import cmath  \ndef func(numbers):    \n    '''\n    Compose a python function to transform complex numbers into polar coordinates.\n    '''\n"}], "response": "import cmath\n\ndef func(numbers):\n    polar_coordinates = [cmath.polar(num) for num in numbers]\n    return polar_coordinates", "response_code": "import cmath\n\ndef func(numbers):\n    polar_coordinates = [cmath.polar(num) for num in numbers]\n    return polar_coordinates"}
{"task_id": 129, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Compose a python function to tally integers from a provided list.\n    '''\n"}], "response": "```python\nfrom collections import Counter\n\ndef func(list1):\n    return Counter(list1)\n```", "response_code": "\nfrom collections import Counter\n\ndef func(list1):\n    return Counter(list1)\n"}
{"task_id": 130, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from itertools import combinations_with_replacement \ndef func(l, n):\n    '''\n    Create a function to select a specified number of colors from three different colors and produce all the combinations with repetitions.\n    '''\n"}], "response": "from itertools import combinations_with_replacement\n\ndef func(l, n):\n    return list(combinations_with_replacement(l, n))", "response_code": "from itertools import combinations_with_replacement\n\ndef func(l, n):\n    return list(combinations_with_replacement(l, n))"}
{"task_id": 131, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    Compose a python function to calculate the quantity of prime numbers below a specified non-negative number.\n    '''\n"}], "response": "```python\ndef func(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n\n    return count\n```", "response_code": "\ndef func(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n\n    return count\n"}
{"task_id": 132, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,b):\n    '''\n    Compose a function to exchange two numbers.\n    '''\n"}], "response": "```python\ndef func(a, b):\n    '''\n    Compose a function to exchange two numbers.\n    '''\n    return b, a\n```", "response_code": "\ndef func(a, b):\n    '''\n    Compose a function to exchange two numbers.\n    '''\n    return b, a\n"}
{"task_id": 133, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function to optimize the provided two tuples.\n    '''\n"}], "response": "```python\ndef func(test_tup1, test_tup2):\n    return tuple(set(test_tup1 + test_tup2))\n```", "response_code": "\ndef func(test_tup1, test_tup2):\n    return tuple(set(test_tup1 + test_tup2))\n"}
{"task_id": 134, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function to locate the nth newman\u2013shanks\u2013williams prime number.\n    '''\n"}], "response": "```python\nfrom sympy import ntheory\n\ndef func(n): \n    return ntheory.nws_prime(n)\n```", "response_code": "\nfrom sympy import ntheory\n\ndef func(n): \n    return ntheory.nws_prime(n)\n"}
{"task_id": 135, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Compose a function to execute mathematical division operation across the provided tuples.\n    '''\n"}], "response": "```python\ndef func(test_tup1, test_tup2):\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)\n```", "response_code": "\ndef func(test_tup1, test_tup2):\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)\n"}
{"task_id": 136, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1, L):\n    '''\n    Create a function to divide a given list into two parts where the length of the first part of the list is specified.\n    '''\n"}], "response": "```python\ndef func(list1, L):\n    return list1[:L], list1[L:]\n```", "response_code": "\ndef func(list1, L):\n    return list1[:L], list1[L:]\n"}
{"task_id": 137, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(h_age):\n    '''\n    Compose a function to determine a dog's age in dog's years.\n    '''\n"}], "response": "```python\ndef func(h_age):\n    return h_age * 7\n```", "response_code": "\ndef func(h_age):\n    return h_age * 7\n"}
{"task_id": 138, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(S, step):\n    '''\n    Create a function to divide a list for every nth element.\n    '''\n"}], "response": "```python\ndef func(S, step):\n    return [S[i:i+step] for i in range(0, len(S), step)]\n```", "response_code": "\ndef func(S, step):\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"}
{"task_id": 139, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l):\n    '''\n    Compose a function to determine the lateral surface area of a cube.\n    '''\n"}], "response": "```python\ndef func(l):\n    return 4 * l * l\n```", "response_code": "\ndef func(l):\n    return 4 * l * l\n"}
{"task_id": 140, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):  \n    '''\n    Create a python function to calculate the total of squares of initial n odd natural numbers.\n    '''\n"}], "response": "```python\ndef func(n):\n    total = n**2\n    return total\n```", "response_code": "\ndef func(n):\n    total = n**2\n    return total\n"}
{"task_id": 141, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Compose a function to determine the n'th star number.\n    '''\n"}], "response": "```python\ndef func(n):\n    return 6 * n * (n - 1) + 1\n```", "response_code": "\ndef func(n):\n    return 6 * n * (n - 1) + 1\n"}
{"task_id": 142, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(k):\n    '''\n    Compose a function to determine the ascii value of a character.\n    '''\n"}], "response": "```python\ndef func(k):\n    return ord(k)\n```", "response_code": "\ndef func(k):\n    return ord(k)\n"}
{"task_id": 143, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):  \n    '''\n    Compose a python function to determine the total of even numbers at even positions.\n    '''\n"}], "response": "```python\ndef func(arr):\n    total = 0\n    for i in range(1, len(arr), 2):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n    return total\n```", "response_code": "\ndef func(arr):\n    total = 0\n    for i in range(1, len(arr), 2):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n    return total\n"}
{"task_id": 144, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a python function to calculate the total of fifth power of initial n even natural numbers.\n    '''\n"}], "response": "def func(n):\n    total = sum([i**5 for i in range(2, 2*n+1, 2)])\n    return total", "response_code": "def func(n):\n    total = sum([i**5 for i in range(2, 2*n+1, 2)])\n    return total"}
{"task_id": 145, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Create a function to execute the rear element extraction from a list of tuples records.\n    '''\n"}], "response": "```python\ndef func(test_list):\n    return [sub[-1] for sub in test_list]\n```", "response_code": "\ndef func(test_list):\n    return [sub[-1] for sub in test_list]\n"}
{"task_id": 146, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function to deduct the values of one tuple with the corresponding index of another tuple.\n    '''\n"}], "response": "def func(test_tup1, test_tup2):\n    result = tuple(x - y for x, y in zip(test_tup1, test_tup2))\n    return result", "response_code": "def func(test_tup1, test_tup2):\n    result = tuple(x - y for x, y in zip(test_tup1, test_tup2))\n    return result"}
{"task_id": 147, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math  \ndef func( n): \n    '''\n    Create a python function to calculate the total of even index binomial coefficients.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    total = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            total += math.comb(n, i)\n    return total", "response_code": "import math\n\ndef func(n):\n    total = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            total += math.comb(n, i)\n    return total"}
{"task_id": 148, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(r,h):\n    '''\n    Compose a function to determine the volume of a cylinder.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(r, h):\n    return math.pi * r**2 * h\n```", "response_code": "\nimport math\n\ndef func(r, h):\n    return math.pi * r**2 * h\n"}
{"task_id": 149, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(dict,n):\n    '''\n    Compose a function to sift through a dictionary based on values.\n    '''\n"}], "response": "```python\ndef func(dict, n):\n    result = {key: value for key, value in dict.items() if value > n}\n    return result\n```", "response_code": "\ndef func(dict, n):\n    result = {key: value for key, value in dict.items() if value > n}\n    return result\n"}
{"task_id": 150, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    Compose a function to determine the number of occurrences of the element before the entry in the provided tuple.\n    '''\n"}], "response": "```python\ndef func(test_tup):\n    def count_occurrences(test_tup):\n        count_dict = {}\n        count_list = []\n        for item in test_tup:\n            if item in count_dict:\n                count_list.append(count_dict[item])\n                count_dict[item] += 1\n            else:\n                count_list.append(0)\n                count_dict[item] = 1\n        return count_list\n\n    return count_occurrences(test_tup)\n```", "response_code": "\ndef func(test_tup):\n    def count_occurrences(test_tup):\n        count_dict = {}\n        count_list = []\n        for item in test_tup:\n            if item in count_dict:\n                count_list.append(count_dict[item])\n                count_dict[item] += 1\n            else:\n                count_list.append(0)\n                count_dict[item] = 1\n        return count_list\n\n    return count_occurrences(test_tup)\n"}
{"task_id": 151, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Compose a function to determine the nth decagonal number.\n    '''\n"}], "response": "```python\ndef func(n): \n    return n * (7 * n - 5)\n```", "response_code": "\ndef func(n): \n    return n * (7 * n - 5)\n"}
{"task_id": 152, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(dlist, item):\n    '''\n    Create a function to locate an element in the provided array using sequential search.\n    '''\n"}], "response": "```python\ndef func(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i\n    return -1\n```", "response_code": "\ndef func(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i\n    return -1\n"}
{"task_id": 153, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Create a python function to verify if the elements of a provided list are distinct or not.\n    '''\n"}], "response": "def func(test_list):\n    return len(test_list) == len(set(test_list))", "response_code": "def func(test_list):\n    return len(test_list) == len(set(test_list))"}
{"task_id": 154, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums1,nums2):\n    '''\n    Create a function to deduct two lists using map and lambda function.\n    '''\n"}], "response": "```python\ndef func(nums1, nums2):\n    result = list(map(lambda x, y: x - y, nums1, nums2))\n    return result\n```", "response_code": "\ndef func(nums1, nums2):\n    result = list(map(lambda x, y: x - y, nums1, nums2))\n    return result\n"}
{"task_id": 155, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a python function to verify if the occurrence of each digit is not more than the digit itself.\n    '''\n"}], "response": "```python\ndef func(n): \n    num_str = str(n)\n    for i in range(1, 10):\n        if num_str.count(str(i)) > i:\n            return False\n    return True\n```", "response_code": "\ndef func(n): \n    num_str = str(n)\n    for i in range(1, 10):\n        if num_str.count(str(i)) > i:\n            return False\n    return True\n"}
{"task_id": 156, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list,element):\n    '''\n    Create a function to verify if all elements of a list match a specified string.\n    '''\n"}], "response": "def func(lst, element):\n    return all(item == element for item in lst)", "response_code": "def func(lst, element):\n    return all(item == element for item in lst)"}
{"task_id": 157, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that identifies a string containing an 'a' followed by two to three 'b'.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'a(bb|bbb)'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False", "response_code": "import re\n\ndef func(text):\n    pattern = r'a(bb|bbb)'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": 158, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a, n, k): \n    '''\n    Create a function to determine the highest total of consecutive elements in the adjusted array that is created by duplicating the original array k times.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(a, n, k): \n    adjusted_array = np.tile(a, k)\n    max_sum = max([sum(adjusted_array[i:i+n]) for i in range(len(adjusted_array) - n + 1)])\n    return max_sum\n```", "response_code": "\nimport numpy as np\n\ndef func(a, n, k): \n    adjusted_array = np.tile(a, k)\n    max_sum = max([sum(adjusted_array[i:i+n]) for i in range(len(adjusted_array) - n + 1)])\n    return max_sum\n"}
{"task_id": 159, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):  \n    '''\n    Create a python function to calculate the total of squares of initial n even natural numbers.\n    '''\n"}], "response": "def func(n):\n    total = sum([i**2 for i in range(2, 2*n+1, 2)])\n    return total", "response_code": "def func(n):\n    total = sum([i**2 for i in range(2, 2*n+1, 2)])\n    return total"}
{"task_id": 160, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Compose a function to determine the list of lists with the greatest length.\n    '''\n"}], "response": "```python\ndef func(list1):\n    max_length = max(len(sublist) for sublist in list1)\n    return [sublist for sublist in list1 if len(sublist) == max_length]\n```", "response_code": "\ndef func(list1):\n    max_length = max(len(sublist) for sublist in list1)\n    return [sublist for sublist in list1 if len(sublist) == max_length]\n"}
{"task_id": 161, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n, k): \n    '''\n    Create a function to determine the quantity of ways to paint the fence so that no more than 2 neighboring posts share the same color for the specified fence with n posts and k colors.\n    '''\n"}], "response": "```python\ndef func(n, k): \n    if n == 0: \n        return 0\n    same, diff = 0, k \n    for _ in range(2, n+1): \n        same, diff = diff, (same + diff) * (k-1)\n    return same + diff\n```", "response_code": "\ndef func(n, k): \n    if n == 0: \n        return 0\n    same, diff = 0, k \n    for _ in range(2, n+1): \n        same, diff = diff, (same + diff) * (k-1)\n    return same + diff\n"}
{"task_id": 162, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n,m):  \n    '''\n    Compose a python function to determine the quotient of two numbers.\n    '''\n"}], "response": "```python\ndef func(n, m):\n    return n / m\n```", "response_code": "\ndef func(n, m):\n    return n / m\n"}
{"task_id": 163, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(w,h):\n    '''\n    Compose a function to determine the third side of a right angled triangle.\n    '''\n"}], "response": "import math\n\ndef func(w, h):\n    return math.sqrt(w**2 + h**2)", "response_code": "import math\n\ndef func(w, h):\n    return math.sqrt(w**2 + h**2)"}
{"task_id": 164, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(listval):\n    '''\n    Compose a function to determine the highest value in a provided diverse list.\n    '''\n"}], "response": "```python\ndef func(listval):\n    return max(listval)\n```", "response_code": "\ndef func(listval):\n    return max(listval)\n"}
{"task_id": 165, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(number):\n    '''\n    Compose a function to calculate the total of all divisors of a number.\n    '''\n"}], "response": "```python\ndef func(number):\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total\n```", "response_code": "\ndef func(number):\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total\n"}
{"task_id": 166, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr): \n    '''\n    Create a python function to calculate inversions in an array.\n    '''\n"}], "response": "from typing import List\n\ndef func(arr: List[int]) -> int:\n    def merge(arr, temp, left, mid, right):\n        i = left\n        j = mid\n        k = left\n        inv_count = 0\n\n        while i < mid and j < right:\n            if arr[i] <= arr[j]:\n                temp[k] = arr[i]\n                k += 1\n                i += 1\n            else:\n                temp[k] = arr[j]\n                inv_count += (mid - i)\n                k += 1\n                j += 1\n\n        while i < mid:\n            temp[k] = arr[i]\n            k += 1\n            i += 1\n\n        while j < right:\n            temp[k] = arr[j]\n            k += 1\n            j += 1\n\n        for i in range(left, right):\n            arr[i] = temp[i]\n\n        return inv_count\n\n    def merge_sort(arr, temp, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort(arr, temp, left, mid)\n            inv_count += merge_sort(arr, temp, mid, right)\n            inv_count += merge(arr, temp, left, mid, right)\n        return inv_count\n\n    n = len(arr)\n    temp = [0] * n\n    return merge_sort(arr, temp, 0, n)", "response_code": "from typing import List\n\ndef func(arr: List[int]) -> int:\n    def merge(arr, temp, left, mid, right):\n        i = left\n        j = mid\n        k = left\n        inv_count = 0\n\n        while i < mid and j < right:\n            if arr[i] <= arr[j]:\n                temp[k] = arr[i]\n                k += 1\n                i += 1\n            else:\n                temp[k] = arr[j]\n                inv_count += (mid - i)\n                k += 1\n                j += 1\n\n        while i < mid:\n            temp[k] = arr[i]\n            k += 1\n            i += 1\n\n        while j < right:\n            temp[k] = arr[j]\n            k += 1\n            j += 1\n\n        for i in range(left, right):\n            arr[i] = temp[i]\n\n        return inv_count\n\n    def merge_sort(arr, temp, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort(arr, temp, left, mid)\n            inv_count += merge_sort(arr, temp, mid, right)\n            inv_count += merge(arr, temp, left, mid, right)\n        return inv_count\n\n    n = len(arr)\n    temp = [0] * n\n    return merge_sort(arr, temp, 0, n)"}
{"task_id": 167, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Compose a function to compress a provided nested list structure.\n    '''\n"}], "response": "```python\ndef func(list1):\n    def compress(lst):\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(compress(item))\n            else:\n                result.append(item)\n        return result\n\n    return compress(list1)\n```", "response_code": "\ndef func(list1):\n    def compress(lst):\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(compress(item))\n            else:\n                result.append(item)\n        return result\n\n    return compress(list1)\n"}
{"task_id": 168, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import defaultdict\ndef func(stdata):\n    '''\n    Create a function to determine the highest total from the list of tuples.\n    '''\n"}], "response": "from collections import defaultdict\n\ndef func(stdata):\n    total_dict = defaultdict(int)\n    \n    for name, score in stdata:\n        total_dict[name] += score\n    \n    highest_total = max(total_dict.values())\n    \n    return highest_total", "response_code": "from collections import defaultdict\n\ndef func(stdata):\n    total_dict = defaultdict(int)\n    \n    for name, score in stdata:\n        total_dict[name] += score\n    \n    highest_total = max(total_dict.values())\n    \n    return highest_total"}
{"task_id": 169, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function to determine the quantity of all binary sequences of length 2n where the total of the initial n bits equals the total of the final n bits.\n    '''\n"}], "response": "```python\ndef func(n):\n    return int((1/(n+1)) * comb(2*n, n))\n\nfrom math import comb\n```", "response_code": "\ndef func(n):\n    return int((1/(n+1)) * comb(2*n, n))\n\nfrom math import comb\n"}
{"task_id": 170, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(d):\n    '''\n    Compose a function to determine the depth of a dictionary.\n    '''\n"}], "response": "```python\ndef func(d):\n    if isinstance(d, dict):\n        return 1 + (max(func(v) for v in d.values()) if d else 0)\n    return 0\n```", "response_code": "\ndef func(d):\n    if isinstance(d, dict):\n        return 1 + (max(func(v) for v in d.values()) if d else 0)\n    return 0\n"}
{"task_id": 171, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr,ranges,rotations,index) :  \n    '''\n    Compose a python function to locate element at a specified index after a certain number of rotations.\n    '''\n"}], "response": "```python\ndef func(arr, ranges, rotations, index):\n    n = len(arr)\n    for i in range(rotations):\n        left = ranges[i][0]\n        right = ranges[i][1]\n        temp = arr[left:right+1]\n        arr = arr[:left] + temp[-1:] + temp[:-1] + arr[right+1:]\n    return arr[index]\n```", "response_code": "\ndef func(arr, ranges, rotations, index):\n    n = len(arr)\n    for i in range(rotations):\n        left = ranges[i][0]\n        right = ranges[i][1]\n        temp = arr[left:right+1]\n        arr = arr[:left] + temp[-1:] + temp[:-1] + arr[right+1:]\n    return arr[index]\n"}
{"task_id": 172, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(words):\n    '''\n    Create a function to compare two words from a list of words beginning with the letter 'p'.\n    '''\n"}], "response": "import re\n\ndef func(words):\n    p_words = [word for word in words if re.match(r'^p', word)]\n    \n    if len(p_words) < 2:\n        return \"Not enough words starting with 'p' in the list.\"\n    \n    word1 = p_words[0]\n    word2 = p_words[1]\n    \n    if word1 < word2:\n        return f\"{word1} comes before {word2}.\"\n    elif word1 > word2:\n        return f\"{word2} comes before {word1}.\"\n    else:\n        return \"Both words are the same.\"", "response_code": "import re\n\ndef func(words):\n    p_words = [word for word in words if re.match(r'^p', word)]\n    \n    if len(p_words) < 2:\n        return \"Not enough words starting with 'p' in the list.\"\n    \n    word1 = p_words[0]\n    word2 = p_words[1]\n    \n    if word1 < word2:\n        return f\"{word1} comes before {word2}.\"\n    elif word1 > word2:\n        return f\"{word2} comes before {word1}.\"\n    else:\n        return \"Both words are the same.\""}
{"task_id": 173, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a, n, index, k):\n    '''\n    Create a function to determine the highest total of an ascending subsequence from the beginning up to the ith index, while also incorporating a specified kth element that comes after i, meaning k is greater than i.\n    '''\n"}], "response": "```python\ndef func(a, n, index, k):\n    dp = [0] * n\n    dp[index] = a[index]\n    for i in range(index+1, k):\n        for j in range(index, i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    return max(dp)\n```", "response_code": "\ndef func(a, n, index, k):\n    dp = [0] * n\n    dp[index] = a[index]\n    for i in range(index+1, k):\n        for j in range(index, i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    return max(dp)\n"}
{"task_id": 174, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from copy import deepcopy\ndef func(tuplex,m,n):\n    '''\n    Create a function to retrieve a colon of a tuple.\n    '''\n"}], "response": "```python\nfrom copy import deepcopy\n\ndef func(tuplex, m, n):\n    '''\n    Create a function to retrieve a colon of a tuple.\n    '''\n```", "response_code": "\nfrom copy import deepcopy\n\ndef func(tuplex, m, n):\n    '''\n    Create a function to retrieve a colon of a tuple.\n    '''\n"}
{"task_id": 175, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums1, nums2, N):\n    '''\n    Compose a function to determine the designated quantity of highest products from two provided lists.\n    '''\n"}], "response": "```python\nimport itertools\n\ndef func(nums1, nums2, N):\n    products = [a*b for a, b in itertools.product(nums1, nums2)]\n    products.sort(reverse=True)\n    return products[:N]\n```", "response_code": "\nimport itertools\n\ndef func(nums1, nums2, N):\n    products = [a*b for a, b in itertools.product(nums1, nums2)]\n    products.sort(reverse=True)\n    return products[:N]\n"}
{"task_id": 176, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,b):   \n    '''\n    Create a python function to determine the highest of two numbers.\n    '''\n"}], "response": "```python\ndef func(a, b):\n    return max(a, b)\n```", "response_code": "\ndef func(a, b):\n    return max(a, b)\n"}
{"task_id": 177, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1):\n    '''\n    Compose a function to transform a provided string into a tuple.\n    '''\n"}], "response": "```python\ndef func(str1):\n    return tuple(str1)\n```", "response_code": "\ndef func(str1):\n    return tuple(str1)\n"}
{"task_id": 178, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a python function to establish the leftmost unassigned bit.\n    '''\n"}], "response": "```python\ndef func(n): \n    return 1 << (n.bit_length() - 1)\n```", "response_code": "\ndef func(n): \n    return 1 << (n.bit_length() - 1)\n"}
{"task_id": 179, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(r,h):\n    '''\n    Compose a function to determine the volume of a cone.\n    '''\n"}], "response": "import math\n\ndef func(r, h):\n    volume = (1/3) * math.pi * r**2 * h\n    return volume", "response_code": "import math\n\ndef func(r, h):\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"}
{"task_id": 180, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Compose a python function to determine the greatest power of 2 that is lower than or equal to n.\n    '''\n"}], "response": "```python\ndef greatest_power_of_2(n):\n    power = 0\n    while 2**power <= n:\n        power += 1\n    return 2**(power-1)\n```", "response_code": "\ndef greatest_power_of_2(n):\n    power = 0\n    while 2**power <= n:\n        power += 1\n    return 2**(power-1)\n"}
{"task_id": 181, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Compose a function to determine the n'th lucas number.\n    '''\n"}], "response": "```python\ndef func(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return func(n-1) + func(n-2)\n```", "response_code": "\ndef func(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return func(n-1) + func(n-2)\n"}
{"task_id": 182, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list_, string):\n    '''\n    Create a function to add a specified string at the start of all elements in a list.\n    '''\n"}], "response": "def func(list_, string):\n    return [string + element for element in list_]", "response_code": "def func(list_, string):\n    return [string + element for element in list_]"}
{"task_id": 183, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l1, l2, l3):\n    '''\n    Compose a function to transform multiple lists into a nested dictionary.\n    '''\n"}], "response": "```python\ndef func(l1, l2, l3):\n    '''\n    Compose a function to transform multiple lists into a nested dictionary.\n    '''\n    result = {}\n    for key, value in zip(l1, l2):\n        result[key] = value\n    temp = result\n    for key in reversed(l3):\n        temp = {key: temp}\n    return temp\n```", "response_code": "\ndef func(l1, l2, l3):\n    '''\n    Compose a function to transform multiple lists into a nested dictionary.\n    '''\n    result = {}\n    for key, value in zip(l1, l2):\n        result[key] = value\n    temp = result\n    for key in reversed(l3):\n        temp = {key: temp}\n    return temp\n"}
{"task_id": 184, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    Create a function to determine the highest sum achievable by utilizing the provided equation f(n) = maximum( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n"}], "response": "```python\ndef func(n):\n    if n <= 1:\n        return n\n    \n    return max(func(n//2) + func(n//3) + func(n//4) + func(n//5), n)\n```", "response_code": "\ndef func(n):\n    if n <= 1:\n        return n\n    \n    return max(func(n//2) + func(n//3) + func(n//4) + func(n//5), n)\n"}
{"task_id": 185, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(input_list):\n    '''\n    Create a function to determine the list with the longest length using a lambda function.\n    '''\n"}], "response": "```python\ndef func(input_list):\n    return max(input_list, key=lambda x: len(x))\n```", "response_code": "\ndef func(input_list):\n    return max(input_list, key=lambda x: len(x))\n"}
{"task_id": 186, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    Create a function to verify if the provided tuple is unique or not.\n    '''\n"}], "response": "def func(test_tup):\n    '''\n    Create a function to verify if the provided tuple is unique or not.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False", "response_code": "def func(test_tup):\n    '''\n    Create a function to verify if the provided tuple is unique or not.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False"}
{"task_id": 187, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1):\n    '''\n    Compose a python function to locate the initial non-duplicated character in a provided string.\n    '''\n"}], "response": "```python\ndef func(str1):\n    for char in str1:\n        if str1.count(char) == 1:\n            return char\n    return None\n```", "response_code": "\ndef func(str1):\n    for char in str1:\n        if str1.count(char) == 1:\n            return char\n    return None\n"}
{"task_id": 188, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef func(string): \n    '''\n    Create a function to verify if the provided string begins and concludes with the same character or not using regex.\n    '''\n"}], "response": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef func(string): \n    '''\n    Create a function to verify if the provided string begins and concludes with the same character or not using regex.\n    '''\n    return re.match(regex, string) is not None", "response_code": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef func(string): \n    '''\n    Create a function to verify if the provided string begins and concludes with the same character or not using regex.\n    '''\n    return re.match(regex, string) is not None"}
{"task_id": 189, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,b,c):\n    '''\n    Compose a function to determine the median of three specific numbers.\n    '''\n"}], "response": "```python\ndef func(a, b, c):\n    return sorted([a, b, c])[1]\n```", "response_code": "\ndef func(a, b, c):\n    return sorted([a, b, c])[1]\n"}
{"task_id": 190, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Compose a function to calculate the total of digits of each number in a provided list.\n    '''\n"}], "response": "```python\ndef func(nums):\n    total_digits = 0\n    for num in nums:\n        total_digits += sum(int(digit) for digit in str(num) if digit.isdigit())\n    return total_digits\n```", "response_code": "\ndef func(nums):\n    total_digits = 0\n    for num in nums:\n        total_digits += sum(int(digit) for digit in str(num) if digit.isdigit())\n    return total_digits\n"}
{"task_id": 191, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function to execute the mathematical bitwise xor operation on the provided tuples.\n    '''\n"}], "response": "def func(test_tup1, test_tup2):\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))", "response_code": "def func(test_tup1, test_tup2):\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))"}
{"task_id": 192, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Compose a function to retrieve the occurrence of distinct tuples in the provided list sequence regardless.\n    '''\n"}], "response": "from collections import Counter\n\ndef func(test_list):\n    return dict(Counter(test_list))", "response_code": "from collections import Counter\n\ndef func(test_list):\n    return dict(Counter(test_list))"}
{"task_id": 193, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function to execute index wise addition of tuple elements in the provided two nested tuples.\n    '''\n"}], "response": "def func(test_tup1, test_tup2):\n    result = tuple(x + y for x, y in zip(test_tup1, test_tup2))\n    return result", "response_code": "def func(test_tup1, test_tup2):\n    result = tuple(x + y for x, y in zip(test_tup1, test_tup2))\n    return result"}
{"task_id": 194, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a,b):   \n    '''\n    Compose a python function to determine the minimum of two numbers.\n    '''\n"}], "response": "```python\ndef func(a, b):\n    return min(a, b)\n```", "response_code": "\ndef func(a, b):\n    return min(a, b)\n"}
{"task_id": 195, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(tuplex,tuple1): \n    '''\n    Compose a function to verify if an element is present within a tuple.\n    '''\n"}], "response": "def func(tuplex, tuple1):\n    if tuplex in tuple1:\n        return True\n    else:\n        return False", "response_code": "def func(tuplex, tuple1):\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"}
{"task_id": 196, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x): \n    '''\n    Compose a python function to determine the parity of a provided number.\n    '''\n"}], "response": "def func(x):\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"", "response_code": "def func(x):\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""}
{"task_id": 197, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    Compose a function to generate the next larger number by rearranging the digits of a provided number.\n    '''\n"}], "response": "```python\nfrom itertools import permutations\n\ndef func(n):\n    num_str = str(n)\n    perms = sorted(int(''.join(perm)) for perm in permutations(num_str))\n    next_larger = next((x for x in perms if x > n), None)\n    return next_larger\n```", "response_code": "\nfrom itertools import permutations\n\ndef func(n):\n    num_str = str(n)\n    perms = sorted(int(''.join(perm)) for perm in permutations(num_str))\n    next_larger = next((x for x in perms if x > n), None)\n    return next_larger\n"}
{"task_id": 198, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq\ndef func(nums1, nums2, k):\n    '''\n    Compose a function to determine k number of pairs which include one element from the first array and one element from the second array.\n    '''\n"}], "response": "import heapq\n\ndef func(nums1, nums2, k):\n    min_heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (num1 + num2, num1, num2))\n            else:\n                if num1 + num2 < min_heap[0][0]:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap, (num1 + num2, num1, num2))\n                else:\n                    break\n    return [(pair[1], pair[2]) for pair in min_heap]", "response_code": "import heapq\n\ndef func(nums1, nums2, k):\n    min_heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (num1 + num2, num1, num2))\n            else:\n                if num1 + num2 < min_heap[0][0]:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap, (num1 + num2, num1, num2))\n                else:\n                    break\n    return [(pair[1], pair[2]) for pair in min_heap]"}
{"task_id": 199, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function to determine the smallest product from the pairs of tuples in a provided list.\n    '''\n"}], "response": "```python\ndef func(list1):\n    min_product = float('inf')\n    for pair in list1:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n    return min_product\n```", "response_code": "\ndef func(list1):\n    min_product = float('inf')\n    for pair in list1:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n    return min_product\n"}
{"task_id": 200, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(listval):\n    '''\n    Compose a function to determine the smallest value in a provided diverse list.\n    '''\n"}], "response": "```python\ndef func(listval):\n    return min(listval)\n```", "response_code": "\ndef func(listval):\n    return min(listval)\n"}
{"task_id": 201, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(word):\n    '''\n    Create a function to transform the provided snake case string into camel case string using regex.\n    '''\n"}], "response": "import re\n\ndef func(word):\n    return re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)", "response_code": "import re\n\ndef func(word):\n    return re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)"}
{"task_id": 202, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l):\n    '''\n    Create a python function to eliminate odd numbers from a provided list.\n    '''\n"}], "response": "```python\ndef func(l):\n    return [x for x in l if x % 2 == 0]\n```", "response_code": "\ndef func(l):\n    return [x for x in l if x % 2 == 0]\n"}
{"task_id": 203, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1, n):\n    '''\n    Compose a function to retrieve the nth element from a provided list of tuples.\n    '''\n"}], "response": "```python\ndef func(list1, n):\n    return [item[n] for item in list1]\n```", "response_code": "\ndef func(list1, n):\n    return [item[n] for item in list1]\n"}
{"task_id": 204, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1,list2):  \n    '''\n    Create a python function to verify if the value is present in a sequence or not.\n    '''\n"}], "response": "```python\ndef func(list1, list2):\n    '''\n    Create a python function to verify if the value is present in a sequence or not.\n    '''\n    for val in list1:\n        if val in list2:\n            print(f\"{val} is present in the sequence.\")\n        else:\n            print(f\"{val} is not present in the sequence.\")\n\n# Example usage:\n# list1 = [1, 2, 3]\n# list2 = [2, 4, 6]\n# func(list1, list2)\n```", "response_code": "\ndef func(list1, list2):\n    '''\n    Create a python function to verify if the value is present in a sequence or not.\n    '''\n    for val in list1:\n        if val in list2:\n            print(f\"{val} is present in the sequence.\")\n        else:\n            print(f\"{val} is not present in the sequence.\")\n\n# Example usage:\n# list1 = [1, 2, 3]\n# list2 = [2, 4, 6]\n# func(list1, list2)\n"}
{"task_id": 205, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr): \n    '''\n    Create a python function to determine a pair with the greatest product from a provided array of integers.\n    '''\n"}], "response": "```python\ndef func(arr): \n    arr.sort()\n    return arr[-1] * arr[-2]\n```", "response_code": "\ndef func(arr): \n    arr.sort()\n    return arr[-1] * arr[-2]\n"}
{"task_id": 206, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(Input): \n    '''\n    Create a function to determine the shared initial element in a provided list of tuples.\n    '''\n"}], "response": "```python\ndef func(Input): \n    '''\n    Create a function to determine the shared initial element in a provided list of tuples.\n    '''\n    if not Input:\n        return None\n    first_tuple = Input[0]\n    for tup in Input[1:]:\n        if len(first_tuple) == 0 or len(tup) == 0:\n            return None\n        if first_tuple[0] != tup[0]:\n            return None\n    return first_tuple[0]\n```", "response_code": "\ndef func(Input): \n    '''\n    Create a function to determine the shared initial element in a provided list of tuples.\n    '''\n    if not Input:\n        return None\n    first_tuple = Input[0]\n    for tup in Input[1:]:\n        if len(first_tuple) == 0 or len(tup) == 0:\n            return None\n        if first_tuple[0] != tup[0]:\n            return None\n    return first_tuple[0]\n"}
{"task_id": 207, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst): \n    '''\n    Create a python function to determine the sublist with the longest length.\n    '''\n"}], "response": "```python\ndef func(lst): \n    return max(lst, key=len)\n```", "response_code": "\ndef func(lst): \n    return max(lst, key=len)\n"}
{"task_id": 208, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function to round each number in a provided list of numbers and display the total sum multiplied by the number of elements in the list.\n    '''\n"}], "response": "```python\ndef func(list1):\n    total_sum = sum([round(num) for num in list1])\n    return total_sum * len(list1)\n```", "response_code": "\ndef func(list1):\n    total_sum = sum([round(num) for num in list1])\n    return total_sum * len(list1)\n"}
{"task_id": 209, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a python function to calculate the sum of cubes of the initial n even natural numbers.\n    '''\n"}], "response": "```python\ndef func(n):\n    return sum([i**3 for i in range(2, 2*n+1, 2)])\n```", "response_code": "\ndef func(n):\n    return sum([i**3 for i in range(2, 2*n+1, 2)])\n"}
{"task_id": 210, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    Compose a function to combine each element of tuple with the delimiter.\n    '''\n"}], "response": "```python\ndef func(test_tup):\n    return '-'.join(test_tup)\n```", "response_code": "\ndef func(test_tup):\n    return '-'.join(test_tup)\n"}
{"task_id": 211, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):  \n    '''\n    Compose a python function to determine the mean of cubes of initial n natural numbers.\n    '''\n"}], "response": "```python\ndef func(n):\n    return ((n*(n+1))/2)**2 / (n*(n+1)/2)\n```", "response_code": "\ndef func(n):\n    return ((n*(n+1))/2)**2 / (n*(n+1)/2)\n"}
{"task_id": 212, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tuple):\n    '''\n    Compose a function to retrieve only the last index element of each string in the provided tuple.\n    '''\n"}], "response": "```python\ndef func(test_tuple):\n    return tuple(s[-1] for s in test_tuple)\n```", "response_code": "\ndef func(test_tuple):\n    return tuple(s[-1] for s in test_tuple)\n"}
{"task_id": 213, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1, x): \n    '''\n    Compose a function to tally the quantity of sublists including a specific element.\n    '''\n"}], "response": "```python\nfrom collections import Counter\n\ndef func(list1, x): \n    return Counter([1 for sublist in list1 if x in sublist]).sum()\n```", "response_code": "\nfrom collections import Counter\n\ndef func(list1, x): \n    return Counter([1 for sublist in list1 if x in sublist]).sum()\n"}
{"task_id": 214, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a function to sort odd numbers using lambda function.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return sorted(nums, key=lambda x: x if x % 2 != 0 else float('inf'))\n```", "response_code": "\ndef func(nums):\n    return sorted(nums, key=lambda x: x if x % 2 != 0 else float('inf'))\n"}
{"task_id": 215, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(dt):\n    '''\n    Create a function to transform a date from yyyy-mm-dd format to dd-mm-yyyy format using regex.\n    '''\n"}], "response": "import re\n\ndef func(dt):\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)", "response_code": "import re\n\ndef func(dt):\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)"}
{"task_id": 216, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(my_list):\n    '''\n    Compose a function to arrange the provided array by employing shell sort.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(my_list):\n    '''\n    Compose a function to arrange the provided array by employing shell sort.\n    '''\n    def shell_sort(arr):\n        n = len(arr)\n        gap = n // 2\n        while gap > 0:\n            for i in range(gap, n):\n                temp = arr[i]\n                j = i\n                while j >= gap and arr[j - gap] > temp:\n                    arr[j] = arr[j - gap]\n                    j -= gap\n                arr[j] = temp\n            gap //= 2\n        return arr\n\n    return shell_sort(my_list)\n```", "response_code": "\nimport numpy as np\n\ndef func(my_list):\n    '''\n    Compose a function to arrange the provided array by employing shell sort.\n    '''\n    def shell_sort(arr):\n        n = len(arr)\n        gap = n // 2\n        while gap > 0:\n            for i in range(gap, n):\n                temp = arr[i]\n                j = i\n                while j >= gap and arr[j - gap] > temp:\n                    arr[j] = arr[j - gap]\n                    j -= gap\n                arr[j] = temp\n            gap //= 2\n        return arr\n\n    return shell_sort(my_list)\n"}
{"task_id": 217, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Compose a function to retrieve the elementwise and tuples from the provided two tuples.\n    '''\n"}], "response": "def func(test_tup1, test_tup2):\n    return tuple(map(lambda x, y: (x, y), test_tup1, test_tup2))", "response_code": "def func(test_tup1, test_tup2):\n    return tuple(map(lambda x, y: (x, y), test_tup1, test_tup2))"}
{"task_id": 218, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a, b, c): \n    '''\n    Compose a function to determine the directrix of a parabola.\n    '''\n"}], "response": "```python\ndef func(a, b, c): \n    '''\n    Compose a function to determine the directrix of a parabola.\n    '''\n    return -c / (2 * a)\n```", "response_code": "\ndef func(a, b, c): \n    '''\n    Compose a function to determine the directrix of a parabola.\n    '''\n    return -c / (2 * a)\n"}
{"task_id": 219, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1, list2):\n    '''\n    Create a function that accepts two lists and outputs true if they share at least one common element.\n    '''\n"}], "response": "def func(list1, list2):\n    return any(item in list1 for item in list2)", "response_code": "def func(list1, list2):\n    return any(item in list1 for item in list2)"}
{"task_id": 220, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(base1,base2,height):\n    '''\n    Compose a function to determine the median of a trapezium.\n    '''\n"}], "response": "```python\ndef func(base1, base2, height):\n    return (base1 + base2) / 2 * height\n```", "response_code": "\ndef func(base1, base2, height):\n    return (base1 + base2) / 2 * height\n"}
{"task_id": 221, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr, number):\n    '''\n    Compose a function to verify if the inputted number exceeds the elements of the provided array.\n    '''\n"}], "response": "def func(arr, number):\n    return all(num <= number for num in arr)", "response_code": "def func(arr, number):\n    return all(num <= number for num in arr)"}
{"task_id": 222, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that identifies a string containing an a followed by one or more b's.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'ab+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False", "response_code": "import re\n\ndef func(text):\n    pattern = r'ab+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": 223, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n) :\n    '''\n    Compose a python function to determine the final digit of a provided number.\n    '''\n"}], "response": "def func(n):\n    return n % 10", "response_code": "def func(n):\n    return n % 10"}
{"task_id": 224, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a python function to display negative numbers in a list.\n    '''\n"}], "response": "```python\ndef func(list1):\n    for num in list1:\n        if num < 0:\n            print(num)\n```", "response_code": "\ndef func(list1):\n    for num in list1:\n        if num < 0:\n            print(num)\n"}
{"task_id": 225, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1):\n    '''\n    Create a function to eliminate odd characters in a string.\n    '''\n"}], "response": "def func(str1):\n    return str1[::2]", "response_code": "def func(str1):\n    return str1[::2]"}
{"task_id": 226, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Create a function to calculate bidirectional tuple pairs.\n    '''\n"}], "response": "```python\ndef func(test_list):\n    return [(test_list[i], test_list[-i-1]) for i in range(len(test_list)//2)]\n```", "response_code": "\ndef func(test_list):\n    return [(test_list[i], test_list[-i-1]) for i in range(len(test_list)//2)]\n"}
{"task_id": 227, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(L):\n    '''\n    Compose a function to transform a list of multiple integers into a single integer.\n    '''\n"}], "response": "```python\ndef func(L):\n    return int(''.join(map(str, L)))\n```", "response_code": "\ndef func(L):\n    return int(''.join(map(str, L)))\n"}
{"task_id": 228, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Compose a function to locate all adverbs and their positions in a provided sentence.\n    '''\n"}], "response": "import re\n\ndef find_adverbs(text):\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    positions = [m.start() for m in re.finditer(r'\\b\\w+ly\\b', text)]\n    return list(zip(adverbs, positions))", "response_code": "import re\n\ndef find_adverbs(text):\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    positions = [m.start() for m in re.finditer(r'\\b\\w+ly\\b', text)]\n    return list(zip(adverbs, positions))"}
{"task_id": 229, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l):\n    '''\n    Compose a function to determine the surface area of a cube.\n    '''\n"}], "response": "def surface_area_of_cube(side_length):\n    return 6 * side_length ** 2", "response_code": "def surface_area_of_cube(side_length):\n    return 6 * side_length ** 2"}
{"task_id": 230, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from array import array\ndef func(nums):\n    '''\n    Compose a function to determine the proportion of positive numbers in an array of integers.\n    '''\n"}], "response": "```python\nfrom array import array\n\ndef func(nums):\n    if not nums:\n        return 0\n    \n    count_positive = sum(1 for num in nums if num > 0)\n    proportion_positive = count_positive / len(nums)\n    \n    return proportion_positive\n```", "response_code": "\nfrom array import array\n\ndef func(nums):\n    if not nums:\n        return 0\n    \n    count_positive = sum(1 for num in nums if num > 0)\n    proportion_positive = count_positive / len(nums)\n    \n    return proportion_positive\n"}
{"task_id": 231, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1): \n    '''\n    Compose a python function to determine the greatest negative number from the provided list.\n    '''\n"}], "response": "```python\ndef func(list1): \n    return max(filter(lambda x: x < 0, list1), default=None)\n```", "response_code": "\ndef func(list1): \n    return max(filter(lambda x: x < 0, list1), default=None)\n"}
{"task_id": 232, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list, K):\n    '''\n    Create a function to shorten each tuple by k in the provided tuple list.\n    '''\n"}], "response": "```python\ndef func(test_list, K):\n    return [(sub[:K] if len(sub) >= K else sub) for sub in test_list]\n```", "response_code": "\ndef func(test_list, K):\n    return [(sub[:K] if len(sub) >= K else sub) for sub in test_list]\n"}
{"task_id": 233, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function to execute index wise multiplication of tuple elements in the provided two tuples.\n    '''\n"}], "response": "def func(test_tup1, test_tup2):\n    result = tuple(x * y for x, y in zip(test_tup1, test_tup2))\n    return result", "response_code": "def func(test_tup1, test_tup2):\n    result = tuple(x * y for x, y in zip(test_tup1, test_tup2))\n    return result"}
{"task_id": 234, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import Counter \ndef func(tup, lst): \n    '''\n    Create a python function to tally the presence of all elements of list in a tuple.\n    '''\n"}], "response": "from collections import Counter\n\ndef func(tup, lst):\n    return Counter(tup) - Counter(lst)", "response_code": "from collections import Counter\n\ndef func(tup, lst):\n    return Counter(tup) - Counter(lst)"}
{"task_id": 235, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a function to calculate cubes of individual elements in a list using lambda function.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return list(map(lambda x: x**3, nums))\n```", "response_code": "\ndef func(nums):\n    return list(map(lambda x: x**3, nums))\n"}
{"task_id": 236, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Compose a function to determine the total of perrin numbers.\n    '''\n"}], "response": "```python\ndef func(n):\n    perrin = [3, 0, 2]\n    total = sum(perrin[:n])\n    return total\n```", "response_code": "\ndef func(n):\n    perrin = [3, 0, 2]\n    total = sum(perrin[:n])\n    return total\n"}
{"task_id": 237, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str, l):\n    '''\n    Compose a function to retrieve specified size of strings from a provided list of string values.\n    '''\n"}], "response": "def func(str_list, size):\n    return [s[:size] for s in str_list]", "response_code": "def func(str_list, size):\n    return [s[:size] for s in str_list]"}
{"task_id": 238, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text1):\n    '''\n    Create a function to eliminate all whitespaces from the provided string using regex.\n    '''\n"}], "response": "import re\n\ndef func(text1):\n    return re.sub(r'\\s+', '', text1)", "response_code": "import re\n\ndef func(text1):\n    return re.sub(r'\\s+', '', text1)"}
{"task_id": 239, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(actual_cost,sale_amount): \n    '''\n    Create a function that calculates the loss amount if the provided amount incurs a loss, otherwise return null.\n    '''\n"}], "response": "```python\ndef func(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return None\n```", "response_code": "\ndef func(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return None\n"}
{"task_id": 240, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math \ndef func(n) : \n    '''\n    Compose a python function to determine the total of even factors of a number.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    total = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                total += i\n            if i != n // i and (n // i) % 2 == 0:\n                total += n // i\n    return total", "response_code": "import math\n\ndef func(n):\n    total = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                total += i\n            if i != n // i and (n // i) % 2 == 0:\n                total += n // i\n    return total"}
{"task_id": 241, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that identifies a word containing 'z'.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    words_with_z = re.findall(pattern, text)\n    return words_with_z", "response_code": "import re\n\ndef func(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    words_with_z = re.findall(pattern, text)\n    return words_with_z"}
{"task_id": 242, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(monthnum2):\n    '''\n    Create a function to determine if the provided month number includes 31 days or not.\n    '''\n"}], "response": "```python\ndef func(monthnum2):\n    thirty_one_days = [1, 3, 5, 7, 8, 10, 12]\n    if monthnum2 in thirty_one_days:\n        return True\n    else:\n        return False\n```", "response_code": "\ndef func(monthnum2):\n    thirty_one_days = [1, 3, 5, 7, 8, 10, 12]\n    if monthnum2 in thirty_one_days:\n        return True\n    else:\n        return False\n"}
{"task_id": 243, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(stringlist):\n    '''\n    Compose a function to invert strings in a provided list of string values.\n    '''\n"}], "response": "```python\ndef func(stringlist):\n    return [string[::-1] for string in stringlist]\n```", "response_code": "\ndef func(stringlist):\n    return [string[::-1] for string in stringlist]\n"}
{"task_id": 244, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst): \n    '''\n    Compose a python function to determine the sublist with the shortest length.\n    '''\n"}], "response": "```python\ndef func(lst): \n    return min(lst, key=len)\n```", "response_code": "\ndef func(lst): \n    return min(lst, key=len)\n"}
{"task_id": 245, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l,b):\n    '''\n    Compose a function to determine the area of a rectangle.\n    '''\n"}], "response": "```python\ndef func(l, b):\n    return l * b\n```", "response_code": "\ndef func(l, b):\n    return l * b\n"}
{"task_id": 246, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(str1):\n    '''\n    Create a function to eliminate uppercase substrings from a provided string using regex.\n    '''\n"}], "response": "import re\n\ndef func(str1):\n    return re.sub(r'[A-Z]+', '', str1)", "response_code": "import re\n\ndef func(str1):\n    return re.sub(r'[A-Z]+', '', str1)"}
{"task_id": 247, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst): \n    '''\n    Compose a python function to retrieve the initial element of every sublist.\n    '''\n"}], "response": "```python\ndef func(lst): \n    return [sublist[0] for sublist in lst]\n```", "response_code": "\ndef func(lst): \n    return [sublist[0] for sublist in lst]\n"}
{"task_id": 248, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str):\n    '''\n    Compose a python function to tally the uppercase characters in a provided string.\n    '''\n"}], "response": "```python\ndef tally_uppercase_chars(s):\n    return sum(1 for char in s if char.isupper())\n```", "response_code": "\ndef tally_uppercase_chars(s):\n    return sum(1 for char in s if char.isupper())\n"}
{"task_id": 249, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Compose a function to determine all potential permutations of the elements of a provided list.\n    '''\n"}], "response": "```python\nfrom itertools import permutations\n\ndef func(list1):\n    return list(permutations(list1))\n```", "response_code": "\nfrom itertools import permutations\n\ndef func(list1):\n    return list(permutations(list1))\n"}
{"task_id": 250, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):\n    '''\n    Create a function to determine the highest product subarray of the provided array.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(arr):\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_ending_here, min_ending_here = min_ending_here, max_ending_here\n\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n```", "response_code": "\nimport numpy as np\n\ndef func(arr):\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_ending_here, min_ending_here = min_ending_here, max_ending_here\n\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n"}
{"task_id": 251, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(dict, n):\n    '''\n    Create a function to verify if all values are identical in a dictionary.\n    '''\n"}], "response": "def func(dict, n):\n    '''\n    Create a function to verify if all values are identical in a dictionary.\n    '''\n    return len(set(dict.values())) == 1", "response_code": "def func(dict, n):\n    '''\n    Create a function to verify if all values are identical in a dictionary.\n    '''\n    return len(set(dict.values())) == 1"}
{"task_id": 252, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(dict1):\n    '''\n    Create a function to remove empty items from a provided dictionary.\n    '''\n"}], "response": "```python\ndef func(dict1):\n    return {key: value for key, value in dict1.items() if value}\n```", "response_code": "\ndef func(dict1):\n    return {key: value for key, value in dict1.items() if value}\n"}
{"task_id": 253, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):   \n    '''\n    Compose a function to determine the highest product created by multiplying numbers of a growing subsequence of that array.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(arr):\n    if len(arr) < 3:\n        return None\n    \n    arr.sort()\n    \n    max_product = max(arr[0] * arr[1] * arr[-1], arr[-1] * arr[-2] * arr[-3])\n    \n    return max_product\n```", "response_code": "\nimport numpy as np\n\ndef func(arr):\n    if len(arr) < 3:\n        return None\n    \n    arr.sort()\n    \n    max_product = max(arr[0] * arr[1] * arr[-1], arr[-1] * arr[-2] * arr[-3])\n    \n    return max_product\n"}
{"task_id": 254, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    Create a function to calculate the pairwise sum of the elements in the provided tuples.\n    '''\n"}], "response": "def func(test_tup):\n    return [sum(pair) for pair in zip(*test_tup)]", "response_code": "def func(test_tup):\n    return [sum(pair) for pair in zip(*test_tup)]"}
{"task_id": 255, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr, n): \n    '''\n    Create a python function to determine the modulus of array multiplication divided by n.\n    '''\n"}], "response": "from numpy import prod\n\ndef func(arr, n):\n    return prod(arr) % n", "response_code": "from numpy import prod\n\ndef func(arr, n):\n    return prod(arr) % n"}
{"task_id": 256, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l): \n    '''\n    Create a python function to verify if the provided list includes sequential numbers or not.\n    '''\n"}], "response": "```python\ndef func(l): \n    '''\n    Create a python function to verify if the provided list includes sequential numbers or not.\n    '''\n    return all(x == y-1 for x, y in zip(l, l[1:]))\n```", "response_code": "\ndef func(l): \n    '''\n    Create a python function to verify if the provided list includes sequential numbers or not.\n    '''\n    return all(x == y-1 for x, y in zip(l, l[1:]))\n"}
{"task_id": 257, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list1, test_list2):\n    '''\n    Create a function to determine the tuple intersection of elements in the provided tuple list regardless of their order.\n    '''\n"}], "response": "from collections import Counter\n\ndef func(test_list1, test_list2):\n    return list((Counter(test_list1) & Counter(test_list2)).elements())", "response_code": "from collections import Counter\n\ndef func(test_list1, test_list2):\n    return list((Counter(test_list1) & Counter(test_list2)).elements())"}
{"task_id": 258, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1,ch,newch):\n    '''\n    Compose a function to substitute characters in a string.\n    '''\n"}], "response": "```python\ndef func(str1, ch, newch):\n    return str1.replace(ch, newch)\n```", "response_code": "\ndef func(str1, ch, newch):\n    return str1.replace(ch, newch)\n"}
{"task_id": 259, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import Counter\ndef func(dict1):\n    '''\n    Compose a function to arrange counter by value.\n    '''\n"}], "response": "from collections import Counter\n\ndef func(dict1):\n    sorted_counter = dict(Counter(dict1).most_common())\n    return sorted_counter", "response_code": "from collections import Counter\n\ndef func(dict1):\n    sorted_counter = dict(Counter(dict1).most_common())\n    return sorted_counter"}
{"task_id": 260, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a python function to determine the total of the highest and lowest value in a provided array.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return max(nums) + min(nums)\n```", "response_code": "\ndef func(nums):\n    return max(nums) + min(nums)\n"}
{"task_id": 261, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(string):\n    '''\n    Compose a python function to transform the provided string to lower case.\n    '''\n"}], "response": "def func(string):\n    return string.lower()", "response_code": "def func(string):\n    return string.lower()"}
{"task_id": 262, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(str1):\n    '''\n    Create a function to eliminate lowercase substrings from a provided string.\n    '''\n"}], "response": "import re\n\ndef func(str1):\n    return re.sub(r'[a-z]+', '', str1)", "response_code": "import re\n\ndef func(str1):\n    return re.sub(r'[a-z]+', '', str1)"}
{"task_id": 263, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n) :  \n    '''\n    Compose a python function to determine the initial digit of a provided number.\n    '''\n"}], "response": "```python\ndef func(n):\n    return int(str(n)[0])\n```", "response_code": "\ndef func(n):\n    return int(str(n)[0])\n"}
{"task_id": 264, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list): \n    '''\n    Compose a python function to detect odd numbers from a mixed list.\n    '''\n"}], "response": "def detect_odd_numbers(lst):\n    return [num for num in lst if num % 2 != 0]", "response_code": "def detect_odd_numbers(lst):\n    return [num for num in lst if num % 2 != 0]"}
{"task_id": 265, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n) :  \n    '''\n    Create a python function to calculate the disparity between the total of cubes of initial n natural numbers and the total of initial n natural numbers.\n    '''\n"}], "response": "def func(n):\n    sum_of_squares = (n * (n + 1) // 2) ** 2\n    sum_of_cubes = n * (n + 1) // 2 * (2*n + 1) // 3\n    return sum_of_cubes - sum_of_squares", "response_code": "def func(n):\n    sum_of_squares = (n * (n + 1) // 2) ** 2\n    sum_of_cubes = n * (n + 1) // 2 * (2*n + 1) // 3\n    return sum_of_cubes - sum_of_squares"}
{"task_id": 266, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(A,N) : \n    '''\n    Compose a python function to calculate the pairs with xor as an odd number.\n    '''\n"}], "response": "```python\ndef func(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count += 1\n    return count\n```", "response_code": "\ndef func(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count += 1\n    return count\n"}
{"task_id": 267, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(string):\n    '''\n    Create a function to switch characters case in a string.\n    '''\n"}], "response": "```python\ndef func(string):\n    return string.swapcase()\n```", "response_code": "\ndef func(string):\n    return string.swapcase()\n"}
{"task_id": 268, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n1, n2):\n    '''\n    Compose a python function to determine the digit difference between two integers.\n    '''\n"}], "response": "```python\ndef digit_difference(n1, n2):\n    return abs(n1 - n2)\n```", "response_code": "\ndef digit_difference(n1, n2):\n    return abs(n1 - n2)\n"}
{"task_id": 269, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a, size):\n    '''\n    Compose a function to determine the greatest total of consecutive subarray in the provided array.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(a, size):\n    max_sum = -np.inf\n    current_sum = 0\n    \n    for i in range(len(a) - size + 1):\n        if i == 0:\n            current_sum = sum(a[i:i+size])\n        else:\n            current_sum = current_sum - a[i-1] + a[i+size-1]\n        \n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n```", "response_code": "\nimport numpy as np\n\ndef func(a, size):\n    max_sum = -np.inf\n    current_sum = 0\n    \n    for i in range(len(a) - size + 1):\n        if i == 0:\n            current_sum = sum(a[i:i+size])\n        else:\n            current_sum = current_sum - a[i-1] + a[i+size-1]\n        \n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n"}
{"task_id": 270, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function to determine the combination of elements in the provided tuples.\n    '''\n"}], "response": "from itertools import product\n\ndef func(test_tup1, test_tup2):\n    return list(product(test_tup1, test_tup2))", "response_code": "from itertools import product\n\ndef func(test_tup1, test_tup2):\n    return list(product(test_tup1, test_tup2))"}
{"task_id": 271, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst):  \n    '''\n    Create a python function to determine the maximum length of sublist.\n    '''\n"}], "response": "```python\ndef func(lst):\n    max_length = max(len(sublist) for sublist in lst)\n    return max_length\n```", "response_code": "\ndef func(lst):\n    max_length = max(len(sublist) for sublist in lst)\n    return max_length\n"}
{"task_id": 272, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Compose a function to retrieve values between quotation marks of a string.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    return re.findall(r'\"(.*?)\"', text)", "response_code": "import re\n\ndef func(text):\n    return re.findall(r'\"(.*?)\"', text)"}
{"task_id": 273, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr,n): \n    '''\n    Create a python function to calculate different element pairs from the provided array.\n    '''\n"}], "response": "```python\ndef func(arr,n): \n    '''\n    Create a python function to calculate different element pairs from the provided array.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] != arr[j]: \n                count += 1\n    return count\n```", "response_code": "\ndef func(arr,n): \n    '''\n    Create a python function to calculate different element pairs from the provided array.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] != arr[j]: \n                count += 1\n    return count\n"}
{"task_id": 274, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(word): \n    '''\n    Compose a python function to divide a string into characters.\n    '''\n"}], "response": "```python\ndef func(word): \n    return list(word)\n```", "response_code": "\ndef func(word): \n    return list(word)\n"}
{"task_id": 275, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    Compose a function to obtain the total of a non-negative integer.\n    '''\n"}], "response": "```python\ndef func(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n```", "response_code": "\ndef func(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n"}
{"task_id": 276, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function to determine if a given list is arranged or not.\n    '''\n"}], "response": "```python\ndef func(list1):\n    '''\n    Create a function to determine if a given list is arranged or not.\n    '''\n    return all(list1[i] <= list1[i + 1] for i in range(len(list1) - 1))\n```", "response_code": "\ndef func(list1):\n    '''\n    Create a function to determine if a given list is arranged or not.\n    '''\n    return all(list1[i] <= list1[i + 1] for i in range(len(list1) - 1))\n"}
{"task_id": 277, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(length):\n    '''\n    Compose a function to generate a list of vacant dictionaries.\n    '''\n"}], "response": "```python\ndef func(length):\n    return [{} for _ in range(length)]\n```", "response_code": "\ndef func(length):\n    return [{} for _ in range(length)]\n"}
{"task_id": 278, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Compose a function to arrange each sublist of strings in a provided list of lists.\n    '''\n"}], "response": "```python\ndef func(list1):\n    return [sorted(sublist) for sublist in list1]\n```", "response_code": "\ndef func(list1):\n    return [sorted(sublist) for sublist in list1]\n"}
{"task_id": 279, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a python function to eliminate two duplicate numbers from a provided set of lists.\n    '''\n"}], "response": "```python\ndef func(nums):\n    nums = list(set(nums))\n    if len(nums) > 2:\n        nums = nums[:2]\n    return nums\n```", "response_code": "\ndef func(nums):\n    nums = list(set(nums))\n    if len(nums) > 2:\n        nums = nums[:2]\n    return nums\n"}
{"task_id": 280, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list_data):\n    '''\n    Compose a python function to determine the product of the distinct numbers in a provided list.\n    '''\n"}], "response": "```python\ndef func(list_data):\n    distinct_numbers = set(list_data)\n    product = 1\n    for num in distinct_numbers:\n        product *= num\n    return product\n```", "response_code": "\ndef func(list_data):\n    distinct_numbers = set(list_data)\n    product = 1\n    for num in distinct_numbers:\n        product *= num\n    return product\n"}
{"task_id": 281, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(r,h):\n    '''\n    Compose a function to determine the surface area of a cylinder.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(r, h):\n    return 2 * math.pi * r * (r + h)\n```", "response_code": "\nimport math\n\ndef func(r, h):\n    return 2 * math.pi * r * (r + h)\n"}
{"task_id": 282, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(A,B): \n    '''\n    Create a python function to verify if an array is a subarray of another or not.\n    '''\n"}], "response": "```python\ndef is_subarray(A, B):\n    return all(elem in B for elem in A)\n```", "response_code": "\ndef is_subarray(A, B):\n    return all(elem in B for elem in A)\n"}
{"task_id": 283, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Compose a python function to determine the final digit in the factorial of a specified number.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(n):\n    return math.factorial(n) % 10\n```", "response_code": "\nimport math\n\ndef func(n):\n    return math.factorial(n) % 10\n"}
{"task_id": 284, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1,list2,list3):\n    '''\n    Compose a function to alternate lists of the same length.\n    '''\n"}], "response": "```python\ndef func(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n```", "response_code": "\ndef func(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n"}
{"task_id": 285, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Compose a function to detect the distinct elements in the provided two tuples.\n    '''\n"}], "response": "def func(test_tup1, test_tup2):\n    return tuple(set(test_tup1 + test_tup2))", "response_code": "def func(test_tup1, test_tup2):\n    return tuple(set(test_tup1 + test_tup2))"}
{"task_id": 286, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tuple, even_fnc): \n    '''\n    Create a function to retrieve the even elements in the nested mixed tuple.\n    '''\n"}], "response": "from typing import Tuple\n\ndef func(test_tuple: Tuple, even_fnc):\n    even_elements = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_elements.extend(func(item, even_fnc))\n        elif even_fnc(item):\n            even_elements.append(item)\n    return even_elements", "response_code": "from typing import Tuple\n\ndef func(test_tuple: Tuple, even_fnc):\n    even_elements = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_elements.extend(func(item, even_fnc))\n        elif even_fnc(item):\n            even_elements.append(item)\n    return even_elements"}
{"task_id": 287, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(b,s): \n    '''\n    Create a python function to calculate the surface area of the square pyramid.\n    '''\n"}], "response": "```python\ndef func(b, s):\n    return b**2 + 2*b*s\n```", "response_code": "\ndef func(b, s):\n    return b**2 + 2*b*s\n"}
{"task_id": 288, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(dict1):\n    '''\n    Compose a function to verify if a dictionary is empty or not.\n    '''\n"}], "response": "def func(dict1):\n    if not dict1:\n        return True\n    else:\n        return False", "response_code": "def func(dict1):\n    if not dict1:\n        return True\n    else:\n        return False"}
{"task_id": 289, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(num):\n    '''\n    Create a function for the nth catalan number.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(num):\n    '''\n    Create a function for the nth catalan number.\n    '''\n    return math.factorial(2*num) // (math.factorial(num+1) * math.factorial(num))\n```", "response_code": "\nimport math\n\ndef func(num):\n    '''\n    Create a function for the nth catalan number.\n    '''\n    return math.factorial(2*num) // (math.factorial(num+1) * math.factorial(num))\n"}
{"task_id": 290, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Compose a function to locate all adverbs and their positions in a provided sentence using regex.\n    '''\n"}], "response": "import re\n\ndef find_adverbs(text):\n    adverbs = re.finditer(r'\\b\\w+ly\\b', text)\n    return [(adverb.group(0), adverb.start()) for adverb in adverbs]", "response_code": "import re\n\ndef find_adverbs(text):\n    adverbs = re.finditer(r'\\b\\w+ly\\b', text)\n    return [(adverb.group(0), adverb.start()) for adverb in adverbs]"}
{"task_id": 291, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq\ndef func(items,n):\n    '''\n    Create a function to locate the n - costly price items from a provided dataset using heap queue algorithm.\n    '''\n"}], "response": "import heapq\n\ndef func(items, n):\n    return heapq.nlargest(n, items)", "response_code": "import heapq\n\ndef func(items, n):\n    return heapq.nlargest(n, items)"}
{"task_id": 292, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l, n):\n    '''\n    Create a python function to divide the array and append the initial part to the end.\n    '''\n"}], "response": "def func(l, n):\n    return l[n:] + l[:n]", "response_code": "def func(l, n):\n    return l[n:] + l[:n]"}
{"task_id": 293, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(listx):\n    '''\n    Compose a function to transform a list into a tuple.\n    '''\n"}], "response": "def func(listx):\n    return tuple(listx)", "response_code": "def func(listx):\n    return tuple(listx)"}
{"task_id": 294, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a python function to determine the variance between the highest and lowest value in a provided array.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(nums):\n    return np.max(nums) - np.min(nums)\n```", "response_code": "\nimport numpy as np\n\ndef func(nums):\n    return np.max(nums) - np.min(nums)\n"}
{"task_id": 295, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a, b):\n    '''\n    Compose a function to identify perfect squares within two specified numbers.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(a, b):\n    '''\n    Compose a function to identify perfect squares within two specified numbers.\n    '''\n    squares = [x**2 for x in range(int(math.sqrt(a)), int(math.sqrt(b))+1)]\n    return squares\n```", "response_code": "\nimport math\n\ndef func(a, b):\n    '''\n    Compose a function to identify perfect squares within two specified numbers.\n    '''\n    squares = [x**2 for x in range(int(math.sqrt(a)), int(math.sqrt(b))+1)]\n    return squares\n"}
{"task_id": 296, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import cmath\ndef func(x,y):\n    '''\n    Compose a function to transform polar coordinates to rectangular coordinates.\n    '''\n"}], "response": "import cmath\n\ndef func(x, y):\n    '''\n    Compose a function to transform polar coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(x, y)", "response_code": "import cmath\n\ndef func(x, y):\n    '''\n    Compose a function to transform polar coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(x, y)"}
{"task_id": 297, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(newList): \n    '''\n    Compose a python function to swap the initial and final elements in a list.\n    '''\n"}], "response": "def swap_initial_final(newList):\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList", "response_code": "def swap_initial_final(newList):\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"}
{"task_id": 298, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n,k): \n    '''\n    Create a python function to calculate the total of the product of binomial coefficients.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(n, k):\n    total = 0\n    for i in range(k+1):\n        total += math.comb(n, i)\n    return total\n```", "response_code": "\nimport math\n\ndef func(n, k):\n    total = 0\n    for i in range(k+1):\n        total += math.comb(n, i)\n    return total\n"}
{"task_id": 299, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(ip):\n    '''\n    Create a function to eliminate leading zeroes from an ip address.\n    '''\n"}], "response": "import re\n\ndef func(ip):\n    '''\n    Create a function to eliminate leading zeroes from an ip address.\n    '''\n    return re.sub(r'\\b0+(\\d)', r'\\1', ip)", "response_code": "import re\n\ndef func(ip):\n    '''\n    Create a function to eliminate leading zeroes from an ip address.\n    '''\n    return re.sub(r'\\b0+(\\d)', r'\\1', ip)"}
{"task_id": 300, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function to determine the distinction between the initial even and odd number in a provided list.\n    '''\n"}], "response": "```python\ndef func(list1):\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n            break\n    for num in list1:\n        if num % 2 != 0:\n            odd = num\n            break\n    return even, odd\n```", "response_code": "\ndef func(list1):\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n            break\n    for num in list1:\n        if num % 2 != 0:\n            odd = num\n            break\n    return even, odd\n"}
{"task_id": 301, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1,str2) : \n    '''\n    Create a python function to calculate the minimum number of exchanges needed to transform one binary string to another.\n    '''\n"}], "response": "```python\ndef func(str1, str2):\n    return sum([1 for i in range(len(str1)) if str1[i] != str2[i]])\n```", "response_code": "\ndef func(str1, str2):\n    return sum([1 for i in range(len(str1)) if str1[i] != str2[i]])\n"}
{"task_id": 302, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import sys \ndef func(tuple_list):\n    '''\n    Create a function to determine the size of the provided tuple.\n    '''\n"}], "response": "import sys\n\ndef func(tuple_list):\n    return sys.getsizeof(tuple_list)", "response_code": "import sys\n\ndef func(tuple_list):\n    return sys.getsizeof(tuple_list)"}
{"task_id": 303, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr1, arr2, k):\n    '''\n    Create a function to locate the kth element from the provided two sorted arrays.\n    '''\n"}], "response": "```python\ndef func(arr1, arr2, k):\n    merged_arr = sorted(arr1 + arr2)\n    return merged_arr[k-1]\n```", "response_code": "\ndef func(arr1, arr2, k):\n    merged_arr = sorted(arr1 + arr2)\n    return merged_arr[k-1]\n"}
{"task_id": 304, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(number):\n    '''\n    Create a function to determine if the provided number is armstrong or not.\n    '''\n"}], "response": "def is_armstrong(number):\n    num_str = str(number)\n    num_len = len(num_str)\n    sum = 0\n    for digit in num_str:\n        sum += int(digit) ** num_len\n    return sum == number", "response_code": "def is_armstrong(number):\n    num_str = str(number)\n    num_len = len(num_str)\n    sum = 0\n    for digit in num_str:\n        sum += int(digit) ** num_len\n    return sum == number"}
{"task_id": 305, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(number):\n    '''\n    Compose a function to determine the total and mean of initial n natural numbers.\n    '''\n"}], "response": "```python\ndef func(number):\n    total = number * (number + 1) // 2\n    mean = total / number\n    return total, mean\n```", "response_code": "\ndef func(number):\n    total = number * (number + 1) // 2\n    mean = total / number\n    return total, mean\n"}
{"task_id": 306, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n) : \n    '''\n    Create a python function to verify if the provided number is even or not using bitwise operator.\n    '''\n"}], "response": "def func(n):\n    if n & 1 == 0:\n        return True\n    else:\n        return False", "response_code": "def func(n):\n    if n & 1 == 0:\n        return True\n    else:\n        return False"}
{"task_id": 307, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str1):\n    '''\n    Compose a python function to detect the initial duplicated character in a provided string.\n    '''\n"}], "response": "```python\ndef func(str1):\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n```", "response_code": "\ndef func(str1):\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n"}
{"task_id": 308, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    Compose a function to obtain a clear number less than or equal to n.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n\n```", "response_code": "\ndef func(n):\n    return n\n"}
{"task_id": 309, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s):\n    '''\n    Compose a function to invert words in a provided string.\n    '''\n"}], "response": "```python\ndef func(s):\n    return ' '.join(s.split()[::-1])\n```", "response_code": "\ndef func(s):\n    return ' '.join(s.split()[::-1])\n"}
{"task_id": 310, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(num):\n    '''\n    Compose a function to verify if the provided integer is a prime number.\n    '''\n"}], "response": "```python\nimport math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n```", "response_code": "\nimport math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n"}
{"task_id": 311, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(degree):\n    '''\n    Compose a function to transform degrees to radians.\n    '''\n"}], "response": "import math\n\ndef func(degree):\n    '''\n    Compose a function to transform degrees to radians.\n    '''\n    return math.radians(degree)", "response_code": "import math\n\ndef func(degree):\n    '''\n    Compose a function to transform degrees to radians.\n    '''\n    return math.radians(degree)"}
{"task_id": 312, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\n\ndef func(text, pattern):\n    '''\n    Create a function to locate a literal string within a string and determine the position within the original string where the pattern is found using regex.\n    '''\n"}], "response": "import re\n\ndef func(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.start()\n    else:\n        return -1", "response_code": "import re\n\ndef func(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.start()\n    else:\n        return -1"}
{"task_id": 313, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a python function to determine the nth bell number.\n    '''\n"}], "response": "```python\nfrom math import factorial\n\ndef func(n):\n    bell_number = 0\n    for k in range(n+1):\n        bell_number += factorial(n) // (factorial(k) * factorial(n-k))\n    return bell_number\n```", "response_code": "\nfrom math import factorial\n\ndef func(n):\n    bell_number = 0\n    for k in range(n+1):\n        bell_number += factorial(n) // (factorial(k) * factorial(n-k))\n    return bell_number\n"}
{"task_id": 314, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1, L):\n    '''\n    Create a python function to delete the k'th element from a given list.\n    '''\n"}], "response": "```python\ndef func(list1, k):\n    del list1[k-1]\n    return list1\n```", "response_code": "\ndef func(list1, k):\n    del list1[k-1]\n    return list1\n"}
{"task_id": 315, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list, N):\n    '''\n    Create a function to determine the highest value in the nth column from the provided tuple list.\n    '''\n"}], "response": "```python\ndef func(test_list, N):\n    return max(row[N] for row in test_list)\n```", "response_code": "\ndef func(test_list, N):\n    return max(row[N] for row in test_list)\n"}
{"task_id": 316, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst):  \n    '''\n    Create a python function to combine the initial and final elements individually in a list of lists.\n    '''\n"}], "response": "```python\ndef combine_elements(lst):\n    return [sublist[0] + sublist[-1] for sublist in lst]\n```", "response_code": "\ndef combine_elements(lst):\n    return [sublist[0] + sublist[-1] for sublist in lst]\n"}
{"task_id": 317, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Create a function to calculate the total sum of all the values that exist in the provided tuple list.\n    '''\n"}], "response": "```python\ndef func(test_list):\n    return sum(sum(sub) for sub in test_list)\n```", "response_code": "\ndef func(test_list):\n    return sum(sum(sub) for sub in test_list)\n"}
{"task_id": 318, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Compose a function to determine the average value of the numbers in a provided tuple of tuples.\n    '''\n"}], "response": "```python\ndef func(nums):\n    total_sum = 0\n    total_count = 0\n    for tup in nums:\n        total_sum += sum(tup)\n        total_count += len(tup)\n    return total_sum / total_count\n```", "response_code": "\ndef func(nums):\n    total_sum = 0\n    total_count = 0\n    for tup in nums:\n        total_sum += sum(tup)\n        total_count += len(tup)\n    return total_sum / total_count\n"}
{"task_id": 319, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function to calculate the modulo of tuple elements in the provided two tuples.\n    '''\n"}], "response": "```python\ndef func(test_tup1, test_tup2):\n    result = tuple(x % y for x, y in zip(test_tup1, test_tup2))\n    return result\n```", "response_code": "\ndef func(test_tup1, test_tup2):\n    result = tuple(x % y for x, y in zip(test_tup1, test_tup2))\n    return result\n"}
{"task_id": 320, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(steps, d): \n    '''\n    Create a function to verify the number of leaps needed of specified length to arrive at a point of form (d, 0) from the origin in a 2d plane.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(steps, d): \n    return math.ceil(abs(d) / steps)\n```", "response_code": "\nimport math\n\ndef func(steps, d): \n    return math.ceil(abs(d) / steps)\n"}
{"task_id": 321, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums1,nums2):\n    '''\n    Compose a function to separate two lists using map and lambda function.\n    '''\n"}], "response": "```python\ndef func(nums1, nums2):\n    separated_lists = list(map(lambda x, y: [x, y], nums1, nums2))\n    return separated_lists\n```", "response_code": "\ndef func(nums1, nums2):\n    separated_lists = list(map(lambda x, y: [x, y], nums1, nums2))\n    return separated_lists\n"}
{"task_id": 322, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_str):\n    '''\n    Compose a function to transfer all the numbers in it to the provided string.\n    '''\n"}], "response": "```python\ndef func(test_str):\n    return ''.join([char if not char.isdigit() else test_str for char in test_str])\n```", "response_code": "\ndef func(test_str):\n    return ''.join([char if not char.isdigit() else test_str for char in test_str])\n"}
{"task_id": 323, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a):\n    '''\n    Create a function to determine the largest subset where every pair is divisible.\n    '''\n"}], "response": "```python\nfrom itertools import combinations\n\ndef func(a):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def is_divisible(pair):\n        x, y = pair\n        return gcd(x, y) != 1\n\n    max_subset = []\n    for i in range(1, len(a) + 1):\n        for subset in combinations(a, i):\n            if all(is_divisible(pair) for pair in combinations(subset, 2)):\n                if len(subset) > len(max_subset):\n                    max_subset = subset\n\n    return max_subset\n```", "response_code": "\nfrom itertools import combinations\n\ndef func(a):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def is_divisible(pair):\n        x, y = pair\n        return gcd(x, y) != 1\n\n    max_subset = []\n    for i in range(1, len(a) + 1):\n        for subset in combinations(a, i):\n            if all(is_divisible(pair) for pair in combinations(subset, 2)):\n                if len(subset) > len(max_subset):\n                    max_subset = subset\n\n    return max_subset\n"}
{"task_id": 324, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr1, arr2, n):\n    '''\n    Compose a function to determine the median of two sorted arrays of equal size.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(arr1, arr2, n):\n    combined_arr = np.concatenate((arr1, arr2))\n    combined_arr.sort()\n    median = np.median(combined_arr)\n    return median\n```", "response_code": "\nimport numpy as np\n\ndef func(arr1, arr2, n):\n    combined_arr = np.concatenate((arr1, arr2))\n    combined_arr.sort()\n    median = np.median(combined_arr)\n    return median\n"}
{"task_id": 325, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums,n):\n    '''\n    Create a function to calculate the n-th power of each element in a list using a lambda function.\n    '''\n"}], "response": "```python\ndef func(nums, n):\n    return list(map(lambda x: x**n, nums))\n```", "response_code": "\ndef func(nums, n):\n    return list(map(lambda x: x**n, nums))\n"}
{"task_id": 326, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(string):\n    '''\n    Compose a python function to transform the provided string to upper case.\n    '''\n"}], "response": "```python\ndef func(string):\n    return string.upper()\n```", "response_code": "\ndef func(string):\n    return string.upper()\n"}
{"task_id": 327, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(newList): \n    '''\n    Create a python function to swap first and last elements in a given list.\n    '''\n"}], "response": "def swap_first_last(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList", "response_code": "def swap_first_last(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"}
{"task_id": 328, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(r) :  \n    '''\n    Compose a python function to determine the largest triangle that can be enclosed in the semicircle.\n    '''\n"}], "response": "```python\nimport math\n\ndef func(r):\n    return math.pi * r**2 / 2\n```", "response_code": "\nimport math\n\ndef func(r):\n    return math.pi * r**2 / 2\n"}
{"task_id": 329, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(array,start=0,end=None):\n    '''\n    Compose a python function to determine the smallest absent number from the provided array.\n    '''\n"}], "response": "```python\ndef func(array, start=0, end=None):\n    if end is None:\n        end = len(array)\n    \n    array = set(array)\n    \n    for i in range(start, end+1):\n        if i not in array:\n            return i\n```", "response_code": "\ndef func(array, start=0, end=None):\n    if end is None:\n        end = len(array)\n    \n    array = set(array)\n    \n    for i in range(start, end+1):\n        if i not in array:\n            return i\n"}
{"task_id": 330, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(string):\n    '''\n    Create a function to substitute all spaces in the provided string with the character * list item * list item * list item * list item '%20'.\n    '''\n"}], "response": "```python\ndef func(string):\n    return string.replace(' ', '%20')\n```", "response_code": "\ndef func(string):\n    return string.replace(' ', '%20')\n"}
{"task_id": 331, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list): \n    '''\n    Compose a python function to discover even numbers from a mixed list.\n    '''\n"}], "response": "def find_even_numbers(lst):\n    return [num for num in lst if num % 2 == 0]", "response_code": "def find_even_numbers(lst):\n    return [num for num in lst if num % 2 == 0]"}
{"task_id": 332, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(ele, sub = []): \n    '''\n    Compose a function to retrieve all the neighboring coordinates of the provided coordinate tuple.\n    '''\n"}], "response": "```python\ndef func(ele, sub = []): \n    '''\n    Compose a function to retrieve all the neighboring coordinates of the provided coordinate tuple.\n    '''\n    x, y = ele\n    neighbors = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    return neighbors\n```", "response_code": "\ndef func(ele, sub = []): \n    '''\n    Compose a function to retrieve all the neighboring coordinates of the provided coordinate tuple.\n    '''\n    x, y = ele\n    neighbors = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    return neighbors\n"}
{"task_id": 333, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(text):\n    '''\n    Create a function to substitute whitespaces with an underscore and vice versa in a provided string using regex.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    return re.sub(r'(\\s+)', '_', text) if ' ' in text else re.sub(r'(_+)', ' ', text)", "response_code": "import re\n\ndef func(text):\n    return re.sub(r'(\\s+)', '_', text) if ' ' in text else re.sub(r'(_+)', ' ', text)"}
{"task_id": 334, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(num_list):\n    '''\n    Create a python function to shift all zeroes to the end of the provided list.\n    '''\n"}], "response": "```python\ndef func(num_list):\n    num_list.sort(key=lambda x: x == 0)\n```", "response_code": "\ndef func(num_list):\n    num_list.sort(key=lambda x: x == 0)\n"}
{"task_id": 335, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr,n) : \n    '''\n    Create a python function to calculate the total of xor of all pairs of numbers in the provided array.\n    '''\n"}], "response": "```python\ndef func(arr,n) : \n    total_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total_xor += arr[i] ^ arr[j]\n    return total_xor\n```", "response_code": "\ndef func(arr,n) : \n    total_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total_xor += arr[i] ^ arr[j]\n    return total_xor\n"}
{"task_id": 336, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq as hq\ndef func(iterable):\n    '''\n    Create a function to insert all values into a heap and then remove the smallest values one by one.\n    '''\n"}], "response": "import heapq as hq\n\ndef func(iterable):\n    heap = list(iterable)\n    hq.heapify(heap)\n    \n    while heap:\n        print(hq.heappop(heap))", "response_code": "import heapq as hq\n\ndef func(iterable):\n    heap = list(iterable)\n    hq.heapify(heap)\n    \n    while heap:\n        print(hq.heappop(heap))"}
{"task_id": 337, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(actual_cost,sale_amount): \n    '''\n    Create a function to verify if the provided amount results in neither profit nor loss.\n    '''\n"}], "response": "def func(actual_cost, sale_amount):\n    if actual_cost == sale_amount:\n        return \"Neither profit nor loss\"\n    else:\n        return \"Not applicable\"", "response_code": "def func(actual_cost, sale_amount):\n    if actual_cost == sale_amount:\n        return \"Neither profit nor loss\"\n    else:\n        return \"Not applicable\""}
{"task_id": 338, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(v,t):\n    '''\n    Compose a function to determine wind chill index.\n    '''\n"}], "response": "import math\n\ndef func(v, t):\n    '''\n    Compose a function to determine wind chill index.\n    '''\n    wci = 35.74 + 0.6215*t + (0.4275*t - 35.75) * math.pow(v, 0.16)\n    return wci", "response_code": "import math\n\ndef func(v, t):\n    '''\n    Compose a function to determine wind chill index.\n    '''\n    wci = 35.74 + 0.6215*t + (0.4275*t - 35.75) * math.pow(v, 0.16)\n    return wci"}
{"task_id": 339, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(funces):\n    '''\n    Create a function to calculate the total length of the names in a provided list of names after excluding the names that begin with a lowercase letter.\n    '''\n"}], "response": "```python\ndef func(funces):\n    total_length = sum(len(name) for name in funces if not name[0].islower())\n    return total_length\n```", "response_code": "\ndef func(funces):\n    total_length = sum(len(name) for name in funces if not name[0].islower())\n    return total_length\n"}
{"task_id": 340, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(items):\n    '''\n    Compose a function to eliminate the parenthesis region in a string.\n    '''\n"}], "response": "import re\n\ndef func(items):\n    return re.sub(r'\\([^)]*\\)', '', items)", "response_code": "import re\n\ndef func(items):\n    return re.sub(r'\\([^)]*\\)', '', items)"}
{"task_id": 341, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Compose a function to determine the nth nonagonal number.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n * (7*n - 5) // 2\n```", "response_code": "\ndef func(n):\n    return n * (7*n - 5) // 2\n"}
{"task_id": 342, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Compose a function that identifies a word containing 'z', not at the beginning or end of the word.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    words = re.findall(pattern, text)\n    return words", "response_code": "import re\n\ndef func(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    words = re.findall(pattern, text)\n    return words"}
{"task_id": 343, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(input, k): \n    '''\n    Compose a python function to invert an array up to a specified position.\n    '''\n"}], "response": "def invert_array_up_to_position(arr, k):\n    return arr[:k][::-1] + arr[k:]", "response_code": "def invert_array_up_to_position(arr, k):\n    return arr[:k][::-1] + arr[k:]"}
{"task_id": 344, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup, test_dict):\n    '''\n    Create a function to append a dictionary to the tuple.\n    '''\n"}], "response": "def func(test_tup, test_dict):\n    test_tup = list(test_tup)\n    test_tup.append(test_dict)\n    return tuple(test_tup)", "response_code": "def func(test_tup, test_dict):\n    test_tup = list(test_tup)\n    test_tup.append(test_dict)\n    return tuple(test_tup)"}
{"task_id": 345, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(cost):\n    '''\n    Create a function to determine a path with the highest average among all available paths for the provided square matrix of size n*n.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(cost):\n    n = len(cost)\n    dp = np.zeros((n, n))\n    \n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    return dp[n-1][n-1] / (2*n-1)\n```", "response_code": "\nimport numpy as np\n\ndef func(cost):\n    n = len(cost)\n    dp = np.zeros((n, n))\n    \n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    return dp[n-1][n-1] / (2*n-1)\n"}
{"task_id": 346, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(students,h,w):\n    '''\n    Create a function to sort the height and width of students which are stored in a dictionary.\n    '''\n"}], "response": "```python\ndef func(students, h, w):\n    sorted_students = sorted(students.items(), key=lambda x: (x[1][h], x[1][w]))\n    return dict(sorted_students)\n```", "response_code": "\ndef func(students, h, w):\n    sorted_students = sorted(students.items(), key=lambda x: (x[1][h], x[1][w]))\n    return dict(sorted_students)\n"}
{"task_id": 347, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from operator import eq\ndef func(nums1, nums2):\n    '''\n    Create a function to tally the identical pair in two provided lists using the map function.\n    '''\n"}], "response": "from operator import eq\n\ndef func(nums1, nums2):\n    return sum(map(eq, nums1, nums2))", "response_code": "from operator import eq\n\ndef func(nums1, nums2):\n    return sum(map(eq, nums1, nums2))"}
{"task_id": 348, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(base, power):\n    '''\n    Compose a function to determine the total of all digits of the base raised to the specified power.\n    '''\n"}], "response": "```python\ndef func(base, power):\n    total = sum(int(digit) for digit in str(base ** power))\n    return total\n```", "response_code": "\ndef func(base, power):\n    total = sum(int(digit) for digit in str(base ** power))\n    return total\n"}
{"task_id": 349, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text1):\n    '''\n    Compose a function to retrieve values between quotation marks of the provided string by utilizing regex.\n    '''\n"}], "response": "import re\n\ndef func(text1):\n    return re.findall(r'\"(.*?)\"', text1)", "response_code": "import re\n\ndef func(text1):\n    return re.findall(r'\"(.*?)\"', text1)"}
{"task_id": 350, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    Compose a function to calculate the adjacent elements of the provided tuple.\n    '''\n"}], "response": "```python\ndef func(test_tup):\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result\n```", "response_code": "\ndef func(test_tup):\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result\n"}
{"task_id": 351, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lst1,lst2):\n    '''\n    Compose a function to add elements in two lists.\n    '''\n"}], "response": "```python\ndef func(lst1, lst2):\n    return [x + y for x, y in zip(lst1, lst2)]\n```", "response_code": "\ndef func(lst1, lst2):\n    return [x + y for x, y in zip(lst1, lst2)]\n"}
{"task_id": 352, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from itertools import groupby\ndef func(nums):\n    '''\n    Create a function to eliminate consecutive repetitions of a provided list.\n    '''\n"}], "response": "from itertools import groupby\n\ndef func(nums):\n    return [key for key, group in groupby(nums)]", "response_code": "from itertools import groupby\n\ndef func(nums):\n    return [key for key, group in groupby(nums)]"}
{"task_id": 353, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(r,h):\n    '''\n    Create a function to determine the lateral surface area of a cone.\n    '''\n"}], "response": "import math\n\ndef func(r, h):\n    return math.pi * r * math.sqrt(r**2 + h**2)", "response_code": "import math\n\ndef func(r, h):\n    return math.pi * r * math.sqrt(r**2 + h**2)"}
{"task_id": 354, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function to substitute all instances of spaces, commas, or dots with a colon.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    return re.sub(r'[ ,.]', ':', text)", "response_code": "import re\n\ndef func(text):\n    return re.sub(r'[ ,.]', ':', text)"}
{"task_id": 355, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(A, x):\n    '''\n    Compose a function to determine the position of the initial instance of a specified number in an organized array.\n    '''\n"}], "response": "```python\ndef func(A, x):\n    return A.index(x)\n```", "response_code": "\ndef func(A, x):\n    return A.index(x)\n"}
{"task_id": 356, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):\n    '''\n    Compose a python function to determine the total of products of all potential subarrays.\n    '''\n"}], "response": "```python\nfrom itertools import combinations\n\ndef func(arr):\n    total = 0\n    for i in range(1, len(arr) + 1):\n        for subarr in combinations(arr, i):\n            product = 1\n            for num in subarr:\n                product *= num\n            total += product\n    return total\n```", "response_code": "\nfrom itertools import combinations\n\ndef func(arr):\n    total = 0\n    for i in range(1, len(arr) + 1):\n        for subarr in combinations(arr, i):\n            product = 1\n            for num in subarr:\n                product *= num\n            total += product\n    return total\n"}
{"task_id": 357, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):  \n    '''\n    Create a python function to switch bits of the number except the first and the last bit.\n    '''\n"}], "response": "```python\ndef func(n):\n    # Extract the first and last bits\n    first_bit = n & 1\n    last_bit = n & (1 << (n.bit_length() - 1))\n\n    # Toggle all bits except the first and last bits\n    toggled_bits = n ^ (2 ** (n.bit_length() - 1) - 1) ^ 1\n\n    # Combine the first and last bits with the toggled bits\n    result = first_bit + toggled_bits + last_bit\n\n    return result\n```", "response_code": "\ndef func(n):\n    # Extract the first and last bits\n    first_bit = n & 1\n    last_bit = n & (1 << (n.bit_length() - 1))\n\n    # Toggle all bits except the first and last bits\n    toggled_bits = n ^ (2 ** (n.bit_length() - 1) - 1) ^ 1\n\n    # Combine the first and last bits with the toggled bits\n    result = first_bit + toggled_bits + last_bit\n\n    return result\n"}
{"task_id": 358, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import bisect\ndef func(a, x):\n    '''\n    Create a function to find the left insertion point for a specified value in sorted order.\n    '''\n"}], "response": "import bisect\n\ndef func(a, x):\n    return bisect.bisect_left(a, x)", "response_code": "import bisect\n\ndef func(a, x):\n    return bisect.bisect_left(a, x)"}
{"task_id": 359, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef func(string): \n    '''\n    Create a function to determine if the provided string begins with a vowel or not using regex.\n    '''\n"}], "response": "import re\n\ndef func(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return re.match(regex, string) is not None", "response_code": "import re\n\ndef func(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return re.match(regex, string) is not None"}
{"task_id": 360, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n):\n    '''\n    Create a function to determine the geometric sum of n-1.\n    '''\n"}], "response": "```python\ndef func(n):\n    if n == 0:\n        return 1\n    else:\n        return 1 / (2 ** n) + func(n - 1)\n```", "response_code": "\ndef func(n):\n    if n == 0:\n        return 1\n    else:\n        return 1 / (2 ** n) + func(n - 1)\n"}
{"task_id": 361, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math \ndef func(n): \n    '''\n    Compose a python function to determine the position of the smallest triangular number with n digits.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    k = math.ceil((math.log(10) * (n - 1/2)))\n    return k", "response_code": "import math\n\ndef func(n):\n    k = math.ceil((math.log(10) * (n - 1/2)))\n    return k"}
{"task_id": 362, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    Create a function to transform the provided tuple into a key-value dictionary by utilizing neighboring elements.\n    '''\n"}], "response": "```python\ndef func(test_tup):\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup), 2)}\n```", "response_code": "\ndef func(test_tup):\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup), 2)}\n"}
{"task_id": 363, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s) :\n    '''\n    Create a python function to verify if all the characters are identical or not.\n    '''\n"}], "response": "def func(s):\n    return all(char == s[0] for char in s)", "response_code": "def func(s):\n    return all(char == s[0] for char in s)"}
{"task_id": 364, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(side):\n    '''\n    Create a function to determine the area of a tetrahedron.\n    '''\n"}], "response": "import math\n\ndef func(side):\n    return (math.sqrt(3) * side ** 2) / 4", "response_code": "import math\n\ndef func(side):\n    return (math.sqrt(3) * side ** 2) / 4"}
{"task_id": 365, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list, m):\n    '''\n    Create a function to shift a given list by a specified number of items to the right direction.\n    '''\n"}], "response": "```python\ndef func(lst, m):\n    m = m % len(lst)\n    return lst[-m:] + lst[:-m]\n```", "response_code": "\ndef func(lst, m):\n    m = m % len(lst)\n    return lst[-m:] + lst[:-m]\n"}
{"task_id": 366, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    Create a function to verify if the provided tuple contains any null value or not.\n    '''\n"}], "response": "def func(test_tup):\n    if None in test_tup:\n        return True\n    else:\n        return False", "response_code": "def func(test_tup):\n    if None in test_tup:\n        return True\n    else:\n        return False"}
{"task_id": 367, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(startnum, endnum):\n    '''\n    Compose a function to locate numbers within a specified range where each number can be evenly divided by each digit it includes.\n    '''\n"}], "response": "```python\ndef func(startnum, endnum):\n    def check_divisibility(num):\n        for digit in str(num):\n            if int(digit) == 0 or num % int(digit) != 0:\n                return False\n        return True\n\n    result = []\n    for i in range(startnum, endnum + 1):\n        if check_divisibility(i):\n            result.append(i)\n    \n    return result\n```", "response_code": "\ndef func(startnum, endnum):\n    def check_divisibility(num):\n        for digit in str(num):\n            if int(digit) == 0 or num % int(digit) != 0:\n                return False\n        return True\n\n    result = []\n    for i in range(startnum, endnum + 1):\n        if check_divisibility(i):\n            result.append(i)\n    \n    return result\n"}
{"task_id": 368, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(r,a):\n    '''\n    Compose a function to determine the area of a sector.\n    '''\n"}], "response": "import math\n\ndef func(r, a):\n    '''\n    Compose a function to determine the area of a sector.\n    '''\n    return 0.5 * r**2 * math.radians(a)", "response_code": "import math\n\ndef func(r, a):\n    '''\n    Compose a function to determine the area of a sector.\n    '''\n    return 0.5 * r**2 * math.radians(a)"}
{"task_id": 369, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(X, Y, Z): \n    '''\n    Compose a function to determine the longest common subsequence for the provided three string sequence.\n    '''\n"}], "response": "```python\nfrom difflib import SequenceMatcher\n\ndef func(X, Y, Z): \n    '''\n    Compose a function to determine the longest common subsequence for the provided three string sequence.\n    '''\n    def lcs(X, Y, Z, m, n, o): \n        L = [[[0 for _ in range(o+1)] for _ in range(n+1)] for _ in range(m+1)] \n\n        for i in range(m+1): \n            for j in range(n+1): \n                for k in range(o+1): \n                    if i == 0 or j == 0 or k == 0: \n                        L[i][j][k] = 0\n                    elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                        L[i][j][k] = L[i-1][j-1][k-1] + 1\n                    else: \n                        L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n\n        return L[m][n][o] \n\n    return lcs(X, Y, Z, len(X), len(Y), len(Z))\n```", "response_code": "\nfrom difflib import SequenceMatcher\n\ndef func(X, Y, Z): \n    '''\n    Compose a function to determine the longest common subsequence for the provided three string sequence.\n    '''\n    def lcs(X, Y, Z, m, n, o): \n        L = [[[0 for _ in range(o+1)] for _ in range(n+1)] for _ in range(m+1)] \n\n        for i in range(m+1): \n            for j in range(n+1): \n                for k in range(o+1): \n                    if i == 0 or j == 0 or k == 0: \n                        L[i][j][k] = 0\n                    elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                        L[i][j][k] = L[i-1][j-1][k-1] + 1\n                    else: \n                        L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n\n        return L[m][n][o] \n\n    return lcs(X, Y, Z, len(X), len(Y), len(Z))\n"}
{"task_id": 370, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(str1):\n    '''\n    Create a function to insert spaces between words beginning with capital letters in a provided string using regex.\n    '''\n"}], "response": "import re\n\ndef func(str1):\n    return re.sub(r'(\\w)([A-Z])', r'\\1 \\2', str1)", "response_code": "import re\n\ndef func(str1):\n    return re.sub(r'(\\w)([A-Z])', r'\\1 \\2', str1)"}
{"task_id": 371, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums_str):\n    '''\n    Compose a function to arrange a provided list of numeric string values in numerical order.\n    '''\n"}], "response": "```python\ndef func(nums_str):\n    return sorted([int(num) for num in nums_str])\n```", "response_code": "\ndef func(nums_str):\n    return sorted([int(num) for num in nums_str])\n"}
{"task_id": 372, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list, test_tup):\n    '''\n    Compose a function to append the provided tuple to the provided list.\n    '''\n"}], "response": "def func(test_list, test_tup):\n    test_list.append(test_tup)", "response_code": "def func(test_list, test_tup):\n    test_list.append(test_tup)"}
{"task_id": 373, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr, i):\n    '''\n    Create a function to verify if the provided array signifies a min heap or not.\n    '''\n"}], "response": "import heapq\n\ndef func(arr, i):\n    return all(arr[i] <= arr[2*i+1] and arr[i] <= arr[2*i+2] for i in range((len(arr)-2)//2))", "response_code": "import heapq\n\ndef func(arr, i):\n    return all(arr[i] <= arr[2*i+1] and arr[i] <= arr[2*i+2] for i in range((len(arr)-2)//2))"}
{"task_id": 374, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function to determine the nth jacobsthal number.\n    '''\n"}], "response": "```python\ndef func(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return func(n-1) + 2*func(n-2)\n```", "response_code": "\ndef func(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return func(n-1) + 2*func(n-2)\n"}
{"task_id": 375, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list, K):\n    '''\n    Create a function to locate the smallest k records from a list of tuples.\n    '''\n"}], "response": "```python\ndef func(test_list, K):\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]\n```", "response_code": "\ndef func(test_list, K):\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]\n"}
{"task_id": 376, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l1, l2, l3):\n    '''\n    Compose a function to discover shared index elements from three lists.\n    '''\n"}], "response": "```python\ndef func(l1, l2, l3):\n    '''\n    Compose a function to discover shared index elements from three lists.\n    '''\n    return [elem for elem in l1 if elem in l2 and elem in l3]\n```", "response_code": "\ndef func(l1, l2, l3):\n    '''\n    Compose a function to discover shared index elements from three lists.\n    '''\n    return [elem for elem in l1 if elem in l2 and elem in l3]\n"}
{"task_id": 377, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(numbers):\n    '''\n    Compose a function to locate the second smallest number in a list.\n    '''\n"}], "response": "```python\ndef func(numbers):\n    return sorted(set(numbers))[1]\n```", "response_code": "\ndef func(numbers):\n    return sorted(set(numbers))[1]\n"}
{"task_id": 378, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that identifies a string containing an a followed by either zero or one 'b'.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'ab?'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False", "response_code": "import re\n\ndef func(text):\n    pattern = r'ab?'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": 379, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Compose a function to tally the pairs of inverted strings in the provided string list.\n    '''\n"}], "response": "```python\ndef func(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n```", "response_code": "\ndef func(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"}
{"task_id": 380, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Compose a function to calculate the quantity of distinct lists within a list.\n    '''\n"}], "response": "```python\ndef func(list1):\n    return len(set(map(tuple, list1)))\n```", "response_code": "\ndef func(list1):\n    return len(set(map(tuple, list1)))\n"}
{"task_id": 381, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(num):\n    '''\n    Create a function to verify a decimal with a precision of 2.\n    '''\n"}], "response": "```python\ndef func(num):\n    return isinstance(num, float) and round(num, 2) == num\n```", "response_code": "\ndef func(num):\n    return isinstance(num, float) and round(num, 2) == num\n"}
{"task_id": 382, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):\n    '''\n    Create a python function to verify if an array consists of only one unique element or not.\n    '''\n"}], "response": "```python\ndef func(arr):\n    return len(set(arr)) == 1\n```", "response_code": "\ndef func(arr):\n    return len(set(arr)) == 1\n"}
{"task_id": 383, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(monthnum3):\n    '''\n    Create a function to verify if the provided month number includes 30 days or not.\n    '''\n"}], "response": "```python\ndef func(monthnum):\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n```", "response_code": "\ndef func(monthnum):\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n"}
{"task_id": 384, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr,n): \n    '''\n    Create a python function to determine the smallest difference between any two elements in a provided array.\n    '''\n"}], "response": "```python\ndef func(arr,n): \n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n```", "response_code": "\ndef func(arr,n): \n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n"}
{"task_id": 385, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str):\n    '''\n    Compose a python function to tally numeric values in a provided string.\n    '''\n"}], "response": "```python\nimport re\n\ndef func(input_str):\n    numbers = re.findall(r'\\d+', input_str)\n    total = sum(map(int, numbers))\n    return total\n```", "response_code": "\nimport re\n\ndef func(input_str):\n    numbers = re.findall(r'\\d+', input_str)\n    total = sum(map(int, numbers))\n    return total\n"}
{"task_id": 386, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math \ndef func(n): \n    '''\n    Create a function to determine the nth polite number.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    return int(math.ceil(n * (3/2)))", "response_code": "import math\n\ndef func(n):\n    return int(math.ceil(n * (3/2)))"}
{"task_id": 387, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l1):\n    '''\n    Create a function to loop through all pairs of consecutive items in a provided list.\n    '''\n"}], "response": "```python\ndef func(l1):\n    for i in range(len(l1) - 1):\n        pair = (l1[i], l1[i+1])\n        print(pair)\n```", "response_code": "\ndef func(l1):\n    for i in range(len(l1) - 1):\n        pair = (l1[i], l1[i+1])\n        print(pair)\n"}
{"task_id": 388, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr, sum):\n    '''\n    Create a python function to calculate the quantity of pairs whose total is equivalent to 'sum'.\n    '''\n"}], "response": "```python\ndef func(arr, sum):\n    count = 0\n    seen = set()\n    for num in arr:\n        complement = sum - num\n        if complement in seen:\n            count += 1\n        seen.add(num)\n    return count\n```", "response_code": "\ndef func(arr, sum):\n    count = 0\n    seen = set()\n    for num in arr:\n        complement = sum - num\n        if complement in seen:\n            count += 1\n        seen.add(num)\n    return count\n"}
{"task_id": 389, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(li1,li2):\n    '''\n    Create a python function to calculate the variance between two lists.\n    '''\n"}], "response": "import numpy as np\n\ndef func(li1, li2):\n    return np.var(li1) - np.var(li2)", "response_code": "import numpy as np\n\ndef func(li1, li2):\n    return np.var(li1) - np.var(li2)"}
{"task_id": 390, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n) : \n    '''\n    Create a python function to calculate the total of the fourth power of the initial n odd natural numbers.\n    '''\n"}], "response": "def func(n):\n    total = sum([i**4 for i in range(1, 2*n, 2)])\n    return total", "response_code": "def func(n):\n    total = sum([i**4 for i in range(1, 2*n, 2)])\n    return total"}
{"task_id": 391, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import deque\ndef func(exp):\n    '''\n    Compose a function to verify if the provided expression is balanced or not.\n    '''\n"}], "response": "from collections import deque\n\ndef func(exp):\n    stack = deque()\n    opening_brackets = ['(', '[', '{']\n    closing_brackets = [')', ']', '}']\n    \n    for char in exp:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack:\n                return False\n            top = stack.pop()\n            if opening_brackets.index(top) != closing_brackets.index(char):\n                return False\n    \n    return len(stack) == 0", "response_code": "from collections import deque\n\ndef func(exp):\n    stack = deque()\n    opening_brackets = ['(', '[', '{']\n    closing_brackets = [')', ']', '}']\n    \n    for char in exp:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack:\n                return False\n            top = stack.pop()\n            if opening_brackets.index(top) != closing_brackets.index(char):\n                return False\n    \n    return len(stack) == 0"}
{"task_id": 392, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_str, K):\n    '''\n    Create a function to eliminate all the words with k length in the provided string.\n    '''\n"}], "response": "```python\ndef func(test_str, K):\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    return ' '.join(filtered_words)\n```", "response_code": "\ndef func(test_str, K):\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    return ' '.join(filtered_words)\n"}
{"task_id": 393, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text,pattern):\n    '''\n    Compose a function to locate the frequency and location of the substrings within a string.\n    '''\n"}], "response": "import re\n\ndef func(text, pattern):\n    matches = re.finditer(pattern, text)\n    result = [(match.group(0), match.start(), match.end()) for match in matches]\n    return result", "response_code": "import re\n\ndef func(text, pattern):\n    matches = re.finditer(pattern, text)\n    result = [(match.group(0), match.start(), match.end()) for match in matches]\n    return result"}
{"task_id": 394, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a python function to verify if each odd index includes odd numbers from a provided list.\n    '''\n"}], "response": "def func(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True", "response_code": "def func(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": 395, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_str):\n    '''\n    Compose a function to tally those characters which possess vowels as their adjacent characters in the provided string.\n    '''\n"}], "response": "```python\ndef func(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(1, len(test_str)-1):\n        if test_str[i] in vowels and (test_str[i-1] in vowels or test_str[i+1] in vowels):\n            count += 1\n    return count\n```", "response_code": "\ndef func(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(1, len(test_str)-1):\n        if test_str[i] in vowels and (test_str[i-1] in vowels or test_str[i+1] in vowels):\n            count += 1\n    return count\n"}
{"task_id": 396, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr): \n    '''\n    Compose a python function to determine the total of unique elements in a provided array.\n    '''\n"}], "response": "```python\ndef func(arr): \n    return len(set(arr))\n```", "response_code": "\ndef func(arr): \n    return len(set(arr))\n"}
{"task_id": 397, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from itertools import groupby\ndef func(list1):\n    '''\n    Compose a function to group consecutive duplicates of a provided list elements into sublists.\n    '''\n"}], "response": "from itertools import groupby\n\ndef func(list1):\n    return [list(group) for key, group in groupby(list1)]", "response_code": "from itertools import groupby\n\ndef func(list1):\n    return [list(group) for key, group in groupby(list1)]"}
{"task_id": 398, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Compose a function to calculate the quantity of distinct lists within a list.\n    '''\n"}], "response": "```python\ndef func(list1):\n    return len(set(map(tuple, list1)))\n```", "response_code": "\ndef func(list1):\n    return len(set(map(tuple, list1)))\n"}
{"task_id": 399, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from itertools import combinations \ndef func(test_list):\n    '''\n    Create a function to determine the combinations of sums with tuples in the provided tuple list.\n    '''\n"}], "response": "from itertools import combinations\n\ndef func(test_list):\n    return list(combinations(test_list, 2))", "response_code": "from itertools import combinations\n\ndef func(test_list):\n    return list(combinations(test_list, 2))"}
{"task_id": 400, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math \ndef func(n) : \n    '''\n    Create a python function to determine if the number of divisors is even or odd.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    if math.isqrt(n) ** 2 == n:\n        return \"Odd\"\n    else:\n        return \"Even\"", "response_code": "import math\n\ndef func(n):\n    if math.isqrt(n) ** 2 == n:\n        return \"Odd\"\n    else:\n        return \"Even\""}
{"task_id": 401, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):\n    '''\n    Compose a python function to determine the total of all odd length subarrays.\n    '''\n"}], "response": "```python\ndef sumOddLengthSubarrays(arr):\n    total = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr), 2):\n            total += sum(arr[i:j+1])\n    return total\n```", "response_code": "\ndef sumOddLengthSubarrays(arr):\n    total = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr), 2):\n            total += sum(arr[i:j+1])\n    return total\n"}
{"task_id": 402, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(r, g, b):\n    '''\n    Compose a function to transform rgb color to hsv color.\n    '''\n"}], "response": "```python\nimport colorsys\n\ndef func(r, g, b):\n    '''\n    Compose a function to transform rgb color to hsv color.\n    '''\n    h, s, v = colorsys.rgb_to_hsv(r/255, g/255, b/255)\n    return h, s, v\n```", "response_code": "\nimport colorsys\n\ndef func(r, g, b):\n    '''\n    Compose a function to transform rgb color to hsv color.\n    '''\n    h, s, v = colorsys.rgb_to_hsv(r/255, g/255, b/255)\n    return h, s, v\n"}
{"task_id": 403, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function to determine the result of the initial even and odd numbers in a provided list.\n    '''\n"}], "response": "```python\ndef func(list1):\n    even_sum = sum(num for num in list1 if num % 2 == 0)\n    odd_sum = sum(num for num in list1 if num % 2 != 0)\n    \n    return even_sum, odd_sum\n```", "response_code": "\ndef func(list1):\n    even_sum = sum(num for num in list1 if num % 2 == 0)\n    odd_sum = sum(num for num in list1 if num % 2 != 0)\n    \n    return even_sum, odd_sum\n"}
{"task_id": 404, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_str):\n    '''\n    Compose a function to transform tuple string to integer tuple.\n    '''\n"}], "response": "```python\ndef func(test_str):\n    return tuple(map(int, test_str.strip('()').split(', ')))\n```", "response_code": "\ndef func(test_str):\n    return tuple(map(int, test_str.strip('()').split(', ')))\n"}
{"task_id": 405, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import bisect\ndef func(a, x):\n    '''\n    Compose a function to find the correct insertion point for a specified value in sorted order.\n    '''\n"}], "response": "import bisect\n\ndef func(a, x):\n    return bisect.bisect_left(a, x)", "response_code": "import bisect\n\ndef func(a, x):\n    return bisect.bisect_left(a, x)"}
{"task_id": 406, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that identifies a string containing an a followed by three 'b'.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'a.*b{3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False", "response_code": "import re\n\ndef func(text):\n    pattern = r'a.*b{3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": 407, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_list, test_str):\n    '''\n    Compose a function to generate a new tuple from the provided string and list.\n    '''\n"}], "response": "def func(test_list, test_str):\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple", "response_code": "def func(test_list, test_str):\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple"}
{"task_id": 408, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a python function to verify if each even index includes even numbers from a provided list.\n    '''\n"}], "response": "def func(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True", "response_code": "def func(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": 409, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    Create a function to eliminate the nested record from the provided tuple.\n    '''\n"}], "response": "```python\ndef func(test_tup):\n    return tuple(item for sublist in test_tup for item in sublist)\n```", "response_code": "\ndef func(test_tup):\n    return tuple(item for sublist in test_tup for item in sublist)\n"}
{"task_id": 410, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(input_list): \n    '''\n    Compose a python function to calculate the quantity of lists in a specified number of lists.\n    '''\n"}], "response": "```python\ndef func(input_list): \n    return len(input_list)\n```", "response_code": "\ndef func(input_list): \n    return len(input_list)\n"}
{"task_id": 411, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr,x):\n    '''\n    Compose a python function to determine the final location of an element in a sorted array.\n    '''\n"}], "response": "```python\ndef func(arr, x):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```", "response_code": "\ndef func(arr, x):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n"}
{"task_id": 412, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that identifies a string containing an 'a' followed by any character, concluding with 'b'.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'a.b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False", "response_code": "import re\n\ndef func(text):\n    pattern = r'a.b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": 413, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(dict):\n    '''\n    Compose a function to determine the total of all items in the provided dictionary.\n    '''\n"}], "response": "```python\ndef func(dict):\n    return sum(dict.values())\n```", "response_code": "\ndef func(dict):\n    return sum(dict.values())\n"}
{"task_id": 414, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a python function to calculate the total of all odd natural numbers between the limits l and r.\n    '''\n"}], "response": "def func(n):\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i\n    return total", "response_code": "def func(n):\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i\n    return total"}
{"task_id": 415, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):  \n    '''\n    Compose a python function to determine the total of an array.\n    '''\n"}], "response": "```python\ndef func(arr):\n    return sum(arr)\n```", "response_code": "\ndef func(arr):\n    return sum(arr)\n"}
{"task_id": 416, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n,d):   \n    '''\n    Create a python function to shift the bits of a given number to the left.\n    '''\n"}], "response": "```python\ndef func(n, d):\n    return n << d\n```", "response_code": "\ndef func(n, d):\n    return n << d\n"}
{"task_id": 417, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Compose a function to eliminate all whitespaces from a string.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    return re.sub(r'\\s+', '', text)", "response_code": "import re\n\ndef func(text):\n    return re.sub(r'\\s+', '', text)"}
{"task_id": 418, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x,y,z):\n    '''\n    Create a python function to calculate the quantity of identical numbers from three provided integers.\n    '''\n"}], "response": "```python\ndef func(x, y, z):\n    count = 0\n    if x == y == z:\n        count = 3\n    elif x == y or x == z or y == z:\n        count = 2\n    return count\n```", "response_code": "\ndef func(x, y, z):\n    count = 0\n    if x == y == z:\n        count = 3\n    elif x == y or x == z or y == z:\n        count = 2\n    return count\n"}
{"task_id": 419, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr):   \n    '''\n    Compose a python function to determine the quantity of rotations needed to produce a sorted array.\n    '''\n"}], "response": "```python\ndef func(arr):\n    n = len(arr)\n    min_val = min(arr)\n    min_index = arr.index(min_val)\n    return min_index\n```", "response_code": "\ndef func(arr):\n    n = len(arr)\n    min_val = min(arr)\n    min_index = arr.index(min_val)\n    return min_index\n"}
{"task_id": 420, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n) :\n    '''\n    Create a python function to verify if the provided number is a perfect square or not.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    return math.isqrt(n) ** 2 == n", "response_code": "import math\n\ndef func(n):\n    return math.isqrt(n) ** 2 == n"}
{"task_id": 421, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr): \n    '''\n    Compose a python function to verify if the product of numbers is even or not.\n    '''\n"}], "response": "```python\ndef is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n```", "response_code": "\ndef is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n"}
{"task_id": 422, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(lists):\n    '''\n    Compose a function to determine the list in a list of lists whose total of elements is the greatest.\n    '''\n"}], "response": "```python\ndef func(lists):\n    return max(lists, key=sum)\n```", "response_code": "\ndef func(lists):\n    return max(lists, key=sum)\n"}
{"task_id": 423, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_str):\n    '''\n    Create a function to determine the longest sequence of uppercase characters in the provided string.\n    '''\n"}], "response": "```python\ndef func(test_str):\n    max_count = 0\n    current_count = 0\n\n    for char in test_str:\n        if char.isupper():\n            current_count += 1\n            max_count = max(max_count, current_count)\n        else:\n            current_count = 0\n\n    return max_count\n```", "response_code": "\ndef func(test_str):\n    max_count = 0\n    current_count = 0\n\n    for char in test_str:\n        if char.isupper():\n            current_count += 1\n            max_count = max(max_count, current_count)\n        else:\n            current_count = 0\n\n    return max_count\n"}
{"task_id": 424, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a python function to locate the initial odd number in a provided list of numbers.\n    '''\n"}], "response": "```python\ndef func(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n```", "response_code": "\ndef func(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n"}
{"task_id": 425, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup, K):\n    '''\n    Create a function to verify if the provided tuples include the k or not.\n    '''\n"}], "response": "def func(test_tup, K):\n    return any(K in tup for tup in test_tup)", "response_code": "def func(test_tup, K):\n    return any(K in tup for tup in test_tup)"}
{"task_id": 426, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function to verify if every element of the second tuple is less than its corresponding index in the first tuple.\n    '''\n"}], "response": "def func(test_tup1, test_tup2):\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True", "response_code": "def func(test_tup1, test_tup2):\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"}
