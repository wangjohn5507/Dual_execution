{"task_id": 0, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function to identify the matching elements from the provided two tuple lists.\n    '''\n"}], "response": "def func(test_tup1, test_tup2):\n    return tuple(set(test_tup1) & set(test_tup2))", "response_code": "def func(test_tup1, test_tup2):\n    return tuple(set(test_tup1) & set(test_tup2))"}
{"task_id": 1, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import math\ndef func(n):\n    '''\n    Create a python function to detect non-prime numbers.\n    '''\n"}], "response": "import math\n\ndef func(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "response_code": "import math\n\ndef func(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": 2, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import heapq as hq\ndef func(nums,n):\n    '''\n    Create a function to determine the highest integers from a provided list of numbers using the heap queue algorithm.\n    '''\n"}], "response": "import heapq as hq\n\ndef func(nums, n):\n    return hq.nlargest(n, nums)", "response_code": "import heapq as hq\n\ndef func(nums, n):\n    return hq.nlargest(n, nums)"}
{"task_id": 3, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x): \n    '''\n    Compose a python function to verify if the two numbers vary at one bit position only or not.\n    '''\n"}], "response": "```python\ndef func(x):\n    return bin(x).count('1') == 1\n```", "response_code": "\ndef func(x):\n    return bin(x).count('1') == 1\n"}
{"task_id": 4, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Compose a function to detect all words that are a minimum of 4 characters in length in a string by utilizing regex.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)", "response_code": "import re\n\ndef func(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)"}
{"task_id": 5, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a function to calculate squares of individual elements in a list using a lambda function.\n    '''\n"}], "response": "```python\ndef func(nums):\n    return list(map(lambda x: x**2, nums))\n```", "response_code": "\ndef func(nums):\n    return list(map(lambda x: x**2, nums))\n"}
{"task_id": 6, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(str): \n    '''\n    Compose a python function to determine the minimum number of rotations needed to achieve the identical string.\n    '''\n"}], "response": "```python\ndef func(s):\n    n = len(s)\n    s += s\n    for i in range(1, n+1):\n        if n % i == 0:\n            if s[:i] * (n//i) == s:\n                return i\n    return n\n```", "response_code": "\ndef func(s):\n    n = len(s)\n    s += s\n    for i in range(1, n+1):\n        if n % i == 0:\n            if s[:i] * (n//i) == s:\n                return i\n    return n\n"}
{"task_id": 7, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(s,ch): \n    '''\n    Create a python function to delete first and last occurrence of a specified character from the string.\n    '''\n"}], "response": "```python\ndef func(s, ch):\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    \n    if first_occurrence != -1 and last_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n    \n    return s\n```", "response_code": "\ndef func(s, ch):\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    \n    if first_occurrence != -1 and last_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n    \n    return s\n"}
{"task_id": 8, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(M):\n    '''\n    Create a function to arrange a given matrix in ascending order based on the total of its rows.\n    '''\n"}], "response": "```python\nimport numpy as np\n\ndef func(M):\n    return M[np.argsort(np.sum(M, axis=1))]\n```", "response_code": "\nimport numpy as np\n\ndef func(M):\n    return M[np.argsort(np.sum(M, axis=1))]\n"}
{"task_id": 9, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(l,b,h) : \n    '''\n    Compose a python function to determine the volume of a triangular prism.\n    '''\n"}], "response": "```python\ndef func(l, b, h):\n    return 0.5 * l * b * h\n```", "response_code": "\ndef func(l, b, h):\n    return 0.5 * l * b * h\n"}
{"task_id": 10, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Compose a function to detect sequences of lowercase letters connected with an underscore.\n    '''\n"}], "response": "import re\n\ndef func(text):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches", "response_code": "import re\n\ndef func(text):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches"}
{"task_id": 11, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(a):\n    '''\n    Compose a function to determine the perimeter of a square.\n    '''\n"}], "response": "```python\ndef func(a):\n    return 4 * a\n```", "response_code": "\ndef func(a):\n    return 4 * a\n"}
{"task_id": 12, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "NO_OF_CHARS = 256\ndef func(string): \n    '''\n    Create a function to eliminate characters from the first string that exist in the second string.\n    '''\n"}], "response": "```python\nNO_OF_CHARS = 256\n\ndef func(string): \n    '''\n    Create a function to eliminate characters from the first string that exist in the second string.\n    '''\n```", "response_code": "\nNO_OF_CHARS = 256\n\ndef func(string): \n    '''\n    Create a function to eliminate characters from the first string that exist in the second string.\n    '''\n"}
{"task_id": 13, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arraynums):\n    '''\n    Create a function to determine if a provided array of integers includes any duplicate elements.\n    '''\n"}], "response": "```python\ndef func(arraynums):\n    return len(arraynums) != len(set(arraynums))\n```", "response_code": "\ndef func(arraynums):\n    return len(arraynums) != len(set(arraynums))\n"}
{"task_id": 14, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x): \n    '''\n    Compose a function to verify if the provided number is woodball or not.\n    '''\n"}], "response": "```python\ndef is_woodball(x):\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False\n```", "response_code": "\ndef is_woodball(x):\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": 15, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(num):    \n    '''\n    Create a python function to verify if a provided number is one less than double its reverse.\n    '''\n"}], "response": "def func(num):\n    reverse_num = int(str(num)[::-1])\n    if num == 2 * reverse_num + 1:\n        return True\n    else:\n        return False", "response_code": "def func(num):\n    reverse_num = int(str(num)[::-1])\n    if num == 2 * reverse_num + 1:\n        return True\n    else:\n        return False"}
{"task_id": 16, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(arr) : \n    '''\n    Compose a python function to determine the greatest number that can be created with the provided digits.\n    '''\n"}], "response": "from itertools import permutations\n\ndef func(arr):\n    max_num = 0\n    for perm in permutations(arr):\n        num = int(''.join(map(str, perm)))\n        max_num = max(max_num, num)\n    return max_num", "response_code": "from itertools import permutations\n\ndef func(arr):\n    max_num = 0\n    for perm in permutations(arr):\n        num = int(''.join(map(str, perm)))\n        max_num = max(max_num, num)\n    return max_num"}
{"task_id": 17, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(x,y): \n    '''\n    Create a python function to verify if the provided two integers possess opposite signs or not.\n    '''\n"}], "response": "```python\ndef func(x, y):\n    return (x < 0) ^ (y < 0)\n```", "response_code": "\ndef func(x, y):\n    return (x < 0) ^ (y < 0)\n"}
{"task_id": 18, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function to determine the nth octagonal number.\n    '''\n"}], "response": "```python\ndef func(n):\n    return n * (3 * n - 2)\n```", "response_code": "\ndef func(n):\n    return n * (3 * n - 2)\n"}
{"task_id": 19, "prompt": [{"role": "system", "content": "Generate the python code solution based on the context. Return the function with import packages if needed. Do not include any test cases or usage."}, {"role": "user", "content": "from collections import defaultdict\ndef func(s):\n    '''\n    Create a python function to calculate the number of substrings with the sum of digits equal to their length.\n    '''\n"}], "response": "from collections import defaultdict\n\ndef func(s):\n    count = 0\n    prefix_sum = defaultdict(int)\n    prefix_sum[0] = 1\n    cur_sum = 0\n\n    for digit in s:\n        cur_sum += int(digit)\n        count += prefix_sum[cur_sum - len(str(cur_sum))]\n        prefix_sum[cur_sum] += 1\n\n    return count", "response_code": "from collections import defaultdict\n\ndef func(s):\n    count = 0\n    prefix_sum = defaultdict(int)\n    prefix_sum[0] = 1\n    cur_sum = 0\n\n    for digit in s:\n        cur_sum += int(digit)\n        count += prefix_sum[cur_sum - len(str(cur_sum))]\n        prefix_sum[cur_sum] += 1\n\n    return count"}
