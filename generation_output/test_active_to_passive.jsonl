{"task_id": 0, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    A function should be written to find the similar elements from the given two tuple lists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (2, 3, 4)) == (2, 3)\nassert func(('a', 'b', 'c'), ('b', 'c', 'd')) == ('b', 'c')\nassert func((1, 2, 3), (4, 5, 6)) == ()\nassert func(('x', 'y', 'z'), ('a', 'b', 'c')) == ()\nassert func(('apple', 'banana', 'cherry'), ('banana', 'cherry', 'date')) == ('banana', 'cherry')\n```", "response_code": "\nassert func((1, 2, 3), (2, 3, 4)) == (2, 3)\nassert func(('a', 'b', 'c'), ('b', 'c', 'd')) == ('b', 'c')\nassert func((1, 2, 3), (4, 5, 6)) == ()\nassert func(('x', 'y', 'z'), ('a', 'b', 'c')) == ()\nassert func(('apple', 'banana', 'cherry'), ('banana', 'cherry', 'date')) == ('banana', 'cherry')\n"}
{"task_id": 1, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "import math\ndef func(n):\n    '''\n    A python function is written to identify non-prime numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == False\nassert func(2) == False\nassert func(3) == False\nassert func(4) == True\nassert func(17) == False\n```", "response_code": "\nassert func(1) == False\nassert func(2) == False\nassert func(3) == False\nassert func(4) == True\nassert func(17) == False\n"}
{"task_id": 2, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "import heapq as hq\ndef func(nums,n):\n    '''\n    A function is written to find the largest integers from a given list of numbers using the heap queue algorithm.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 3) == [9, 6, 5]\nassert func([10, 20, 30, 40, 50], 2) == [50, 40]\nassert func([5, 4, 3, 2, 1], 1) == [5]\nassert func([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\nassert func([7, 7, 7, 7, 7], 3) == [7, 7, 7]\n```", "response_code": "\n# Test cases\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 3) == [9, 6, 5]\nassert func([10, 20, 30, 40, 50], 2) == [50, 40]\nassert func([5, 4, 3, 2, 1], 1) == [5]\nassert func([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\nassert func([7, 7, 7, 7, 7], 3) == [7, 7, 7]\n"}
{"task_id": 3, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(x): \n    '''\n    A python function is written to check whether the two numbers differ at one bit position only or not.\n    '''\n    pass\n\n# check the correctness of func \nassert "}], "response": "```python\nassert func(2, 3) == True\nassert func(5, 7) == True\nassert func(1, 2) == False\nassert func(0, 15) == False\nassert func(8, 9) == True\n```", "response_code": "\nassert func(2, 3) == True\nassert func(5, 7) == True\nassert func(1, 2) == False\nassert func(0, 15) == False\nassert func(8, 9) == True\n"}
{"task_id": 4, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function should be written to find all words which are at least 4 characters long in a string by using regex.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello, this is a test\") == ['Hello', 'this', 'test']\nassert func(\"Python is a great programming language\") == ['Python', 'great', 'programming', 'language']\nassert func(\"1234 abcd efgh 5678\") == ['1234', 'abcd', 'efgh', '5678']\nassert func(\"Short words like cat, dog, and bat\") == ['Short', 'words', 'like', 'cat', 'dog']\nassert func(\"A sentence with some long words like elephant and giraffe\") == ['sentence', 'with', 'some', 'long', 'words', 'like', 'elephant', 'giraffe']\n```", "response_code": "\nassert func(\"Hello, this is a test\") == ['Hello', 'this', 'test']\nassert func(\"Python is a great programming language\") == ['Python', 'great', 'programming', 'language']\nassert func(\"1234 abcd efgh 5678\") == ['1234', 'abcd', 'efgh', '5678']\nassert func(\"Short words like cat, dog, and bat\") == ['Short', 'words', 'like', 'cat', 'dog']\nassert func(\"A sentence with some long words like elephant and giraffe\") == ['sentence', 'with', 'some', 'long', 'words', 'like', 'elephant', 'giraffe']\n"}
{"task_id": 5, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(nums):\n    '''\n    A function is written to find squares of individual elements in a list using a lambda function.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\nassert func([-1, -2, -3, -4, -5]) == [1, 4, 9, 16, 25]\nassert func([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]\nassert func([2, 3, 5, 7, 11]) == [4, 9, 25, 49, 121]\nassert func([-2, 3, -5, 7, -11]) == [4, 9, 25, 49, 121]\n```", "response_code": "\n# Test cases\nassert func([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\nassert func([-1, -2, -3, -4, -5]) == [1, 4, 9, 16, 25]\nassert func([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]\nassert func([2, 3, 5, 7, 11]) == [4, 9, 25, 49, 121]\nassert func([-2, 3, -5, 7, -11]) == [4, 9, 25, 49, 121]\n"}
{"task_id": 6, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(str): \n    '''\n    A python function is written to find the minimum number of rotations required to get the same string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == 5\nassert func(\"racecar\") == 0\nassert func(\"python\") == 6\nassert func(\"level\") == 0\nassert func(\"rotor\") == 0\n```", "response_code": "\nassert func(\"hello\") == 5\nassert func(\"racecar\") == 0\nassert func(\"python\") == 6\nassert func(\"level\") == 0\nassert func(\"rotor\") == 0\n"}
{"task_id": 7, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(s,ch): \n    '''\n    A python function is written to remove the first and last occurrence of a given character from the string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\", \"l\") == \"helo\"\nassert func(\"banana\", \"a\") == \"bnn\"\nassert func(\"racecar\", \"r\") == \"aceca\"\nassert func(\"apple\", \"p\") == \"ale\"\nassert func(\"mississippi\", \"i\") == \"msssspp\"\n```", "response_code": "\nassert func(\"hello\", \"l\") == \"helo\"\nassert func(\"banana\", \"a\") == \"bnn\"\nassert func(\"racecar\", \"r\") == \"aceca\"\nassert func(\"apple\", \"p\") == \"ale\"\nassert func(\"mississippi\", \"i\") == \"msssspp\"\n"}
{"task_id": 8, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(M):\n    '''\n    A function should be written to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert func([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\nassert func([[5, 5, 5], [1, 1, 1], [3, 3, 3]]) == [[1, 1, 1], [3, 3, 3], [5, 5, 5]]\nassert func([[2, 4, 6], [1, 3, 5], [7, 9, 8]]) == [[1, 3, 5], [2, 4, 6], [7, 9, 8]]\nassert func([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\n```", "response_code": "\n# Test cases\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert func([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\nassert func([[5, 5, 5], [1, 1, 1], [3, 3, 3]]) == [[1, 1, 1], [3, 3, 3], [5, 5, 5]]\nassert func([[2, 4, 6], [1, 3, 5], [7, 9, 8]]) == [[1, 3, 5], [2, 4, 6], [7, 9, 8]]\nassert func([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\n"}
{"task_id": 9, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(l,b,h) : \n    '''\n    A python function is written to find the volume of a triangular prism.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 4, 5) == 30\nassert func(6, 8, 10) == 240\nassert func(1, 1, 1) == 0.5\nassert func(0, 0, 0) == 0\nassert func(2, 3, 4) == 12\n```", "response_code": "\nassert func(3, 4, 5) == 30\nassert func(6, 8, 10) == 240\nassert func(1, 1, 1) == 0.5\nassert func(0, 0, 0) == 0\nassert func(2, 3, 4) == 12\n"}
{"task_id": 10, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function should be written to find sequences of lowercase letters joined with an underscore.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello_world\") == [\"hello_world\"]\nassert func(\"python_is_cool\") == [\"python_is_cool\"]\nassert func(\"this_is_a_test\") == [\"this_is_a_test\"]\nassert func(\"another_example\") == [\"another_example\"]\nassert func(\"sequence_of_lowercase_letters\") == [\"sequence_of_lowercase_letters\"]\n```", "response_code": "\nassert func(\"hello_world\") == [\"hello_world\"]\nassert func(\"python_is_cool\") == [\"python_is_cool\"]\nassert func(\"this_is_a_test\") == [\"this_is_a_test\"]\nassert func(\"another_example\") == [\"another_example\"]\nassert func(\"sequence_of_lowercase_letters\") == [\"sequence_of_lowercase_letters\"]\n"}
{"task_id": 11, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(a):\n    '''\n    A function should be written to find the perimeter of a square.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 0\nassert func(1) == 4\nassert func(5) == 20\nassert func(10) == 40\nassert func(100) == 400\n```", "response_code": "\nassert func(0) == 0\nassert func(1) == 4\nassert func(5) == 20\nassert func(10) == 40\nassert func(100) == 400\n"}
{"task_id": 12, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "NO_OF_CHARS = 256\ndef func(string): \n    '''\n    A function should be written to remove characters from the first string which are present in the second string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\", \"world\") == \"he\"\nassert func(\"apple\", \"pear\") == \"al\"\nassert func(\"python\", \"java\") == \"python\"\nassert func(\"abc\", \"def\") == \"abc\"\nassert func(\"12345\", \"54321\") == \"12\"\n```", "response_code": "\nassert func(\"hello\", \"world\") == \"he\"\nassert func(\"apple\", \"pear\") == \"al\"\nassert func(\"python\", \"java\") == \"python\"\nassert func(\"abc\", \"def\") == \"abc\"\nassert func(\"12345\", \"54321\") == \"12\"\n"}
{"task_id": 13, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(arraynums):\n    '''\n    A function should be written to determine whether a given array of integers contains any duplicate element.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == False\nassert func([1, 2, 3, 4, 1]) == True\nassert func([5, 5, 5, 5, 5]) == True\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]) == True\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == False\nassert func([1, 2, 3, 4, 1]) == True\nassert func([5, 5, 5, 5, 5]) == True\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]) == True\n"}
{"task_id": 14, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(x): \n    '''\n    A function should be written to check if the given number is woodball or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == False\nassert func(2) == True\nassert func(3) == False\nassert func(4) == True\nassert func(5) == False\n```", "response_code": "\nassert func(1) == False\nassert func(2) == True\nassert func(3) == False\nassert func(4) == True\nassert func(5) == False\n"}
{"task_id": 15, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(num):    \n    '''\n    A python function is written to check if a given number is one less than twice its reverse.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(10) == True\nassert func(25) == False\nassert func(36) == True\nassert func(99) == False\nassert func(123) == True\n```", "response_code": "\nassert func(10) == True\nassert func(25) == False\nassert func(36) == True\nassert func(99) == False\nassert func(123) == True\n"}
{"task_id": 16, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(arr) : \n    '''\n    A python function is written to find the largest number that can be formed with the given digits.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([3, 1, 4, 2]) == 4321\nassert func([5, 5, 5, 5]) == 5555\nassert func([9, 8, 7, 6]) == 9876\nassert func([0, 1, 2, 3]) == 3210\nassert func([2, 0, 4, 9]) == 9420\n```", "response_code": "\nassert func([3, 1, 4, 2]) == 4321\nassert func([5, 5, 5, 5]) == 5555\nassert func([9, 8, 7, 6]) == 9876\nassert func([0, 1, 2, 3]) == 3210\nassert func([2, 0, 4, 9]) == 9420\n"}
{"task_id": 17, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(x,y): \n    '''\n    A python function is written to check whether the given two integers have opposite sign or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5, -3) == True\nassert func(-2, 8) == True\nassert func(0, 0) == False\nassert func(-10, -20) == False\nassert func(15, 0) == False\n```", "response_code": "\nassert func(5, -3) == True\nassert func(-2, 8) == True\nassert func(0, 0) == False\nassert func(-10, -20) == False\nassert func(15, 0) == False\n"}
{"task_id": 18, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to find the nth octagonal number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 8\nassert func(3) == 21\nassert func(4) == 40\nassert func(5) == 65\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 8\nassert func(3) == 21\nassert func(4) == 40\nassert func(5) == 65\n"}
{"task_id": 19, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "from collections import defaultdict\ndef func(s):\n    '''\n    A python function is written to count the number of substrings with the sum of digits equal to their length.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"123\") == 1\nassert func(\"1234\") == 4\nassert func(\"111\") == 6\nassert func(\"9876\") == 0\nassert func(\"555\") == 3\n```", "response_code": "\nassert func(\"123\") == 1\nassert func(\"1234\") == 4\nassert func(\"111\") == 6\nassert func(\"9876\") == 0\nassert func(\"555\") == 3\n"}
{"task_id": 20, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(xs):\n    '''\n    A python function is written to find the smallest number in a list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([3, 5, 1, 7, 2]) == 1\nassert func([10, 20, 30, 40, 50]) == 10\nassert func([5, 4, 3, 2, 1]) == 1\nassert func([100, 200, 300, 400, 500]) == 100\nassert func([2, 2, 2, 2, 2]) == 2\n```", "response_code": "\nassert func([3, 5, 1, 7, 2]) == 1\nassert func([10, 20, 30, 40, 50]) == 10\nassert func([5, 4, 3, 2, 1]) == 1\nassert func([100, 200, 300, 400, 500]) == 100\nassert func([2, 2, 2, 2, 2]) == 2\n"}
{"task_id": 21, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(test_list):\n    '''\n    A function should be written to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([(1, 2), (3, 4), (5, 6)]) == 5  # Difference between (5, 6) and (1, 2)\nassert func([(10, 20), (30, 40), (50, 60)]) == 50  # Difference between (50, 60) and (10, 20)\nassert func([(5, 10), (15, 20), (25, 30)]) == 25  # Difference between (25, 30) and (5, 10)\nassert func([(100, 200), (300, 400), (500, 600)]) == 500  # Difference between (500, 600) and (100, 200)\nassert func([(2, 8), (12, 18), (22, 28)]) == 20  # Difference between (22, 28) and (2, 8)\n```", "response_code": "\n# Test cases\nassert func([(1, 2), (3, 4), (5, 6)]) == 5  # Difference between (5, 6) and (1, 2)\nassert func([(10, 20), (30, 40), (50, 60)]) == 50  # Difference between (50, 60) and (10, 20)\nassert func([(5, 10), (15, 20), (25, 30)]) == 25  # Difference between (25, 30) and (5, 10)\nassert func([(100, 200), (300, 400), (500, 600)]) == 500  # Difference between (500, 600) and (100, 200)\nassert func([(2, 8), (12, 18), (22, 28)]) == 20  # Difference between (22, 28) and (2, 8)\n"}
{"task_id": 22, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(subjectmarks):\n    '''\n    A function should be written to sort a list of tuples using lambda.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([(80, 'Math'), (70, 'Science'), (90, 'English')]) == [(70, 'Science'), (80, 'Math'), (90, 'English')]\nassert func([(60, 'History'), (75, 'Geography'), (65, 'Civics')]) == [(60, 'History'), (65, 'Civics'), (75, 'Geography')]\nassert func([(95, 'Physics'), (85, 'Chemistry'), (100, 'Biology')]) == [(85, 'Chemistry'), (95, 'Physics'), (100, 'Biology')]\nassert func([(50, 'Art'), (40, 'Music'), (45, 'Dance')]) == [(40, 'Music'), (45, 'Dance'), (50, 'Art')]\nassert func([(75, 'Computer Science'), (80, 'Physical Education'), (70, 'Health')]) == [(70, 'Health'), (75, 'Computer Science'), (80, 'Physical Education')]\n```", "response_code": "\n# Test cases\nassert func([(80, 'Math'), (70, 'Science'), (90, 'English')]) == [(70, 'Science'), (80, 'Math'), (90, 'English')]\nassert func([(60, 'History'), (75, 'Geography'), (65, 'Civics')]) == [(60, 'History'), (65, 'Civics'), (75, 'Geography')]\nassert func([(95, 'Physics'), (85, 'Chemistry'), (100, 'Biology')]) == [(85, 'Chemistry'), (95, 'Physics'), (100, 'Biology')]\nassert func([(50, 'Art'), (40, 'Music'), (45, 'Dance')]) == [(40, 'Music'), (45, 'Dance'), (50, 'Art')]\nassert func([(75, 'Computer Science'), (80, 'Physical Education'), (70, 'Health')]) == [(70, 'Health'), (75, 'Computer Science'), (80, 'Physical Education')]\n"}
{"task_id": 23, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(data_list):\n    '''\n    A function of recursion list sum is written.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 15\nassert func([10, 20, 30]) == 60\nassert func([5, 10, 15, 20]) == 50\nassert func([2, 4, 6, 8, 10]) == 30\nassert func([3, 6, 9, 12, 15, 18]) == 63\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 15\nassert func([10, 20, 30]) == 60\nassert func([5, 10, 15, 20]) == 50\nassert func([2, 4, 6, 8, 10]) == 30\nassert func([3, 6, 9, 12, 15, 18]) == 63\n"}
{"task_id": 24, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(list):\n    '''\n    A python function is written to count positive numbers in a list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([1, 2, 3, 4, 5]) == 5\nassert func([-1, -2, -3, -4, -5]) == 0\nassert func([0, 1, -2, 3, -4, 5]) == 3\nassert func([]) == 0\nassert func([-1, 0, 1, 2, 3, 4, 5]) == 5\n```", "response_code": "\n# Test cases\nassert func([1, 2, 3, 4, 5]) == 5\nassert func([-1, -2, -3, -4, -5]) == 0\nassert func([0, 1, -2, 3, -4, 5]) == 3\nassert func([]) == 0\nassert func([-1, 0, 1, 2, 3, 4, 5]) == 5\n"}
{"task_id": 25, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(n):   \n    '''\n    A function should be written to find the number of ways to partition a set of bell numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 1\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 5\nassert func(4) == 15\n```", "response_code": "\nassert func(0) == 1\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 5\nassert func(4) == 15\n"}
{"task_id": 26, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(A): \n    '''\n    A python function should be written to check whether the given array is monotonic or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == True  # Increasing monotonic array\nassert func([5, 4, 3, 2, 1]) == True  # Decreasing monotonic array\nassert func([1, 1, 1, 1, 1]) == True  # Constant array\nassert func([1, 3, 2, 5, 4]) == False  # Not monotonic\nassert func([1, 2, 2, 3, 4]) == True  # Non-decreasing monotonic array\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == True  # Increasing monotonic array\nassert func([5, 4, 3, 2, 1]) == True  # Decreasing monotonic array\nassert func([1, 1, 1, 1, 1]) == True  # Constant array\nassert func([1, 3, 2, 5, 4]) == False  # Not monotonic\nassert func([1, 2, 2, 3, 4]) == True  # Non-decreasing monotonic array\n"}
{"task_id": 27, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(l, s):\n    '''\n    A function should be written to check whether a list contains the given sublist or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], [2, 3]) == True\nassert func([1, 2, 3, 4, 5], [4, 6]) == False\nassert func([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\nassert func([1, 2, 3, 4, 5], [5, 4, 3]) == False\nassert func([], [1, 2, 3]) == False\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], [2, 3]) == True\nassert func([1, 2, 3, 4, 5], [4, 6]) == False\nassert func([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\nassert func([1, 2, 3, 4, 5], [5, 4, 3]) == False\nassert func([], [1, 2, 3]) == False\n"}
{"task_id": 28, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(Input):\n    '''\n    A function should be written to determine whether all the given tuples have equal length or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (3, 4), (5, 6)]) == True\nassert func([(1, 2, 3), (4, 5), (6, 7, 8)]) == False\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == True\nassert func([(1,), (2,), (3,)]) == True\nassert func([]) == True\n```", "response_code": "\nassert func([(1, 2), (3, 4), (5, 6)]) == True\nassert func([(1, 2, 3), (4, 5), (6, 7, 8)]) == False\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == True\nassert func([(1,), (2,), (3,)]) == True\nassert func([]) == True\n"}
{"task_id": 29, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(nums):\n    '''\n    A function should be written to sort a list of elements using comb sort.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([4, 2, 7, 1, 5]) == [1, 2, 4, 5, 7]\nassert func([9, 3, 6, 2, 8, 1, 5, 7, 4]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert func([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1]) == [1]\n```", "response_code": "\n# Test cases\nassert func([4, 2, 7, 1, 5]) == [1, 2, 4, 5, 7]\nassert func([9, 3, 6, 2, 8, 1, 5, 7, 4]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert func([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1]) == [1]\n"}
{"task_id": 30, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function should be written to check whether the given number can be represented as difference of two squares or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(10) == True\nassert func(25) == True\nassert func(7) == False\nassert func(16) == True\nassert func(21) == False\n```", "response_code": "\nassert func(10) == True\nassert func(25) == True\nassert func(7) == False\nassert func(16) == True\nassert func(21) == False\n"}
{"task_id": 31, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(colors, patterns):    \n    '''\n    A function should be written to check whether it follows the sequence given in the patterns array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['red', 'blue', 'green'], ['solid', 'striped', 'polka dot']) == True\nassert func(['red', 'blue', 'green'], ['solid', 'striped', 'solid']) == False\nassert func(['red', 'blue', 'green'], ['solid', 'striped']) == False\nassert func(['red', 'blue', 'green'], ['solid', 'striped', 'polka dot', 'solid']) == False\nassert func(['red', 'blue', 'green'], ['solid', 'striped', 'polka dot', 'striped']) == False\n```", "response_code": "\nassert func(['red', 'blue', 'green'], ['solid', 'striped', 'polka dot']) == True\nassert func(['red', 'blue', 'green'], ['solid', 'striped', 'solid']) == False\nassert func(['red', 'blue', 'green'], ['solid', 'striped']) == False\nassert func(['red', 'blue', 'green'], ['solid', 'striped', 'polka dot', 'solid']) == False\nassert func(['red', 'blue', 'green'], ['solid', 'striped', 'polka dot', 'striped']) == False\n"}
{"task_id": 32, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(test_list, K):\n    '''\n    A function should be written to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == [(4, 5, 6)]\nassert func([(10, 20, 30), (40, 50, 60), (70, 80, 90)], 10) == [(10, 20, 30), (40, 50, 60), (70, 80, 90)]\nassert func([(3, 6, 9), (12, 15, 18), (21, 24, 27)], 3) == [(3, 6, 9), (12, 15, 18), (21, 24, 27)]\nassert func([(2, 4, 6), (8, 10, 12), (14, 16, 18)], 2) == [(2, 4, 6), (8, 10, 12), (14, 16, 18)]\nassert func([(5, 10, 15), (20, 25, 30), (35, 40, 45)], 5) == [(5, 10, 15), (20, 25, 30), (35, 40, 45)]\n```", "response_code": "\n# Test cases\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == [(4, 5, 6)]\nassert func([(10, 20, 30), (40, 50, 60), (70, 80, 90)], 10) == [(10, 20, 30), (40, 50, 60), (70, 80, 90)]\nassert func([(3, 6, 9), (12, 15, 18), (21, 24, 27)], 3) == [(3, 6, 9), (12, 15, 18), (21, 24, 27)]\nassert func([(2, 4, 6), (8, 10, 12), (14, 16, 18)], 2) == [(2, 4, 6), (8, 10, 12), (14, 16, 18)]\nassert func([(5, 10, 15), (20, 25, 30), (35, 40, 45)], 5) == [(5, 10, 15), (20, 25, 30), (35, 40, 45)]\n"}
{"task_id": 33, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function is written to find the difference between sum of even and odd digits.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1234) == 2\nassert func(2468) == 8\nassert func(13579) == -14\nassert func(1111) == 0\nassert func(987654321) == 0\n```", "response_code": "\nassert func(1234) == 2\nassert func(2468) == 8\nassert func(13579) == -14\nassert func(1111) == 0\nassert func(987654321) == 0\n"}
{"task_id": 34, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(s): \n    '''\n    A python function is written to check whether the length of the word is odd or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == True\nassert func(\"python\") == False\nassert func(\"world\") == True\nassert func(\"programming\") == False\nassert func(\"test\") == True\n```", "response_code": "\nassert func(\"hello\") == True\nassert func(\"python\") == False\nassert func(\"world\") == True\nassert func(\"programming\") == False\nassert func(\"test\") == True\n"}
{"task_id": 35, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to find the nth tetrahedral number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 4\nassert func(3) == 10\nassert func(4) == 20\nassert func(5) == 35\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 4\nassert func(3) == 10\nassert func(4) == 20\nassert func(5) == 35\n"}
{"task_id": 36, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "import math\ndef func(r):\n    '''\n    A function should be written to find the volume of a sphere.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == (4/3) * math.pi * (1**3)\nassert func(2) == (4/3) * math.pi * (2**3)\nassert func(0) == 0\nassert func(5) == (4/3) * math.pi * (5**3)\nassert func(10) == (4/3) * math.pi * (10**3)\n```", "response_code": "\nassert func(1) == (4/3) * math.pi * (1**3)\nassert func(2) == (4/3) * math.pi * (2**3)\nassert func(0) == 0\nassert func(5) == (4/3) * math.pi * (5**3)\nassert func(10) == (4/3) * math.pi * (10**3)\n"}
{"task_id": 37, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(strr):  \n    '''\n    A python function is written to find the character made by adding all the characters of the given string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"abc\") == 'a'\nassert func(\"hello\") == 'h'\nassert func(\"12345\") == '1'\nassert func(\"python\") == 'p'\nassert func(\"racecar\") == 'r'\n```", "response_code": "\nassert func(\"abc\") == 'a'\nassert func(\"hello\") == 'h'\nassert func(\"12345\") == '1'\nassert func(\"python\") == 'p'\nassert func(\"racecar\") == 'r'\n"}
{"task_id": 38, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to find the n-th number in the newman conway sequence.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 1\nassert func(2) == 1\nassert func(3) == 1\nassert func(4) == 2\nassert func(5) == 2", "response_code": "assert func(1) == 1\nassert func(2) == 1\nassert func(3) == 1\nassert func(4) == 2\nassert func(5) == 2"}
{"task_id": 39, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "import math\ndef func(r):\n    '''\n    A function should be written to find the surface area of a sphere.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 4 * math.pi  # radius = 1\nassert func(0) == 0  # radius = 0\nassert func(5) == 4 * math.pi * 25  # radius = 5\nassert func(2.5) == 4 * math.pi * 6.25  # radius = 2.5\nassert func(10) == 4 * math.pi * 100  # radius = 10\n```", "response_code": "\nassert func(1) == 4 * math.pi  # radius = 1\nassert func(0) == 0  # radius = 0\nassert func(5) == 4 * math.pi * 25  # radius = 5\nassert func(2.5) == 4 * math.pi * 6.25  # radius = 2.5\nassert func(10) == 4 * math.pi * 100  # radius = 10\n"}
{"task_id": 40, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(n):\n    '''\n    A function should be written to find the nth centered hexagonal number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 7\nassert func(3) == 19\nassert func(4) == 37\nassert func(5) == 61\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 7\nassert func(3) == 19\nassert func(4) == 37\nassert func(5) == 61\n"}
{"task_id": 41, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "import collections as ct\ndef func(dict1,dict2, dict3):\n    '''\n    A function should be written to merge three dictionaries into a single expression.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test case 1\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}\ndict3 = {'e': 5, 'f': 6}\nassert func(dict1, dict2, dict3) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n\n# Test case 2\ndict1 = {'x': 10, 'y': 20}\ndict2 = {'z': 30, 'w': 40}\ndict3 = {'u': 50, 'v': 60}\nassert func(dict1, dict2, dict3) == {'x': 10, 'y': 20, 'z': 30, 'w': 40, 'u': 50, 'v': 60}\n\n# Test case 3\ndict1 = {'apple': 'red', 'banana': 'yellow'}\ndict2 = {'orange': 'orange', 'grape': 'purple'}\ndict3 = {'watermelon': 'green', 'kiwi': 'brown'}\nassert func(dict1, dict2, dict3) == {'apple': 'red', 'banana': 'yellow', 'orange': 'orange', 'grape': 'purple', 'watermelon': 'green', 'kiwi': 'brown'}\n\n# Test case 4\ndict1 = {1: 'one', 2: 'two'}\ndict2 = {3: 'three', 4: 'four'}\ndict3 = {5: 'five', 6: 'six'}\nassert func(dict1, dict2, dict3) == {1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', 6: 'six'}\n\n# Test case 5\ndict1 = {'cat': 'meow', 'dog': 'woof'}\ndict2 = {'cow': 'moo', 'pig': 'oink'}\ndict3 = {'duck': 'quack', 'chicken': 'cluck'}\nassert func(dict1, dict2, dict3) == {'cat': 'meow', 'dog': 'woof', 'cow': 'moo', 'pig': 'oink', 'duck': 'quack', 'chicken': 'cluck'}\n```", "response_code": "\n# Test case 1\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}\ndict3 = {'e': 5, 'f': 6}\nassert func(dict1, dict2, dict3) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n\n# Test case 2\ndict1 = {'x': 10, 'y': 20}\ndict2 = {'z': 30, 'w': 40}\ndict3 = {'u': 50, 'v': 60}\nassert func(dict1, dict2, dict3) == {'x': 10, 'y': 20, 'z': 30, 'w': 40, 'u': 50, 'v': 60}\n\n# Test case 3\ndict1 = {'apple': 'red', 'banana': 'yellow'}\ndict2 = {'orange': 'orange', 'grape': 'purple'}\ndict3 = {'watermelon': 'green', 'kiwi': 'brown'}\nassert func(dict1, dict2, dict3) == {'apple': 'red', 'banana': 'yellow', 'orange': 'orange', 'grape': 'purple', 'watermelon': 'green', 'kiwi': 'brown'}\n\n# Test case 4\ndict1 = {1: 'one', 2: 'two'}\ndict2 = {3: 'three', 4: 'four'}\ndict3 = {5: 'five', 6: 'six'}\nassert func(dict1, dict2, dict3) == {1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', 6: 'six'}\n\n# Test case 5\ndict1 = {'cat': 'meow', 'dog': 'woof'}\ndict2 = {'cow': 'moo', 'pig': 'oink'}\ndict3 = {'duck': 'quack', 'chicken': 'cluck'}\nassert func(dict1, dict2, dict3) == {'cat': 'meow', 'dog': 'woof', 'cow': 'moo', 'pig': 'oink', 'duck': 'quack', 'chicken': 'cluck'}\n"}
{"task_id": 42, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "import collections\ndef func(list1):\n    '''\n    A function should be written to get the frequency of the elements in a list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([1, 2, 3, 1, 2, 1]) == {1: 3, 2: 2, 3: 1}\nassert func([1, 1, 1, 1, 1]) == {1: 5}\nassert func([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}\nassert func([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == {1: 1, 2: 2, 3: 3, 4: 4}\nassert func([]) == {}\n```", "response_code": "\n# Test cases\nassert func([1, 2, 3, 1, 2, 1]) == {1: 3, 2: 2, 3: 1}\nassert func([1, 1, 1, 1, 1]) == {1: 5}\nassert func([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}\nassert func([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == {1: 1, 2: 2, 3: 3, 4: 4}\nassert func([]) == {}\n"}
{"task_id": 43, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(N):\n    '''\n    A function should be written to find the closest smaller number than n.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5) == 4\nassert func(10) == 9\nassert func(20) == 19\nassert func(50) == 49\nassert func(100) == 99\n```", "response_code": "\nassert func(5) == 4\nassert func(10) == 9\nassert func(20) == 19\nassert func(50) == 49\nassert func(100) == 99\n"}
{"task_id": 44, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(list1):\n    '''\n    A python function is written to find the length of the longest word.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([\"apple\", \"banana\", \"cherry\"]) == 6\nassert func([\"hello\", \"world\"]) == 5\nassert func([\"python\", \"programming\", \"language\"]) == 11\nassert func([\"data\", \"science\", \"machine\", \"learning\"]) == 8\nassert func([\"a\", \"bb\", \"ccc\", \"dddd\"]) == 4\n```", "response_code": "\nassert func([\"apple\", \"banana\", \"cherry\"]) == 6\nassert func([\"hello\", \"world\"]) == 5\nassert func([\"python\", \"programming\", \"language\"]) == 11\nassert func([\"data\", \"science\", \"machine\", \"learning\"]) == 8\nassert func([\"a\", \"bb\", \"ccc\", \"dddd\"]) == 4\n"}
{"task_id": 45, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(str1, sub_str):\n    '''\n    A function should be written to check if a substring is present in a given list of string values.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\", \"ell\") == True\nassert func(\"python\", \"java\") == False\nassert func(\"programming\", \"gram\") == True\nassert func(\"apple\", \"banana\") == False\nassert func(\"coding\", \"cod\") == True\n```", "response_code": "\nassert func(\"hello\", \"ell\") == True\nassert func(\"python\", \"java\") == False\nassert func(\"programming\", \"gram\") == True\nassert func(\"apple\", \"banana\") == False\nassert func(\"coding\", \"cod\") == True\n"}
{"task_id": 46, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to check whether the given number is undulating or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(101) == True\nassert func(121) == False\nassert func(12321) == True\nassert func(123456) == False\nassert func(1212121) == True\n```", "response_code": "\nassert func(101) == True\nassert func(121) == False\nassert func(12321) == True\nassert func(123456) == False\nassert func(1212121) == True\n"}
{"task_id": 47, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(a,b):\n    '''\n    A function should be written to calculate the value of 'a' to the power 'b'.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "def func(a,b):\n    '''\n    A function should be written to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n\n# check the correctness of func\nassert func(2, 3) == 8\nassert func(5, 2) == 25\nassert func(3, 4) == 81\nassert func(10, 0) == 1\nassert func(0, 5) == 0\n\nprint(\"All assertions passed successfully!\")", "response_code": "def func(a,b):\n    '''\n    A function should be written to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n\n# check the correctness of func\nassert func(2, 3) == 8\nassert func(5, 2) == 25\nassert func(3, 4) == 81\nassert func(10, 0) == 1\nassert func(0, 5) == 0\n\nprint(\"All assertions passed successfully!\")"}
{"task_id": 48, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "from operator import itemgetter \ndef func(test_list):\n    '''\n    A function should be written to extract the index minimum value record from the given tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([(1, 2), (3, 4), (0, 5)]) == 2\nassert func([(10, 20), (30, 40), (5, 15)]) == 0\nassert func([(100, 200), (50, 150), (75, 175)]) == 1\nassert func([(5, 10), (8, 12), (3, 6)]) == 2\nassert func([(2, 4), (1, 3), (6, 8)]) == 1\n```", "response_code": "\n# Test cases\nassert func([(1, 2), (3, 4), (0, 5)]) == 2\nassert func([(10, 20), (30, 40), (5, 15)]) == 0\nassert func([(100, 200), (50, 150), (75, 175)]) == 1\nassert func([(5, 10), (8, 12), (3, 6)]) == 2\nassert func([(2, 4), (1, 3), (6, 8)]) == 1\n"}
{"task_id": 49, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(lst):  \n    '''\n    A python function is written to find the minimum length of sublist.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 2\nassert func([[1, 2, 3], [4, 5], [6, 7, 8]]) == 2\nassert func([[1, 2, 3], [4, 5], [6, 7]]) == 2\nassert func([[1, 2, 3], [4, 5], [6]]) == 1\nassert func([[1, 2, 3], [4, 5], []]) == 0\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 2\nassert func([[1, 2, 3], [4, 5], [6, 7, 8]]) == 2\nassert func([[1, 2, 3], [4, 5], [6, 7]]) == 2\nassert func([[1, 2, 3], [4, 5], [6]]) == 1\nassert func([[1, 2, 3], [4, 5], []]) == 0\n"}
{"task_id": 50, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(n):\n    '''\n    A python function is written to find the number of divisors of a given integer.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(10) == 4\nassert func(15) == 4\nassert func(20) == 6\nassert func(25) == 3\nassert func(30) == 8\n```", "response_code": "\nassert func(10) == 4\nassert func(15) == 4\nassert func(20) == 6\nassert func(25) == 3\nassert func(30) == 8\n"}
{"task_id": 51, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to find the frequency count of a list of lists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([[1, 2, 3], [4, 5], [1, 2, 3]]) == {1: 2, 2: 2, 3: 2, 4: 1, 5: 1}\nassert func([[1, 1, 1], [2, 2], [3, 3, 3, 3]]) == {1: 3, 2: 2, 3: 4}\nassert func([[1, 2], [3], [4, 5, 6]]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}\nassert func([[1], [2], [3], [4], [5]]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}\nassert func([[1, 2, 3, 4, 5]]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}\n```", "response_code": "\n# Test cases\nassert func([[1, 2, 3], [4, 5], [1, 2, 3]]) == {1: 2, 2: 2, 3: 2, 4: 1, 5: 1}\nassert func([[1, 1, 1], [2, 2], [3, 3, 3, 3]]) == {1: 3, 2: 2, 3: 4}\nassert func([[1, 2], [3], [4, 5, 6]]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}\nassert func([[1], [2], [3], [4], [5]]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}\nassert func([[1, 2, 3, 4, 5]]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}\n"}
{"task_id": 52, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(numbers):  \n    '''\n    A function should be written to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 30/5\nassert func([0, 0, 0, 0, 0]) == 0/5\nassert func([2, 4, 6, 8, 10]) == 384/5\nassert func([-1, -2, -3, -4, -5]) == -120/5\nassert func([1, 3, 5, 7, 9]) == 945/5\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 30/5\nassert func([0, 0, 0, 0, 0]) == 0/5\nassert func([2, 4, 6, 8, 10]) == 384/5\nassert func([-1, -2, -3, -4, -5]) == -120/5\nassert func([1, 3, 5, 7, 9]) == 945/5\n"}
{"task_id": 53, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to convert the given decimal number to its binary equivalent.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == '0'\nassert func(1) == '1'\nassert func(5) == '101'\nassert func(10) == '1010'\nassert func(15) == '1111'\n```", "response_code": "\nassert func(0) == '0'\nassert func(1) == '1'\nassert func(5) == '101'\nassert func(10) == '1010'\nassert func(15) == '1111'\n"}
{"task_id": 54, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "import sys\ndef func(num):\n    '''\n    A function should be written to find the next smallest palindrome of a specified number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(123) == 131\nassert func(999) == 1001\nassert func(45678) == 45754\nassert func(123456789) == 123464321\nassert func(987654321) == 987676789\n```", "response_code": "\nassert func(123) == 131\nassert func(999) == 1001\nassert func(45678) == 45754\nassert func(123456789) == 123464321\nassert func(987654321) == 987676789\n"}
{"task_id": 55, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(arr, k):\n    '''\n    A function should be written to find the kth element in the given array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3], 3) == 3\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3], 6) == 5\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3], 1) == 1\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3], 10) == 3\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3], 5) == 5\n```", "response_code": "\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3], 3) == 3\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3], 6) == 5\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3], 1) == 1\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3], 10) == 3\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3], 5) == 5\n"}
{"task_id": 56, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(word):\n    '''\n    A function should be written to convert snake case string to camel case string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello_world\") == \"HelloWorld\"\nassert func(\"snake_case_example\") == \"SnakeCaseExample\"\nassert func(\"this_is_a_test\") == \"ThisIsATest\"\nassert func(\"camel_case_string\") == \"CamelCaseString\"\nassert func(\"another_example\") == \"AnotherExample\"\n```", "response_code": "\nassert func(\"hello_world\") == \"HelloWorld\"\nassert func(\"snake_case_example\") == \"SnakeCaseExample\"\nassert func(\"this_is_a_test\") == \"ThisIsATest\"\nassert func(\"camel_case_string\") == \"CamelCaseString\"\nassert func(\"another_example\") == \"AnotherExample\"\n"}
{"task_id": 57, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(n, m): \n    '''\n    A function should be written to find the eulerian number a(n, m).\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0, 0) == 1\nassert func(3, 2) == 5\nassert func(5, 3) == 26\nassert func(4, 4) == 186\nassert func(6, 1) == 1\n```", "response_code": "\nassert func(0, 0) == 1\nassert func(3, 2) == 5\nassert func(5, 3) == 26\nassert func(4, 4) == 186\nassert func(6, 1) == 1\n"}
{"task_id": 58, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(input_list):\n    '''\n    A function should be written to sort each sublist of strings in a given list of lists using a lambda function.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([['banana', 'apple', 'cherry'], ['orange', 'grape', 'pear']]) == [['apple', 'banana', 'cherry'], ['grape', 'orange', 'pear']]\nassert func([['zebra', 'lion', 'elephant'], ['monkey', 'giraffe', 'tiger']]) == [['elephant', 'lion', 'zebra'], ['giraffe', 'monkey', 'tiger']]\nassert func([['dog', 'cat', 'rabbit'], ['hamster', 'guinea pig', 'ferret']]) == [['cat', 'dog', 'rabbit'], ['ferret', 'guinea pig', 'hamster']]\nassert func([['sun', 'moon', 'stars'], ['earth', 'mars', 'jupiter']]) == [['moon', 'stars', 'sun'], ['earth', 'jupiter', 'mars']]\nassert func([['red', 'blue', 'green'], ['yellow', 'purple', 'orange']]) == [['blue', 'green', 'red'], ['orange', 'purple', 'yellow']]\n```", "response_code": "\n# Test cases\nassert func([['banana', 'apple', 'cherry'], ['orange', 'grape', 'pear']]) == [['apple', 'banana', 'cherry'], ['grape', 'orange', 'pear']]\nassert func([['zebra', 'lion', 'elephant'], ['monkey', 'giraffe', 'tiger']]) == [['elephant', 'lion', 'zebra'], ['giraffe', 'monkey', 'tiger']]\nassert func([['dog', 'cat', 'rabbit'], ['hamster', 'guinea pig', 'ferret']]) == [['cat', 'dog', 'rabbit'], ['ferret', 'guinea pig', 'hamster']]\nassert func([['sun', 'moon', 'stars'], ['earth', 'mars', 'jupiter']]) == [['moon', 'stars', 'sun'], ['earth', 'jupiter', 'mars']]\nassert func([['red', 'blue', 'green'], ['yellow', 'purple', 'orange']]) == [['blue', 'green', 'red'], ['orange', 'purple', 'yellow']]\n"}
{"task_id": 59, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(lst):   \n    '''\n    A python function is written to count true booleans in the given list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([True, False, True, False, True]) == 3\nassert func([True, True, True, True, True]) == 5\nassert func([False, False, False, False, False]) == 0\nassert func([]) == 0\nassert func([True, False, True, False, True, False, True]) == 3\n```", "response_code": "\nassert func([True, False, True, False, True]) == 3\nassert func([True, True, True, True, True]) == 5\nassert func([False, False, False, False, False]) == 0\nassert func([]) == 0\nassert func([True, False, True, False, True, False, True]) == 3\n"}
{"task_id": 60, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(test_list, test_tup):\n    '''\n    A function should be written to add the given list to the given tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\ntest_list = [1, 2, 3]\ntest_tup = (4, 5)\n\n# Test Case 1\nassert func(test_list, test_tup) == [(1, 4), (2, 5), (3, 4)]\n\n# Test Case 2\ntest_list = [10, 20, 30]\ntest_tup = (40, 50)\nassert func(test_list, test_tup) == [(10, 40), (20, 50), (30, 40)]\n\n# Test Case 3\ntest_list = [100, 200, 300]\ntest_tup = (400, 500)\nassert func(test_list, test_tup) == [(100, 400), (200, 500), (300, 400)]\n\n# Test Case 4\ntest_list = [5, 10, 15]\ntest_tup = (20, 25)\nassert func(test_list, test_tup) == [(5, 20), (10, 25), (15, 20)]\n\n# Test Case 5\ntest_list = [7, 14, 21]\ntest_tup = (28, 35)\nassert func(test_list, test_tup) == [(7, 28), (14, 35), (21, 28)]\n```", "response_code": "\ntest_list = [1, 2, 3]\ntest_tup = (4, 5)\n\n# Test Case 1\nassert func(test_list, test_tup) == [(1, 4), (2, 5), (3, 4)]\n\n# Test Case 2\ntest_list = [10, 20, 30]\ntest_tup = (40, 50)\nassert func(test_list, test_tup) == [(10, 40), (20, 50), (30, 40)]\n\n# Test Case 3\ntest_list = [100, 200, 300]\ntest_tup = (400, 500)\nassert func(test_list, test_tup) == [(100, 400), (200, 500), (300, 400)]\n\n# Test Case 4\ntest_list = [5, 10, 15]\ntest_tup = (20, 25)\nassert func(test_list, test_tup) == [(5, 20), (10, 25), (15, 20)]\n\n# Test Case 5\ntest_list = [7, 14, 21]\ntest_tup = (28, 35)\nassert func(test_list, test_tup) == [(7, 28), (14, 35), (21, 28)]\n"}
{"task_id": 61, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "import heapq\ndef func(num1,num2,num3):\n    '''\n    A function should be written to merge multiple sorted inputs into a single sorted iterator using the heap queue algorithm.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert list(func([1, 3, 5], [2, 4, 6], [0, 7, 8])) == [0, 1, 2, 3, 4, 5, 6, 7, 8]\nassert list(func([1, 2, 3], [4, 5, 6], [7, 8, 9])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert list(func([1, 4, 7], [2, 5, 8], [3, 6, 9])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert list(func([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12])) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert list(func([3, 6, 9], [2, 5, 8], [1, 4, 7])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```", "response_code": "\n# Test cases\nassert list(func([1, 3, 5], [2, 4, 6], [0, 7, 8])) == [0, 1, 2, 3, 4, 5, 6, 7, 8]\nassert list(func([1, 2, 3], [4, 5, 6], [7, 8, 9])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert list(func([1, 4, 7], [2, 5, 8], [3, 6, 9])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert list(func([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12])) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert list(func([3, 6, 9], [2, 5, 8], [1, 4, 7])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"}
{"task_id": 62, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(s,n): \n    '''\n    A python function is written to find the count of rotations of a binary string with odd value.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func('101', 3) == 1\nassert func('1101', 4) == 2\nassert func('11111', 5) == 0\nassert func('1001', 4) == 1\nassert func('1010101', 7) == 3\n```", "response_code": "\nassert func('101', 3) == 1\nassert func('1101', 4) == 2\nassert func('11111', 5) == 0\nassert func('1001', 4) == 1\nassert func('1010101', 7) == 3\n"}
{"task_id": 63, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(nestedlist):\n    '''\n    A function should be written to find common elements in given nested lists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == []\nassert func([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]\nassert func([[1, 2, 3], [4, 5, 6], [1, 2, 3]]) == [1, 2, 3]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3]]) == []\n```", "response_code": "\nassert func([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == []\nassert func([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]\nassert func([[1, 2, 3], [4, 5, 6], [1, 2, 3]]) == [1, 2, 3]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3]]) == []\n"}
{"task_id": 64, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(text):\n    '''\n    A function should be written to check if a string represents an integer or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"123\") == True\nassert func(\"-456\") == True\nassert func(\"0\") == True\nassert func(\"12.34\") == False\nassert func(\"abc\") == False\n```", "response_code": "\nassert func(\"123\") == True\nassert func(\"-456\") == True\nassert func(\"0\") == True\nassert func(\"12.34\") == False\nassert func(\"abc\") == False\n"}
{"task_id": 65, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to check whether all dictionaries in a list are empty or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases for func\n\n# Test case 1: Empty list\nassert func([]) == True\n\n# Test case 2: List with one empty dictionary\nassert func([{}]) == True\n\n# Test case 3: List with multiple empty dictionaries\nassert func([{}, {}, {}]) == True\n\n# Test case 4: List with non-empty dictionaries\nassert func([{'a': 1}, {'b': 2}]) == False\n\n# Test case 5: List with a mix of empty and non-empty dictionaries\nassert func([{}, {'a': 1}, {}]) == False\n```", "response_code": "\n# Test cases for func\n\n# Test case 1: Empty list\nassert func([]) == True\n\n# Test case 2: List with one empty dictionary\nassert func([{}]) == True\n\n# Test case 3: List with multiple empty dictionaries\nassert func([{}, {}, {}]) == True\n\n# Test case 4: List with non-empty dictionaries\nassert func([{'a': 1}, {'b': 2}]) == False\n\n# Test case 5: List with a mix of empty and non-empty dictionaries\nassert func([{}, {'a': 1}, {}]) == False\n"}
{"task_id": 66, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(nums):\n    '''\n    A function should be written to convert a given tuple of positive integers into an integer.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3)) == 123\nassert func((9, 8, 7, 6)) == 9876\nassert func((0, 5, 2, 1)) == 52\nassert func((3, 0, 0, 1)) == 3001\nassert func((4, 5, 6, 7, 8)) == 45678\n```", "response_code": "\nassert func((1, 2, 3)) == 123\nassert func((9, 8, 7, 6)) == 9876\nassert func((0, 5, 2, 1)) == 52\nassert func((3, 0, 0, 1)) == 3001\nassert func((4, 5, 6, 7, 8)) == 45678\n"}
{"task_id": 67, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(test_list):\n    '''\n    A function should be written to convert all possible convertible elements in the list to float.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\ntest_list_1 = [1, 2, 3, '4', '5.5']\nassert func(test_list_1) == [1.0, 2.0, 3.0, 4.0, 5.5]\n\ntest_list_2 = ['1.1', '2.2', '3.3', '4.4', '5.5']\nassert func(test_list_2) == [1.1, 2.2, 3.3, 4.4, 5.5]\n\ntest_list_3 = [1, '2.2', 3, '4.4', 5]\nassert func(test_list_3) == [1.0, 2.2, 3.0, 4.4, 5.0]\n\ntest_list_4 = ['1', '2', '3', '4', '5']\nassert func(test_list_4) == [1.0, 2.0, 3.0, 4.0, 5.0]\n\ntest_list_5 = ['1.1', 2, '3.3', 4, '5.5']\nassert func(test_list_5) == [1.1, 2.0, 3.3, 4.0, 5.5]\n```", "response_code": "\ntest_list_1 = [1, 2, 3, '4', '5.5']\nassert func(test_list_1) == [1.0, 2.0, 3.0, 4.0, 5.5]\n\ntest_list_2 = ['1.1', '2.2', '3.3', '4.4', '5.5']\nassert func(test_list_2) == [1.1, 2.2, 3.3, 4.4, 5.5]\n\ntest_list_3 = [1, '2.2', 3, '4.4', 5]\nassert func(test_list_3) == [1.0, 2.2, 3.0, 4.4, 5.0]\n\ntest_list_4 = ['1', '2', '3', '4', '5']\nassert func(test_list_4) == [1.0, 2.0, 3.0, 4.0, 5.0]\n\ntest_list_5 = ['1.1', 2, '3.3', 4, '5.5']\nassert func(test_list_5) == [1.1, 2.0, 3.3, 4.0, 5.5]\n"}
{"task_id": 68, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(string): \n    '''\n    A function should be written to convert a string to a list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == ['h', 'e', 'l', 'l', 'o']\nassert func(\"12345\") == ['1', '2', '3', '4', '5']\nassert func(\"abc123\") == ['a', 'b', 'c', '1', '2', '3']\nassert func(\"\") == []\nassert func(\"testing 123\") == ['t', 'e', 's', 't', 'i', 'n', 'g', ' ', '1', '2', '3']\n```", "response_code": "\nassert func(\"hello\") == ['h', 'e', 'l', 'l', 'o']\nassert func(\"12345\") == ['1', '2', '3', '4', '5']\nassert func(\"abc123\") == ['a', 'b', 'c', '1', '2', '3']\nassert func(\"\") == []\nassert func(\"testing 123\") == ['t', 'e', 's', 't', 'i', 'n', 'g', ' ', '1', '2', '3']\n"}
{"task_id": 69, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(arr):\n    '''\n    A python function is written to find the element that appears only once in a sorted array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 1, 2, 2, 3, 4, 4, 5, 5]) == 3\nassert func([1, 1, 2, 2, 3, 3, 4, 4, 5]) == 5\nassert func([1, 2, 2, 3, 3, 4, 4, 5, 5]) == 1\nassert func([1, 1, 2, 3, 3, 4, 4, 5, 5]) == 2\nassert func([1, 1, 2, 2, 3, 3, 4, 5, 5]) == 4\n```", "response_code": "\nassert func([1, 1, 2, 2, 3, 4, 4, 5, 5]) == 3\nassert func([1, 1, 2, 2, 3, 3, 4, 4, 5]) == 5\nassert func([1, 2, 2, 3, 3, 4, 4, 5, 5]) == 1\nassert func([1, 1, 2, 3, 3, 4, 4, 5, 5]) == 2\nassert func([1, 1, 2, 2, 3, 3, 4, 5, 5]) == 4\n"}
{"task_id": 70, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to find the maximum product from the pairs of tuples within a given list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([(1, 2), (3, 4), (5, 6)]) == 30  # (5*6)\nassert func([(2, 3), (4, 5), (6, 7)]) == 42  # (6*7)\nassert func([(1, 9), (2, 8), (3, 7)]) == 63  # (9*7)\nassert func([(4, 5), (6, 7), (8, 9)]) == 72  # (8*9)\nassert func([(2, 10), (3, 9), (4, 8)]) == 80  # (10*8)\n```", "response_code": "\n# Test cases\nassert func([(1, 2), (3, 4), (5, 6)]) == 30  # (5*6)\nassert func([(2, 3), (4, 5), (6, 7)]) == 42  # (6*7)\nassert func([(1, 9), (2, 8), (3, 7)]) == 63  # (9*7)\nassert func([(4, 5), (6, 7), (8, 9)]) == 72  # (8*9)\nassert func([(2, 10), (3, 9), (4, 8)]) == 80  # (10*8)\n"}
{"task_id": 71, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(limit):\n    '''\n    A function should be written to sum all amicable numbers from 1 to a specified number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(100) == 504\nassert func(200) == 2898\nassert func(500) == 8442\nassert func(1000) == 31626\nassert func(2000) == 63918\n```", "response_code": "\nassert func(100) == 504\nassert func(200) == 2898\nassert func(500) == 8442\nassert func(1000) == 31626\nassert func(2000) == 63918\n"}
{"task_id": 72, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "import cmath\ndef func(a,b):\n    '''\n    A function should be written to get the angle of a complex number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1, 0) == 0\nassert func(0, 1) == cmath.pi/2\nassert func(-1, 0) == cmath.pi\nassert func(0, -1) == -cmath.pi/2\nassert func(1, 1) == cmath.pi/4\n```", "response_code": "\nassert func(1, 0) == 0\nassert func(0, 1) == cmath.pi/2\nassert func(-1, 0) == cmath.pi\nassert func(0, -1) == -cmath.pi/2\nassert func(1, 1) == cmath.pi/4\n"}
{"task_id": 73, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(string): \n    '''\n    A function should be written to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"110\") == 1\nassert func(\"1010\") == 2\nassert func(\"1111\") == 0\nassert func(\"0000\") == 0\nassert func(\"1010101\") == 4\n```", "response_code": "\nassert func(\"110\") == 1\nassert func(\"1010\") == 2\nassert func(\"1111\") == 0\nassert func(\"0000\") == 0\nassert func(\"1010101\") == 4\n"}
{"task_id": 74, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(a,b): \n    '''\n    A python function is written to find the sum of common divisors of two given numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(12, 18) == 6\nassert func(15, 25) == 5\nassert func(20, 30) == 12\nassert func(36, 48) == 18\nassert func(50, 75) == 15\n```", "response_code": "\nassert func(12, 18) == 6\nassert func(15, 25) == 5\nassert func(20, 30) == 12\nassert func(36, 48) == 18\nassert func(50, 75) == 15\n"}
{"task_id": 75, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(x, y):\n    '''\n    A function should be written to multiply two integers without using the * operator in python.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(2, 3) == 6\nassert func(5, 0) == 0\nassert func(10, -2) == -20\nassert func(-3, -4) == 12\nassert func(7, 8) == 56\n```", "response_code": "\nassert func(2, 3) == 6\nassert func(5, 0) == 0\nassert func(10, -2) == -20\nassert func(-3, -4) == 12\nassert func(7, 8) == 56\n"}
{"task_id": 76, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(n, str):\n    '''\n    A function should be written to shortlist words that are longer than n from a given list of words.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5, [\"apple\", \"banana\", \"orange\", \"kiwi\", \"grape\"]) == [\"banana\", \"orange\"]\nassert func(4, [\"hello\", \"world\", \"python\", \"programming\"]) == [\"hello\", \"world\", \"python\", \"programming\"]\nassert func(3, [\"cat\", \"dog\", \"elephant\", \"lion\", \"tiger\"]) == [\"elephant\", \"lion\", \"tiger\"]\nassert func(6, [\"carrot\", \"potato\", \"tomato\", \"cucumber\"]) == [\"potato\", \"tomato\", \"cucumber\"]\nassert func(2, [\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"]) == [\"bb\", \"ccc\", \"dddd\", \"eeeee\"]\n```", "response_code": "\nassert func(5, [\"apple\", \"banana\", \"orange\", \"kiwi\", \"grape\"]) == [\"banana\", \"orange\"]\nassert func(4, [\"hello\", \"world\", \"python\", \"programming\"]) == [\"hello\", \"world\", \"python\", \"programming\"]\nassert func(3, [\"cat\", \"dog\", \"elephant\", \"lion\", \"tiger\"]) == [\"elephant\", \"lion\", \"tiger\"]\nassert func(6, [\"carrot\", \"potato\", \"tomato\", \"cucumber\"]) == [\"potato\", \"tomato\", \"cucumber\"]\nassert func(2, [\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"]) == [\"bb\", \"ccc\", \"dddd\", \"eeeee\"]\n"}
{"task_id": 77, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(my_matrix):\n    '''\n    A function should be written to calculate a magic square.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == True\nassert func([[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]) == True\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False\nassert func([[8, 1, 6], [3, 5, 7], [4, 9, 2]]) == False\nassert func([[17, 24, 1, 8, 15], [23, 5, 7, 14, 16], [4, 6, 13, 20, 22], [10, 12, 19, 21, 3], [11, 18, 25, 2, 9]]) == True\n```", "response_code": "\n# Test cases\nassert func([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == True\nassert func([[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]) == True\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False\nassert func([[8, 1, 6], [3, 5, 7], [4, 9, 2]]) == False\nassert func([[17, 24, 1, 8, 15], [23, 5, 7, 14, 16], [4, 6, 13, 20, 22], [10, 12, 19, 21, 3], [11, 18, 25, 2, 9]]) == True\n"}
{"task_id": 78, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "from collections import defaultdict\ndef func(nums):\n    '''\n    A function should be written to find the item with maximum frequency in a given list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([1, 2, 2, 3, 3, 3]) == 3\nassert func([1, 1, 2, 2, 2, 3, 3, 3, 3]) == 3\nassert func([1, 1, 1, 2, 2, 3, 3, 3, 3, 3]) == 3\nassert func([1, 2, 3, 4, 5]) == 1\nassert func([1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3]) == 3\n```", "response_code": "\n# Test cases\nassert func([1, 2, 2, 3, 3, 3]) == 3\nassert func([1, 1, 2, 2, 2, 3, 3, 3, 3]) == 3\nassert func([1, 1, 1, 2, 2, 3, 3, 3, 3, 3]) == 3\nassert func([1, 2, 3, 4, 5]) == 1\nassert func([1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3]) == 3\n"}
{"task_id": 79, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(str1):\n    '''\n    A python function to reverse only the vowels of a given string is to be written.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == \"holle\"\nassert func(\"world\") == \"werld\"\nassert func(\"apple\") == \"eppla\"\nassert func(\"banana\") == \"bonana\"\nassert func(\"python\") == \"pythan\"\n```", "response_code": "\nassert func(\"hello\") == \"holle\"\nassert func(\"world\") == \"werld\"\nassert func(\"apple\") == \"eppla\"\nassert func(\"banana\") == \"bonana\"\nassert func(\"python\") == \"pythan\"\n"}
{"task_id": 80, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(tup1):\n    '''\n    A function should be written to convert tuple to a string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func(('a', 'b', 'c')) == 'abc'\nassert func(('hello', 'world')) == 'helloworld'\nassert func(('1', '2', '3')) == '123'\nassert func(('apple', 'banana', 'cherry')) == 'applebananacherry'\nassert func(('python', 'is', 'fun')) == 'pythonisfun'\n```", "response_code": "\n# Test cases\nassert func(('a', 'b', 'c')) == 'abc'\nassert func(('hello', 'world')) == 'helloworld'\nassert func(('1', '2', '3')) == '123'\nassert func(('apple', 'banana', 'cherry')) == 'applebananacherry'\nassert func(('python', 'is', 'fun')) == 'pythonisfun'\n"}
{"task_id": 81, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(nums):\n    '''\n    A function should be written to calculate the sum of the negative numbers of a given list of numbers using a lambda function.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([1, 2, 3, 4, 5]) == 0\nassert func([-1, -2, -3, -4, -5]) == -15\nassert func([0, 1, -1, 2, -2]) == -3\nassert func([-10, 5, -3, 8, -6]) == -19\nassert func([0, 0, 0, 0, 0]) == 0\n```", "response_code": "\n# Test cases\nassert func([1, 2, 3, 4, 5]) == 0\nassert func([-1, -2, -3, -4, -5]) == -15\nassert func([0, 1, -1, 2, -2]) == -3\nassert func([-10, 5, -3, 8, -6]) == -19\nassert func([0, 0, 0, 0, 0]) == 0\n"}
{"task_id": 82, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to find the nth hexagonal number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 6\nassert func(3) == 15\nassert func(4) == 28\nassert func(5) == 45\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 6\nassert func(3) == 15\nassert func(4) == 28\nassert func(5) == 45\n"}
{"task_id": 83, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "from array import array\ndef func(nums):\n    '''\n    A function should be written to find the ratio of zeroes in an array of integers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(array('i', [0, 0, 0, 0, 0])) == 1.0\nassert func(array('i', [1, 2, 3, 4, 5])) == 0.0\nassert func(array('i', [0, 1, 0, 1, 0])) == 0.6\nassert func(array('i', [0, 0, 1, 1, 1])) == 0.4\nassert func(array('i', [0, 0, 0, 1, 1])) == 0.6\n```", "response_code": "\nassert func(array('i', [0, 0, 0, 0, 0])) == 1.0\nassert func(array('i', [1, 2, 3, 4, 5])) == 0.0\nassert func(array('i', [0, 1, 0, 1, 0])) == 0.6\nassert func(array('i', [0, 0, 1, 1, 1])) == 0.4\nassert func(array('i', [0, 0, 0, 1, 1])) == 0.6\n"}
{"task_id": 84, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function should be written to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(6) == True\nassert func(10) == True\nassert func(15) == False\nassert func(18) == True\nassert func(20) == True\n```", "response_code": "\nassert func(6) == True\nassert func(10) == True\nassert func(15) == False\nassert func(18) == True\nassert func(20) == True\n"}
{"task_id": 85, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(r):\n    '''\n    A function should be written to find the circumference of a circle.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "def func(r):\n    '''\n    A function should be written to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r\n\n# Test cases\nassert func(1) == 6.28318\nassert func(2) == 12.56636\nassert func(3) == 18.84954\nassert func(4) == 25.13272\nassert func(5) == 31.4159\n\nprint(\"All assertions passed successfully!\")", "response_code": "def func(r):\n    '''\n    A function should be written to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r\n\n# Test cases\nassert func(1) == 6.28318\nassert func(2) == 12.56636\nassert func(3) == 18.84954\nassert func(4) == 25.13272\nassert func(5) == 31.4159\n\nprint(\"All assertions passed successfully!\")"}
{"task_id": 86, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(test_list):\n    '''\n    A function should be written to extract elements that occur singly in the given tuple list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([(1, 2), (2, 3), (3, 4), (4, 5)]) == [(1, 2), (3, 4), (4, 5)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]) == [(1, 2), (3, 4), (4, 5), (5, 6)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]) == [(1, 2), (3, 4), (4, 5), (5, 6), (6, 7)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)]) == [(1, 2), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)]) == [(1, 2), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)]\n```", "response_code": "\n# Test cases\nassert func([(1, 2), (2, 3), (3, 4), (4, 5)]) == [(1, 2), (3, 4), (4, 5)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]) == [(1, 2), (3, 4), (4, 5), (5, 6)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]) == [(1, 2), (3, 4), (4, 5), (5, 6), (6, 7)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)]) == [(1, 2), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)]) == [(1, 2), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)]\n"}
{"task_id": 87, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(nums):\n    '''\n    A function should be written to sort a list of elements using pancake sort.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([3, 2, 4, 1]) == [1, 2, 3, 4]\nassert func([5, 2, 9, 1, 5]) == [1, 2, 5, 5, 9]\nassert func([10, 5, 8, 3, 1, 6]) == [1, 3, 5, 6, 8, 10]\nassert func([7, 4, 2, 9, 6, 1, 8]) == [1, 2, 4, 6, 7, 8, 9]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n```", "response_code": "\n# Test cases\nassert func([3, 2, 4, 1]) == [1, 2, 3, 4]\nassert func([5, 2, 9, 1, 5]) == [1, 2, 5, 5, 9]\nassert func([10, 5, 8, 3, 1, 6]) == [1, 3, 5, 6, 8, 10]\nassert func([7, 4, 2, 9, 6, 1, 8]) == [1, 2, 4, 6, 7, 8, 9]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"}
{"task_id": 88, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(list1,list2,list3):\n    '''\n    A function should be written to count the same pair in three given lists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([1, 2, 3], [2, 3, 4], [3, 4, 5]) == 1\nassert func([1, 2, 3], [1, 2, 3], [1, 2, 3]) == 3\nassert func([1, 2, 3], [4, 5, 6], [7, 8, 9]) == 0\nassert func([1, 2, 3], [1, 2, 3], [4, 5, 6]) == 2\nassert func([1, 2, 3], [4, 5, 6], [1, 2, 3]) == 0\n```", "response_code": "\n# Test cases\nassert func([1, 2, 3], [2, 3, 4], [3, 4, 5]) == 1\nassert func([1, 2, 3], [1, 2, 3], [1, 2, 3]) == 3\nassert func([1, 2, 3], [4, 5, 6], [7, 8, 9]) == 0\nassert func([1, 2, 3], [1, 2, 3], [4, 5, 6]) == 2\nassert func([1, 2, 3], [4, 5, 6], [1, 2, 3]) == 0\n"}
{"task_id": 89, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(Input): \n    '''\n    A function should be written to find the number of lists present in the given tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(([], [], [])) == 3\nassert func(([1, 2], [3, 4])) == 2\nassert func(([], [1], [2], [3, 4])) == 4\nassert func(()) == 0\nassert func(([1],)) == 1\n```", "response_code": "\nassert func(([], [], [])) == 3\nassert func(([1, 2], [3, 4])) == 2\nassert func(([], [1], [2], [3, 4])) == 4\nassert func(()) == 0\nassert func(([1],)) == 1\n"}
{"task_id": 90, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(arr): \n    '''\n    A python function is written to find the maximum difference between any two elements in a given array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 4\nassert func([5, 4, 3, 2, 1]) == 4\nassert func([1, 10, 3, 8, 5]) == 9\nassert func([5, 5, 5, 5, 5]) == 0\nassert func([10, 20, 30, 40, 50]) == 40\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 4\nassert func([5, 4, 3, 2, 1]) == 4\nassert func([1, 10, 3, 8, 5]) == 9\nassert func([5, 5, 5, 5, 5]) == 0\nassert func([10, 20, 30, 40, 50]) == 40\n"}
{"task_id": 91, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(a, b, n):\n    '''\n    A function should be written to find x and y that satisfies ax + by = n.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(2, 3, 7) == (7, -3)\nassert func(4, 5, 18) == (18, -14)\nassert func(6, 8, 10) == (10, -7)\nassert func(3, 7, 17) == (17, -6)\nassert func(5, 9, 32) == (32, -17)\n```", "response_code": "\nassert func(2, 3, 7) == (7, -3)\nassert func(4, 5, 18) == (18, -14)\nassert func(6, 8, 10) == (10, -7)\nassert func(3, 7, 17) == (17, -6)\nassert func(5, 9, 32) == (32, -17)\n"}
{"task_id": 92, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(list1, list2):\n    '''\n    A function should be written to remove all elements from a given list present in another list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [2, 4, 6]\n\nfunc(list1, list2)\nassert list1 == [1, 3, 5]\n\nlist1 = [10, 20, 30, 40, 50]\nlist2 = [20, 40, 60]\n\nfunc(list1, list2)\nassert list1 == [10, 30, 50]\n\nlist1 = [5, 10, 15, 20]\nlist2 = [10, 20, 30]\n\nfunc(list1, list2)\nassert list1 == [5, 15]\n\nlist1 = [100, 200, 300, 400]\nlist2 = [200, 400, 600]\n\nfunc(list1, list2)\nassert list1 == [100, 300]\n\nlist1 = [7, 14, 21, 28]\nlist2 = [14, 28, 42]\n\nfunc(list1, list2)\nassert list1 == [7, 21]\n```", "response_code": "\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [2, 4, 6]\n\nfunc(list1, list2)\nassert list1 == [1, 3, 5]\n\nlist1 = [10, 20, 30, 40, 50]\nlist2 = [20, 40, 60]\n\nfunc(list1, list2)\nassert list1 == [10, 30, 50]\n\nlist1 = [5, 10, 15, 20]\nlist2 = [10, 20, 30]\n\nfunc(list1, list2)\nassert list1 == [5, 15]\n\nlist1 = [100, 200, 300, 400]\nlist2 = [200, 400, 600]\n\nfunc(list1, list2)\nassert list1 == [100, 300]\n\nlist1 = [7, 14, 21, 28]\nlist2 = [14, 28, 42]\n\nfunc(list1, list2)\nassert list1 == [7, 21]\n"}
{"task_id": 93, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(n):\n    '''\n    A function should be written to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5) == 9\nassert func(10) == 25\nassert func(3) == 4\nassert func(7) == 16\nassert func(1) == 1\n```", "response_code": "\nassert func(5) == 9\nassert func(10) == 25\nassert func(3) == 4\nassert func(7) == 16\nassert func(1) == 1\n"}
{"task_id": 94, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "from math import tan, pi\ndef func(s, l):\n    '''\n    A function should be written to calculate the area of a regular polygon.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 5) == 10.83\nassert func(4, 10) == 100.0\nassert func(5, 7) == 85.30\nassert func(6, 3) == 23.38\nassert func(8, 6) == 96.0\n```", "response_code": "\nassert func(3, 5) == 10.83\nassert func(4, 10) == 100.0\nassert func(5, 7) == 85.30\nassert func(6, 3) == 23.38\nassert func(8, 6) == 96.0\n"}
{"task_id": 95, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "import math \ndef func(n): \n    '''\n    A python function is written to check whether the sum of divisors are same or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(6) == True\nassert func(28) == True\nassert func(12) == False\nassert func(496) == True\nassert func(10) == False\n```", "response_code": "\nassert func(6) == True\nassert func(28) == True\nassert func(12) == False\nassert func(496) == True\nassert func(10) == False\n"}
{"task_id": 96, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(str1): \n    '''\n    A python function should be written to count characters at the same position in a given string (lower and uppercase characters) as in the English alphabet.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"abc\") == 3  # 'a' at position 1, 'b' at position 2, 'c' at position 3\nassert func(\"aBc\") == 2  # 'a' at position 1, 'c' at position 3\nassert func(\"hello\") == 1  # 'h' at position 8\nassert func(\"aBcDeF\") == 3  # 'a' at position 1, 'c' at position 3, 'f' at position 6\nassert func(\"xyz\") == 0  # no characters at their corresponding positions in the English alphabet\n```", "response_code": "\nassert func(\"abc\") == 3  # 'a' at position 1, 'b' at position 2, 'c' at position 3\nassert func(\"aBc\") == 2  # 'a' at position 1, 'c' at position 3\nassert func(\"hello\") == 1  # 'h' at position 8\nassert func(\"aBcDeF\") == 3  # 'a' at position 1, 'c' at position 3, 'f' at position 6\nassert func(\"xyz\") == 0  # no characters at their corresponding positions in the English alphabet\n"}
{"task_id": 97, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(A): \n    '''\n    A python function is written to count the pairs with xor as an even number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 4\nassert func([2, 4, 6, 8, 10]) == 10\nassert func([3, 5, 7, 9, 11]) == 0\nassert func([0, 0, 0, 0, 0]) == 10\nassert func([1, 3, 5, 7, 9]) == 0\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 4\nassert func([2, 4, 6, 8, 10]) == 10\nassert func([3, 5, 7, 9, 11]) == 0\nassert func([0, 0, 0, 0, 0]) == 10\nassert func([1, 3, 5, 7, 9]) == 0\n"}
{"task_id": 98, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function is written to find the smallest power of 2 greater than or equal to n.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5) == 8\nassert func(10) == 16\nassert func(20) == 32\nassert func(50) == 64\nassert func(100) == 128\n```", "response_code": "\nassert func(5) == 8\nassert func(10) == 16\nassert func(20) == 32\nassert func(50) == 64\nassert func(100) == 128\n"}
{"task_id": 99, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(a,x): \n    '''\n    A python function is written to find the frequency of a number in a given array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 2, 2, 3, 1], 2) == 3\nassert func([5, 5, 5, 5, 5], 5) == 5\nassert func([1, 2, 3, 4, 5], 6) == 0\nassert func([1, 1, 1, 1, 1], 1) == 5\nassert func([], 10) == 0\n```", "response_code": "\nassert func([1, 2, 3, 4, 2, 2, 3, 1], 2) == 3\nassert func([5, 5, 5, 5, 5], 5) == 5\nassert func([1, 2, 3, 4, 5], 6) == 0\nassert func([1, 1, 1, 1, 1], 1) == 5\nassert func([], 10) == 0\n"}
