{"task_id": 0, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    A function should be written to find the similar elements from the given two tuple lists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (2, 3, 4)) == (2, 3)\nassert func(('a', 'b', 'c'), ('b', 'c', 'd')) == ('b', 'c')\nassert func((1, 2, 3), (4, 5, 6)) == ()\nassert func(('apple', 'banana', 'cherry'), ('date', 'banana', 'fig')) == ('banana',)\nassert func((), ()) == ()\n```", "response_code": "\nassert func((1, 2, 3), (2, 3, 4)) == (2, 3)\nassert func(('a', 'b', 'c'), ('b', 'c', 'd')) == ('b', 'c')\nassert func((1, 2, 3), (4, 5, 6)) == ()\nassert func(('apple', 'banana', 'cherry'), ('date', 'banana', 'fig')) == ('banana',)\nassert func((), ()) == ()\n"}
{"task_id": 1, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(n):\n    '''\n    A python function is written to identify non-prime numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == False\nassert func(2) == False\nassert func(3) == False\nassert func(4) == True\nassert func(17) == False\n```", "response_code": "\nassert func(1) == False\nassert func(2) == False\nassert func(3) == False\nassert func(4) == True\nassert func(17) == False\n"}
{"task_id": 2, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import heapq as hq\ndef func(nums,n):\n    '''\n    A function is written to find the largest integers from a given list of numbers using the heap queue algorithm.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 3) == [9, 6, 5]\nassert func([10, 20, 30, 40, 50], 2) == [50, 40]\nassert func([5, 4, 3, 2, 1], 1) == [5]\nassert func([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\nassert func([7, 7, 7, 7, 7], 3) == [7, 7, 7]\n```", "response_code": "\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 3) == [9, 6, 5]\nassert func([10, 20, 30, 40, 50], 2) == [50, 40]\nassert func([5, 4, 3, 2, 1], 1) == [5]\nassert func([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\nassert func([7, 7, 7, 7, 7], 3) == [7, 7, 7]\n"}
{"task_id": 3, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x): \n    '''\n    A python function is written to check whether the two numbers differ at one bit position only or not.\n    '''\n    pass\n\n# check the correctness of func \nassert "}], "response": "assert func(2, 3) == True\nassert func(5, 7) == True\nassert func(1, 2) == False\nassert func(0, 15) == False\nassert func(8, 9) == True", "response_code": "assert func(2, 3) == True\nassert func(5, 7) == True\nassert func(1, 2) == False\nassert func(0, 15) == False\nassert func(8, 9) == True"}
{"task_id": 4, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function should be written to find all words which are at least 4 characters long in a string by using regex.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello, this is a test\") == ['Hello', 'this', 'test']\nassert func(\"Python is a great programming language\") == ['Python', 'great', 'programming', 'language']\nassert func(\"1234 abcd efgh 5678\") == ['1234', 'abcd', 'efgh', '5678']\nassert func(\"Short words\") == ['Short', 'words']\nassert func(\"One two three four five\") == ['three', 'four', 'five']\n```", "response_code": "\nassert func(\"Hello, this is a test\") == ['Hello', 'this', 'test']\nassert func(\"Python is a great programming language\") == ['Python', 'great', 'programming', 'language']\nassert func(\"1234 abcd efgh 5678\") == ['1234', 'abcd', 'efgh', '5678']\nassert func(\"Short words\") == ['Short', 'words']\nassert func(\"One two three four five\") == ['three', 'four', 'five']\n"}
{"task_id": 5, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    A function is written to find squares of individual elements in a list using a lambda function.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\nassert func([-1, -2, -3, -4, -5]) == [1, 4, 9, 16, 25]\nassert func([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]\nassert func([2, 3, 5, 7, 11]) == [4, 9, 25, 49, 121]\nassert func([-2, 3, -5, 7, -11]) == [4, 9, 25, 49, 121]\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\nassert func([-1, -2, -3, -4, -5]) == [1, 4, 9, 16, 25]\nassert func([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]\nassert func([2, 3, 5, 7, 11]) == [4, 9, 25, 49, 121]\nassert func([-2, 3, -5, 7, -11]) == [4, 9, 25, 49, 121]\n"}
{"task_id": 6, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str): \n    '''\n    A python function is written to find the minimum number of rotations required to get the same string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\") == 5\nassert func(\"racecar\") == 0\nassert func(\"python\") == 6\nassert func(\"level\") == 0\nassert func(\"rotor\") == 0", "response_code": "assert func(\"hello\") == 5\nassert func(\"racecar\") == 0\nassert func(\"python\") == 6\nassert func(\"level\") == 0\nassert func(\"rotor\") == 0"}
{"task_id": 7, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(s,ch): \n    '''\n    A python function is written to remove the first and last occurrence of a given character from the string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello world\", \"o\") == \"hell world\"\nassert func(\"programming\", \"m\") == \"prograing\"\nassert func(\"banana\", \"a\") == \"bnn\"\nassert func(\"racecar\", \"r\") == \"aceca\"\nassert func(\"apple\", \"p\") == \"ale\"\n```", "response_code": "\nassert func(\"hello world\", \"o\") == \"hell world\"\nassert func(\"programming\", \"m\") == \"prograing\"\nassert func(\"banana\", \"a\") == \"bnn\"\nassert func(\"racecar\", \"r\") == \"aceca\"\nassert func(\"apple\", \"p\") == \"ale\"\n"}
{"task_id": 8, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(M):\n    '''\n    A function should be written to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert func([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\nassert func([[5, 2, 3], [1, 5, 6], [7, 8, 4]]) == [[5, 2, 3], [7, 8, 4], [1, 5, 6]]\nassert func([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == [[1, 1, 1], [2, 2, 2], [3, 3, 3]]\nassert func([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert func([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\nassert func([[5, 2, 3], [1, 5, 6], [7, 8, 4]]) == [[5, 2, 3], [7, 8, 4], [1, 5, 6]]\nassert func([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == [[1, 1, 1], [2, 2, 2], [3, 3, 3]]\nassert func([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\n"}
{"task_id": 9, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l,b,h) : \n    '''\n    A python function is written to find the volume of a triangular prism.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 4, 5) == 30\nassert func(2, 6, 8) == 48\nassert func(1, 1, 1) == 0.5\nassert func(10, 10, 10) == 500\nassert func(7, 3, 9) == 94.5\n```", "response_code": "\nassert func(3, 4, 5) == 30\nassert func(2, 6, 8) == 48\nassert func(1, 1, 1) == 0.5\nassert func(10, 10, 10) == 500\nassert func(7, 3, 9) == 94.5\n"}
{"task_id": 10, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function should be written to find sequences of lowercase letters joined with an underscore.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello_world\") == [\"hello_world\"]\nassert func(\"python_is_cool\") == [\"python_is_cool\"]\nassert func(\"abc_def_ghi\") == [\"abc_def_ghi\"]\nassert func(\"this_is_a_test\") == [\"this_is_a_test\"]\nassert func(\"one_two_three\") == [\"one_two_three\"]\n```", "response_code": "\nassert func(\"hello_world\") == [\"hello_world\"]\nassert func(\"python_is_cool\") == [\"python_is_cool\"]\nassert func(\"abc_def_ghi\") == [\"abc_def_ghi\"]\nassert func(\"this_is_a_test\") == [\"this_is_a_test\"]\nassert func(\"one_two_three\") == [\"one_two_three\"]\n"}
{"task_id": 11, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a):\n    '''\n    A function should be written to find the perimeter of a square.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 0\nassert func(1) == 4\nassert func(5) == 20\nassert func(10) == 40\nassert func(15) == 60\n```", "response_code": "\nassert func(0) == 0\nassert func(1) == 4\nassert func(5) == 20\nassert func(10) == 40\nassert func(15) == 60\n"}
{"task_id": 12, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "NO_OF_CHARS = 256\ndef func(string): \n    '''\n    A function should be written to remove characters from the first string which are present in the second string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\", \"world\") == \"he\"\nassert func(\"apple\", \"pear\") == \"appl\"\nassert func(\"python\", \"java\") == \"python\"\nassert func(\"abc\", \"def\") == \"abc\"\nassert func(\"12345\", \"54321\") == \"123\"", "response_code": "assert func(\"hello\", \"world\") == \"he\"\nassert func(\"apple\", \"pear\") == \"appl\"\nassert func(\"python\", \"java\") == \"python\"\nassert func(\"abc\", \"def\") == \"abc\"\nassert func(\"12345\", \"54321\") == \"123\""}
{"task_id": 13, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arraynums):\n    '''\n    A function should be written to determine whether a given array of integers contains any duplicate element.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == False\nassert func([1, 2, 3, 4, 1]) == True\nassert func([5, 5, 5, 5, 5]) == True\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\nassert func([1, 2, 3, 4, 5, 1]) == True", "response_code": "assert func([1, 2, 3, 4, 5]) == False\nassert func([1, 2, 3, 4, 1]) == True\nassert func([5, 5, 5, 5, 5]) == True\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\nassert func([1, 2, 3, 4, 5, 1]) == True"}
{"task_id": 14, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x): \n    '''\n    A function should be written to check if the given number is woodball or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(7) == True\nassert func(10) == False\nassert func(15) == False\nassert func(21) == True\nassert func(28) == True", "response_code": "assert func(7) == True\nassert func(10) == False\nassert func(15) == False\nassert func(21) == True\nassert func(28) == True"}
{"task_id": 15, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(num):    \n    '''\n    A python function is written to check if a given number is one less than twice its reverse.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(12) == True\nassert func(21) == True\nassert func(45) == False\nassert func(123) == True\nassert func(100) == False", "response_code": "assert func(12) == True\nassert func(21) == True\nassert func(45) == False\nassert func(123) == True\nassert func(100) == False"}
{"task_id": 16, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr) : \n    '''\n    A python function is written to find the largest number that can be formed with the given digits.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([3, 1, 4, 2]) == 4321\nassert func([5, 5, 5, 5]) == 5555\nassert func([9, 8, 7, 6]) == 9876\nassert func([0, 1, 2, 3]) == 3210\nassert func([2, 0, 4, 9]) == 9420\n```", "response_code": "\nassert func([3, 1, 4, 2]) == 4321\nassert func([5, 5, 5, 5]) == 5555\nassert func([9, 8, 7, 6]) == 9876\nassert func([0, 1, 2, 3]) == 3210\nassert func([2, 0, 4, 9]) == 9420\n"}
{"task_id": 17, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x,y): \n    '''\n    A python function is written to check whether the given two integers have opposite sign or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(5, -3) == True\nassert func(-2, 8) == True\nassert func(0, 0) == False\nassert func(-10, -20) == False\nassert func(15, 15) == False", "response_code": "assert func(5, -3) == True\nassert func(-2, 8) == True\nassert func(0, 0) == False\nassert func(-10, -20) == False\nassert func(15, 15) == False"}
{"task_id": 18, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to find the nth octagonal number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 8\nassert func(3) == 21\nassert func(4) == 40\nassert func(5) == 65\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 8\nassert func(3) == 21\nassert func(4) == 40\nassert func(5) == 65\n"}
{"task_id": 19, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from collections import defaultdict\ndef func(s):\n    '''\n    A python function is written to count the number of substrings with the sum of digits equal to their length.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"123\") == 1\nassert func(\"1234\") == 4\nassert func(\"111\") == 6\nassert func(\"12345\") == 6\nassert func(\"999\") == 4\n```", "response_code": "\nassert func(\"123\") == 1\nassert func(\"1234\") == 4\nassert func(\"111\") == 6\nassert func(\"12345\") == 6\nassert func(\"999\") == 4\n"}
{"task_id": 20, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(xs):\n    '''\n    A python function is written to find the smallest number in a list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([3, 5, 1, 7, 2]) == 1\nassert func([10, 20, 30, 40, 50]) == 10\nassert func([5, 4, 3, 2, 1]) == 1\nassert func([100, 200, 300, 400, 500]) == 100\nassert func([7, 7, 7, 7, 7]) == 7", "response_code": "assert func([3, 5, 1, 7, 2]) == 1\nassert func([10, 20, 30, 40, 50]) == 10\nassert func([5, 4, 3, 2, 1]) == 1\nassert func([100, 200, 300, 400, 500]) == 100\nassert func([7, 7, 7, 7, 7]) == 7"}
{"task_id": 21, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    A function should be written to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (3, 4), (5, 6)]) == 5\nassert func([(10, 20), (30, 40), (50, 60)]) == 50\nassert func([(5, 10), (15, 20), (25, 30)]) == 25\nassert func([(100, 200), (300, 400), (500, 600)]) == 500\nassert func([(2, 8), (15, 20), (30, 35)]) == 28\n```", "response_code": "\nassert func([(1, 2), (3, 4), (5, 6)]) == 5\nassert func([(10, 20), (30, 40), (50, 60)]) == 50\nassert func([(5, 10), (15, 20), (25, 30)]) == 25\nassert func([(100, 200), (300, 400), (500, 600)]) == 500\nassert func([(2, 8), (15, 20), (30, 35)]) == 28\n"}
{"task_id": 22, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(subjectmarks):\n    '''\n    A function should be written to sort a list of tuples using lambda.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(80, 'Math'), (70, 'Science'), (90, 'English')]) == [(70, 'Science'), (80, 'Math'), (90, 'English')]\nassert func([(60, 'History'), (75, 'Geography'), (65, 'Civics')]) == [(60, 'History'), (65, 'Civics'), (75, 'Geography')]\nassert func([(95, 'Physics'), (85, 'Chemistry'), (100, 'Biology')]) == [(85, 'Chemistry'), (95, 'Physics'), (100, 'Biology')]\nassert func([(50, 'Art'), (40, 'Music'), (45, 'Dance')]) == [(40, 'Music'), (45, 'Dance'), (50, 'Art')]\nassert func([(75, 'Computer'), (80, 'Physical Education'), (70, 'Health')]) == [(70, 'Health'), (75, 'Computer'), (80, 'Physical Education')]\n```", "response_code": "\nassert func([(80, 'Math'), (70, 'Science'), (90, 'English')]) == [(70, 'Science'), (80, 'Math'), (90, 'English')]\nassert func([(60, 'History'), (75, 'Geography'), (65, 'Civics')]) == [(60, 'History'), (65, 'Civics'), (75, 'Geography')]\nassert func([(95, 'Physics'), (85, 'Chemistry'), (100, 'Biology')]) == [(85, 'Chemistry'), (95, 'Physics'), (100, 'Biology')]\nassert func([(50, 'Art'), (40, 'Music'), (45, 'Dance')]) == [(40, 'Music'), (45, 'Dance'), (50, 'Art')]\nassert func([(75, 'Computer'), (80, 'Physical Education'), (70, 'Health')]) == [(70, 'Health'), (75, 'Computer'), (80, 'Physical Education')]\n"}
{"task_id": 23, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(data_list):\n    '''\n    A function of recursion list sum is written.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 15\nassert func([10, 20, 30]) == 60\nassert func([5, 10, 15, 20]) == 50\nassert func([2, 4, 6, 8, 10]) == 30\nassert func([3, 6, 9, 12, 15, 18]) == 63\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 15\nassert func([10, 20, 30]) == 60\nassert func([5, 10, 15, 20]) == 50\nassert func([2, 4, 6, 8, 10]) == 30\nassert func([3, 6, 9, 12, 15, 18]) == 63\n"}
{"task_id": 24, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list):\n    '''\n    A python function is written to count positive numbers in a list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == 5\nassert func([-1, -2, -3, -4, -5]) == 0\nassert func([0, 1, -1, 2, -2]) == 2\nassert func([10, -10, 20, -20, 30]) == 3\nassert func([]) == 0", "response_code": "assert func([1, 2, 3, 4, 5]) == 5\nassert func([-1, -2, -3, -4, -5]) == 0\nassert func([0, 1, -1, 2, -2]) == 2\nassert func([10, -10, 20, -20, 30]) == 3\nassert func([]) == 0"}
{"task_id": 25, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):   \n    '''\n    A function should be written to find the number of ways to partition a set of bell numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 1\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 5\nassert func(4) == 15\n```", "response_code": "\nassert func(0) == 1\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 5\nassert func(4) == 15\n"}
{"task_id": 26, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(A): \n    '''\n    A python function should be written to check whether the given array is monotonic or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == True\nassert func([5, 4, 3, 2, 1]) == True\nassert func([1, 3, 2, 4, 5]) == False\nassert func([1, 1, 1, 1, 1]) == True\nassert func([1, 2, 2, 3, 4]) == True", "response_code": "assert func([1, 2, 3, 4, 5]) == True\nassert func([5, 4, 3, 2, 1]) == True\nassert func([1, 3, 2, 4, 5]) == False\nassert func([1, 1, 1, 1, 1]) == True\nassert func([1, 2, 2, 3, 4]) == True"}
{"task_id": 27, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l, s):\n    '''\n    A function should be written to check whether a list contains the given sublist or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], [2, 3]) == True\nassert func([1, 2, 3, 4, 5], [4, 6]) == False\nassert func([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\nassert func([1, 2, 3, 4, 5], [5, 4, 3]) == False\nassert func([1, 2, 3, 4, 5], [6]) == False\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], [2, 3]) == True\nassert func([1, 2, 3, 4, 5], [4, 6]) == False\nassert func([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\nassert func([1, 2, 3, 4, 5], [5, 4, 3]) == False\nassert func([1, 2, 3, 4, 5], [6]) == False\n"}
{"task_id": 28, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(Input):\n    '''\n    A function should be written to determine whether all the given tuples have equal length or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([(1, 2), (3, 4), (5, 6)]) == True\nassert func([(1, 2, 3), (4, 5), (6, 7, 8)]) == False\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == True\nassert func([(1, 2, 3, 4), (5, 6, 7), (8, 9)]) == False\nassert func([(1,), (2,), (3,)]) == True", "response_code": "assert func([(1, 2), (3, 4), (5, 6)]) == True\nassert func([(1, 2, 3), (4, 5), (6, 7, 8)]) == False\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == True\nassert func([(1, 2, 3, 4), (5, 6, 7), (8, 9)]) == False\nassert func([(1,), (2,), (3,)]) == True"}
{"task_id": 29, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    A function should be written to sort a list of elements using comb sort.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([4, 2, 7, 1, 5]) == [1, 2, 4, 5, 7]\nassert func([9, 3, 6, 2, 8, 1, 5, 7, 4]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert func([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1]) == [1]\n```", "response_code": "\nassert func([4, 2, 7, 1, 5]) == [1, 2, 4, 5, 7]\nassert func([9, 3, 6, 2, 8, 1, 5, 7, 4]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert func([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1]) == [1]\n"}
{"task_id": 30, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function should be written to check whether the given number can be represented as difference of two squares or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(10) == True\nassert func(25) == True\nassert func(7) == False\nassert func(15) == False\nassert func(36) == True", "response_code": "assert func(10) == True\nassert func(25) == True\nassert func(7) == False\nassert func(15) == False\nassert func(36) == True"}
{"task_id": 31, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(colors, patterns):    \n    '''\n    A function should be written to check whether it follows the sequence given in the patterns array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['red', 'blue', 'green'], ['solid', 'striped', 'dotted']) == True\nassert func(['red', 'blue', 'green'], ['solid', 'striped', 'solid']) == False\nassert func(['red', 'blue', 'green'], ['solid', 'striped']) == False\nassert func(['red', 'blue', 'green'], ['solid', 'striped', 'dotted', 'solid']) == False\nassert func(['red', 'blue', 'green'], ['solid', 'striped', 'dotted', 'solid', 'striped']) == True\n```", "response_code": "\nassert func(['red', 'blue', 'green'], ['solid', 'striped', 'dotted']) == True\nassert func(['red', 'blue', 'green'], ['solid', 'striped', 'solid']) == False\nassert func(['red', 'blue', 'green'], ['solid', 'striped']) == False\nassert func(['red', 'blue', 'green'], ['solid', 'striped', 'dotted', 'solid']) == False\nassert func(['red', 'blue', 'green'], ['solid', 'striped', 'dotted', 'solid', 'striped']) == True\n"}
{"task_id": 32, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list, K):\n    '''\n    A function should be written to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == [(4, 5, 6)]\nassert func([(10, 20, 30), (40, 50, 60), (70, 80, 90)], 10) == [(10, 20, 30), (40, 50, 60), (70, 80, 90)]\nassert func([(3, 6, 9), (12, 15, 18), (21, 24, 27)], 3) == [(3, 6, 9), (12, 15, 18), (21, 24, 27)]\nassert func([(2, 4, 6), (8, 10, 12), (14, 16, 18)], 2) == [(2, 4, 6), (8, 10, 12), (14, 16, 18)]\nassert func([(5, 10, 15), (20, 25, 30), (35, 40, 45)], 5) == [(5, 10, 15), (20, 25, 30), (35, 40, 45)]\n```", "response_code": "\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == [(4, 5, 6)]\nassert func([(10, 20, 30), (40, 50, 60), (70, 80, 90)], 10) == [(10, 20, 30), (40, 50, 60), (70, 80, 90)]\nassert func([(3, 6, 9), (12, 15, 18), (21, 24, 27)], 3) == [(3, 6, 9), (12, 15, 18), (21, 24, 27)]\nassert func([(2, 4, 6), (8, 10, 12), (14, 16, 18)], 2) == [(2, 4, 6), (8, 10, 12), (14, 16, 18)]\nassert func([(5, 10, 15), (20, 25, 30), (35, 40, 45)], 5) == [(5, 10, 15), (20, 25, 30), (35, 40, 45)]\n"}
{"task_id": 33, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function is written to find the difference between sum of even and odd digits.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1234) == 2\nassert func(2468) == 8\nassert func(13579) == -10\nassert func(1111) == 0\nassert func(987654321) == 0", "response_code": "assert func(1234) == 2\nassert func(2468) == 8\nassert func(13579) == -10\nassert func(1111) == 0\nassert func(987654321) == 0"}
{"task_id": 34, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(s): \n    '''\n    A python function is written to check whether the length of the word is odd or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\") == True\nassert func(\"world\") == True\nassert func(\"python\") == False\nassert func(\"programming\") == False\nassert func(\"test\") == True", "response_code": "assert func(\"hello\") == True\nassert func(\"world\") == True\nassert func(\"python\") == False\nassert func(\"programming\") == False\nassert func(\"test\") == True"}
{"task_id": 35, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to find the nth tetrahedral number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 1\nassert func(2) == 4\nassert func(3) == 10\nassert func(4) == 20\nassert func(5) == 35", "response_code": "assert func(1) == 1\nassert func(2) == 4\nassert func(3) == 10\nassert func(4) == 20\nassert func(5) == 35"}
{"task_id": 36, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(r):\n    '''\n    A function should be written to find the volume of a sphere.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == (4/3) * math.pi\nassert func(2) == (4/3) * math.pi * 2**3\nassert func(0) == 0\nassert func(5) == (4/3) * math.pi * 5**3\nassert func(10) == (4/3) * math.pi * 10**3\n```", "response_code": "\nassert func(1) == (4/3) * math.pi\nassert func(2) == (4/3) * math.pi * 2**3\nassert func(0) == 0\nassert func(5) == (4/3) * math.pi * 5**3\nassert func(10) == (4/3) * math.pi * 10**3\n"}
{"task_id": 37, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(strr):  \n    '''\n    A python function is written to find the character made by adding all the characters of the given string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"abc\") == \"a+b+c\"  \nassert func(\"hello\") == \"h+e+l+l+o\"  \nassert func(\"12345\") == \"1+2+3+4+5\"  \nassert func(\"\") == \"\"  \nassert func(\"xyz\") == \"x+y+z\"  ", "response_code": "assert func(\"abc\") == \"a+b+c\"  \nassert func(\"hello\") == \"h+e+l+l+o\"  \nassert func(\"12345\") == \"1+2+3+4+5\"  \nassert func(\"\") == \"\"  \nassert func(\"xyz\") == \"x+y+z\"  "}
{"task_id": 38, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to find the n-th number in the newman conway sequence.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 1\nassert func(5) == 3\nassert func(10) == 6\nassert func(15) == 8\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 1\nassert func(5) == 3\nassert func(10) == 6\nassert func(15) == 8\n"}
{"task_id": 39, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(r):\n    '''\n    A function should be written to find the surface area of a sphere.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 4 * math.pi  # radius = 1\nassert func(0) == 0  # radius = 0\nassert func(5) == 4 * math.pi * 5**2  # radius = 5\nassert func(2.5) == 4 * math.pi * 2.5**2  # radius = 2.5\nassert func(10) == 4 * math.pi * 10**2  # radius = 10\n```", "response_code": "\nassert func(1) == 4 * math.pi  # radius = 1\nassert func(0) == 0  # radius = 0\nassert func(5) == 4 * math.pi * 5**2  # radius = 5\nassert func(2.5) == 4 * math.pi * 2.5**2  # radius = 2.5\nassert func(10) == 4 * math.pi * 10**2  # radius = 10\n"}
{"task_id": 40, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    A function should be written to find the nth centered hexagonal number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 7\nassert func(3) == 19\nassert func(4) == 37\nassert func(5) == 61\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 7\nassert func(3) == 19\nassert func(4) == 37\nassert func(5) == 61\n"}
{"task_id": 41, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import collections as ct\ndef func(dict1,dict2, dict3):\n    '''\n    A function should be written to merge three dictionaries into a single expression.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}\ndict3 = {'e': 5, 'f': 6}\n\nassert func(dict1, dict2, dict3) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n\ndict1 = {'x': 10, 'y': 20}\ndict2 = {'z': 30, 'w': 40}\ndict3 = {'u': 50, 'v': 60}\n\nassert func(dict1, dict2, dict3) == {'x': 10, 'y': 20, 'z': 30, 'w': 40, 'u': 50, 'v': 60}\n\ndict1 = {'apple': 'red', 'banana': 'yellow'}\ndict2 = {'orange': 'orange', 'grape': 'purple'}\ndict3 = {'watermelon': 'green', 'kiwi': 'brown'}\n\nassert func(dict1, dict2, dict3) == {'apple': 'red', 'banana': 'yellow', 'orange': 'orange', 'grape': 'purple', 'watermelon': 'green', 'kiwi': 'brown'}\n\ndict1 = {'one': 1, 'two': 2}\ndict2 = {'three': 3, 'four': 4}\ndict3 = {'five': 5, 'six': 6}\n\nassert func(dict1, dict2, dict3) == {'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6}\n\ndict1 = {'cat': 'meow', 'dog': 'woof'}\ndict2 = {'cow': 'moo', 'pig': 'oink'}\ndict3 = {'duck': 'quack', 'chicken': 'cluck'}\n\nassert func(dict1, dict2, dict3) == {'cat': 'meow', 'dog': 'woof', 'cow': 'moo', 'pig': 'oink', 'duck': 'quack', 'chicken': 'cluck'}\n```", "response_code": "\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}\ndict3 = {'e': 5, 'f': 6}\n\nassert func(dict1, dict2, dict3) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n\ndict1 = {'x': 10, 'y': 20}\ndict2 = {'z': 30, 'w': 40}\ndict3 = {'u': 50, 'v': 60}\n\nassert func(dict1, dict2, dict3) == {'x': 10, 'y': 20, 'z': 30, 'w': 40, 'u': 50, 'v': 60}\n\ndict1 = {'apple': 'red', 'banana': 'yellow'}\ndict2 = {'orange': 'orange', 'grape': 'purple'}\ndict3 = {'watermelon': 'green', 'kiwi': 'brown'}\n\nassert func(dict1, dict2, dict3) == {'apple': 'red', 'banana': 'yellow', 'orange': 'orange', 'grape': 'purple', 'watermelon': 'green', 'kiwi': 'brown'}\n\ndict1 = {'one': 1, 'two': 2}\ndict2 = {'three': 3, 'four': 4}\ndict3 = {'five': 5, 'six': 6}\n\nassert func(dict1, dict2, dict3) == {'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6}\n\ndict1 = {'cat': 'meow', 'dog': 'woof'}\ndict2 = {'cow': 'moo', 'pig': 'oink'}\ndict3 = {'duck': 'quack', 'chicken': 'cluck'}\n\nassert func(dict1, dict2, dict3) == {'cat': 'meow', 'dog': 'woof', 'cow': 'moo', 'pig': 'oink', 'duck': 'quack', 'chicken': 'cluck'}\n"}
{"task_id": 42, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import collections\ndef func(list1):\n    '''\n    A function should be written to get the frequency of the elements in a list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 2, 3, 3, 3]) == {1: 1, 2: 2, 3: 3}\nassert func([4, 4, 4, 4, 4]) == {4: 5}\nassert func([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}\nassert func([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == {1: 2, 2: 2, 3: 2, 4: 2, 5: 2}\nassert func([]) == {}\n```", "response_code": "\nassert func([1, 2, 2, 3, 3, 3]) == {1: 1, 2: 2, 3: 3}\nassert func([4, 4, 4, 4, 4]) == {4: 5}\nassert func([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}\nassert func([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == {1: 2, 2: 2, 3: 2, 4: 2, 5: 2}\nassert func([]) == {}\n"}
{"task_id": 43, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(N):\n    '''\n    A function should be written to find the closest smaller number than n.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5) == 4\nassert func(10) == 9\nassert func(20) == 19\nassert func(50) == 49\nassert func(100) == 99\n```", "response_code": "\nassert func(5) == 4\nassert func(10) == 9\nassert func(20) == 19\nassert func(50) == 49\nassert func(100) == 99\n"}
{"task_id": 44, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    A python function is written to find the length of the longest word.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([\"apple\", \"banana\", \"cherry\"]) == 6\nassert func([\"hello\", \"world\"]) == 5\nassert func([\"python\", \"programming\", \"language\"]) == 11\nassert func([\"data\", \"science\", \"machine\", \"learning\"]) == 8\nassert func([\"a\", \"bb\", \"ccc\", \"dddd\"]) == 4\n```", "response_code": "\nassert func([\"apple\", \"banana\", \"cherry\"]) == 6\nassert func([\"hello\", \"world\"]) == 5\nassert func([\"python\", \"programming\", \"language\"]) == 11\nassert func([\"data\", \"science\", \"machine\", \"learning\"]) == 8\nassert func([\"a\", \"bb\", \"ccc\", \"dddd\"]) == 4\n"}
{"task_id": 45, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1, sub_str):\n    '''\n    A function should be written to check if a substring is present in a given list of string values.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['apple', 'banana', 'cherry'], 'banana') == True\nassert func(['apple', 'banana', 'cherry'], 'orange') == False\nassert func(['hello', 'world', 'python'], 'world') == True\nassert func(['hello', 'world', 'python'], 'java') == False\nassert func(['cat', 'dog', 'rabbit'], 'rabbit') == True\n```", "response_code": "\nassert func(['apple', 'banana', 'cherry'], 'banana') == True\nassert func(['apple', 'banana', 'cherry'], 'orange') == False\nassert func(['hello', 'world', 'python'], 'world') == True\nassert func(['hello', 'world', 'python'], 'java') == False\nassert func(['cat', 'dog', 'rabbit'], 'rabbit') == True\n"}
{"task_id": 46, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to check whether the given number is undulating or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(101) == True\nassert func(121) == False\nassert func(131) == True\nassert func(212) == False\nassert func(12321) == True\n```", "response_code": "\nassert func(101) == True\nassert func(121) == False\nassert func(131) == True\nassert func(212) == False\nassert func(12321) == True\n"}
{"task_id": 47, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a,b):\n    '''\n    A function should be written to calculate the value of 'a' to the power 'b'.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(2, 3) == 8\nassert func(5, 2) == 25\nassert func(0, 5) == 0\nassert func(3, 0) == 1\nassert func(4, -2) == 0.0625", "response_code": "assert func(2, 3) == 8\nassert func(5, 2) == 25\nassert func(0, 5) == 0\nassert func(3, 0) == 1\nassert func(4, -2) == 0.0625"}
{"task_id": 48, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from operator import itemgetter \ndef func(test_list):\n    '''\n    A function should be written to extract the index minimum value record from the given tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (3, 4), (0, 5)]) == 2\nassert func([(10, 20), (30, 40), (5, 50)]) == 0\nassert func([(100, 200), (30, 40), (50, 5)]) == 2\nassert func([(1, 2), (3, 4), (5, 0)]) == 2\nassert func([(1, 2), (3, 4), (5, 6)]) == 0\n```", "response_code": "\nassert func([(1, 2), (3, 4), (0, 5)]) == 2\nassert func([(10, 20), (30, 40), (5, 50)]) == 0\nassert func([(100, 200), (30, 40), (50, 5)]) == 2\nassert func([(1, 2), (3, 4), (5, 0)]) == 2\nassert func([(1, 2), (3, 4), (5, 6)]) == 0\n"}
{"task_id": 49, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lst):  \n    '''\n    A python function is written to find the minimum length of sublist.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 2\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]) == 1\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10, 11, 12]]) == 3\nassert func([[1], [2], [3], [4], [5]]) == 1\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == 2", "response_code": "assert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 2\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]) == 1\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10, 11, 12]]) == 3\nassert func([[1], [2], [3], [4], [5]]) == 1\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == 2"}
{"task_id": 50, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    A python function is written to find the number of divisors of a given integer.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(10) == 4\nassert func(15) == 4\nassert func(20) == 6\nassert func(25) == 3\nassert func(30) == 8", "response_code": "assert func(10) == 4\nassert func(15) == 4\nassert func(20) == 6\nassert func(25) == 3\nassert func(30) == 8"}
{"task_id": 51, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to find the frequency count of a list of lists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2], [2, 3], [1, 2], [4, 5]]) == {(1, 2): 2, (2, 3): 1, (4, 5): 1}\nassert func([[1, 1, 1], [2, 2], [3, 3, 3], [1, 1, 1]]) == {(1, 1, 1): 2, (2, 2): 1, (3, 3, 3): 1}\nassert func([[1, 2, 3], [4, 5], [1, 2, 3], [4, 5]]) == {(1, 2, 3): 2, (4, 5): 2}\nassert func([[1], [2], [3], [4]]) == {(1,): 1, (2,): 1, (3,): 1, (4,): 1}\nassert func([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]) == {(1, 2, 3, 4): 3}\n```", "response_code": "\nassert func([[1, 2], [2, 3], [1, 2], [4, 5]]) == {(1, 2): 2, (2, 3): 1, (4, 5): 1}\nassert func([[1, 1, 1], [2, 2], [3, 3, 3], [1, 1, 1]]) == {(1, 1, 1): 2, (2, 2): 1, (3, 3, 3): 1}\nassert func([[1, 2, 3], [4, 5], [1, 2, 3], [4, 5]]) == {(1, 2, 3): 2, (4, 5): 2}\nassert func([[1], [2], [3], [4]]) == {(1,): 1, (2,): 1, (3,): 1, (4,): 1}\nassert func([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]) == {(1, 2, 3, 4): 3}\n"}
{"task_id": 52, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(numbers):  \n    '''\n    A function should be written to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 30/5\nassert func([0, 0, 0, 0, 0]) == 0/5\nassert func([2, 4, 6, 8, 10]) == 384/5\nassert func([3, 6, 9, 12, 15]) == 2430/5\nassert func([1, 3, 5, 7, 9]) == 945/5\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 30/5\nassert func([0, 0, 0, 0, 0]) == 0/5\nassert func([2, 4, 6, 8, 10]) == 384/5\nassert func([3, 6, 9, 12, 15]) == 2430/5\nassert func([1, 3, 5, 7, 9]) == 945/5\n"}
{"task_id": 53, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to convert the given decimal number to its binary equivalent.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == '0'\nassert func(1) == '1'\nassert func(5) == '101'\nassert func(10) == '1010'\nassert func(15) == '1111'\n```", "response_code": "\nassert func(0) == '0'\nassert func(1) == '1'\nassert func(5) == '101'\nassert func(10) == '1010'\nassert func(15) == '1111'\n"}
{"task_id": 54, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import sys\ndef func(num):\n    '''\n    A function should be written to find the next smallest palindrome of a specified number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(123) == 131\nassert func(999) == 1001\nassert func(45678) == 45754\nassert func(123456789) == 123464321\nassert func(987654321) == 987787789\n```", "response_code": "\nassert func(123) == 131\nassert func(999) == 1001\nassert func(45678) == 45754\nassert func(123456789) == 123464321\nassert func(987654321) == 987787789\n"}
{"task_id": 55, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr, k):\n    '''\n    A function should be written to find the kth element in the given array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3], 3) == 3\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3], 6) == 5\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3], 1) == 1\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3], 10) == 9\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3], 5) == 5\n```", "response_code": "\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3], 3) == 3\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3], 6) == 5\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3], 1) == 1\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3], 10) == 9\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3], 5) == 5\n"}
{"task_id": 56, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(word):\n    '''\n    A function should be written to convert snake case string to camel case string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello_world\") == \"HelloWorld\"\nassert func(\"snake_case_example\") == \"SnakeCaseExample\"\nassert func(\"this_is_a_test\") == \"ThisIsATest\"\nassert func(\"camel_case\") == \"CamelCase\"\nassert func(\"another_example\") == \"AnotherExample\"\n```", "response_code": "\nassert func(\"hello_world\") == \"HelloWorld\"\nassert func(\"snake_case_example\") == \"SnakeCaseExample\"\nassert func(\"this_is_a_test\") == \"ThisIsATest\"\nassert func(\"camel_case\") == \"CamelCase\"\nassert func(\"another_example\") == \"AnotherExample\"\n"}
{"task_id": 57, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n, m): \n    '''\n    A function should be written to find the eulerian number a(n, m).\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0, 0) == 1\nassert func(3, 2) == 5\nassert func(5, 3) == 50\nassert func(4, 4) == 334\nassert func(6, 1) == 1\n```", "response_code": "\nassert func(0, 0) == 1\nassert func(3, 2) == 5\nassert func(5, 3) == 50\nassert func(4, 4) == 334\nassert func(6, 1) == 1\n"}
{"task_id": 58, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(input_list):\n    '''\n    A function should be written to sort each sublist of strings in a given list of lists using a lambda function.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\ninput_list = [['banana', 'apple', 'cherry'], ['orange', 'grape', 'pear']]\nfunc(input_list)\nassert input_list == [['apple', 'banana', 'cherry'], ['grape', 'orange', 'pear']]\n\ninput_list = [['zebra', 'lion', 'elephant'], ['monkey', 'giraffe', 'tiger']]\nfunc(input_list)\nassert input_list == [['elephant', 'lion', 'zebra'], ['giraffe', 'monkey', 'tiger']]\n\ninput_list = [['kiwi', 'pineapple', 'mango'], ['strawberry', 'blueberry', 'raspberry']]\nfunc(input_list)\nassert input_list == [['kiwi', 'mango', 'pineapple'], ['blueberry', 'raspberry', 'strawberry']]\n\ninput_list = [['dog', 'cat', 'rabbit'], ['hamster', 'guinea pig', 'ferret']]\nfunc(input_list)\nassert input_list == [['cat', 'dog', 'rabbit'], ['ferret', 'guinea pig', 'hamster']]\n\ninput_list = [['sunflower', 'rose', 'tulip'], ['daisy', 'lily', 'orchid']]\nfunc(input_list)\nassert input_list == [['rose', 'sunflower', 'tulip'], ['daisy', 'lily', 'orchid']]\n```", "response_code": "\ninput_list = [['banana', 'apple', 'cherry'], ['orange', 'grape', 'pear']]\nfunc(input_list)\nassert input_list == [['apple', 'banana', 'cherry'], ['grape', 'orange', 'pear']]\n\ninput_list = [['zebra', 'lion', 'elephant'], ['monkey', 'giraffe', 'tiger']]\nfunc(input_list)\nassert input_list == [['elephant', 'lion', 'zebra'], ['giraffe', 'monkey', 'tiger']]\n\ninput_list = [['kiwi', 'pineapple', 'mango'], ['strawberry', 'blueberry', 'raspberry']]\nfunc(input_list)\nassert input_list == [['kiwi', 'mango', 'pineapple'], ['blueberry', 'raspberry', 'strawberry']]\n\ninput_list = [['dog', 'cat', 'rabbit'], ['hamster', 'guinea pig', 'ferret']]\nfunc(input_list)\nassert input_list == [['cat', 'dog', 'rabbit'], ['ferret', 'guinea pig', 'hamster']]\n\ninput_list = [['sunflower', 'rose', 'tulip'], ['daisy', 'lily', 'orchid']]\nfunc(input_list)\nassert input_list == [['rose', 'sunflower', 'tulip'], ['daisy', 'lily', 'orchid']]\n"}
{"task_id": 59, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lst):   \n    '''\n    A python function is written to count true booleans in the given list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([True, False, True, True]) == 3\nassert func([False, False, False]) == 0\nassert func([True, True, True, True, True]) == 5\nassert func([False, True, False, True]) == 2\nassert func([]) == 0", "response_code": "assert func([True, False, True, True]) == 3\nassert func([False, False, False]) == 0\nassert func([True, True, True, True, True]) == 5\nassert func([False, True, False, True]) == 2\nassert func([]) == 0"}
{"task_id": 60, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list, test_tup):\n    '''\n    A function should be written to add the given list to the given tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], (4, 5)) == [(1, 2, 3, 4, 5)]\nassert func([4, 5], (1, 2, 3)) == [(4, 5, 1, 2, 3)]\nassert func([7, 8], (9, 10, 11)) == [(7, 8, 9, 10, 11)]\nassert func([1, 2, 3], (4,)) == [(1, 2, 3, 4)]\nassert func([4], (1, 2, 3)) == [(4, 1, 2, 3)]\n```", "response_code": "\nassert func([1, 2, 3], (4, 5)) == [(1, 2, 3, 4, 5)]\nassert func([4, 5], (1, 2, 3)) == [(4, 5, 1, 2, 3)]\nassert func([7, 8], (9, 10, 11)) == [(7, 8, 9, 10, 11)]\nassert func([1, 2, 3], (4,)) == [(1, 2, 3, 4)]\nassert func([4], (1, 2, 3)) == [(4, 1, 2, 3)]\n"}
{"task_id": 61, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import heapq\ndef func(num1,num2,num3):\n    '''\n    A function should be written to merge multiple sorted inputs into a single sorted iterator using the heap queue algorithm.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert list(func([1, 3, 5], [2, 4, 6], [0, 7, 8])) == [0, 1, 2, 3, 4, 5, 6, 7, 8]\nassert list(func([1, 2, 3], [4, 5, 6], [7, 8, 9])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert list(func([1, 4, 7], [2, 5, 8], [3, 6, 9])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert list(func([1, 2, 3], [1, 2, 3], [1, 2, 3])) == [1, 1, 1, 2, 2, 2, 3, 3, 3]\nassert list(func([3, 6, 9], [2, 5, 8], [1, 4, 7])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```", "response_code": "\nassert list(func([1, 3, 5], [2, 4, 6], [0, 7, 8])) == [0, 1, 2, 3, 4, 5, 6, 7, 8]\nassert list(func([1, 2, 3], [4, 5, 6], [7, 8, 9])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert list(func([1, 4, 7], [2, 5, 8], [3, 6, 9])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert list(func([1, 2, 3], [1, 2, 3], [1, 2, 3])) == [1, 1, 1, 2, 2, 2, 3, 3, 3]\nassert list(func([3, 6, 9], [2, 5, 8], [1, 4, 7])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"}
{"task_id": 62, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(s,n): \n    '''\n    A python function is written to find the count of rotations of a binary string with odd value.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func('10101', 5) == 3\nassert func('1111', 4) == 0\nassert func('1001', 4) == 2\nassert func('110011', 6) == 3\nassert func('1010101', 7) == 3", "response_code": "assert func('10101', 5) == 3\nassert func('1111', 4) == 0\nassert func('1001', 4) == 2\nassert func('110011', 6) == 3\nassert func('1010101', 7) == 3"}
{"task_id": 63, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nestedlist):\n    '''\n    A function should be written to find common elements in given nested lists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == []\nassert func([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]\nassert func([[1, 2, 3], [4, 5, 6], [1, 2, 3]]) == [1, 2, 3]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == []\n```", "response_code": "\nassert func([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == []\nassert func([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]\nassert func([[1, 2, 3], [4, 5, 6], [1, 2, 3]]) == [1, 2, 3]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == []\n"}
{"task_id": 64, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(text):\n    '''\n    A function should be written to check if a string represents an integer or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"123\") == True\nassert func(\"-456\") == True\nassert func(\"0\") == True\nassert func(\"12.34\") == False\nassert func(\"abc\") == False\n```", "response_code": "\nassert func(\"123\") == True\nassert func(\"-456\") == True\nassert func(\"0\") == True\nassert func(\"12.34\") == False\nassert func(\"abc\") == False\n"}
{"task_id": 65, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to check whether all dictionaries in a list are empty or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([{}, {}, {}]) == True\nassert func([{'a': 1}, {'b': 2}, {'c': 3}]) == False\nassert func([{}, {'a': 1}, {}]) == False\nassert func([{'a': 1, 'b': 2}, {'c': 3}, {}]) == False\nassert func([]) == True\n```", "response_code": "\nassert func([{}, {}, {}]) == True\nassert func([{'a': 1}, {'b': 2}, {'c': 3}]) == False\nassert func([{}, {'a': 1}, {}]) == False\nassert func([{'a': 1, 'b': 2}, {'c': 3}, {}]) == False\nassert func([]) == True\n"}
{"task_id": 66, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    A function should be written to convert a given tuple of positive integers into an integer.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3)) == 123\nassert func((9, 8, 7, 6)) == 9876\nassert func((5, 0, 2, 1)) == 5021\nassert func((4, 3, 2, 1, 0)) == 43210\nassert func((1, 0, 0, 0, 0)) == 10000\n```", "response_code": "\nassert func((1, 2, 3)) == 123\nassert func((9, 8, 7, 6)) == 9876\nassert func((5, 0, 2, 1)) == 5021\nassert func((4, 3, 2, 1, 0)) == 43210\nassert func((1, 0, 0, 0, 0)) == 10000\n"}
{"task_id": 67, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    A function should be written to convert all possible convertible elements in the list to float.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\ntest_list = [1, 2, 3, '4', '5.5']\nfunc(test_list)\nassert test_list == [1.0, 2.0, 3.0, 4.0, 5.5]\n\ntest_list = ['1.1', '2.2', '3.3']\nfunc(test_list)\nassert test_list == [1.1, 2.2, 3.3]\n\ntest_list = ['1.1', 2, '3.3']\nfunc(test_list)\nassert test_list == [1.1, 2.0, 3.3]\n\ntest_list = ['1.1', '2', '3.3']\nfunc(test_list)\nassert test_list == [1.1, 2.0, 3.3]\n\ntest_list = ['1.1', '2', 3]\nfunc(test_list)\nassert test_list == [1.1, 2.0, 3.0]\n```", "response_code": "\ntest_list = [1, 2, 3, '4', '5.5']\nfunc(test_list)\nassert test_list == [1.0, 2.0, 3.0, 4.0, 5.5]\n\ntest_list = ['1.1', '2.2', '3.3']\nfunc(test_list)\nassert test_list == [1.1, 2.2, 3.3]\n\ntest_list = ['1.1', 2, '3.3']\nfunc(test_list)\nassert test_list == [1.1, 2.0, 3.3]\n\ntest_list = ['1.1', '2', '3.3']\nfunc(test_list)\nassert test_list == [1.1, 2.0, 3.3]\n\ntest_list = ['1.1', '2', 3]\nfunc(test_list)\nassert test_list == [1.1, 2.0, 3.0]\n"}
{"task_id": 68, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(string): \n    '''\n    A function should be written to convert a string to a list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\") == ['h', 'e', 'l', 'l', 'o']\nassert func(\"12345\") == ['1', '2', '3', '4', '5']\nassert func(\"abcde\") == ['a', 'b', 'c', 'd', 'e']\nassert func(\"\") == []\nassert func(\"testing 123\") == ['t', 'e', 's', 't', 'i', 'n', 'g', ' ', '1', '2', '3']", "response_code": "assert func(\"hello\") == ['h', 'e', 'l', 'l', 'o']\nassert func(\"12345\") == ['1', '2', '3', '4', '5']\nassert func(\"abcde\") == ['a', 'b', 'c', 'd', 'e']\nassert func(\"\") == []\nassert func(\"testing 123\") == ['t', 'e', 's', 't', 'i', 'n', 'g', ' ', '1', '2', '3']"}
{"task_id": 69, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):\n    '''\n    A python function is written to find the element that appears only once in a sorted array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 1, 2, 2, 3, 4, 4, 5, 5]) == 3\nassert func([1, 1, 2, 2, 3, 3, 4, 4, 5]) == 5\nassert func([1, 2, 2, 3, 3, 4, 4, 5, 5]) == 1\nassert func([1, 1, 2, 3, 3, 4, 4, 5, 5]) == 2\nassert func([1, 1, 2, 2, 3, 3, 4, 5, 5]) == 4", "response_code": "assert func([1, 1, 2, 2, 3, 4, 4, 5, 5]) == 3\nassert func([1, 1, 2, 2, 3, 3, 4, 4, 5]) == 5\nassert func([1, 2, 2, 3, 3, 4, 4, 5, 5]) == 1\nassert func([1, 1, 2, 3, 3, 4, 4, 5, 5]) == 2\nassert func([1, 1, 2, 2, 3, 3, 4, 5, 5]) == 4"}
{"task_id": 70, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to find the maximum product from the pairs of tuples within a given list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (3, 4), (5, 6)]) == 30\nassert func([(2, 3), (4, 5), (6, 7)]) == 42\nassert func([(1, 1), (2, 2), (3, 3)]) == 9\nassert func([(2, 5), (3, 4), (6, 1)]) == 30\nassert func([(4, 3), (2, 1), (5, 6)]) == 30\n```", "response_code": "\nassert func([(1, 2), (3, 4), (5, 6)]) == 30\nassert func([(2, 3), (4, 5), (6, 7)]) == 42\nassert func([(1, 1), (2, 2), (3, 3)]) == 9\nassert func([(2, 5), (3, 4), (6, 1)]) == 30\nassert func([(4, 3), (2, 1), (5, 6)]) == 30\n"}
{"task_id": 71, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(limit):\n    '''\n    A function should be written to sum all amicable numbers from 1 to a specified number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(100) == 0\nassert func(200) == 504\nassert func(300) == 504\nassert func(500) == 504\nassert func(1000) == 504\n```", "response_code": "\nassert func(100) == 0\nassert func(200) == 504\nassert func(300) == 504\nassert func(500) == 504\nassert func(1000) == 504\n"}
{"task_id": 72, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import cmath\ndef func(a,b):\n    '''\n    A function should be written to get the angle of a complex number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1, 0) == 0\nassert func(0, 1) == 1.5707963267948966\nassert func(-1, 0) == 3.141592653589793\nassert func(0, -1) == -1.5707963267948966\nassert func(1, 1) == 0.7853981633974483\n```", "response_code": "\nassert func(1, 0) == 0\nassert func(0, 1) == 1.5707963267948966\nassert func(-1, 0) == 3.141592653589793\nassert func(0, -1) == -1.5707963267948966\nassert func(1, 1) == 0.7853981633974483\n"}
{"task_id": 73, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(string): \n    '''\n    A function should be written to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"110\") == 1\nassert func(\"1010\") == 2\nassert func(\"1111\") == 0\nassert func(\"1001\") == 2\nassert func(\"110011\") == 2\n```", "response_code": "\nassert func(\"110\") == 1\nassert func(\"1010\") == 2\nassert func(\"1111\") == 0\nassert func(\"1001\") == 2\nassert func(\"110011\") == 2\n"}
{"task_id": 74, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a,b): \n    '''\n    A python function is written to find the sum of common divisors of two given numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(12, 18) == 6\nassert func(20, 30) == 8\nassert func(15, 25) == 3\nassert func(36, 48) == 18\nassert func(7, 11) == 1\n```", "response_code": "\nassert func(12, 18) == 6\nassert func(20, 30) == 8\nassert func(15, 25) == 3\nassert func(36, 48) == 18\nassert func(7, 11) == 1\n"}
{"task_id": 75, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x, y):\n    '''\n    A function should be written to multiply two integers without using the * operator in python.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(3, 4) == 12\nassert func(0, 5) == 0\nassert func(7, 1) == 7\nassert func(-2, 3) == -6\nassert func(-4, -2) == 8", "response_code": "assert func(3, 4) == 12\nassert func(0, 5) == 0\nassert func(7, 1) == 7\nassert func(-2, 3) == -6\nassert func(-4, -2) == 8"}
{"task_id": 76, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n, str):\n    '''\n    A function should be written to shortlist words that are longer than n from a given list of words.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5, ['apple', 'banana', 'orange', 'kiwi', 'grape']) == ['banana', 'orange']\nassert func(4, ['hello', 'world', 'python', 'programming']) == ['hello', 'world', 'python', 'programming']\nassert func(6, ['cat', 'dog', 'elephant', 'giraffe', 'lion']) == ['elephant', 'giraffe']\nassert func(3, ['a', 'bb', 'ccc', 'dddd', 'eeeee']) == ['ccc', 'dddd', 'eeeee']\nassert func(2, ['word', 'test', 'check', 'python', 'programming']) == ['word', 'test', 'check', 'python', 'programming']\n```", "response_code": "\nassert func(5, ['apple', 'banana', 'orange', 'kiwi', 'grape']) == ['banana', 'orange']\nassert func(4, ['hello', 'world', 'python', 'programming']) == ['hello', 'world', 'python', 'programming']\nassert func(6, ['cat', 'dog', 'elephant', 'giraffe', 'lion']) == ['elephant', 'giraffe']\nassert func(3, ['a', 'bb', 'ccc', 'dddd', 'eeeee']) == ['ccc', 'dddd', 'eeeee']\nassert func(2, ['word', 'test', 'check', 'python', 'programming']) == ['word', 'test', 'check', 'python', 'programming']\n"}
{"task_id": 77, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(my_matrix):\n    '''\n    A function should be written to calculate a magic square.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test case 1\nmy_matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\nassert func(my_matrix) == True\n\n# Test case 2\nmy_matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert func(my_matrix) == False\n\n# Test case 3\nmy_matrix = [[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]\nassert func(my_matrix) == True\n\n# Test case 4\nmy_matrix = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\nassert func(my_matrix) == False\n\n# Test case 5\nmy_matrix = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\nassert func(my_matrix) == True\n```", "response_code": "\n# Test case 1\nmy_matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\nassert func(my_matrix) == True\n\n# Test case 2\nmy_matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert func(my_matrix) == False\n\n# Test case 3\nmy_matrix = [[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]\nassert func(my_matrix) == True\n\n# Test case 4\nmy_matrix = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\nassert func(my_matrix) == False\n\n# Test case 5\nmy_matrix = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\nassert func(my_matrix) == True\n"}
{"task_id": 78, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from collections import defaultdict\ndef func(nums):\n    '''\n    A function should be written to find the item with maximum frequency in a given list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 2, 3, 3, 3, 4]) == 3\nassert func([1, 1, 2, 2, 2, 3, 3, 3, 3]) == 3\nassert func([1, 2, 3, 4, 5]) == 1\nassert func([1, 1, 1, 1, 2, 2, 3, 3, 3]) == 1\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9]) == 9\n```", "response_code": "\nassert func([1, 2, 2, 3, 3, 3, 4]) == 3\nassert func([1, 1, 2, 2, 2, 3, 3, 3, 3]) == 3\nassert func([1, 2, 3, 4, 5]) == 1\nassert func([1, 1, 1, 1, 2, 2, 3, 3, 3]) == 1\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9]) == 9\n"}
{"task_id": 79, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1):\n    '''\n    A python function to reverse only the vowels of a given string is to be written.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == \"holle\"\nassert func(\"world\") == \"werld\"\nassert func(\"apple\") == \"eppla\"\nassert func(\"python\") == \"python\"\nassert func(\"racecar\") == \"reccara\"\n```", "response_code": "\nassert func(\"hello\") == \"holle\"\nassert func(\"world\") == \"werld\"\nassert func(\"apple\") == \"eppla\"\nassert func(\"python\") == \"python\"\nassert func(\"racecar\") == \"reccara\"\n"}
{"task_id": 80, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(tup1):\n    '''\n    A function should be written to convert tuple to a string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(('a', 'b', 'c')) == 'abc'\nassert func(('hello', 'world')) == 'helloworld'\nassert func(('1', '2', '3')) == '123'\nassert func(('apple', 'banana', 'cherry')) == 'applebananacherry'\nassert func(('python', 'is', 'fun')) == 'pythonisfun'", "response_code": "assert func(('a', 'b', 'c')) == 'abc'\nassert func(('hello', 'world')) == 'helloworld'\nassert func(('1', '2', '3')) == '123'\nassert func(('apple', 'banana', 'cherry')) == 'applebananacherry'\nassert func(('python', 'is', 'fun')) == 'pythonisfun'"}
{"task_id": 81, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    A function should be written to calculate the sum of the negative numbers of a given list of numbers using a lambda function.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, -2, 3, -4, 5]) == -6\nassert func([-1, -2, -3, -4, -5]) == -15\nassert func([0, 1, 2, 3, 4]) == 0\nassert func([-1, 2, -3, 4, -5]) == -9\nassert func([]) == 0\n```", "response_code": "\nassert func([1, -2, 3, -4, 5]) == -6\nassert func([-1, -2, -3, -4, -5]) == -15\nassert func([0, 1, 2, 3, 4]) == 0\nassert func([-1, 2, -3, 4, -5]) == -9\nassert func([]) == 0\n"}
{"task_id": 82, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to find the nth hexagonal number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 6\nassert func(3) == 15\nassert func(4) == 28\nassert func(5) == 45\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 6\nassert func(3) == 15\nassert func(4) == 28\nassert func(5) == 45\n"}
{"task_id": 83, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from array import array\ndef func(nums):\n    '''\n    A function should be written to find the ratio of zeroes in an array of integers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(array('i', [0, 1, 0, 0, 1])) == 0.6\nassert func(array('i', [1, 2, 3, 4, 5])) == 0.0\nassert func(array('i', [0, 0, 0, 0, 0])) == 1.0\nassert func(array('i', [1, 0, 1, 0, 1])) == 0.4\nassert func(array('i', [0, 1, 2, 3, 4])) == 0.2\n```", "response_code": "\nassert func(array('i', [0, 1, 0, 0, 1])) == 0.6\nassert func(array('i', [1, 2, 3, 4, 5])) == 0.0\nassert func(array('i', [0, 0, 0, 0, 0])) == 1.0\nassert func(array('i', [1, 0, 1, 0, 1])) == 0.4\nassert func(array('i', [0, 1, 2, 3, 4])) == 0.2\n"}
{"task_id": 84, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function should be written to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(10) == True\nassert func(7) == True\nassert func(6) == False\nassert func(15) == False\nassert func(16) == True\n```", "response_code": "\nassert func(10) == True\nassert func(7) == True\nassert func(6) == False\nassert func(15) == False\nassert func(16) == True\n"}
{"task_id": 85, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(r):\n    '''\n    A function should be written to find the circumference of a circle.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 6.283185307179586\nassert func(2) == 12.566370614359172\nassert func(5) == 31.41592653589793\nassert func(10) == 62.83185307179586\nassert func(0) == 0.0\n```", "response_code": "\nassert func(1) == 6.283185307179586\nassert func(2) == 12.566370614359172\nassert func(5) == 31.41592653589793\nassert func(10) == 62.83185307179586\nassert func(0) == 0.0\n"}
{"task_id": 86, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    A function should be written to extract elements that occur singly in the given tuple list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (2, 3), (3, 4), (4, 5)]) == [(1, 2), (3, 4), (4, 5)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]) == [(1, 2), (3, 4), (4, 5), (5, 6)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]) == [(1, 2), (3, 4), (4, 5), (5, 6), (6, 7)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)]) == [(1, 2), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)]) == [(1, 2), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)]\n```", "response_code": "\nassert func([(1, 2), (2, 3), (3, 4), (4, 5)]) == [(1, 2), (3, 4), (4, 5)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]) == [(1, 2), (3, 4), (4, 5), (5, 6)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]) == [(1, 2), (3, 4), (4, 5), (5, 6), (6, 7)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)]) == [(1, 2), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)]) == [(1, 2), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)]\n"}
{"task_id": 87, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    A function should be written to sort a list of elements using pancake sort.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([3, 2, 1]) == [1, 2, 3]\nassert func([5, 2, 9, 1, 5]) == [1, 2, 5, 5, 9]\nassert func([10, 5, 8, 3, 1, 6]) == [1, 3, 5, 6, 8, 10]\nassert func([7, 4, 2, 9, 5, 1, 8]) == [1, 2, 4, 5, 7, 8, 9]\nassert func([1]) == [1]\n```", "response_code": "\nassert func([3, 2, 1]) == [1, 2, 3]\nassert func([5, 2, 9, 1, 5]) == [1, 2, 5, 5, 9]\nassert func([10, 5, 8, 3, 1, 6]) == [1, 3, 5, 6, 8, 10]\nassert func([7, 4, 2, 9, 5, 1, 8]) == [1, 2, 4, 5, 7, 8, 9]\nassert func([1]) == [1]\n"}
{"task_id": 88, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1,list2,list3):\n    '''\n    A function should be written to count the same pair in three given lists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], [2, 3, 4], [3, 4, 5]) == 1\nassert func([1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]) == 3\nassert func([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7]) == 4\nassert func([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8]) == 5\nassert func([1, 2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 7, 8], [3, 4, 5, 6, 7, 8, 9]) == 6\n```", "response_code": "\nassert func([1, 2, 3], [2, 3, 4], [3, 4, 5]) == 1\nassert func([1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]) == 3\nassert func([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7]) == 4\nassert func([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8]) == 5\nassert func([1, 2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 7, 8], [3, 4, 5, 6, 7, 8, 9]) == 6\n"}
{"task_id": 89, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(Input): \n    '''\n    A function should be written to find the number of lists present in the given tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(([], [1, 2], [3], [], [4, 5, 6])) == 5\nassert func(([], [], [])) == 3\nassert func(()) == 0\nassert func(([1, 2, 3], [4, 5], [6, 7, 8, 9])) == 3\nassert func(([1], [2], [3], [4], [5])) == 5", "response_code": "assert func(([], [1, 2], [3], [], [4, 5, 6])) == 5\nassert func(([], [], [])) == 3\nassert func(()) == 0\nassert func(([1, 2, 3], [4, 5], [6, 7, 8, 9])) == 3\nassert func(([1], [2], [3], [4], [5])) == 5"}
{"task_id": 90, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr): \n    '''\n    A python function is written to find the maximum difference between any two elements in a given array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 4\nassert func([5, 4, 3, 2, 1]) == 4\nassert func([1, 10, 3, 8, 5]) == 9\nassert func([5, 5, 5, 5, 5]) == 0\nassert func([-5, -3, 0, 2, 4]) == 9\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 4\nassert func([5, 4, 3, 2, 1]) == 4\nassert func([1, 10, 3, 8, 5]) == 9\nassert func([5, 5, 5, 5, 5]) == 0\nassert func([-5, -3, 0, 2, 4]) == 9\n"}
{"task_id": 91, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a, b, n):\n    '''\n    A function should be written to find x and y that satisfies ax + by = n.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(2, 3, 7) == (7, 1)\nassert func(4, 5, 18) == (18, -6)\nassert func(6, 8, 10) == (10, -5)\nassert func(3, 7, 17) == (17, -4)\nassert func(5, 2, 11) == (11, 3)", "response_code": "assert func(2, 3, 7) == (7, 1)\nassert func(4, 5, 18) == (18, -6)\nassert func(6, 8, 10) == (10, -5)\nassert func(3, 7, 17) == (17, -4)\nassert func(5, 2, 11) == (11, 3)"}
{"task_id": 92, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1, list2):\n    '''\n    A function should be written to remove all elements from a given list present in another list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]\nassert func([10, 20, 30, 40, 50], [60, 70]) == [10, 20, 30, 40, 50]\nassert func([5, 10, 15, 20], [5, 10, 15, 20]) == []\nassert func([], [1, 2, 3]) == []\nassert func([1, 2, 3], []) == [1, 2, 3]\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]\nassert func([10, 20, 30, 40, 50], [60, 70]) == [10, 20, 30, 40, 50]\nassert func([5, 10, 15, 20], [5, 10, 15, 20]) == []\nassert func([], [1, 2, 3]) == []\nassert func([1, 2, 3], []) == [1, 2, 3]\n"}
{"task_id": 93, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    A function should be written to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5) == 9\nassert func(10) == 25\nassert func(3) == 4\nassert func(7) == 16\nassert func(1) == 1\n```", "response_code": "\nassert func(5) == 9\nassert func(10) == 25\nassert func(3) == 4\nassert func(7) == 16\nassert func(1) == 1\n"}
{"task_id": 94, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from math import tan, pi\ndef func(s, l):\n    '''\n    A function should be written to calculate the area of a regular polygon.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 5) == 10.83\nassert func(4, 7) == 24.50\nassert func(5, 10) == 43.01\nassert func(6, 4) == 6.93\nassert func(8, 6) == 27.71\n```", "response_code": "\nassert func(3, 5) == 10.83\nassert func(4, 7) == 24.50\nassert func(5, 10) == 43.01\nassert func(6, 4) == 6.93\nassert func(8, 6) == 27.71\n"}
{"task_id": 95, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math \ndef func(n): \n    '''\n    A python function is written to check whether the sum of divisors are same or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(6) == True\nassert func(28) == True\nassert func(12) == False\nassert func(496) == True\nassert func(10) == False\n```", "response_code": "\nassert func(6) == True\nassert func(28) == True\nassert func(12) == False\nassert func(496) == True\nassert func(10) == False\n"}
{"task_id": 96, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1): \n    '''\n    A python function should be written to count characters at the same position in a given string (lower and uppercase characters) as in the English alphabet.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"abc\") == 3\nassert func(\"aBc\") == 2\nassert func(\"aabbcc\") == 3\nassert func(\"xyz\") == 0\nassert func(\"aBcDeF\") == 3", "response_code": "assert func(\"abc\") == 3\nassert func(\"aBc\") == 2\nassert func(\"aabbcc\") == 3\nassert func(\"xyz\") == 0\nassert func(\"aBcDeF\") == 3"}
{"task_id": 97, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(A): \n    '''\n    A python function is written to count the pairs with xor as an even number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 4\nassert func([2, 4, 6, 8, 10]) == 10\nassert func([3, 5, 7, 9, 11]) == 0\nassert func([0, 0, 0, 0, 0]) == 10\nassert func([1, 3, 5, 7, 9]) == 0\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 4\nassert func([2, 4, 6, 8, 10]) == 10\nassert func([3, 5, 7, 9, 11]) == 0\nassert func([0, 0, 0, 0, 0]) == 10\nassert func([1, 3, 5, 7, 9]) == 0\n"}
{"task_id": 98, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function is written to find the smallest power of 2 greater than or equal to n.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(5) == 8\nassert func(10) == 16\nassert func(20) == 32\nassert func(50) == 64\nassert func(100) == 128", "response_code": "assert func(5) == 8\nassert func(10) == 16\nassert func(20) == 32\nassert func(50) == 64\nassert func(100) == 128"}
{"task_id": 99, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a,x): \n    '''\n    A python function is written to find the frequency of a number in a given array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 2, 2, 3, 1, 2], 2) == 4\nassert func([5, 5, 5, 5, 5], 5) == 5\nassert func([1, 2, 3, 4, 5], 6) == 0\nassert func([1, 1, 1, 1, 1], 1) == 5\nassert func([], 3) == 0", "response_code": "assert func([1, 2, 3, 4, 2, 2, 3, 1, 2], 2) == 4\nassert func([5, 5, 5, 5, 5], 5) == 5\nassert func([1, 2, 3, 4, 5], 6) == 0\nassert func([1, 1, 1, 1, 1], 1) == 5\nassert func([], 3) == 0"}
{"task_id": 100, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1, m, n):                                                                                                                                                                                                \n    '''\n    A function should be written to find the sum of the numbers in a list between the indices of a specified range.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 1, 3) == 9\nassert func([10, 20, 30, 40, 50], 0, 2) == 60\nassert func([5, 10, 15, 20, 25], 2, 4) == 55\nassert func([2, 4, 6, 8, 10], 3, 4) == 18\nassert func([100, 200, 300, 400, 500], 1, 4) == 1100\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 1, 3) == 9\nassert func([10, 20, 30, 40, 50], 0, 2) == 60\nassert func([5, 10, 15, 20, 25], 2, 4) == 55\nassert func([2, 4, 6, 8, 10], 3, 4) == 18\nassert func([100, 200, 300, 400, 500], 1, 4) == 1100\n"}
{"task_id": 101, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(a):\n    '''\n    A function should be written to find the perimeter of a pentagon.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5) == 25\nassert func(7) == 35\nassert func(10) == 50\nassert func(3) == 15\nassert func(12) == 60\n```", "response_code": "\nassert func(5) == 25\nassert func(7) == 35\nassert func(10) == 50\nassert func(3) == 15\nassert func(12) == 60\n"}
{"task_id": 102, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(s):\n    '''\n    A function should be written to find the occurrence of characters 'std' in the given string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"student\") == 1\nassert func(\"stand\") == 1\nassert func(\"studious\") == 1\nassert func(\"standard\") == 1\nassert func(\"understand\") == 2\n```", "response_code": "\nassert func(\"student\") == 1\nassert func(\"stand\") == 1\nassert func(\"studious\") == 1\nassert func(\"standard\") == 1\nassert func(\"understand\") == 2\n"}
{"task_id": 103, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tuple):\n    '''\n    A function should be written to check if all the elements in the tuple have the same data type or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func((1, 2, 3)) == True\nassert func(('a', 'b', 'c')) == True\nassert func((1, 'a', 3.5)) == False\nassert func((True, False, True)) == True\nassert func(([], [], [])) == True", "response_code": "assert func((1, 2, 3)) == True\nassert func(('a', 'b', 'c')) == True\nassert func((1, 'a', 3.5)) == False\nassert func((True, False, True)) == True\nassert func(([], [], [])) == True"}
{"task_id": 104, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr, n, x):\n    '''\n    A function should be written to check for majority element in the given sorted array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 2, 3, 3, 3, 3], 7, 3) == True\nassert func([1, 2, 2, 3, 3, 3, 3], 7, 2) == False\nassert func([1, 1, 2, 2, 2, 3, 3], 7, 2) == True\nassert func([1, 1, 2, 2, 2, 3, 3], 7, 1) == False\nassert func([1, 1, 1, 2, 2, 2, 2], 7, 2) == False\n```", "response_code": "\nassert func([1, 2, 2, 3, 3, 3, 3], 7, 3) == True\nassert func([1, 2, 2, 3, 3, 3, 3], 7, 2) == False\nassert func([1, 1, 2, 2, 2, 3, 3], 7, 2) == True\nassert func([1, 1, 2, 2, 2, 3, 3], 7, 1) == False\nassert func([1, 1, 1, 2, 2, 2, 2], 7, 2) == False\n"}
{"task_id": 105, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function is written to count set bits of a given number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 0\nassert func(1) == 1\nassert func(5) == 2\nassert func(15) == 4\nassert func(255) == 8\n```", "response_code": "\nassert func(0) == 0\nassert func(1) == 1\nassert func(5) == 2\nassert func(15) == 4\nassert func(255) == 8\n"}
{"task_id": 106, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str):\n    '''\n    A python function should be written to remove the characters which have odd index values of a given string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == \"hlo\"\nassert func(\"python\") == \"pto\"\nassert func(\"abcdefg\") == \"aceg\"\nassert func(\"12345\") == \"135\"\nassert func(\"a1b2c3d4e5\") == \"abcde\"\n```", "response_code": "\nassert func(\"hello\") == \"hlo\"\nassert func(\"python\") == \"pto\"\nassert func(\"abcdefg\") == \"aceg\"\nassert func(\"12345\") == \"135\"\nassert func(\"a1b2c3d4e5\") == \"abcde\"\n"}
{"task_id": 107, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a,b,c): \n    '''\n    A function should be written to find the minimum of three numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1, 2, 3) == 1\nassert func(5, 3, 7) == 3\nassert func(10, 10, 10) == 10\nassert func(-5, -10, -3) == -10\nassert func(0, 0, 0) == 0", "response_code": "assert func(1, 2, 3) == 1\nassert func(5, 3, 7) == 3\nassert func(10, 10, 10) == 10\nassert func(-5, -10, -3) == -10\nassert func(0, 0, 0) == 0"}
{"task_id": 108, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n,l,r):  \n    '''\n    A python function is written to check whether all the bits are unset in the given range or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5, 1, 3) == False\nassert func(8, 2, 4) == True\nassert func(15, 0, 3) == False\nassert func(10, 2, 2) == True\nassert func(0, 0, 0) == True\n```", "response_code": "\nassert func(5, 1, 3) == False\nassert func(8, 2, 4) == True\nassert func(15, 0, 3) == False\nassert func(10, 2, 2) == True\nassert func(0, 0, 0) == True\n"}
{"task_id": 109, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr, n):\n    '''\n    A function should be written to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([-1, 2, -3, 4, 5], 5) == [-1, -3, 2, 4, 5]\nassert func([1, -2, 3, -4, 5], 5) == [-2, -4, 1, 3, 5]\nassert func([5, 4, 3, 2, 1], 5) == [5, 4, 3, 2, 1]\nassert func([-1, -2, -3, -4, -5], 5) == [-1, -2, -3, -4, -5]\nassert func([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\n```", "response_code": "\nassert func([-1, 2, -3, 4, 5], 5) == [-1, -3, 2, 4, 5]\nassert func([1, -2, 3, -4, 5], 5) == [-2, -4, 1, 3, 5]\nassert func([5, 4, 3, 2, 1], 5) == [5, 4, 3, 2, 1]\nassert func([-1, -2, -3, -4, -5], 5) == [-1, -2, -3, -4, -5]\nassert func([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\n"}
{"task_id": 110, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1,char):\n    '''\n    A function should be written to replace blank spaces with any character in a string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello world\", \"-\") == \"hello-world\"\nassert func(\"python is fun\", \"*\") == \"python*is*fun\"\nassert func(\"coding is cool\", \"#\") == \"coding#is#cool\"\nassert func(\"hello\", \"+\") == \"hello\"\nassert func(\"\", \"-\") == \"\"\n```", "response_code": "\nassert func(\"hello world\", \"-\") == \"hello-world\"\nassert func(\"python is fun\", \"*\") == \"python*is*fun\"\nassert func(\"coding is cool\", \"#\") == \"coding#is#cool\"\nassert func(\"hello\", \"+\") == \"hello\"\nassert func(\"\", \"-\") == \"\"\n"}
{"task_id": 111, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import heapq\ndef func(list1,n):\n    '''\n    A function should be written to get the n largest items from a dataset.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([4, 2, 7, 1, 5], 3) == [7, 5, 4]\nassert func([10, 20, 30, 40, 50], 2) == [50, 40]\nassert func([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\nassert func([100, 200, 300, 400, 500], 1) == [500]\nassert func([8, 6, 7, 5, 3, 0, 9], 4) == [9, 8, 7, 6]\n```", "response_code": "\nassert func([4, 2, 7, 1, 5], 3) == [7, 5, 4]\nassert func([10, 20, 30, 40, 50], 2) == [50, 40]\nassert func([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\nassert func([100, 200, 300, 400, 500], 1) == [500]\nassert func([8, 6, 7, 5, 3, 0, 9], 4) == [9, 8, 7, 6]\n"}
{"task_id": 112, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(r,h):\n    '''\n    A function should be written to find the lateral surface area of a cylinder.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(3, 4) == 75.3981633974483\nassert func(5, 2) == 62.83185307179586\nassert func(0, 10) == 0\nassert func(7, 3) == 131.94689145077132\nassert func(2, 8) == 100.53096491487338", "response_code": "assert func(3, 4) == 75.3981633974483\nassert func(5, 2) == 62.83185307179586\nassert func(0, 10) == 0\nassert func(7, 3) == 131.94689145077132\nassert func(2, 8) == 100.53096491487338"}
{"task_id": 113, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l):\n    '''\n    A function should be written to find the volume of a cube.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3) == 27\nassert func(5) == 125\nassert func(0) == 0\nassert func(10) == 1000\nassert func(2.5) == 15.625\n```", "response_code": "\nassert func(3) == 27\nassert func(5) == 125\nassert func(0) == 0\nassert func(10) == 1000\nassert func(2.5) == 15.625\n"}
{"task_id": 114, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function is written to set all even bits of a given number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 0\nassert func(1) == 2\nassert func(5) == 6\nassert func(10) == 10\nassert func(15) == 14\n```", "response_code": "\nassert func(0) == 0\nassert func(1) == 2\nassert func(5) == 6\nassert func(10) == 10\nassert func(15) == 14\n"}
{"task_id": 115, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from collections import Counter \ndef func(test_list):\n    '''\n    A function should be written to check the occurrences of records which occur similar times in the given tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (2, 3), (3, 4), (1, 2), (2, 3)]) == [(1, 2), (2, 3)]\nassert func([(1, 2), (2, 3), (3, 4), (1, 2), (2, 3), (3, 4)]) == [(1, 2), (2, 3), (3, 4)]\nassert func([(1, 2), (2, 3), (3, 4), (1, 2), (2, 3), (3, 4), (1, 2)]) == [(1, 2), (2, 3), (3, 4)]\nassert func([(1, 2), (2, 3), (3, 4), (1, 2), (2, 3), (3, 4), (1, 2), (2, 3)]) == [(1, 2), (2, 3), (3, 4)]\nassert func([(1, 2), (2, 3), (3, 4), (1, 2), (2, 3), (3, 4), (1, 2), (2, 3), (3, 4)]) == [(1, 2), (2, 3), (3, 4)]\n```", "response_code": "\nassert func([(1, 2), (2, 3), (3, 4), (1, 2), (2, 3)]) == [(1, 2), (2, 3)]\nassert func([(1, 2), (2, 3), (3, 4), (1, 2), (2, 3), (3, 4)]) == [(1, 2), (2, 3), (3, 4)]\nassert func([(1, 2), (2, 3), (3, 4), (1, 2), (2, 3), (3, 4), (1, 2)]) == [(1, 2), (2, 3), (3, 4)]\nassert func([(1, 2), (2, 3), (3, 4), (1, 2), (2, 3), (3, 4), (1, 2), (2, 3)]) == [(1, 2), (2, 3), (3, 4)]\nassert func([(1, 2), (2, 3), (3, 4), (1, 2), (2, 3), (3, 4), (1, 2), (2, 3), (3, 4)]) == [(1, 2), (2, 3), (3, 4)]\n"}
{"task_id": 116, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str): \n    '''\n    A python function is written to count the number of non-empty substrings of a given string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"abc\") == 6\nassert func(\"hello\") == 15\nassert func(\"12345\") == 15\nassert func(\"a\") == 1\nassert func(\"\") == 0", "response_code": "assert func(\"abc\") == 6\nassert func(\"hello\") == 15\nassert func(\"12345\") == 15\nassert func(\"a\") == 1\nassert func(\"\") == 0"}
{"task_id": 117, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(m,n): \n    '''\n    A function is written to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(3, 2) == 3\nassert func(4, 3) == 6\nassert func(5, 4) == 10\nassert func(6, 5) == 15\nassert func(7, 6) == 21", "response_code": "assert func(3, 2) == 3\nassert func(4, 3) == 6\nassert func(5, 4) == 10\nassert func(6, 5) == 15\nassert func(7, 6) == 21"}
{"task_id": 118, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1,list2):\n    '''\n    A function should be written to replace the last element of the list with another list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], [4, 5]) == [1, 2, 4, 5]\nassert func(['a', 'b', 'c'], ['d']) == ['a', 'b', 'd']\nassert func([], [1, 2, 3]) == [1, 2, 3]\nassert func([10], [20, 30, 40]) == [10, 20, 30, 40]\nassert func(['x', 'y'], ['z']) == ['x', 'z']\n```", "response_code": "\nassert func([1, 2, 3], [4, 5]) == [1, 2, 4, 5]\nassert func(['a', 'b', 'c'], ['d']) == ['a', 'b', 'd']\nassert func([], [1, 2, 3]) == [1, 2, 3]\nassert func([10], [20, 30, 40]) == [10, 20, 30, 40]\nassert func(['x', 'y'], ['z']) == ['x', 'z']\n"}
{"task_id": 119, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1):\n    '''\n    A function should be written to count total characters in a string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\") == 5\nassert func(\"12345\") == 5\nassert func(\"\") == 0\nassert func(\"aabbcc\") == 6\nassert func(\"testing 123\") == 11", "response_code": "assert func(\"hello\") == 5\nassert func(\"12345\") == 5\nassert func(\"\") == 0\nassert func(\"aabbcc\") == 6\nassert func(\"testing 123\") == 11"}
{"task_id": 120, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math  \ndef func(N): \n    '''\n    A python function is written to find the next perfect square greater than a given number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5) == 9\nassert func(10) == 16\nassert func(25) == 36\nassert func(50) == 64\nassert func(100) == 121\n```", "response_code": "\nassert func(5) == 9\nassert func(10) == 16\nassert func(25) == 36\nassert func(50) == 64\nassert func(100) == 121\n"}
{"task_id": 121, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr): \n    '''\n    A function should be written to find the maximum sum of bi-tonic sub-sequence for the given array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 15\nassert func([5, 4, 3, 2, 1]) == 15\nassert func([1, 2, 3, 4, 5, 4, 3, 2, 1]) == 15\nassert func([1, 2, 3, 4, 5, 4, 3, 2, 1, 6, 7, 8, 9]) == 39\nassert func([1, 2, 3, 4, 5, 4, 3, 2, 1, 6, 7, 8, 9, 8, 7, 6, 5]) == 45\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 15\nassert func([5, 4, 3, 2, 1]) == 15\nassert func([1, 2, 3, 4, 5, 4, 3, 2, 1]) == 15\nassert func([1, 2, 3, 4, 5, 4, 3, 2, 1, 6, 7, 8, 9]) == 39\nassert func([1, 2, 3, 4, 5, 4, 3, 2, 1, 6, 7, 8, 9, 8, 7, 6, 5]) == 45\n"}
{"task_id": 122, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(number):\n    '''\n    A function for computing square roots using the Babylonian method is to be written.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(16) == 4\nassert func(25) == 5\nassert func(144) == 12\nassert func(81) == 9\nassert func(100) == 10\n```", "response_code": "\nassert func(16) == 4\nassert func(25) == 5\nassert func(144) == 12\nassert func(81) == 9\nassert func(100) == 10\n"}
{"task_id": 123, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str): \n    '''\n    A function should be written to find the longest palindromic subsequence in the given string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"babad\") == \"aba\"  # \"aba\" is the longest palindromic subsequence in \"babad\"\nassert func(\"cbbd\") == \"bb\"  # \"bb\" is the longest palindromic subsequence in \"cbbd\"\nassert func(\"racecar\") == \"racecar\"  # \"racecar\" is a palindrome itself\nassert func(\"abcde\") == \"a\"  # \"a\" is the longest palindromic subsequence in \"abcde\"\nassert func(\"abacdfgdcaba\") == \"aba\"  # \"aba\" is the longest palindromic subsequence in \"abacdfgdcaba\"\n```", "response_code": "\nassert func(\"babad\") == \"aba\"  # \"aba\" is the longest palindromic subsequence in \"babad\"\nassert func(\"cbbd\") == \"bb\"  # \"bb\" is the longest palindromic subsequence in \"cbbd\"\nassert func(\"racecar\") == \"racecar\"  # \"racecar\" is a palindrome itself\nassert func(\"abcde\") == \"a\"  # \"a\" is the longest palindromic subsequence in \"abcde\"\nassert func(\"abacdfgdcaba\") == \"aba\"  # \"aba\" is the longest palindromic subsequence in \"abacdfgdcaba\"\n"}
{"task_id": 124, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    A function should be written to calculate the harmonic sum of n-1.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 0\nassert func(2) == 1\nassert func(5) == 2.283333333333333\nassert func(10) == 2.9289682539682538\nassert func(20) == 3.597739657143682\n```", "response_code": "\nassert func(1) == 0\nassert func(2) == 1\nassert func(5) == 2.283333333333333\nassert func(10) == 2.9289682539682538\nassert func(20) == 3.597739657143682\n"}
{"task_id": 125, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(array_nums1,array_nums2):\n    '''\n    A function should be written to find the intersection of two arrays using a lambda function.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]) == [4, 5]\nassert func([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == []\nassert func([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3], [4, 5, 6]) == []\nassert func([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]) == [4, 5]\nassert func([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == []\nassert func([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3], [4, 5, 6]) == []\nassert func([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n"}
{"task_id": 126, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(tup, x): \n    '''\n    A python function is written to count the occurrences of an element in a tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func((1, 2, 3, 4, 2, 2), 2) == 3\nassert func((5, 5, 5, 5, 5), 5) == 5\nassert func((1, 2, 3, 4), 5) == 0\nassert func((), 10) == 0\nassert func((1, 1, 1, 1, 1, 1), 1) == 6", "response_code": "assert func((1, 2, 3, 4, 2, 2), 2) == 3\nassert func((5, 5, 5, 5, 5), 5) == 5\nassert func((1, 2, 3, 4), 5) == 0\nassert func((), 10) == 0\nassert func((1, 1, 1, 1, 1, 1), 1) == 6"}
{"task_id": 127, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list,element):\n    '''\n    A function should be written to insert an element before each element of a list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], 0) == [0, 1, 0, 2, 0, 3]\nassert func(['a', 'b', 'c'], 'z') == ['z', 'a', 'z', 'b', 'z', 'c']\nassert func([], 5) == []\nassert func([10], 100) == [100, 10]\nassert func([True, False], False) == [False, True, False, False]\n```", "response_code": "\nassert func([1, 2, 3], 0) == [0, 1, 0, 2, 0, 3]\nassert func(['a', 'b', 'c'], 'z') == ['z', 'a', 'z', 'b', 'z', 'c']\nassert func([], 5) == []\nassert func([10], 100) == [100, 10]\nassert func([True, False], False) == [False, True, False, False]\n"}
{"task_id": 128, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import cmath  \ndef func(numbers):    \n    '''\n    A python function should be written to convert complex numbers to polar coordinates.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1+1j) == (1.4142135623730951, 0.7853981633974483)\nassert func(3-4j) == (5.0, -0.9272952180016122)\nassert func(-2+2j) == (2.8284271247461903, 2.356194490192345)\nassert func(0+5j) == (5.0, 1.5707963267948966)\nassert func(-3-3j) == (4.242640687119285, -2.356194490192345)\n```", "response_code": "\nassert func(1+1j) == (1.4142135623730951, 0.7853981633974483)\nassert func(3-4j) == (5.0, -0.9272952180016122)\nassert func(-2+2j) == (2.8284271247461903, 2.356194490192345)\nassert func(0+5j) == (5.0, 1.5707963267948966)\nassert func(-3-3j) == (4.242640687119285, -2.356194490192345)\n"}
{"task_id": 129, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    A python function is written to count integers from a given list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == 5\nassert func([10, 20, 30, 40, 50, 60]) == 6\nassert func([100, 200, 300, 400]) == 4\nassert func([0, 0, 0, 0, 0]) == 5\nassert func([-1, -2, -3, -4, -5]) == 5", "response_code": "assert func([1, 2, 3, 4, 5]) == 5\nassert func([10, 20, 30, 40, 50, 60]) == 6\nassert func([100, 200, 300, 400]) == 4\nassert func([0, 0, 0, 0, 0]) == 5\nassert func([-1, -2, -3, -4, -5]) == 5"}
{"task_id": 130, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from itertools import combinations_with_replacement \ndef func(l, n):\n    '''\n    A function should be written to choose a specified number of colours from three different colours and generate all the combinations with repetitions.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['red', 'green', 'blue'], 2) == [('red', 'red'), ('red', 'green'), ('red', 'blue'), ('green', 'green'), ('green', 'blue'), ('blue', 'blue')]\nassert func(['yellow', 'purple', 'orange'], 3) == [('yellow', 'yellow', 'yellow'), ('yellow', 'yellow', 'purple'), ('yellow', 'yellow', 'orange'), ('yellow', 'purple', 'purple'), ('yellow', 'purple', 'orange'), ('yellow', 'orange', 'orange'), ('purple', 'purple', 'purple'), ('purple', 'purple', 'orange'), ('purple', 'orange', 'orange'), ('orange', 'orange', 'orange')]\nassert func(['white', 'black', 'gray'], 1) == [('white',), ('black',), ('gray',)]\nassert func(['pink', 'brown', 'beige'], 2) == [('pink', 'pink'), ('pink', 'brown'), ('pink', 'beige'), ('brown', 'brown'), ('brown', 'beige'), ('beige', 'beige')]\nassert func(['cyan', 'magenta', 'yellow'], 2) == [('cyan', 'cyan'), ('cyan', 'magenta'), ('cyan', 'yellow'), ('magenta', 'magenta'), ('magenta', 'yellow'), ('yellow', 'yellow')]\n```", "response_code": "\nassert func(['red', 'green', 'blue'], 2) == [('red', 'red'), ('red', 'green'), ('red', 'blue'), ('green', 'green'), ('green', 'blue'), ('blue', 'blue')]\nassert func(['yellow', 'purple', 'orange'], 3) == [('yellow', 'yellow', 'yellow'), ('yellow', 'yellow', 'purple'), ('yellow', 'yellow', 'orange'), ('yellow', 'purple', 'purple'), ('yellow', 'purple', 'orange'), ('yellow', 'orange', 'orange'), ('purple', 'purple', 'purple'), ('purple', 'purple', 'orange'), ('purple', 'orange', 'orange'), ('orange', 'orange', 'orange')]\nassert func(['white', 'black', 'gray'], 1) == [('white',), ('black',), ('gray',)]\nassert func(['pink', 'brown', 'beige'], 2) == [('pink', 'pink'), ('pink', 'brown'), ('pink', 'beige'), ('brown', 'brown'), ('brown', 'beige'), ('beige', 'beige')]\nassert func(['cyan', 'magenta', 'yellow'], 2) == [('cyan', 'cyan'), ('cyan', 'magenta'), ('cyan', 'yellow'), ('magenta', 'magenta'), ('magenta', 'yellow'), ('yellow', 'yellow')]\n"}
{"task_id": 131, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    A python function is written to count the number of prime numbers less than a given non-negative number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(10) == 4\nassert func(20) == 8\nassert func(50) == 15\nassert func(100) == 25\nassert func(200) == 46", "response_code": "assert func(10) == 4\nassert func(20) == 8\nassert func(50) == 15\nassert func(100) == 25\nassert func(200) == 46"}
{"task_id": 132, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a,b):\n    '''\n    A function should be written to swap two numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(2, 3) == (3, 2)\nassert func(-5, 10) == (10, -5)\nassert func(0, 0) == (0, 0)\nassert func(100, 200) == (200, 100)\nassert func(-3, -7) == (-7, -3)\n```", "response_code": "\nassert func(2, 3) == (3, 2)\nassert func(-5, 10) == (10, -5)\nassert func(0, 0) == (0, 0)\nassert func(100, 200) == (200, 100)\nassert func(-3, -7) == (-7, -3)\n"}
{"task_id": 133, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    A function should be written to maximize the given two tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (4, 5, 6)) == (4, 5, 6)\nassert func((10, 20, 30), (4, 5, 6)) == (10, 20, 30)\nassert func((1, 2, 3), (1, 2, 3)) == (1, 2, 3)\nassert func((100, 200, 300), (50, 60, 70)) == (100, 200, 300)\nassert func((5, 10, 15), (5, 10, 15)) == (5, 10, 15)\n```", "response_code": "\nassert func((1, 2, 3), (4, 5, 6)) == (4, 5, 6)\nassert func((10, 20, 30), (4, 5, 6)) == (10, 20, 30)\nassert func((1, 2, 3), (1, 2, 3)) == (1, 2, 3)\nassert func((100, 200, 300), (50, 60, 70)) == (100, 200, 300)\nassert func((5, 10, 15), (5, 10, 15)) == (5, 10, 15)\n"}
{"task_id": 134, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 5\nassert func(2) == 11\nassert func(3) == 17\nassert func(4) == 41\nassert func(5) == 821", "response_code": "assert func(1) == 5\nassert func(2) == 11\nassert func(3) == 17\nassert func(4) == 41\nassert func(5) == 821"}
{"task_id": 135, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    A function should be written to perform mathematical division operation across the given tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((10, 20, 30), (2, 4, 6)) == (5.0, 5.0, 5.0)\nassert func((15, 25, 35), (3, 5, 7)) == (5.0, 5.0, 5.0)\nassert func((100, 200, 300), (10, 20, 30)) == (10.0, 10.0, 10.0)\nassert func((50, 75, 100), (5, 15, 25)) == (10.0, 5.0, 4.0)\nassert func((12, 24, 36), (3, 6, 9)) == (4.0, 4.0, 4.0)\n```", "response_code": "\nassert func((10, 20, 30), (2, 4, 6)) == (5.0, 5.0, 5.0)\nassert func((15, 25, 35), (3, 5, 7)) == (5.0, 5.0, 5.0)\nassert func((100, 200, 300), (10, 20, 30)) == (10.0, 10.0, 10.0)\nassert func((50, 75, 100), (5, 15, 25)) == (10.0, 5.0, 4.0)\nassert func((12, 24, 36), (3, 6, 9)) == (4.0, 4.0, 4.0)\n"}
{"task_id": 136, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1, L):\n    '''\n    A function should be written to split a given list into two parts where the length of the first part of the list is given.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])\nassert func([10, 20, 30, 40, 50, 60], 4) == ([10, 20, 30, 40], [50, 60])\nassert func(['a', 'b', 'c', 'd'], 1) == (['a'], ['b', 'c', 'd'])\nassert func([], 0) == ([], [])\nassert func([100], 1) == ([100], [])\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])\nassert func([10, 20, 30, 40, 50, 60], 4) == ([10, 20, 30, 40], [50, 60])\nassert func(['a', 'b', 'c', 'd'], 1) == (['a'], ['b', 'c', 'd'])\nassert func([], 0) == ([], [])\nassert func([100], 1) == ([100], [])\n"}
{"task_id": 137, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(h_age):\n    '''\n    A function should be written to calculate a dog's age in dog's years.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 15\nassert func(2) == 24\nassert func(5) == 39\nassert func(10) == 64\nassert func(15) == 89", "response_code": "assert func(1) == 15\nassert func(2) == 24\nassert func(5) == 39\nassert func(10) == 64\nassert func(15) == 89"}
{"task_id": 138, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(S, step):\n    '''\n    A function should be written to split a list for every nth element.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert func([10, 20, 30, 40, 50], 2) == [[10, 20], [30, 40], [50]]\nassert func([100, 200, 300, 400, 500, 600], 4) == [[100, 200, 300, 400], [500, 600]]\nassert func([11, 22, 33, 44, 55, 66, 77], 1) == [[11], [22], [33], [44], [55], [66], [77]]\nassert func([111, 222, 333, 444], 5) == [[111, 222, 333, 444]]\n```", "response_code": "\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert func([10, 20, 30, 40, 50], 2) == [[10, 20], [30, 40], [50]]\nassert func([100, 200, 300, 400, 500, 600], 4) == [[100, 200, 300, 400], [500, 600]]\nassert func([11, 22, 33, 44, 55, 66, 77], 1) == [[11], [22], [33], [44], [55], [66], [77]]\nassert func([111, 222, 333, 444], 5) == [[111, 222, 333, 444]]\n"}
{"task_id": 139, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l):\n    '''\n    A function should be written to find the lateral surface area of a cube.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5) == 100\nassert func(3) == 54\nassert func(7) == 294\nassert func(0) == 0\nassert func(10) == 600\n```", "response_code": "\nassert func(5) == 100\nassert func(3) == 54\nassert func(7) == 294\nassert func(0) == 0\nassert func(10) == 600\n"}
{"task_id": 140, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):  \n    '''\n    A python function is written to find the sum of squares of first n odd natural numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1  # 1^2 = 1\nassert func(2) == 10  # 1^2 + 3^2 = 1 + 9 = 10\nassert func(3) == 35  # 1^2 + 3^2 + 5^2 = 1 + 9 + 25 = 35\nassert func(4) == 84  # 1^2 + 3^2 + 5^2 + 7^2 = 1 + 9 + 25 + 49 = 84\nassert func(5) == 165  # 1^2 + 3^2 + 5^2 + 7^2 + 9^2 = 1 + 9 + 25 + 49 + 81 = 165\n```", "response_code": "\nassert func(1) == 1  # 1^2 = 1\nassert func(2) == 10  # 1^2 + 3^2 = 1 + 9 = 10\nassert func(3) == 35  # 1^2 + 3^2 + 5^2 = 1 + 9 + 25 = 35\nassert func(4) == 84  # 1^2 + 3^2 + 5^2 + 7^2 = 1 + 9 + 25 + 49 = 84\nassert func(5) == 165  # 1^2 + 3^2 + 5^2 + 7^2 + 9^2 = 1 + 9 + 25 + 49 + 81 = 165\n"}
{"task_id": 141, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to find the n'th star number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 13\nassert func(3) == 37\nassert func(4) == 73\nassert func(5) == 121\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 13\nassert func(3) == 37\nassert func(4) == 73\nassert func(5) == 121\n"}
{"task_id": 142, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(k):\n    '''\n    A function should be written to find the ascii value of a character.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func('A') == 65\nassert func('a') == 97\nassert func('1') == 49\nassert func('!') == 33\nassert func(' ') == 32\n```", "response_code": "\nassert func('A') == 65\nassert func('a') == 97\nassert func('1') == 49\nassert func('!') == 33\nassert func(' ') == 32\n"}
{"task_id": 143, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):  \n    '''\n    A python function is written to find the sum of even numbers at even positions.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5, 6]) == 6\nassert func([2, 4, 6, 8, 10]) == 20\nassert func([1, 3, 5, 7, 9]) == 0\nassert func([2, 3, 4, 5, 6]) == 6\nassert func([10, 20, 30, 40, 50]) == 120", "response_code": "assert func([1, 2, 3, 4, 5, 6]) == 6\nassert func([2, 4, 6, 8, 10]) == 20\nassert func([1, 3, 5, 7, 9]) == 0\nassert func([2, 3, 4, 5, 6]) == 6\nassert func([10, 20, 30, 40, 50]) == 120"}
{"task_id": 144, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function is written to find the sum of the fifth power of the first n even natural numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 2**5\nassert func(2) == 2**5 + 4**5\nassert func(3) == 2**5 + 4**5 + 6**5\nassert func(4) == 2**5 + 4**5 + 6**5 + 8**5\nassert func(5) == 2**5 + 4**5 + 6**5 + 8**5 + 10**5", "response_code": "assert func(1) == 2**5\nassert func(2) == 2**5 + 4**5\nassert func(3) == 2**5 + 4**5 + 6**5\nassert func(4) == 2**5 + 4**5 + 6**5 + 8**5\nassert func(5) == 2**5 + 4**5 + 6**5 + 8**5 + 10**5"}
{"task_id": 145, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    A function should be written to perform the rear element extraction from a list of tuples records.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [3, 6, 9]\nassert func([(10, 20, 30), (40, 50, 60)]) == [30, 60]\nassert func([(100, 200, 300)]) == [300]\nassert func([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]\nassert func([(7,), (8,), (9,)]) == [7, 8, 9]", "response_code": "assert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [3, 6, 9]\nassert func([(10, 20, 30), (40, 50, 60)]) == [30, 60]\nassert func([(100, 200, 300)]) == [300]\nassert func([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]\nassert func([(7,), (8,), (9,)]) == [7, 8, 9]"}
{"task_id": 146, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    A function should be written to subtract the contents of one tuple with the corresponding index of the other tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (1, 1, 1)) == (0, 1, 2)\nassert func((10, 20, 30), (5, 10, 15)) == (5, 10, 15)\nassert func((100, 200, 300), (0, 0, 0)) == (100, 200, 300)\nassert func((5, 10, 15), (5, 10, 15)) == (0, 0, 0)\nassert func((0, 0, 0), (1, 2, 3)) == (-1, -2, -3)\n```", "response_code": "\nassert func((1, 2, 3), (1, 1, 1)) == (0, 1, 2)\nassert func((10, 20, 30), (5, 10, 15)) == (5, 10, 15)\nassert func((100, 200, 300), (0, 0, 0)) == (100, 200, 300)\nassert func((5, 10, 15), (5, 10, 15)) == (0, 0, 0)\nassert func((0, 0, 0), (1, 2, 3)) == (-1, -2, -3)\n"}
{"task_id": 147, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math  \ndef func( n): \n    '''\n    A python function is written to find the sum of even index binomial coefficients.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 1\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 3\nassert func(4) == 5\n```", "response_code": "\nassert func(0) == 1\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 3\nassert func(4) == 5\n"}
{"task_id": 148, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(r,h):\n    '''\n    A function should be written to find the volume of a cylinder.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1, 1) == 3.141592653589793\nassert func(2, 3) == 37.69911184307752\nassert func(0, 5) == 0\nassert func(4, 2) == 100.53096491487338\nassert func(3, 4) == 113.09733552923255\n```", "response_code": "\nassert func(1, 1) == 3.141592653589793\nassert func(2, 3) == 37.69911184307752\nassert func(0, 5) == 0\nassert func(4, 2) == 100.53096491487338\nassert func(3, 4) == 113.09733552923255\n"}
{"task_id": 149, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(dict,n):\n    '''\n    A function should be written to filter a dictionary based on values.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func({'a': 1, 'b': 2, 'c': 3, 'd': 4}, 2) == {'b': 2, 'c': 3, 'd': 4}\nassert func({'apple': 5, 'banana': 3, 'cherry': 7, 'date': 2}, 4) == {'apple': 5, 'cherry': 7}\nassert func({'x': 10, 'y': 20, 'z': 30}, 15) == {'x': 10, 'y': 20, 'z': 30}\nassert func({'red': 100, 'green': 200, 'blue': 300}, 150) == {'red': 100, 'green': 200, 'blue': 300}\nassert func({'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5}, 3) == {'three': 3, 'four': 4, 'five': 5}", "response_code": "assert func({'a': 1, 'b': 2, 'c': 3, 'd': 4}, 2) == {'b': 2, 'c': 3, 'd': 4}\nassert func({'apple': 5, 'banana': 3, 'cherry': 7, 'date': 2}, 4) == {'apple': 5, 'cherry': 7}\nassert func({'x': 10, 'y': 20, 'z': 30}, 15) == {'x': 10, 'y': 20, 'z': 30}\nassert func({'red': 100, 'green': 200, 'blue': 300}, 150) == {'red': 100, 'green': 200, 'blue': 300}\nassert func({'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5}, 3) == {'three': 3, 'four': 4, 'five': 5}"}
{"task_id": 150, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    A function should be written to find the element count that occurs before the record in the given tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3, 4, 5), 3) == 2\nassert func((10, 20, 30, 40, 50), 40) == 3\nassert func((5, 10, 15, 20, 25), 5) == 0\nassert func((100, 200, 300, 400, 500), 600) == 5\nassert func((2, 4, 6, 8, 10), 8) == 3\n```", "response_code": "\nassert func((1, 2, 3, 4, 5), 3) == 2\nassert func((10, 20, 30, 40, 50), 40) == 3\nassert func((5, 10, 15, 20, 25), 5) == 0\nassert func((100, 200, 300, 400, 500), 600) == 5\nassert func((2, 4, 6, 8, 10), 8) == 3\n"}
{"task_id": 151, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to find the nth decagonal number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 10\nassert func(2) == 30\nassert func(3) == 60\nassert func(4) == 100\nassert func(5) == 150\n```", "response_code": "\nassert func(1) == 10\nassert func(2) == 30\nassert func(3) == 60\nassert func(4) == 100\nassert func(5) == 150\n"}
{"task_id": 152, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(dlist, item):\n    '''\n    A function should be written to search an element in the given array by using sequential search.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 3) == 2\nassert func([10, 20, 30, 40, 50], 40) == 3\nassert func([5, 10, 15, 20, 25], 5) == 0\nassert func([100, 200, 300, 400, 500], 600) == -1\nassert func([8, 6, 4, 2, 0], 8) == 0\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 3) == 2\nassert func([10, 20, 30, 40, 50], 40) == 3\nassert func([5, 10, 15, 20, 25], 5) == 0\nassert func([100, 200, 300, 400, 500], 600) == -1\nassert func([8, 6, 4, 2, 0], 8) == 0\n"}
{"task_id": 153, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    A python function is written to check if the elements of a given list are unique or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == True\nassert func([1, 2, 3, 4, 4]) == False\nassert func([]) == True\nassert func([1, 1, 1, 1, 1]) == False\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True", "response_code": "assert func([1, 2, 3, 4, 5]) == True\nassert func([1, 2, 3, 4, 4]) == False\nassert func([]) == True\nassert func([1, 1, 1, 1, 1]) == False\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True"}
{"task_id": 154, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums1,nums2):\n    '''\n    A function should be written to subtract two lists using map and lambda function.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3], [1, 1, 1]) == [0, 1, 2]\nassert func([5, 10, 15], [2, 4, 6]) == [3, 6, 9]\nassert func([0, 0, 0], [1, 2, 3]) == [-1, -2, -3]\nassert func([100, 200, 300], [10, 20, 30]) == [90, 180, 270]\nassert func([2, 4, 6], [1, 3, 5]) == [1, 1, 1]", "response_code": "assert func([1, 2, 3], [1, 1, 1]) == [0, 1, 2]\nassert func([5, 10, 15], [2, 4, 6]) == [3, 6, 9]\nassert func([0, 0, 0], [1, 2, 3]) == [-1, -2, -3]\nassert func([100, 200, 300], [10, 20, 30]) == [90, 180, 270]\nassert func([2, 4, 6], [1, 3, 5]) == [1, 1, 1]"}
{"task_id": 155, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function is written to check whether the frequency of each digit is less than or equal to the digit itself.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(123) == True\nassert func(112233) == True\nassert func(444) == True\nassert func(987654321) == False\nassert func(111222333) == False\n```", "response_code": "\nassert func(123) == True\nassert func(112233) == True\nassert func(444) == True\nassert func(987654321) == False\nassert func(111222333) == False\n"}
{"task_id": 156, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list,element):\n    '''\n    A function should be written to check whether all items of a list are equal to a given string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(['apple', 'apple', 'apple'], 'apple') == True\nassert func(['apple', 'banana', 'apple'], 'apple') == False\nassert func(['apple', 'apple', 'apple'], 'banana') == False\nassert func(['banana', 'banana', 'banana'], 'banana') == True\nassert func([], 'apple') == False", "response_code": "assert func(['apple', 'apple', 'apple'], 'apple') == True\nassert func(['apple', 'banana', 'apple'], 'apple') == False\nassert func(['apple', 'apple', 'apple'], 'banana') == False\nassert func(['banana', 'banana', 'banana'], 'banana') == True\nassert func([], 'apple') == False"}
{"task_id": 157, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function is written that matches a string that has an a followed by two to three 'b'.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"ab\") == False\nassert func(\"abb\") == True\nassert func(\"abbb\") == True\nassert func(\"abbbb\") == False\nassert func(\"acb\") == False\n```", "response_code": "\nassert func(\"ab\") == False\nassert func(\"abb\") == True\nassert func(\"abbb\") == True\nassert func(\"abbbb\") == False\nassert func(\"acb\") == False\n"}
{"task_id": 158, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a, n, k): \n    '''\n    A function should be written to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, -2, 3, 4], 4, 1) == 10\nassert func([1, -2, 3, 4], 4, 2) == 20\nassert func([1, -2, 3, 4], 4, 3) == 30\nassert func([1, -2, 3, 4], 4, 4) == 40\nassert func([1, -2, 3, 4], 4, 5) == 50\n```", "response_code": "\nassert func([1, -2, 3, 4], 4, 1) == 10\nassert func([1, -2, 3, 4], 4, 2) == 20\nassert func([1, -2, 3, 4], 4, 3) == 30\nassert func([1, -2, 3, 4], 4, 4) == 40\nassert func([1, -2, 3, 4], 4, 5) == 50\n"}
{"task_id": 159, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):  \n    '''\n    A python function is written to find the sum of squares of first n even natural numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 4\nassert func(2) == 20\nassert func(3) == 56\nassert func(4) == 120\nassert func(5) == 220\n```", "response_code": "\nassert func(1) == 4\nassert func(2) == 20\nassert func(3) == 56\nassert func(4) == 120\nassert func(5) == 220\n"}
{"task_id": 160, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to find the list of lists with maximum length.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [[6, 7, 8, 9]]\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 2], [3, 4], [5, 6], [7, 8]]\nassert func([[1], [2], [3], [4], [5]]) == [[1], [2], [3], [4], [5]]\nassert func([[1, 2, 3, 4, 5]]) == [[1, 2, 3, 4, 5]]\nassert func([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]]) == [[7, 8, 9, 10]]\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [[6, 7, 8, 9]]\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 2], [3, 4], [5, 6], [7, 8]]\nassert func([[1], [2], [3], [4], [5]]) == [[1], [2], [3], [4], [5]]\nassert func([[1, 2, 3, 4, 5]]) == [[1, 2, 3, 4, 5]]\nassert func([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]]) == [[7, 8, 9, 10]]\n"}
{"task_id": 161, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n, k): \n    '''\n    A function is written to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 2) == 6\nassert func(4, 3) == 66\nassert func(5, 4) == 246\nassert func(6, 2) == 30\nassert func(7, 3) == 930\n```", "response_code": "\nassert func(3, 2) == 6\nassert func(4, 3) == 66\nassert func(5, 4) == 246\nassert func(6, 2) == 30\nassert func(7, 3) == 930\n"}
{"task_id": 162, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n,m):  \n    '''\n    A python function is written to find the quotient of two numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(10, 2) == 5\nassert func(15, 3) == 5\nassert func(20, 4) == 5\nassert func(25, 5) == 5\nassert func(30, 6) == 5", "response_code": "assert func(10, 2) == 5\nassert func(15, 3) == 5\nassert func(20, 4) == 5\nassert func(25, 5) == 5\nassert func(30, 6) == 5"}
{"task_id": 163, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(w,h):\n    '''\n    A function should be written to find the third side of a right angled triangle.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 4) == 5\nassert func(5, 12) == 13\nassert func(7, 24) == 25\nassert func(8, 15) == 17\nassert func(9, 40) == 41\n```", "response_code": "\nassert func(3, 4) == 5\nassert func(5, 12) == 13\nassert func(7, 24) == 25\nassert func(8, 15) == 17\nassert func(9, 40) == 41\n"}
{"task_id": 164, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(listval):\n    '''\n    A function should be written to find the maximum value in a given heterogeneous list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == 5\nassert func([-10, 0, 10, 20, 30]) == 30\nassert func([-5, -3, -1, 0, 2, 4]) == 4\nassert func([1.5, 2.7, 3.9, 4.2, 5.1]) == 5.1\nassert func(['a', 'b', 'c', 'd', 'e']) == 'e'", "response_code": "assert func([1, 2, 3, 4, 5]) == 5\nassert func([-10, 0, 10, 20, 30]) == 30\nassert func([-5, -3, -1, 0, 2, 4]) == 4\nassert func([1.5, 2.7, 3.9, 4.2, 5.1]) == 5.1\nassert func(['a', 'b', 'c', 'd', 'e']) == 'e'"}
{"task_id": 165, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(number):\n    '''\n    A function should be written to return the sum of all divisors of a number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(6) == 12\nassert func(10) == 18\nassert func(15) == 24\nassert func(28) == 56\nassert func(36) == 91", "response_code": "assert func(6) == 12\nassert func(10) == 18\nassert func(15) == 24\nassert func(28) == 56\nassert func(36) == 91"}
{"task_id": 166, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr): \n    '''\n    A python function is written to count inversions in an array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == 0\nassert func([2, 4, 1, 3, 5]) == 2\nassert func([5, 4, 3, 2, 1]) == 10\nassert func([1, 1, 1, 1, 1]) == 0\nassert func([1, 3, 5, 2, 4]) == 3", "response_code": "assert func([1, 2, 3, 4, 5]) == 0\nassert func([2, 4, 1, 3, 5]) == 2\nassert func([5, 4, 3, 2, 1]) == 10\nassert func([1, 1, 1, 1, 1]) == 0\nassert func([1, 3, 5, 2, 4]) == 3"}
{"task_id": 167, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to flatten a given nested list structure.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, [3]], 4]) == [1, 2, 3, 4]\nassert func([1, [2, [3, 4]], 5]) == [1, 2, 3, 4, 5]\nassert func([[1, 2], [3, [4, 5]], 6]) == [1, 2, 3, 4, 5, 6]\nassert func([1, [2, [3, [4, [5]]]]]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n```", "response_code": "\nassert func([[1, 2, [3]], 4]) == [1, 2, 3, 4]\nassert func([1, [2, [3, 4]], 5]) == [1, 2, 3, 4, 5]\nassert func([[1, 2], [3, [4, 5]], 6]) == [1, 2, 3, 4, 5, 6]\nassert func([1, [2, [3, [4, [5]]]]]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"}
{"task_id": 168, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from collections import defaultdict\ndef func(stdata):\n    '''\n    A function should be written to calculate the maximum aggregate from the list of tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nstdata = [(1, 2), (3, 4), (5, 6)]\nassert func(stdata) == 15\n\nstdata = [(10, 20), (30, 40), (50, 60)]\nassert func(stdata) == 120\n\nstdata = [(5, 10), (15, 20), (25, 30)]\nassert func(stdata) == 60\n\nstdata = [(0, 0), (0, 0), (0, 0)]\nassert func(stdata) == 0\n\nstdata = [(100, 200), (300, 400), (500, 600)]\nassert func(stdata) == 1500\n```", "response_code": "\nstdata = [(1, 2), (3, 4), (5, 6)]\nassert func(stdata) == 15\n\nstdata = [(10, 20), (30, 40), (50, 60)]\nassert func(stdata) == 120\n\nstdata = [(5, 10), (15, 20), (25, 30)]\nassert func(stdata) == 60\n\nstdata = [(0, 0), (0, 0), (0, 0)]\nassert func(stdata) == 0\n\nstdata = [(100, 200), (300, 400), (500, 600)]\nassert func(stdata) == 1500\n"}
{"task_id": 169, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to find the count of all binary sequences of length 2n such that the sum of the first n bits is the same as the sum of the last n bits.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 2\nassert func(2) == 6\nassert func(3) == 20\nassert func(4) == 70\nassert func(5) == 252\n```", "response_code": "\nassert func(1) == 2\nassert func(2) == 6\nassert func(3) == 20\nassert func(4) == 70\nassert func(5) == 252\n"}
{"task_id": 170, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(d):\n    '''\n    A function should be written to find the depth of a dictionary.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func({}) == 1\nassert func({'a': 1}) == 2\nassert func({'a': {'b': 2}}) == 3\nassert func({'a': {'b': {'c': 3}}}) == 4\nassert func({'a': {'b': {'c': {'d': 4}}}}) == 5", "response_code": "assert func({}) == 1\nassert func({'a': 1}) == 2\nassert func({'a': {'b': 2}}) == 3\nassert func({'a': {'b': {'c': 3}}}) == 4\nassert func({'a': {'b': {'c': {'d': 4}}}}) == 5"}
{"task_id": 171, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr,ranges,rotations,index) :  \n    '''\n    A python function is written to find the element at a given index after a number of rotations.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], [(0, 2), (1, 3)], 2, 3) == 4\nassert func([10, 20, 30, 40, 50], [(1, 4), (0, 3)], 3, 2) == 30\nassert func([5, 10, 15, 20, 25], [(0, 3), (2, 4)], 1, 4) == 15\nassert func([100, 200, 300, 400, 500], [(2, 3), (0, 2)], 1, 0) == 200\nassert func([3, 6, 9, 12, 15], [(1, 2), (3, 4)], 4, 1) == 15\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], [(0, 2), (1, 3)], 2, 3) == 4\nassert func([10, 20, 30, 40, 50], [(1, 4), (0, 3)], 3, 2) == 30\nassert func([5, 10, 15, 20, 25], [(0, 3), (2, 4)], 1, 4) == 15\nassert func([100, 200, 300, 400, 500], [(2, 3), (0, 2)], 1, 0) == 200\nassert func([3, 6, 9, 12, 15], [(1, 2), (3, 4)], 4, 1) == 15\n"}
{"task_id": 172, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(words):\n    '''\n    A function should be written to match two words from a list of words starting with the letter 'p'.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['apple', 'banana', 'peach', 'pear']) == ['peach', 'pear']\nassert func(['pineapple', 'plum', 'peanut', 'pepper']) == ['pineapple', 'pepper']\nassert func(['potato', 'pumpkin', 'papaya', 'pear']) == ['papaya', 'pear']\nassert func(['peacock', 'parrot', 'penguin', 'pigeon']) == ['peacock', 'parrot']\nassert func(['peanut', 'pistachio', 'pecan', 'walnut']) == ['peanut', 'pecan']\n```", "response_code": "\nassert func(['apple', 'banana', 'peach', 'pear']) == ['peach', 'pear']\nassert func(['pineapple', 'plum', 'peanut', 'pepper']) == ['pineapple', 'pepper']\nassert func(['potato', 'pumpkin', 'papaya', 'pear']) == ['papaya', 'pear']\nassert func(['peacock', 'parrot', 'penguin', 'pigeon']) == ['peacock', 'parrot']\nassert func(['peanut', 'pistachio', 'pecan', 'walnut']) == ['peanut', 'pecan']\n"}
{"task_id": 173, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a, n, index, k):\n    '''\n    A function is written to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 5, 2, 4) == 10\nassert func([3, 2, 6, 4, 5], 5, 1, 3) == 9\nassert func([5, 4, 3, 2, 1], 5, 0, 4) == 9\nassert func([1, 2, 3, 4, 5], 5, 3, 4) == 14\nassert func([5, 4, 3, 2, 1], 5, 2, 4) == 12\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 5, 2, 4) == 10\nassert func([3, 2, 6, 4, 5], 5, 1, 3) == 9\nassert func([5, 4, 3, 2, 1], 5, 0, 4) == 9\nassert func([1, 2, 3, 4, 5], 5, 3, 4) == 14\nassert func([5, 4, 3, 2, 1], 5, 2, 4) == 12\n"}
{"task_id": 174, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from copy import deepcopy\ndef func(tuplex,m,n):\n    '''\n    A function should be written to get a colon of a tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\ntuplex = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nm = 1\nn = 2\nassert func(tuplex, m, n) == (3, 6, 9)\n\ntuplex = ((10, 20, 30), (40, 50, 60), (70, 80, 90))\nm = 0\nn = 1\nassert func(tuplex, m, n) == (10, 40, 70)\n\ntuplex = ((11, 22, 33), (44, 55, 66), (77, 88, 99))\nm = 2\nn = 0\nassert func(tuplex, m, n) == (77, 44, 11)\n\ntuplex = ((111, 222, 333), (444, 555, 666), (777, 888, 999))\nm = 1\nn = 1\nassert func(tuplex, m, n) == (222, 555, 888)\n\ntuplex = ((1111, 2222, 3333), (4444, 5555, 6666), (7777, 8888, 9999))\nm = 0\nn = 0\nassert func(tuplex, m, n) == (1111, 4444, 7777)\n```", "response_code": "\ntuplex = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nm = 1\nn = 2\nassert func(tuplex, m, n) == (3, 6, 9)\n\ntuplex = ((10, 20, 30), (40, 50, 60), (70, 80, 90))\nm = 0\nn = 1\nassert func(tuplex, m, n) == (10, 40, 70)\n\ntuplex = ((11, 22, 33), (44, 55, 66), (77, 88, 99))\nm = 2\nn = 0\nassert func(tuplex, m, n) == (77, 44, 11)\n\ntuplex = ((111, 222, 333), (444, 555, 666), (777, 888, 999))\nm = 1\nn = 1\nassert func(tuplex, m, n) == (222, 555, 888)\n\ntuplex = ((1111, 2222, 3333), (4444, 5555, 6666), (7777, 8888, 9999))\nm = 0\nn = 0\nassert func(tuplex, m, n) == (1111, 4444, 7777)\n"}
{"task_id": 175, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums1, nums2, N):\n    '''\n    A function should be written to find the specified number of largest products from two given lists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], [4, 5, 6], 1) == [18]\nassert func([1, 2, 3], [4, 5, 6], 2) == [18, 15]\nassert func([1, 2, 3], [4, 5, 6], 3) == [18, 15, 12]\nassert func([1, 2, 3], [4, 5, 6], 4) == [18, 15, 12, 10]\nassert func([1, 2, 3], [4, 5, 6], 5) == [18, 15, 12, 10, 9]\n```", "response_code": "\nassert func([1, 2, 3], [4, 5, 6], 1) == [18]\nassert func([1, 2, 3], [4, 5, 6], 2) == [18, 15]\nassert func([1, 2, 3], [4, 5, 6], 3) == [18, 15, 12]\nassert func([1, 2, 3], [4, 5, 6], 4) == [18, 15, 12, 10]\nassert func([1, 2, 3], [4, 5, 6], 5) == [18, 15, 12, 10, 9]\n"}
{"task_id": 176, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a,b):   \n    '''\n    A python function is written to find the maximum of two numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(3, 5) == 5\nassert func(10, 10) == 10\nassert func(-2, 0) == 0\nassert func(100, 50) == 100\nassert func(-5, -10) == -5", "response_code": "assert func(3, 5) == 5\nassert func(10, 10) == 10\nassert func(-2, 0) == 0\nassert func(100, 50) == 100\nassert func(-5, -10) == -5"}
{"task_id": 177, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1):\n    '''\n    A function should be written to convert a given string to a tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == ('h', 'e', 'l', 'l', 'o')\nassert func(\"12345\") == ('1', '2', '3', '4', '5')\nassert func(\"abcde\") == ('a', 'b', 'c', 'd', 'e')\nassert func(\"\") == ()\nassert func(\"testing 123\") == ('t', 'e', 's', 't', 'i', 'n', 'g', ' ', '1', '2', '3')\n```", "response_code": "\nassert func(\"hello\") == ('h', 'e', 'l', 'l', 'o')\nassert func(\"12345\") == ('1', '2', '3', '4', '5')\nassert func(\"abcde\") == ('a', 'b', 'c', 'd', 'e')\nassert func(\"\") == ()\nassert func(\"testing 123\") == ('t', 'e', 's', 't', 'i', 'n', 'g', ' ', '1', '2', '3')\n"}
{"task_id": 178, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function is written to set the left most unset bit.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(0) == 1\nassert func(1) == 2\nassert func(5) == 6\nassert func(10) == 12\nassert func(15) == 16", "response_code": "assert func(0) == 1\nassert func(1) == 2\nassert func(5) == 6\nassert func(10) == 12\nassert func(15) == 16"}
{"task_id": 179, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(r,h):\n    '''\n    A function should be written to find the volume of a cone.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 4) == math.pi * 3**2 * 4 / 3\nassert func(5, 7) == math.pi * 5**2 * 7 / 3\nassert func(1, 10) == math.pi * 1**2 * 10 / 3\nassert func(8, 2) == math.pi * 8**2 * 2 / 3\nassert func(6, 9) == math.pi * 6**2 * 9 / 3\n```", "response_code": "\nassert func(3, 4) == math.pi * 3**2 * 4 / 3\nassert func(5, 7) == math.pi * 5**2 * 7 / 3\nassert func(1, 10) == math.pi * 1**2 * 10 / 3\nassert func(8, 2) == math.pi * 8**2 * 2 / 3\nassert func(6, 9) == math.pi * 6**2 * 9 / 3\n"}
{"task_id": 180, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function is written to find the highest power of 2 that is less than or equal to n.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(10) == 8\nassert func(16) == 16\nassert func(25) == 16\nassert func(32) == 32\nassert func(100) == 64", "response_code": "assert func(10) == 8\nassert func(16) == 16\nassert func(25) == 16\nassert func(32) == 32\nassert func(100) == 64"}
{"task_id": 181, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to find the n'th lucas number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 2\nassert func(1) == 1\nassert func(5) == 11\nassert func(10) == 123\nassert func(15) == 1364\n```", "response_code": "\nassert func(0) == 2\nassert func(1) == 1\nassert func(5) == 11\nassert func(10) == 123\nassert func(15) == 1364\n"}
{"task_id": 182, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list_, string):\n    '''\n    A function should be written to insert a given string at the beginning of all items in a list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], 'a') == ['a1', 'a2', 'a3']\nassert func(['apple', 'banana', 'cherry'], 'fruit_') == ['fruit_apple', 'fruit_banana', 'fruit_cherry']\nassert func([], 'hello') == []\nassert func([True, False], 'is_') == ['is_True', 'is_False']\nassert func(['cat', 'dog', 'bird'], '') == ['cat', 'dog', 'bird']\n```", "response_code": "\nassert func([1, 2, 3], 'a') == ['a1', 'a2', 'a3']\nassert func(['apple', 'banana', 'cherry'], 'fruit_') == ['fruit_apple', 'fruit_banana', 'fruit_cherry']\nassert func([], 'hello') == []\nassert func([True, False], 'is_') == ['is_True', 'is_False']\nassert func(['cat', 'dog', 'bird'], '') == ['cat', 'dog', 'bird']\n"}
{"task_id": 183, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l1, l2, l3):\n    '''\n    A function should be written to convert more than one list to nested dictionary.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test Case 1\nl1 = ['a', 'b', 'c']\nl2 = [1, 2, 3]\nl3 = ['x', 'y', 'z']\nexpected_output = {'a': {1: 'x', 2: 'y', 3: 'z'}, 'b': {1: 'x', 2: 'y', 3: 'z'}, 'c': {1: 'x', 2: 'y', 3: 'z'}}\nassert func(l1, l2, l3) == expected_output\n\n# Test Case 2\nl1 = ['apple', 'banana']\nl2 = [5, 10]\nl3 = ['red', 'yellow']\nexpected_output = {'apple': {5: 'red', 10: 'yellow'}, 'banana': {5: 'red', 10: 'yellow'}}\nassert func(l1, l2, l3) == expected_output\n\n# Test Case 3\nl1 = ['dog', 'cat']\nl2 = [3, 7]\nl3 = ['brown', 'black']\nexpected_output = {'dog': {3: 'brown', 7: 'black'}, 'cat': {3: 'brown', 7: 'black'}}\nassert func(l1, l2, l3) == expected_output\n\n# Test Case 4\nl1 = ['one', 'two', 'three']\nl2 = [1, 2, 3]\nl3 = ['first', 'second', 'third']\nexpected_output = {'one': {1: 'first', 2: 'second', 3: 'third'}, 'two': {1: 'first', 2: 'second', 3: 'third'}, 'three': {1: 'first', 2: 'second', 3: 'third'}}\nassert func(l1, l2, l3) == expected_output\n\n# Test Case 5\nl1 = ['sun', 'moon']\nl2 = [100, 200]\nl3 = ['yellow', 'white']\nexpected_output = {'sun': {100: 'yellow', 200: 'white'}, 'moon': {100: 'yellow', 200: 'white'}}\nassert func(l1, l2, l3) == expected_output\n```", "response_code": "\n# Test Case 1\nl1 = ['a', 'b', 'c']\nl2 = [1, 2, 3]\nl3 = ['x', 'y', 'z']\nexpected_output = {'a': {1: 'x', 2: 'y', 3: 'z'}, 'b': {1: 'x', 2: 'y', 3: 'z'}, 'c': {1: 'x', 2: 'y', 3: 'z'}}\nassert func(l1, l2, l3) == expected_output\n\n# Test Case 2\nl1 = ['apple', 'banana']\nl2 = [5, 10]\nl3 = ['red', 'yellow']\nexpected_output = {'apple': {5: 'red', 10: 'yellow'}, 'banana': {5: 'red', 10: 'yellow'}}\nassert func(l1, l2, l3) == expected_output\n\n# Test Case 3\nl1 = ['dog', 'cat']\nl2 = [3, 7]\nl3 = ['brown', 'black']\nexpected_output = {'dog': {3: 'brown', 7: 'black'}, 'cat': {3: 'brown', 7: 'black'}}\nassert func(l1, l2, l3) == expected_output\n\n# Test Case 4\nl1 = ['one', 'two', 'three']\nl2 = [1, 2, 3]\nl3 = ['first', 'second', 'third']\nexpected_output = {'one': {1: 'first', 2: 'second', 3: 'third'}, 'two': {1: 'first', 2: 'second', 3: 'third'}, 'three': {1: 'first', 2: 'second', 3: 'third'}}\nassert func(l1, l2, l3) == expected_output\n\n# Test Case 5\nl1 = ['sun', 'moon']\nl2 = [100, 200]\nl3 = ['yellow', 'white']\nexpected_output = {'sun': {100: 'yellow', 200: 'white'}, 'moon': {100: 'yellow', 200: 'white'}}\nassert func(l1, l2, l3) == expected_output\n"}
{"task_id": 184, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    A function is written to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    pass\n\n# check the correctness of func \nassert "}], "response": "```python\nassert func(10) == 12\nassert func(20) == 21\nassert func(30) == 31\nassert func(50) == 42\nassert func(100) == 53\n```", "response_code": "\nassert func(10) == 12\nassert func(20) == 21\nassert func(30) == 31\nassert func(50) == 42\nassert func(100) == 53\n"}
{"task_id": 185, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(input_list):\n    '''\n    A function should be written to find the list with maximum length using a lambda function.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]\nassert func([[1], [2, 3], [4, 5, 6]]) == [4, 5, 6]\nassert func([[1, 2], [3, 4], [5, 6], [7, 8, 9]]) == [7, 8, 9]\nassert func([[1, 2, 3, 4], [5], [6, 7], [8, 9]]) == [1, 2, 3, 4]\nassert func([[1, 2], [3, 4, 5], [6], [7, 8]]) == [3, 4, 5]\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]\nassert func([[1], [2, 3], [4, 5, 6]]) == [4, 5, 6]\nassert func([[1, 2], [3, 4], [5, 6], [7, 8, 9]]) == [7, 8, 9]\nassert func([[1, 2, 3, 4], [5], [6, 7], [8, 9]]) == [1, 2, 3, 4]\nassert func([[1, 2], [3, 4, 5], [6], [7, 8]]) == [3, 4, 5]\n"}
{"task_id": 186, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    A function should be written to check if the given tuple is distinct or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func((1, 2, 3, 4)) == True\nassert func((1, 2, 2, 4)) == False\nassert func((5, 5, 5, 5)) == False\nassert func((1, 2, 3, 4, 5)) == True\nassert func(()) == True", "response_code": "assert func((1, 2, 3, 4)) == True\nassert func((1, 2, 2, 4)) == False\nassert func((5, 5, 5, 5)) == False\nassert func((1, 2, 3, 4, 5)) == True\nassert func(()) == True"}
{"task_id": 187, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1):\n    '''\n    A python function is written to find the first non-repeated character in a given string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == 'h'\nassert func(\"programming\") == 'p'\nassert func(\"python\") == 'y'\nassert func(\"racecar\") == 'e'\nassert func(\"aabbc\") == 'c'\n```", "response_code": "\nassert func(\"hello\") == 'h'\nassert func(\"programming\") == 'p'\nassert func(\"python\") == 'y'\nassert func(\"racecar\") == 'e'\nassert func(\"aabbc\") == 'c'\n"}
{"task_id": 188, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef func(string): \n    '''\n    A function should be written to check whether the given string starts and ends with the same character or not using regex.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == False\nassert func(\"level\") == True\nassert func(\"racecar\") == True\nassert func(\"goodbye\") == False\nassert func(\"noon\") == True\n```", "response_code": "\nassert func(\"hello\") == False\nassert func(\"level\") == True\nassert func(\"racecar\") == True\nassert func(\"goodbye\") == False\nassert func(\"noon\") == True\n"}
{"task_id": 189, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a,b,c):\n    '''\n    A function should be written to find the median of three specific numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1, 2, 3) == 2\nassert func(10, 5, 8) == 8\nassert func(4, 4, 4) == 4\nassert func(-1, -2, -3) == -2\nassert func(100, 200, 150) == 150\n```", "response_code": "\nassert func(1, 2, 3) == 2\nassert func(10, 5, 8) == 8\nassert func(4, 4, 4) == 4\nassert func(-1, -2, -3) == -2\nassert func(100, 200, 150) == 150\n"}
{"task_id": 190, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    A function should be written to compute the sum of digits of each number of a given list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([123, 456, 789]) == [6, 15, 24]\nassert func([111, 222, 333]) == [3, 6, 9]\nassert func([9876, 5432, 1098]) == [30, 14, 18]\nassert func([876, 543, 210]) == [21, 12, 3]\nassert func([999, 888, 777]) == [27, 24, 21]", "response_code": "assert func([123, 456, 789]) == [6, 15, 24]\nassert func([111, 222, 333]) == [3, 6, 9]\nassert func([9876, 5432, 1098]) == [30, 14, 18]\nassert func([876, 543, 210]) == [21, 12, 3]\nassert func([999, 888, 777]) == [27, 24, 21]"}
{"task_id": 191, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    A function should be written to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (2, 3, 4)) == (3, 1, 7)\nassert func((5, 6, 7), (2, 2, 2)) == (7, 4, 5)\nassert func((0, 0, 0), (1, 1, 1)) == (1, 1, 1)\nassert func((255, 255, 255), (0, 0, 0)) == (255, 255, 255)\nassert func((8, 8, 8), (8, 8, 8)) == (0, 0, 0)\n```", "response_code": "\nassert func((1, 2, 3), (2, 3, 4)) == (3, 1, 7)\nassert func((5, 6, 7), (2, 2, 2)) == (7, 4, 5)\nassert func((0, 0, 0), (1, 1, 1)) == (1, 1, 1)\nassert func((255, 255, 255), (0, 0, 0)) == (255, 255, 255)\nassert func((8, 8, 8), (8, 8, 8)) == (0, 0, 0)\n"}
{"task_id": 192, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    A function should be written to extract the frequency of unique tuples in the given list order irrespective.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (2, 1), (1, 2), (3, 4)]) == {(1, 2): 2, (2, 1): 1, (3, 4): 1}\nassert func([(1, 2), (1, 2), (1, 2), (1, 2)]) == {(1, 2): 4}\nassert func([(1, 2), (2, 1), (1, 2), (1, 2)]) == {(1, 2): 3, (2, 1): 1}\nassert func([(1, 2), (2, 1), (1, 2), (2, 1)]) == {(1, 2): 2, (2, 1): 2}\nassert func([(1, 2), (2, 1), (3, 4), (5, 6)]) == {(1, 2): 1, (2, 1): 1, (3, 4): 1, (5, 6): 1}\n```", "response_code": "\nassert func([(1, 2), (2, 1), (1, 2), (3, 4)]) == {(1, 2): 2, (2, 1): 1, (3, 4): 1}\nassert func([(1, 2), (1, 2), (1, 2), (1, 2)]) == {(1, 2): 4}\nassert func([(1, 2), (2, 1), (1, 2), (1, 2)]) == {(1, 2): 3, (2, 1): 1}\nassert func([(1, 2), (2, 1), (1, 2), (2, 1)]) == {(1, 2): 2, (2, 1): 2}\nassert func([(1, 2), (2, 1), (3, 4), (5, 6)]) == {(1, 2): 1, (2, 1): 1, (3, 4): 1, (5, 6): 1}\n"}
{"task_id": 193, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    A function should be written to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(((1, 2), (3, 4)), ((5, 6), (7, 8))) == ((6, 8), (10, 12))\nassert func(((10, 20), (30, 40)), ((50, 60), (70, 80))) == ((60, 80), (100, 120))\nassert func(((0, 0), (0, 0)), ((0, 0), (0, 0))) == ((0, 0), (0, 0))\nassert func(((1, 2, 3), (4, 5, 6)), ((7, 8, 9), (10, 11, 12))) == ((8, 10, 12), (14, 16, 18))\nassert func(((1,), (2,)), ((3,), (4,))) == ((4,), (6,))\n```", "response_code": "\nassert func(((1, 2), (3, 4)), ((5, 6), (7, 8))) == ((6, 8), (10, 12))\nassert func(((10, 20), (30, 40)), ((50, 60), (70, 80))) == ((60, 80), (100, 120))\nassert func(((0, 0), (0, 0)), ((0, 0), (0, 0))) == ((0, 0), (0, 0))\nassert func(((1, 2, 3), (4, 5, 6)), ((7, 8, 9), (10, 11, 12))) == ((8, 10, 12), (14, 16, 18))\nassert func(((1,), (2,)), ((3,), (4,))) == ((4,), (6,))\n"}
{"task_id": 194, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a,b):   \n    '''\n    A python function is written to find the minimum of two numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(3, 5) == 3\nassert func(10, 2) == 2\nassert func(-1, 1) == -1\nassert func(0, 0) == 0\nassert func(100, 100) == 100", "response_code": "assert func(3, 5) == 3\nassert func(10, 2) == 2\nassert func(-1, 1) == -1\nassert func(0, 0) == 0\nassert func(100, 100) == 100"}
{"task_id": 195, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(tuplex,tuple1): \n    '''\n    A function should be written to check whether an element exists within a tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func((1, 2, 3), 2) == True\nassert func(('a', 'b', 'c'), 'd') == False\nassert func((10, 20, 30, 40), 30) == True\nassert func(('apple', 'banana', 'cherry'), 'pear') == False\nassert func(('hello', 'world'), 'hello') == True", "response_code": "assert func((1, 2, 3), 2) == True\nassert func(('a', 'b', 'c'), 'd') == False\nassert func((10, 20, 30, 40), 30) == True\nassert func(('apple', 'banana', 'cherry'), 'pear') == False\nassert func(('hello', 'world'), 'hello') == True"}
{"task_id": 196, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x): \n    '''\n    A python function is written to find the parity of a given number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(0) == 'even'\nassert func(1) == 'odd'\nassert func(2) == 'even'\nassert func(15) == 'odd'\nassert func(-4) == 'even'", "response_code": "assert func(0) == 'even'\nassert func(1) == 'odd'\nassert func(2) == 'even'\nassert func(15) == 'odd'\nassert func(-4) == 'even'"}
{"task_id": 197, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    A function should be written to create the next bigger number by rearranging the digits of a given number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(123) == 132\nassert func(789) == 798\nassert func(54321) == 54321\nassert func(111) == 111\nassert func(9876543210) == 9876543221\n```", "response_code": "\nassert func(123) == 132\nassert func(789) == 798\nassert func(54321) == 54321\nassert func(111) == 111\nassert func(9876543210) == 9876543221\n"}
{"task_id": 198, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import heapq\ndef func(nums1, nums2, k):\n    '''\n    A function should be written to find k number of pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1,7,11], [2,4,6], 3) == [(1, 2), (1, 4), (1, 6)]\nassert func([1,1,2], [1,2,3], 2) == [(1, 1), (1, 1)]\nassert func([3,5,7], [2,4,6], 4) == [(3, 2), (3, 4), (3, 6), (5, 2)]\nassert func([1,2,3], [4,5,6], 1) == [(1, 4)]\nassert func([9,8,7], [6,5,4], 2) == [(9, 4), (8, 4)]\n```", "response_code": "\nassert func([1,7,11], [2,4,6], 3) == [(1, 2), (1, 4), (1, 6)]\nassert func([1,1,2], [1,2,3], 2) == [(1, 1), (1, 1)]\nassert func([3,5,7], [2,4,6], 4) == [(3, 2), (3, 4), (3, 6), (5, 2)]\nassert func([1,2,3], [4,5,6], 1) == [(1, 4)]\nassert func([9,8,7], [6,5,4], 2) == [(9, 4), (8, 4)]\n"}
{"task_id": 199, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to find the minimum product from the pairs of tuples within a given list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (3, 4), (5, 6)]) == 6\nassert func([(-1, 2), (3, -4), (5, 6)]) == -24\nassert func([(0, 2), (3, 4), (5, 6)]) == 0\nassert func([(1, 2), (3, 4), (5, 0)]) == 0\nassert func([(1, 2), (3, 4), (5, -6)]) == -30\n```", "response_code": "\nassert func([(1, 2), (3, 4), (5, 6)]) == 6\nassert func([(-1, 2), (3, -4), (5, 6)]) == -24\nassert func([(0, 2), (3, 4), (5, 6)]) == 0\nassert func([(1, 2), (3, 4), (5, 0)]) == 0\nassert func([(1, 2), (3, 4), (5, -6)]) == -30\n"}
{"task_id": 200, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(listval):\n    '''\n    A function should be written to find the minimum value in a given heterogeneous list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([3, 5, 1, 7, 2]) == 1\nassert func([10, 20, 30, 40, 50]) == 10\nassert func([-5, -10, -15, -20]) == -20\nassert func([2.5, 3.7, 1.2, 5.6]) == 1.2\nassert func(['apple', 'banana', 'cherry', 'date']) == 'apple'", "response_code": "assert func([3, 5, 1, 7, 2]) == 1\nassert func([10, 20, 30, 40, 50]) == 10\nassert func([-5, -10, -15, -20]) == -20\nassert func([2.5, 3.7, 1.2, 5.6]) == 1.2\nassert func(['apple', 'banana', 'cherry', 'date']) == 'apple'"}
{"task_id": 201, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(word):\n    '''\n    A function should be written to convert the given snake case string to camel case string by using regex.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello_world\") == \"helloWorld\"\nassert func(\"snake_case_example\") == \"snakeCaseExample\"\nassert func(\"this_is_a_test\") == \"thisIsATest\"\nassert func(\"camel_case_string\") == \"camelCaseString\"\nassert func(\"another_example\") == \"anotherExample\"\n```", "response_code": "\nassert func(\"hello_world\") == \"helloWorld\"\nassert func(\"snake_case_example\") == \"snakeCaseExample\"\nassert func(\"this_is_a_test\") == \"thisIsATest\"\nassert func(\"camel_case_string\") == \"camelCaseString\"\nassert func(\"another_example\") == \"anotherExample\"\n"}
{"task_id": 202, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l):\n    '''\n    A python function is written to remove odd numbers from a given list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == [2, 4]\nassert func([11, 22, 33, 44, 55]) == [22, 44]\nassert func([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10]\nassert func([15, 25, 35, 45, 55]) == []\nassert func([1, 3, 5, 7, 9]) == []", "response_code": "assert func([1, 2, 3, 4, 5]) == [2, 4]\nassert func([11, 22, 33, 44, 55]) == [22, 44]\nassert func([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10]\nassert func([15, 25, 35, 45, 55]) == []\nassert func([1, 3, 5, 7, 9]) == []"}
{"task_id": 203, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1, n):\n    '''\n    A function should be written to extract the nth element from a given list of tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (3, 4), (5, 6)], 0) == [1, 3, 5]\nassert func([(1, 2), (3, 4), (5, 6)], 1) == [2, 4, 6]\nassert func([(10, 20, 30), (40, 50, 60), (70, 80, 90)], 2) == [30, 60, 90]\nassert func([(1,), (2,), (3,)], 0) == [1, 2, 3]\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == [3, 6, 9]\n```", "response_code": "\nassert func([(1, 2), (3, 4), (5, 6)], 0) == [1, 3, 5]\nassert func([(1, 2), (3, 4), (5, 6)], 1) == [2, 4, 6]\nassert func([(10, 20, 30), (40, 50, 60), (70, 80, 90)], 2) == [30, 60, 90]\nassert func([(1,), (2,), (3,)], 0) == [1, 2, 3]\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == [3, 6, 9]\n"}
{"task_id": 204, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1,list2):  \n    '''\n    A python function is written to check whether the value exists in a sequence or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 3) == True\nassert func([1, 2, 3, 4, 5], 6) == False\nassert func(['a', 'b', 'c', 'd'], 'c') == True\nassert func(['a', 'b', 'c', 'd'], 'e') == False\nassert func([], 1) == False\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 3) == True\nassert func([1, 2, 3, 4, 5], 6) == False\nassert func(['a', 'b', 'c', 'd'], 'c') == True\nassert func(['a', 'b', 'c', 'd'], 'e') == False\nassert func([], 1) == False\n"}
{"task_id": 205, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr): \n    '''\n    A python function is written to find a pair with highest product from a given array of integers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == (4, 5)  # Output: (4, 5) with product 20\nassert func([-10, -3, 5, 2, -7]) == (-10, -7)  # Output: (-10, -7) with product 70\nassert func([-1, -2, -3, -4, -5]) == (-4, -5)  # Output: (-4, -5) with product 20\nassert func([0, 1, 2, 3, 4]) == (3, 4)  # Output: (3, 4) with product 12\nassert func([-5, -4, -3, -2, -1]) == (-1, -2)  # Output: (-1, -2) with product 2\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == (4, 5)  # Output: (4, 5) with product 20\nassert func([-10, -3, 5, 2, -7]) == (-10, -7)  # Output: (-10, -7) with product 70\nassert func([-1, -2, -3, -4, -5]) == (-4, -5)  # Output: (-4, -5) with product 20\nassert func([0, 1, 2, 3, 4]) == (3, 4)  # Output: (3, 4) with product 12\nassert func([-5, -4, -3, -2, -1]) == (-1, -2)  # Output: (-1, -2) with product 2\n"}
{"task_id": 206, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(Input): \n    '''\n    A function should be written to find the common first element in a given list of tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([(1, 2), (1, 3), (1, 4), (2, 3)]) == 1\nassert func([(5, 6), (7, 8), (5, 9), (5, 10)]) == 5\nassert func([(1, 2), (3, 4), (5, 6), (7, 8)]) == None\nassert func([(1, 2), (1, 3), (1, 4), (1, 5)]) == 1\nassert func([(1, 2), (3, 4), (5, 6), (7, 8), (1, 9)]) == 1", "response_code": "assert func([(1, 2), (1, 3), (1, 4), (2, 3)]) == 1\nassert func([(5, 6), (7, 8), (5, 9), (5, 10)]) == 5\nassert func([(1, 2), (3, 4), (5, 6), (7, 8)]) == None\nassert func([(1, 2), (1, 3), (1, 4), (1, 5)]) == 1\nassert func([(1, 2), (3, 4), (5, 6), (7, 8), (1, 9)]) == 1"}
{"task_id": 207, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lst): \n    '''\n    A python function is written to find the sublist having maximum length.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]\nassert func([[1, 2], [3, 4, 5], [6, 7]]) == [3, 4, 5]\nassert func([[1], [2], [3], [4]]) == [1]\nassert func([[1, 2, 3, 4], [5, 6, 7], [8, 9]]) == [1, 2, 3, 4]\nassert func([[1, 2], [3], [4, 5, 6, 7]]) == [4, 5, 6, 7]", "response_code": "assert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]\nassert func([[1, 2], [3, 4, 5], [6, 7]]) == [3, 4, 5]\nassert func([[1], [2], [3], [4]]) == [1]\nassert func([[1, 2, 3, 4], [5, 6, 7], [8, 9]]) == [1, 2, 3, 4]\nassert func([[1, 2], [3], [4, 5, 6, 7]]) == [4, 5, 6, 7]"}
{"task_id": 208, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1.5, 2.3, 3.8, 4.2]) == 44\nassert func([0.5, 1.2, 2.9, 3.1, 4.8]) == 44\nassert func([2.5, 3.7, 4.1, 5.9]) == 60\nassert func([1.1, 2.2, 3.3, 4.4, 5.5]) == 66\nassert func([0.9, 1.8, 2.7, 3.6, 4.5, 5.4]) == 72\n```", "response_code": "\nassert func([1.5, 2.3, 3.8, 4.2]) == 44\nassert func([0.5, 1.2, 2.9, 3.1, 4.8]) == 44\nassert func([2.5, 3.7, 4.1, 5.9]) == 60\nassert func([1.1, 2.2, 3.3, 4.4, 5.5]) == 66\nassert func([0.9, 1.8, 2.7, 3.6, 4.5, 5.4]) == 72\n"}
{"task_id": 209, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function is written to find the cube sum of first n even natural numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 8\nassert func(2) == 72\nassert func(3) == 216\nassert func(4) == 440\nassert func(5) == 800", "response_code": "assert func(1) == 8\nassert func(2) == 72\nassert func(3) == 216\nassert func(4) == 440\nassert func(5) == 800"}
{"task_id": 210, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    A function should be written to concatenate each element of the tuple by the delimiter.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(('a', 'b', 'c')) == 'a_b_c'\nassert func(('hello', 'world')) == 'hello_world'\nassert func(('123', '456', '789')) == '123_456_789'\nassert func(('apple', 'banana', 'cherry')) == 'apple_banana_cherry'\nassert func(('python', 'is', 'fun')) == 'python_is_fun'\n```", "response_code": "\nassert func(('a', 'b', 'c')) == 'a_b_c'\nassert func(('hello', 'world')) == 'hello_world'\nassert func(('123', '456', '789')) == '123_456_789'\nassert func(('apple', 'banana', 'cherry')) == 'apple_banana_cherry'\nassert func(('python', 'is', 'fun')) == 'python_is_fun'\n"}
{"task_id": 211, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):  \n    '''\n    A python function is written to find the average of cubes of first n natural numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1  # 1^3 = 1, average = 1\nassert func(2) == 4.5  # (1^3 + 2^3) / 2 = 9 / 2 = 4.5\nassert func(3) == 14  # (1^3 + 2^3 + 3^3) / 3 = 36 / 3 = 12\nassert func(5) == 55  # (1^3 + 2^3 + 3^3 + 4^3 + 5^3) / 5 = 225 / 5 = 45\nassert func(10) == 385.5  # (1^3 + 2^3 + ... + 10^3) / 10 = 3025 / 10 = 302.5\n```", "response_code": "\nassert func(1) == 1  # 1^3 = 1, average = 1\nassert func(2) == 4.5  # (1^3 + 2^3) / 2 = 9 / 2 = 4.5\nassert func(3) == 14  # (1^3 + 2^3 + 3^3) / 3 = 36 / 3 = 12\nassert func(5) == 55  # (1^3 + 2^3 + 3^3 + 4^3 + 5^3) / 5 = 225 / 5 = 45\nassert func(10) == 385.5  # (1^3 + 2^3 + ... + 10^3) / 10 = 3025 / 10 = 302.5\n"}
{"task_id": 212, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tuple):\n    '''\n    A function should be written to extract only the rear index element of each string in the given tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(('apple', 'banana', 'cherry')) == ('e', 'a', 'y')\nassert func(('hello', 'world', 'python')) == ('o', 'd', 'n')\nassert func(('12345', '67890', '54321')) == ('5', '0', '1')\nassert func(('cat', 'dog', 'rabbit')) == ('t', 'g', 't')\nassert func(('sun', 'moon', 'star')) == ('n', 'n', 'r')\n```", "response_code": "\nassert func(('apple', 'banana', 'cherry')) == ('e', 'a', 'y')\nassert func(('hello', 'world', 'python')) == ('o', 'd', 'n')\nassert func(('12345', '67890', '54321')) == ('5', '0', '1')\nassert func(('cat', 'dog', 'rabbit')) == ('t', 'g', 't')\nassert func(('sun', 'moon', 'star')) == ('n', 'n', 'r')\n"}
{"task_id": 213, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1, x): \n    '''\n    A function should be written to count the number of sublists containing a particular element.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([[1, 2, 3], [4, 5], [1, 6, 7], [8, 9, 1]], 1) == 3\nassert func([[1, 2, 3], [4, 5], [1, 6, 7], [8, 9, 1]], 4) == 1\nassert func([[1, 2, 3], [4, 5], [1, 6, 7], [8, 9, 1]], 10) == 0\nassert func([[1, 2, 3], [4, 5], [1, 6, 7], [8, 9, 1]], 5) == 1\nassert func([[1, 2, 3], [4, 5], [1, 6, 7], [8, 9, 1]], 6) == 1", "response_code": "assert func([[1, 2, 3], [4, 5], [1, 6, 7], [8, 9, 1]], 1) == 3\nassert func([[1, 2, 3], [4, 5], [1, 6, 7], [8, 9, 1]], 4) == 1\nassert func([[1, 2, 3], [4, 5], [1, 6, 7], [8, 9, 1]], 10) == 0\nassert func([[1, 2, 3], [4, 5], [1, 6, 7], [8, 9, 1]], 5) == 1\nassert func([[1, 2, 3], [4, 5], [1, 6, 7], [8, 9, 1]], 6) == 1"}
{"task_id": 214, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    A function should be written to filter odd numbers using a lambda function.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == [1, 3, 5]\nassert func([10, 21, 36, 47, 50]) == [21, 47]\nassert func([11, 22, 33, 44, 55]) == [11, 33, 55]\nassert func([2, 4, 6, 8, 10]) == []\nassert func([15, 25, 35, 45, 55]) == [15, 25, 35, 45, 55]\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == [1, 3, 5]\nassert func([10, 21, 36, 47, 50]) == [21, 47]\nassert func([11, 22, 33, 44, 55]) == [11, 33, 55]\nassert func([2, 4, 6, 8, 10]) == []\nassert func([15, 25, 35, 45, 55]) == [15, 25, 35, 45, 55]\n"}
{"task_id": 215, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(dt):\n    '''\n    A function should be written to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"2022-12-31\") == \"31-12-2022\"\nassert func(\"1999-01-15\") == \"15-01-1999\"\nassert func(\"2023-05-20\") == \"20-05-2023\"\nassert func(\"2000-10-05\") == \"05-10-2000\"\nassert func(\"1987-03-08\") == \"08-03-1987\"\n```", "response_code": "\nassert func(\"2022-12-31\") == \"31-12-2022\"\nassert func(\"1999-01-15\") == \"15-01-1999\"\nassert func(\"2023-05-20\") == \"20-05-2023\"\nassert func(\"2000-10-05\") == \"05-10-2000\"\nassert func(\"1987-03-08\") == \"08-03-1987\"\n"}
{"task_id": 216, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(my_list):\n    '''\n    A function should be written to sort the given array by using shell sort.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([4, 2, 7, 1, 5]) == [1, 2, 4, 5, 7]\nassert func([9, 3, 6, 2, 8, 1, 5, 7, 4]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert func([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1]) == [1]\n```", "response_code": "\nassert func([4, 2, 7, 1, 5]) == [1, 2, 4, 5, 7]\nassert func([9, 3, 6, 2, 8, 1, 5, 7, 4]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert func([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1]) == [1]\n"}
{"task_id": 217, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    A function should be written to extract the elementwise and tuples from the given two tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (4, 5, 6)) == ((1, 4), (2, 5), (3, 6))\nassert func(('a', 'b', 'c'), ('x', 'y', 'z')) == (('a', 'x'), ('b', 'y'), ('c', 'z'))\nassert func((10, 20, 30), (40, 50, 60)) == ((10, 40), (20, 50), (30, 60))\nassert func(('apple', 'banana', 'cherry'), ('orange', 'pear', 'grape')) == (('apple', 'orange'), ('banana', 'pear'), ('cherry', 'grape'))\nassert func((), ()) == ()\n```", "response_code": "\nassert func((1, 2, 3), (4, 5, 6)) == ((1, 4), (2, 5), (3, 6))\nassert func(('a', 'b', 'c'), ('x', 'y', 'z')) == (('a', 'x'), ('b', 'y'), ('c', 'z'))\nassert func((10, 20, 30), (40, 50, 60)) == ((10, 40), (20, 50), (30, 60))\nassert func(('apple', 'banana', 'cherry'), ('orange', 'pear', 'grape')) == (('apple', 'orange'), ('banana', 'pear'), ('cherry', 'grape'))\nassert func((), ()) == ()\n"}
{"task_id": 218, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a, b, c): \n    '''\n    A function should be written to find the directrix of a parabola.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1, 2, 3) == -1\nassert func(2, -1, 5) == 3\nassert func(-3, 4, 2) == 1\nassert func(0, 0, 0) == None\nassert func(1, 1, 1) == -0.5\n```", "response_code": "\nassert func(1, 2, 3) == -1\nassert func(2, -1, 5) == 3\nassert func(-3, 4, 2) == 1\nassert func(0, 0, 0) == None\nassert func(1, 1, 1) == -0.5\n"}
{"task_id": 219, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1, list2):\n    '''\n    A function is written that takes two lists and returns true if they have at least one common element.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], [4, 5, 6]) == False\nassert func([1, 2, 3], [3, 4, 5]) == True\nassert func([], [1, 2, 3]) == False\nassert func([1, 2, 3], []) == False\nassert func([1, 2, 3], [4, 5, 6, 3]) == True\n```", "response_code": "\nassert func([1, 2, 3], [4, 5, 6]) == False\nassert func([1, 2, 3], [3, 4, 5]) == True\nassert func([], [1, 2, 3]) == False\nassert func([1, 2, 3], []) == False\nassert func([1, 2, 3], [4, 5, 6, 3]) == True\n"}
{"task_id": 220, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(base1,base2,height):\n    '''\n    A function should be written to find the median of a trapezium.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 5, 4) == 4.0\nassert func(2, 4, 3) == 2.5\nassert func(6, 8, 5) == 6.0\nassert func(1, 3, 2) == 1.5\nassert func(4, 6, 4) == 4.0\n```", "response_code": "\nassert func(3, 5, 4) == 4.0\nassert func(2, 4, 3) == 2.5\nassert func(6, 8, 5) == 6.0\nassert func(1, 3, 2) == 1.5\nassert func(4, 6, 4) == 4.0\n"}
{"task_id": 221, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr, number):\n    '''\n    A function should be written to check whether the entered number is greater than the elements of the given array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 6) == True\nassert func([10, 20, 30, 40, 50], 25) == False\nassert func([5, 10, 15, 20, 25], 10) == False\nassert func([100, 200, 300, 400, 500], 600) == True\nassert func([2, 4, 6, 8, 10], 3) == False\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 6) == True\nassert func([10, 20, 30, 40, 50], 25) == False\nassert func([5, 10, 15, 20, 25], 10) == False\nassert func([100, 200, 300, 400, 500], 600) == True\nassert func([2, 4, 6, 8, 10], 3) == False\n"}
{"task_id": 222, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function should be written that matches a string that has an a followed by one or more b's.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"ab\") == True\nassert func(\"abb\") == True\nassert func(\"aab\") == False\nassert func(\"acbb\") == False\nassert func(\"bbb\") == False\n```", "response_code": "\nassert func(\"ab\") == True\nassert func(\"abb\") == True\nassert func(\"aab\") == False\nassert func(\"acbb\") == False\nassert func(\"bbb\") == False\n"}
{"task_id": 223, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n) :\n    '''\n    A python function is written to find the last digit of a given number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(123) == 3\nassert func(456) == 6\nassert func(789) == 9\nassert func(100) == 0\nassert func(9999) == 9\n```", "response_code": "\nassert func(123) == 3\nassert func(456) == 6\nassert func(789) == 9\nassert func(100) == 0\nassert func(9999) == 9\n"}
{"task_id": 224, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    A python function should be written to print negative numbers in a list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, -2, 3, -4, 5]) == [-2, -4]\nassert func([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]\nassert func([0, 1, 2, 3, 4]) == []\nassert func([-1, 0, 1]) == [-1]\nassert func([]) == []\n```", "response_code": "\nassert func([1, -2, 3, -4, 5]) == [-2, -4]\nassert func([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]\nassert func([0, 1, 2, 3, 4]) == []\nassert func([-1, 0, 1]) == [-1]\nassert func([]) == []\n"}
{"task_id": 225, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1):\n    '''\n    A function should be written to remove odd characters in a string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == \"el\"\nassert func(\"python\") == \"yhn\"\nassert func(\"abcdefg\") == \"bdf\"\nassert func(\"123456\") == \"246\"\nassert func(\"a1b2c3d4e5f6g7\") == \"246\"\n```", "response_code": "\nassert func(\"hello\") == \"el\"\nassert func(\"python\") == \"yhn\"\nassert func(\"abcdefg\") == \"bdf\"\nassert func(\"123456\") == \"246\"\nassert func(\"a1b2c3d4e5f6g7\") == \"246\"\n"}
{"task_id": 226, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    A function should be written to count bidirectional tuple pairs.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (2, 1), (3, 4), (4, 3)]) == 2\nassert func([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6)]) == 2\nassert func([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6), (6, 5)]) == 3\nassert func([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6), (6, 5), (7, 8)]) == 3\nassert func([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6), (6, 5), (7, 8), (8, 7)]) == 4\n```", "response_code": "\nassert func([(1, 2), (2, 1), (3, 4), (4, 3)]) == 2\nassert func([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6)]) == 2\nassert func([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6), (6, 5)]) == 3\nassert func([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6), (6, 5), (7, 8)]) == 3\nassert func([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6), (6, 5), (7, 8), (8, 7)]) == 4\n"}
{"task_id": 227, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(L):\n    '''\n    A function should be written to convert a list of multiple integers into a single integer.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3]) == 123\nassert func([9, 8, 7, 6]) == 9876\nassert func([0, 0, 0, 0]) == 0\nassert func([5, 0, 2, 1]) == 5021\nassert func([3, 5, 0, 9, 2]) == 35092\n```", "response_code": "\nassert func([1, 2, 3]) == 123\nassert func([9, 8, 7, 6]) == 9876\nassert func([0, 0, 0, 0]) == 0\nassert func([5, 0, 2, 1]) == 5021\nassert func([3, 5, 0, 9, 2]) == 35092\n"}
{"task_id": 228, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function should be written to find all adverbs and their positions in a given sentence.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"She quickly ran to the store.\") == [('quickly', 4)]\nassert func(\"He carefully read the instructions.\") == [('carefully', 2)]\nassert func(\"They happily danced all night long.\") == [('happily', 1)]\nassert func(\"I will never forget this moment.\") == [('never', 2)]\nassert func(\"The dog barked loudly at the mailman.\") == [('loudly', 3)]\n```", "response_code": "\nassert func(\"She quickly ran to the store.\") == [('quickly', 4)]\nassert func(\"He carefully read the instructions.\") == [('carefully', 2)]\nassert func(\"They happily danced all night long.\") == [('happily', 1)]\nassert func(\"I will never forget this moment.\") == [('never', 2)]\nassert func(\"The dog barked loudly at the mailman.\") == [('loudly', 3)]\n"}
{"task_id": 229, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l):\n    '''\n    A function should be written to find the surface area of a cube.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 6\nassert func(2) == 24\nassert func(3) == 54\nassert func(5) == 150\nassert func(10) == 600\n```", "response_code": "\nassert func(1) == 6\nassert func(2) == 24\nassert func(3) == 54\nassert func(5) == 150\nassert func(10) == 600\n"}
{"task_id": 230, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from array import array\ndef func(nums):\n    '''\n    A function should be written to find the ratio of positive numbers in an array of integers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(array('i', [1, 2, 3, 4, 5])) == 1.0\nassert func(array('i', [-1, -2, -3, -4, -5])) == 0.0\nassert func(array('i', [0, 0, 0, 0, 0])) == 0.0\nassert func(array('i', [1, -2, 3, -4, 5])) == 0.6\nassert func(array('i', [-1, 2, -3, 4, -5])) == 0.4\n```", "response_code": "\nassert func(array('i', [1, 2, 3, 4, 5])) == 1.0\nassert func(array('i', [-1, -2, -3, -4, -5])) == 0.0\nassert func(array('i', [0, 0, 0, 0, 0])) == 0.0\nassert func(array('i', [1, -2, 3, -4, 5])) == 0.6\nassert func(array('i', [-1, 2, -3, 4, -5])) == 0.4\n"}
{"task_id": 231, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1): \n    '''\n    A python function is written to find the largest negative number from the given list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([-1, -2, -3, -4, -5]) == -1\nassert func([-5, -4, -3, -2, -1]) == -1\nassert func([-1, -3, -5, -7, -9]) == -1\nassert func([-2, -4, -6, -8, -10]) == -2\nassert func([-10, -8, -6, -4, -2]) == -2\n```", "response_code": "\nassert func([-1, -2, -3, -4, -5]) == -1\nassert func([-5, -4, -3, -2, -1]) == -1\nassert func([-1, -3, -5, -7, -9]) == -1\nassert func([-2, -4, -6, -8, -10]) == -2\nassert func([-10, -8, -6, -4, -2]) == -2\n"}
{"task_id": 232, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list, K):\n    '''\n    A function should be written to trim each tuple by k in the given tuple list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == [(2, 3), (5, 6), (8, 9)]\nassert func([(10, 20, 30), (40, 50, 60), (70, 80, 90)], 2) == [(30,), (60,), (90,)]\nassert func([(100, 200, 300), (400, 500, 600), (700, 800, 900)], 0) == [(100, 200, 300), (400, 500, 600), (700, 800, 900)]\nassert func([(1, 2), (3, 4), (5, 6)], 1) == [(2,), (4,), (6,)]\nassert func([(7,), (8,), (9,)], 1) == [(), (), ()]\n```", "response_code": "\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == [(2, 3), (5, 6), (8, 9)]\nassert func([(10, 20, 30), (40, 50, 60), (70, 80, 90)], 2) == [(30,), (60,), (90,)]\nassert func([(100, 200, 300), (400, 500, 600), (700, 800, 900)], 0) == [(100, 200, 300), (400, 500, 600), (700, 800, 900)]\nassert func([(1, 2), (3, 4), (5, 6)], 1) == [(2,), (4,), (6,)]\nassert func([(7,), (8,), (9,)], 1) == [(), (), ()]\n"}
{"task_id": 233, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    A function should be written to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (4, 5, 6)) == (4, 10, 18)\nassert func((0, 0, 0), (1, 2, 3)) == (0, 0, 0)\nassert func((-1, -2, -3), (1, 2, 3)) == (-1, -4, -9)\nassert func((10, 20, 30), (1, 2, 3)) == (10, 40, 90)\nassert func((2, 4, 6), (0, 0, 0)) == (0, 0, 0)\n```", "response_code": "\nassert func((1, 2, 3), (4, 5, 6)) == (4, 10, 18)\nassert func((0, 0, 0), (1, 2, 3)) == (0, 0, 0)\nassert func((-1, -2, -3), (1, 2, 3)) == (-1, -4, -9)\nassert func((10, 20, 30), (1, 2, 3)) == (10, 40, 90)\nassert func((2, 4, 6), (0, 0, 0)) == (0, 0, 0)\n"}
{"task_id": 234, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from collections import Counter \ndef func(tup, lst): \n    '''\n    A python function is written to count the occurrence of all elements of list in a tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3, 4, 5), [1, 2, 3]) == {1: 1, 2: 1, 3: 1, 4: 0, 5: 0}\nassert func(('a', 'b', 'c', 'a', 'b'), ['a', 'b', 'd']) == {'a': 2, 'b': 2, 'c': 0, 'd': 0}\nassert func((1, 2, 3, 4, 5), [1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}\nassert func(('apple', 'banana', 'apple', 'cherry'), ['apple', 'banana', 'orange']) == {'apple': 2, 'banana': 1, 'cherry': 0, 'orange': 0}\nassert func(('a', 'b', 'c', 'd', 'e'), ['f', 'g', 'h']) == {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0}\n```", "response_code": "\nassert func((1, 2, 3, 4, 5), [1, 2, 3]) == {1: 1, 2: 1, 3: 1, 4: 0, 5: 0}\nassert func(('a', 'b', 'c', 'a', 'b'), ['a', 'b', 'd']) == {'a': 2, 'b': 2, 'c': 0, 'd': 0}\nassert func((1, 2, 3, 4, 5), [1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}\nassert func(('apple', 'banana', 'apple', 'cherry'), ['apple', 'banana', 'orange']) == {'apple': 2, 'banana': 1, 'cherry': 0, 'orange': 0}\nassert func(('a', 'b', 'c', 'd', 'e'), ['f', 'g', 'h']) == {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0}\n"}
{"task_id": 235, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    A function should be written to find cubes of individual elements in a list using a lambda function.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3]) == [1, 8, 27]\nassert func([0, 4, 5]) == [0, 64, 125]\nassert func([-1, -2, -3]) == [-1, -8, -27]\nassert func([2.5, 3.7, 4.2]) == [15.625, 50.653, 74.088]\nassert func([0.5, 1.5, 2.5]) == [0.125, 3.375, 15.625]\n```", "response_code": "\nassert func([1, 2, 3]) == [1, 8, 27]\nassert func([0, 4, 5]) == [0, 64, 125]\nassert func([-1, -2, -3]) == [-1, -8, -27]\nassert func([2.5, 3.7, 4.2]) == [15.625, 50.653, 74.088]\nassert func([0.5, 1.5, 2.5]) == [0.125, 3.375, 15.625]\n"}
{"task_id": 236, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to calculate the sum of perrin numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 3\nassert func(1) == 0\nassert func(5) == 10\nassert func(10) == 39\nassert func(15) == 90\n```", "response_code": "\nassert func(0) == 3\nassert func(1) == 0\nassert func(5) == 10\nassert func(10) == 39\nassert func(15) == 90\n"}
{"task_id": 237, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str, l):\n    '''\n    A function should be written to extract specified size of strings from a given list of string values.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['apple', 'banana', 'cherry', 'date'], 5) == ['apple', 'banan', 'cherr', 'date']\nassert func(['hello', 'world', 'python'], 3) == ['hel', 'wor', 'pyt']\nassert func(['cat', 'dog', 'fish'], 2) == ['ca', 'do', 'fi']\nassert func(['blue', 'green', 'yellow'], 4) == ['blue', 'gree', 'yell']\nassert func(['one', 'two', 'three'], 6) == ['one', 'two', 'three']\n```", "response_code": "\nassert func(['apple', 'banana', 'cherry', 'date'], 5) == ['apple', 'banan', 'cherr', 'date']\nassert func(['hello', 'world', 'python'], 3) == ['hel', 'wor', 'pyt']\nassert func(['cat', 'dog', 'fish'], 2) == ['ca', 'do', 'fi']\nassert func(['blue', 'green', 'yellow'], 4) == ['blue', 'gree', 'yell']\nassert func(['one', 'two', 'three'], 6) == ['one', 'two', 'three']\n"}
{"task_id": 238, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text1):\n    '''\n    A function should be written to remove all whitespaces from the given string using regex.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello World\") == \"HelloWorld\"\nassert func(\"  Python  \") == \"Python\"\nassert func(\"  Regex  is  fun  \") == \"Regexisfun\"\nassert func(\"123 456 789\") == \"123456789\"\nassert func(\"  Special  Characters  !@#$%  \") == \"SpecialCharacters!@#$%\"\n```", "response_code": "\nassert func(\"Hello World\") == \"HelloWorld\"\nassert func(\"  Python  \") == \"Python\"\nassert func(\"  Regex  is  fun  \") == \"Regexisfun\"\nassert func(\"123 456 789\") == \"123456789\"\nassert func(\"  Special  Characters  !@#$%  \") == \"SpecialCharacters!@#$%\"\n"}
{"task_id": 239, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(actual_cost,sale_amount): \n    '''\n    A function is written that gives loss amount if the given amount has loss else returns none.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(100, 80) == 20\nassert func(50, 50) == None\nassert func(200, 150) == 50\nassert func(75, 100) == None\nassert func(120, 90) == 30", "response_code": "assert func(100, 80) == 20\nassert func(50, 50) == None\nassert func(200, 150) == 50\nassert func(75, 100) == None\nassert func(120, 90) == 30"}
{"task_id": 240, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math \ndef func(n) : \n    '''\n    A python function is written to find the sum of even factors of a number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(6) == 12\nassert func(10) == 18\nassert func(15) == 24\nassert func(20) == 42\nassert func(25) == 52", "response_code": "assert func(6) == 12\nassert func(10) == 18\nassert func(15) == 24\nassert func(20) == 42\nassert func(25) == 52"}
{"task_id": 241, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function is written that matches a word containing 'z'.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"This is a test\") == None\nassert func(\"The zoo is closed\") == \"zoo\"\nassert func(\"I like pizza\") == None\nassert func(\"The lazy dog jumps over the fence\") == \"lazy\"\nassert func(\"Zoom meeting at 3pm\") == \"Zoom\"\n```", "response_code": "\nassert func(\"This is a test\") == None\nassert func(\"The zoo is closed\") == \"zoo\"\nassert func(\"I like pizza\") == None\nassert func(\"The lazy dog jumps over the fence\") == \"lazy\"\nassert func(\"Zoom meeting at 3pm\") == \"Zoom\"\n"}
{"task_id": 242, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(monthnum2):\n    '''\n    A function should be written to check whether the given month number contains 31 days or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == True\nassert func(4) == True\nassert func(6) == True\nassert func(9) == True\nassert func(11) == True", "response_code": "assert func(1) == True\nassert func(4) == True\nassert func(6) == True\nassert func(9) == True\nassert func(11) == True"}
{"task_id": 243, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(stringlist):\n    '''\n    A function should be written to reverse strings in a given list of string values.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['hello', 'world']) == ['olleh', 'dlrow']\nassert func(['python', 'is', 'awesome']) == ['nohtyp', 'si', 'emosewa']\nassert func(['racecar', 'level', 'radar']) == ['racecar', 'level', 'radar']\nassert func(['12345', '67890']) == ['54321', '09876']\nassert func(['hello', '12345', 'world']) == ['olleh', '54321', 'dlrow']\n```", "response_code": "\nassert func(['hello', 'world']) == ['olleh', 'dlrow']\nassert func(['python', 'is', 'awesome']) == ['nohtyp', 'si', 'emosewa']\nassert func(['racecar', 'level', 'radar']) == ['racecar', 'level', 'radar']\nassert func(['12345', '67890']) == ['54321', '09876']\nassert func(['hello', '12345', 'world']) == ['olleh', '54321', 'dlrow']\n"}
{"task_id": 244, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lst): \n    '''\n    A python function should be written to find the sublist having minimum length.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([[1, 2, 3], [4, 5], [6]]) == [6]\nassert func([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 2]\nassert func([[1], [2], [3], [4]]) == [1]\nassert func([[1, 2, 3, 4], [5, 6], [7, 8, 9]]) == [5, 6]\nassert func([[1, 2], [3], [4, 5, 6], [7, 8]]) == [3]", "response_code": "assert func([[1, 2, 3], [4, 5], [6]]) == [6]\nassert func([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 2]\nassert func([[1], [2], [3], [4]]) == [1]\nassert func([[1, 2, 3, 4], [5, 6], [7, 8, 9]]) == [5, 6]\nassert func([[1, 2], [3], [4, 5, 6], [7, 8]]) == [3]"}
{"task_id": 245, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l,b):\n    '''\n    A function should be written to find the area of a rectangle.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(5, 3) == 15\nassert func(0, 10) == 0\nassert func(7, 7) == 49\nassert func(12, 4) == 48\nassert func(1, 100) == 100", "response_code": "assert func(5, 3) == 15\nassert func(0, 10) == 0\nassert func(7, 7) == 49\nassert func(12, 4) == 48\nassert func(1, 100) == 100"}
{"task_id": 246, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(str1):\n    '''\n    A function should be written to remove uppercase substrings from a given string by using regex.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"HelloWorld\") == \"ello\"\nassert func(\"PythonIsFun\") == \"ythons\"\nassert func(\"ABCD123\") == \"123\"\nassert func(\"UPPERCASE\") == \"\"\nassert func(\"lowercase\") == \"lowercase\"\n```", "response_code": "\nassert func(\"HelloWorld\") == \"ello\"\nassert func(\"PythonIsFun\") == \"ythons\"\nassert func(\"ABCD123\") == \"123\"\nassert func(\"UPPERCASE\") == \"\"\nassert func(\"lowercase\") == \"lowercase\"\n"}
{"task_id": 247, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lst): \n    '''\n    A python function should be written to get the first element of each sublist.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]\nassert func([[10, 20], [30, 40], [50, 60]]) == [10, 30, 50]\nassert func([[100], [200], [300]]) == [100, 200, 300]\nassert func([[1, 2], [3, 4], [5, 6]]) == [1, 3, 5]\nassert func([[0, 0, 0], [1, 1, 1], [2, 2, 2]]) == [0, 1, 2]", "response_code": "assert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]\nassert func([[10, 20], [30, 40], [50, 60]]) == [10, 30, 50]\nassert func([[100], [200], [300]]) == [100, 200, 300]\nassert func([[1, 2], [3, 4], [5, 6]]) == [1, 3, 5]\nassert func([[0, 0, 0], [1, 1, 1], [2, 2, 2]]) == [0, 1, 2]"}
{"task_id": 248, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str):\n    '''\n    A python function should be written to count the upper case characters in a given string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello World\") == 2\nassert func(\"Python Programming\") == 2\nassert func(\"UPPERCASE\") == 9\nassert func(\"lowercase\") == 0\nassert func(\"12345\") == 0\n```", "response_code": "\nassert func(\"Hello World\") == 2\nassert func(\"Python Programming\") == 2\nassert func(\"UPPERCASE\") == 9\nassert func(\"lowercase\") == 0\nassert func(\"12345\") == 0\n"}
{"task_id": 249, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to find all possible combinations of the elements of a given list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2]) == [[1], [2], [1, 2], [2, 1]]\nassert func([1, 2, 3]) == [[1], [2], [3], [1, 2], [2, 1], [1, 3], [3, 1], [2, 3], [3, 2], [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\nassert func(['a', 'b', 'c']) == [['a'], ['b'], ['c'], ['a', 'b'], ['b', 'a'], ['a', 'c'], ['c', 'a'], ['b', 'c'], ['c', 'b'], ['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]\nassert func([4, 5, 6, 7]) == [[4], [5], [6], [7], [4, 5], [5, 4], [4, 6], [6, 4], [4, 7], [7, 4], [5, 6], [6, 5], [5, 7], [7, 5], [6, 7], [7, 6], [4, 5, 6], [4, 6, 5], [5, 4, 6], [5, 6, 4], [6, 4, 5], [6, 5, 4], [4, 5, 7], [4, 7, 5], [5, 4, 7], [5, 7, 4], [7, 4, 5], [7, 5, 4], [6, 7, 4], [6, 4, 7], [7, 6, 4], [7, 4, 6], [6, 5, 7], [6, 7, 5], [5, 6, 7], [5, 7, 6], [7, 5, 6], [7, 6, 5], [4, 5, 6, 7], [4, 5, 7, 6], [4, 6, 5, 7], [4, 6, 7, 5], [4, 7, 5, 6], [4, 7, 6, 5], [5, 4, 6, 7], [5, 4, 7, 6], [5, 6, 4, 7], [5, 6, 7, 4], [5, 7, 4, 6], [5, 7, 6, 4], [6, 4, 5, 7], [6, 4, 7, 5], [6, 5, 4, 7], [6, 5, 7, 4], [6, 7, 4, 5], [6, 7, 5, 4], [7, 4, 5, 6], [7, 4, 6, 5], [7, 5, 4, 6], [7, 5, 6, 4], [7, 6, 4, 5], [7, 6, 5, 4]]\nassert func([]) == [[]]\n```", "response_code": "\nassert func([1, 2]) == [[1], [2], [1, 2], [2, 1]]\nassert func([1, 2, 3]) == [[1], [2], [3], [1, 2], [2, 1], [1, 3], [3, 1], [2, 3], [3, 2], [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\nassert func(['a', 'b', 'c']) == [['a'], ['b'], ['c'], ['a', 'b'], ['b', 'a'], ['a', 'c'], ['c', 'a'], ['b', 'c'], ['c', 'b'], ['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]\nassert func([4, 5, 6, 7]) == [[4], [5], [6], [7], [4, 5], [5, 4], [4, 6], [6, 4], [4, 7], [7, 4], [5, 6], [6, 5], [5, 7], [7, 5], [6, 7], [7, 6], [4, 5, 6], [4, 6, 5], [5, 4, 6], [5, 6, 4], [6, 4, 5], [6, 5, 4], [4, 5, 7], [4, 7, 5], [5, 4, 7], [5, 7, 4], [7, 4, 5], [7, 5, 4], [6, 7, 4], [6, 4, 7], [7, 6, 4], [7, 4, 6], [6, 5, 7], [6, 7, 5], [5, 6, 7], [5, 7, 6], [7, 5, 6], [7, 6, 5], [4, 5, 6, 7], [4, 5, 7, 6], [4, 6, 5, 7], [4, 6, 7, 5], [4, 7, 5, 6], [4, 7, 6, 5], [5, 4, 6, 7], [5, 4, 7, 6], [5, 6, 4, 7], [5, 6, 7, 4], [5, 7, 4, 6], [5, 7, 6, 4], [6, 4, 5, 7], [6, 4, 7, 5], [6, 5, 4, 7], [6, 5, 7, 4], [6, 7, 4, 5], [6, 7, 5, 4], [7, 4, 5, 6], [7, 4, 6, 5], [7, 5, 4, 6], [7, 5, 6, 4], [7, 6, 4, 5], [7, 6, 5, 4]]\nassert func([]) == [[]]\n"}
{"task_id": 250, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):\n    '''\n    A function should be written to find the maximum product subarray of the given array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([2, 3, -2, 4]) == 6\nassert func([-2, 0, -1]) == 0\nassert func([2, -5, -2, -4, 3]) == 24\nassert func([1, -2, 3, -4, 5]) == 120\nassert func([2, 3, -2, -4, 5]) == 120\n```", "response_code": "\nassert func([2, 3, -2, 4]) == 6\nassert func([-2, 0, -1]) == 0\nassert func([2, -5, -2, -4, 3]) == 24\nassert func([1, -2, 3, -4, 5]) == 120\nassert func([2, 3, -2, -4, 5]) == 120\n"}
{"task_id": 251, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(dict, n):\n    '''\n    A function should be written to check if all values are the same in a dictionary.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test case 1: All values are the same\nassert func({'a': 5, 'b': 5, 'c': 5}, 3) == True\n\n# Test case 2: All values are different\nassert func({'x': 1, 'y': 2, 'z': 3}, 3) == False\n\n# Test case 3: All values are the same and n is less than the number of keys\nassert func({'p': 7, 'q': 7, 'r': 7, 's': 7}, 3) == True\n\n# Test case 4: All values are the same and n is greater than the number of keys\nassert func({'m': 4, 'n': 4}, 3) == False\n\n# Test case 5: Empty dictionary\nassert func({}, 0) == True\n```", "response_code": "\n# Test case 1: All values are the same\nassert func({'a': 5, 'b': 5, 'c': 5}, 3) == True\n\n# Test case 2: All values are different\nassert func({'x': 1, 'y': 2, 'z': 3}, 3) == False\n\n# Test case 3: All values are the same and n is less than the number of keys\nassert func({'p': 7, 'q': 7, 'r': 7, 's': 7}, 3) == True\n\n# Test case 4: All values are the same and n is greater than the number of keys\nassert func({'m': 4, 'n': 4}, 3) == False\n\n# Test case 5: Empty dictionary\nassert func({}, 0) == True\n"}
{"task_id": 252, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(dict1):\n    '''\n    A function should be written to drop empty items from a given dictionary.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func({'a': 1, 'b': '', 'c': 3}) == {'a': 1, 'c': 3}\nassert func({'x': '', 'y': '', 'z': ''}) == {}\nassert func({'key1': 'value1', 'key2': 'value2'}) == {'key1': 'value1', 'key2': 'value2'}\nassert func({}) == {}\nassert func({'empty': ''}) == {}", "response_code": "assert func({'a': 1, 'b': '', 'c': 3}) == {'a': 1, 'c': 3}\nassert func({'x': '', 'y': '', 'z': ''}) == {}\nassert func({'key1': 'value1', 'key2': 'value2'}) == {'key1': 'value1', 'key2': 'value2'}\nassert func({}) == {}\nassert func({'empty': ''}) == {}"}
{"task_id": 253, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):   \n    '''\n    A function should be written to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 120\nassert func([5, 4, 3, 2, 1]) == 20\nassert func([3, 1, 4, 2, 5]) == 60\nassert func([2, 4, 6, 8, 10]) == 384\nassert func([10, 9, 8, 7, 6]) == 720\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 120\nassert func([5, 4, 3, 2, 1]) == 20\nassert func([3, 1, 4, 2, 5]) == 60\nassert func([2, 4, 6, 8, 10]) == 384\nassert func([10, 9, 8, 7, 6]) == 720\n"}
{"task_id": 254, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    A function should be written to find the pairwise addition of the elements of the given tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func((1, 2, 3, 4)) == (3, 7)\nassert func((-1, 5, 10, -3)) == (4, 7)\nassert func((0, 0, 0, 0)) == (0, 0)\nassert func((2, 3, 5, 7)) == (5, 12)\nassert func((-2, -3, -5, -7)) == (-5, -12)", "response_code": "assert func((1, 2, 3, 4)) == (3, 7)\nassert func((-1, 5, 10, -3)) == (4, 7)\nassert func((0, 0, 0, 0)) == (0, 0)\nassert func((2, 3, 5, 7)) == (5, 12)\nassert func((-2, -3, -5, -7)) == (-5, -12)"}
{"task_id": 255, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr, n): \n    '''\n    A python function is written to find the remainder of array multiplication divided by n.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([3, 4, 5], 7) == 6\nassert func([1, 2, 3, 4], 5) == 4\nassert func([2, 3, 4, 5], 3) == 2\nassert func([5, 6, 7, 8], 10) == 0\nassert func([10, 20, 30], 9) == 6\n```", "response_code": "\nassert func([3, 4, 5], 7) == 6\nassert func([1, 2, 3, 4], 5) == 4\nassert func([2, 3, 4, 5], 3) == 2\nassert func([5, 6, 7, 8], 10) == 0\nassert func([10, 20, 30], 9) == 6\n"}
{"task_id": 256, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l): \n    '''\n    A python function is written to check whether the given list contains consecutive numbers or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == True\nassert func([5, 4, 3, 2, 1]) == True\nassert func([1, 3, 5, 7, 9]) == False\nassert func([1, 2, 4, 5, 6]) == False\nassert func([1, 2, 3, 5, 6]) == False", "response_code": "assert func([1, 2, 3, 4, 5]) == True\nassert func([5, 4, 3, 2, 1]) == True\nassert func([1, 3, 5, 7, 9]) == False\nassert func([1, 2, 4, 5, 6]) == False\nassert func([1, 2, 3, 5, 6]) == False"}
{"task_id": 257, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list1, test_list2):\n    '''\n    A function should be written to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (2, 3), (3, 4)], [(2, 3), (1, 2), (4, 3)]) == [(1, 2), (2, 3)]\nassert func([(1, 2), (2, 3), (3, 4)], [(5, 6), (7, 8), (9, 10)]) == []\nassert func([(1, 2), (2, 3), (3, 4)], [(3, 4), (2, 3), (1, 2)]) == [(1, 2), (2, 3), (3, 4)]\nassert func([(1, 2), (2, 3), (3, 4)], [(1, 2), (2, 3), (3, 4)]) == [(1, 2), (2, 3), (3, 4)]\nassert func([(1, 2), (2, 3), (3, 4)], [(4, 3), (3, 4), (2, 3)]) == [(2, 3), (3, 4)]\n```", "response_code": "\nassert func([(1, 2), (2, 3), (3, 4)], [(2, 3), (1, 2), (4, 3)]) == [(1, 2), (2, 3)]\nassert func([(1, 2), (2, 3), (3, 4)], [(5, 6), (7, 8), (9, 10)]) == []\nassert func([(1, 2), (2, 3), (3, 4)], [(3, 4), (2, 3), (1, 2)]) == [(1, 2), (2, 3), (3, 4)]\nassert func([(1, 2), (2, 3), (3, 4)], [(1, 2), (2, 3), (3, 4)]) == [(1, 2), (2, 3), (3, 4)]\nassert func([(1, 2), (2, 3), (3, 4)], [(4, 3), (3, 4), (2, 3)]) == [(2, 3), (3, 4)]\n"}
{"task_id": 258, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1,ch,newch):\n    '''\n    A function should be written to replace characters in a string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\", \"l\", \"z\") == \"hezzo\"\nassert func(\"apple\", \"p\", \"b\") == \"abble\"\nassert func(\"banana\", \"a\", \"o\") == \"bonono\"\nassert func(\"python\", \"y\", \"i\") == \"pithon\"\nassert func(\"programming\", \"m\", \"z\") == \"prograzzing\"\n```", "response_code": "\nassert func(\"hello\", \"l\", \"z\") == \"hezzo\"\nassert func(\"apple\", \"p\", \"b\") == \"abble\"\nassert func(\"banana\", \"a\", \"o\") == \"bonono\"\nassert func(\"python\", \"y\", \"i\") == \"pithon\"\nassert func(\"programming\", \"m\", \"z\") == \"prograzzing\"\n"}
{"task_id": 259, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from collections import Counter\ndef func(dict1):\n    '''\n    A function should be written to sort counter by value.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test case 1\ndict1 = {'a': 3, 'b': 1, 'c': 2}\nassert func(dict1) == [('b', 1), ('c', 2), ('a', 3)]\n\n# Test case 2\ndict1 = {'x': 5, 'y': 5, 'z': 5}\nassert func(dict1) == [('x', 5), ('y', 5), ('z', 5)]\n\n# Test case 3\ndict1 = {'apple': 10, 'banana': 5, 'cherry': 8}\nassert func(dict1) == [('banana', 5), ('cherry', 8), ('apple', 10)]\n\n# Test case 4\ndict1 = {'one': 100, 'two': 200, 'three': 50}\nassert func(dict1) == [('three', 50), ('one', 100), ('two', 200)]\n\n# Test case 5\ndict1 = {'red': 0, 'green': 0, 'blue': 0}\nassert func(dict1) == [('red', 0), ('green', 0), ('blue', 0)]\n```", "response_code": "\n# Test case 1\ndict1 = {'a': 3, 'b': 1, 'c': 2}\nassert func(dict1) == [('b', 1), ('c', 2), ('a', 3)]\n\n# Test case 2\ndict1 = {'x': 5, 'y': 5, 'z': 5}\nassert func(dict1) == [('x', 5), ('y', 5), ('z', 5)]\n\n# Test case 3\ndict1 = {'apple': 10, 'banana': 5, 'cherry': 8}\nassert func(dict1) == [('banana', 5), ('cherry', 8), ('apple', 10)]\n\n# Test case 4\ndict1 = {'one': 100, 'two': 200, 'three': 50}\nassert func(dict1) == [('three', 50), ('one', 100), ('two', 200)]\n\n# Test case 5\ndict1 = {'red': 0, 'green': 0, 'blue': 0}\nassert func(dict1) == [('red', 0), ('green', 0), ('blue', 0)]\n"}
{"task_id": 260, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    A python function is written to find the sum of the largest and smallest value in a given array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == 6\nassert func([-10, 0, 10, 20]) == 10\nassert func([5, 5, 5, 5, 5]) == 10\nassert func([100, 200, 300, 400, 500]) == 600\nassert func([-5, -4, -3, -2, -1]) == -6", "response_code": "assert func([1, 2, 3, 4, 5]) == 6\nassert func([-10, 0, 10, 20]) == 10\nassert func([5, 5, 5, 5, 5]) == 10\nassert func([100, 200, 300, 400, 500]) == 600\nassert func([-5, -4, -3, -2, -1]) == -6"}
{"task_id": 261, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(string):\n    '''\n    A python function should be written to convert the given string to lower case.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"Hello World\") == \"hello world\"\nassert func(\"PYTHON\") == \"python\"\nassert func(\"123ABC\") == \"123abc\"\nassert func(\"lowerCASE\") == \"lowercase\"\nassert func(\"eXaMpLe\") == \"example\"", "response_code": "assert func(\"Hello World\") == \"hello world\"\nassert func(\"PYTHON\") == \"python\"\nassert func(\"123ABC\") == \"123abc\"\nassert func(\"lowerCASE\") == \"lowercase\"\nassert func(\"eXaMpLe\") == \"example\""}
{"task_id": 262, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(str1):\n    '''\n    A function should be written to remove lowercase substrings from a given string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello World\") == \"H W\"\nassert func(\"abc123def456\") == \"123456\"\nassert func(\"PythonIsFun\") == \"P\"\nassert func(\"12345\") == \"12345\"\nassert func(\"aBcDeF\") == \"BDF\"\n```", "response_code": "\nassert func(\"Hello World\") == \"H W\"\nassert func(\"abc123def456\") == \"123456\"\nassert func(\"PythonIsFun\") == \"P\"\nassert func(\"12345\") == \"12345\"\nassert func(\"aBcDeF\") == \"BDF\"\n"}
{"task_id": 263, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n) :  \n    '''\n    A python function is written to find the first digit of a given number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(123) == 1\nassert func(4567) == 4\nassert func(78901) == 7\nassert func(555) == 5\nassert func(987654321) == 9\n```", "response_code": "\nassert func(123) == 1\nassert func(4567) == 4\nassert func(78901) == 7\nassert func(555) == 5\nassert func(987654321) == 9\n"}
{"task_id": 264, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list): \n    '''\n    A python function is written to find odd numbers from a mixed list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == [1, 3, 5]\nassert func([10, 21, 33, 44, 55]) == [21, 33, 55]\nassert func([2, 4, 6, 8, 10]) == []\nassert func([11, 22, 33, 44, 55]) == [11, 33, 55]\nassert func([0, 1, 2, 3, 4, 5]) == [1, 3, 5]\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == [1, 3, 5]\nassert func([10, 21, 33, 44, 55]) == [21, 33, 55]\nassert func([2, 4, 6, 8, 10]) == []\nassert func([11, 22, 33, 44, 55]) == [11, 33, 55]\nassert func([0, 1, 2, 3, 4, 5]) == [1, 3, 5]\n"}
{"task_id": 265, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n) :  \n    '''\n    A python function is written to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 0\nassert func(2) == 7\nassert func(3) == 36\nassert func(4) == 100\nassert func(5) == 225\n```", "response_code": "\nassert func(1) == 0\nassert func(2) == 7\nassert func(3) == 36\nassert func(4) == 100\nassert func(5) == 225\n"}
{"task_id": 266, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(A,N) : \n    '''\n    A python function is written to count the pairs with xor as an odd number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([2, 3, 4, 5, 6], 5) == 4\nassert func([1, 2, 3, 4, 5], 5) == 3\nassert func([10, 20, 30, 40, 50], 5) == 0\nassert func([7, 8, 9, 10, 11], 5) == 5\nassert func([15, 16, 17, 18, 19], 5) == 2\n```", "response_code": "\nassert func([2, 3, 4, 5, 6], 5) == 4\nassert func([1, 2, 3, 4, 5], 5) == 3\nassert func([10, 20, 30, 40, 50], 5) == 0\nassert func([7, 8, 9, 10, 11], 5) == 5\nassert func([15, 16, 17, 18, 19], 5) == 2\n"}
{"task_id": 267, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(string):\n    '''\n    A function should be written to toggle characters case in a string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello, World!\") == \"hELLO, wORLD!\"\nassert func(\"123abc\") == \"123ABC\"\nassert func(\"Python is Fun\") == \"pYTHON IS fUN\"\nassert func(\"lowercase\") == \"LOWERCASE\"\nassert func(\"UPPERCASE\") == \"uppercase\"\n```", "response_code": "\nassert func(\"Hello, World!\") == \"hELLO, wORLD!\"\nassert func(\"123abc\") == \"123ABC\"\nassert func(\"Python is Fun\") == \"pYTHON IS fUN\"\nassert func(\"lowercase\") == \"LOWERCASE\"\nassert func(\"UPPERCASE\") == \"uppercase\"\n"}
{"task_id": 268, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n1, n2):\n    '''\n    A python function is written to find the digit distance between two integers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(123, 456) == 3\nassert func(100, 1000) == 2\nassert func(9876, 1234) == 4\nassert func(555, 555) == 0\nassert func(0, 999) == 3\n```", "response_code": "\nassert func(123, 456) == 3\nassert func(100, 1000) == 2\nassert func(9876, 1234) == 4\nassert func(555, 555) == 0\nassert func(0, 999) == 3\n"}
{"task_id": 269, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a, size):\n    '''\n    A function should be written to find the largest sum of contiguous subarray in the given array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 5) == 15\nassert func([-2, 1, -3, 4, -1, 2, 1, -5, 4], 9) == 6\nassert func([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert func([1, -2, 3, -2, 5], 5) == 6\nassert func([-1, -2, -3, -4, -5], 5) == -1\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 5) == 15\nassert func([-2, 1, -3, 4, -1, 2, 1, -5, 4], 9) == 6\nassert func([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert func([1, -2, 3, -2, 5], 5) == 6\nassert func([-1, -2, -3, -4, -5], 5) == -1\n"}
{"task_id": 270, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    A function should be written to find the union of elements of the given tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (2, 3, 4)) == (1, 2, 3, 4)\nassert func(('a', 'b', 'c'), ('b', 'c', 'd')) == ('a', 'b', 'c', 'd')\nassert func((10, 20, 30), (20, 30, 40)) == (10, 20, 30, 40)\nassert func(('x', 'y', 'z'), ('y', 'z', 'w')) == ('x', 'y', 'z', 'w')\nassert func((True, False), (False, True)) == (True, False)\n```", "response_code": "\nassert func((1, 2, 3), (2, 3, 4)) == (1, 2, 3, 4)\nassert func(('a', 'b', 'c'), ('b', 'c', 'd')) == ('a', 'b', 'c', 'd')\nassert func((10, 20, 30), (20, 30, 40)) == (10, 20, 30, 40)\nassert func(('x', 'y', 'z'), ('y', 'z', 'w')) == ('x', 'y', 'z', 'w')\nassert func((True, False), (False, True)) == (True, False)\n"}
{"task_id": 271, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lst):  \n    '''\n    A python function is written to find the maximum length of sublist.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 4\nassert func([[1], [2], [3], [4]]) == 1\nassert func([[1, 2, 3, 4, 5]]) == 5\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == 2\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 3", "response_code": "assert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 4\nassert func([[1], [2], [3], [4]]) == 1\nassert func([[1, 2, 3, 4, 5]]) == 5\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == 2\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 3"}
{"task_id": 272, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function should be written to extract values between quotation marks of a string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func('This is a \"test\" string') == ['test']\nassert func('No quotes here') == []\nassert func('Multiple \"quotes\" \"in\" \"one\" string') == ['quotes', 'in', 'one']\nassert func('Empty quotes \"\" should not be included') == []\nassert func('Single \"quote\" at the end') == ['quote']\n```", "response_code": "\nassert func('This is a \"test\" string') == ['test']\nassert func('No quotes here') == []\nassert func('Multiple \"quotes\" \"in\" \"one\" string') == ['quotes', 'in', 'one']\nassert func('Empty quotes \"\" should not be included') == []\nassert func('Single \"quote\" at the end') == ['quote']\n"}
{"task_id": 273, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr,n): \n    '''\n    A python function is written to count unequal element pairs from the given array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 5) == 10\nassert func([1, 1, 1, 1, 1], 5) == 0\nassert func([1, 2, 3, 4, 5, 6], 6) == 15\nassert func([5, 5, 5, 5, 5], 5) == 0\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == 36\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 5) == 10\nassert func([1, 1, 1, 1, 1], 5) == 0\nassert func([1, 2, 3, 4, 5, 6], 6) == 15\nassert func([5, 5, 5, 5, 5], 5) == 0\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == 36\n"}
{"task_id": 274, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(word): \n    '''\n    A python function is written to split a string into characters.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\") == ['h', 'e', 'l', 'l', 'o']\nassert func(\"python\") == ['p', 'y', 't', 'h', 'o', 'n']\nassert func(\"12345\") == ['1', '2', '3', '4', '5']\nassert func(\"abc123\") == ['a', 'b', 'c', '1', '2', '3']\nassert func(\"\") == []", "response_code": "assert func(\"hello\") == ['h', 'e', 'l', 'l', 'o']\nassert func(\"python\") == ['p', 'y', 't', 'h', 'o', 'n']\nassert func(\"12345\") == ['1', '2', '3', '4', '5']\nassert func(\"abc123\") == ['a', 'b', 'c', '1', '2', '3']\nassert func(\"\") == []"}
{"task_id": 275, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    A function should be written to get the sum of a non-negative integer.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(0) == 0\nassert func(123) == 6\nassert func(98765) == 35\nassert func(111111) == 6\nassert func(999999) == 54", "response_code": "assert func(0) == 0\nassert func(123) == 6\nassert func(98765) == 35\nassert func(111111) == 6\nassert func(999999) == 54"}
{"task_id": 276, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to check whether a specified list is sorted or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == True\nassert func([5, 4, 3, 2, 1]) == False\nassert func([1, 3, 2, 4, 5]) == False\nassert func([1, 1, 1, 1, 1]) == True\nassert func([]) == True\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == True\nassert func([5, 4, 3, 2, 1]) == False\nassert func([1, 3, 2, 4, 5]) == False\nassert func([1, 1, 1, 1, 1]) == True\nassert func([]) == True\n"}
{"task_id": 277, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(length):\n    '''\n    A function should be written to create a list of empty dictionaries.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(0) == []\nassert func(3) == [{}, {}, {}]\nassert func(5) == [{}, {}, {}, {}, {}]\nassert func(10) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\nassert func(1) == [{}]", "response_code": "assert func(0) == []\nassert func(3) == [{}, {}, {}]\nassert func(5) == [{}, {}, {}, {}, {}]\nassert func(10) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\nassert func(1) == [{}]"}
{"task_id": 278, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([['banana', 'apple', 'cherry'], ['orange', 'grape', 'kiwi']]) == [['apple', 'banana', 'cherry'], ['grape', 'kiwi', 'orange']]\nassert func([['zebra', 'lion', 'elephant'], ['monkey', 'giraffe', 'tiger']]) == [['elephant', 'lion', 'zebra'], ['giraffe', 'monkey', 'tiger']]\nassert func([['pear', 'peach', 'plum'], ['watermelon', 'melon', 'strawberry']]) == [['peach', 'pear', 'plum'], ['melon', 'strawberry', 'watermelon']]\nassert func([['dog', 'cat', 'rabbit'], ['hamster', 'guinea pig', 'ferret']]) == [['cat', 'dog', 'rabbit'], ['ferret', 'guinea pig', 'hamster']]\nassert func([['sunflower', 'rose', 'tulip'], ['daisy', 'lily', 'carnation']]) == [['rose', 'sunflower', 'tulip'], ['carnation', 'daisy', 'lily']]\n```", "response_code": "\nassert func([['banana', 'apple', 'cherry'], ['orange', 'grape', 'kiwi']]) == [['apple', 'banana', 'cherry'], ['grape', 'kiwi', 'orange']]\nassert func([['zebra', 'lion', 'elephant'], ['monkey', 'giraffe', 'tiger']]) == [['elephant', 'lion', 'zebra'], ['giraffe', 'monkey', 'tiger']]\nassert func([['pear', 'peach', 'plum'], ['watermelon', 'melon', 'strawberry']]) == [['peach', 'pear', 'plum'], ['melon', 'strawberry', 'watermelon']]\nassert func([['dog', 'cat', 'rabbit'], ['hamster', 'guinea pig', 'ferret']]) == [['cat', 'dog', 'rabbit'], ['ferret', 'guinea pig', 'hamster']]\nassert func([['sunflower', 'rose', 'tulip'], ['daisy', 'lily', 'carnation']]) == [['rose', 'sunflower', 'tulip'], ['carnation', 'daisy', 'lily']]\n"}
{"task_id": 279, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    A python function is written to remove two duplicate numbers from a given number of lists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 2, 3, 4]) == [1, 3, 4]\nassert func([5, 5, 6, 7, 7, 8]) == [6, 8]\nassert func([1, 1, 2, 2, 3, 3, 4, 4]) == []\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1, 1, 1, 1, 1]) == []", "response_code": "assert func([1, 2, 2, 3, 4]) == [1, 3, 4]\nassert func([5, 5, 6, 7, 7, 8]) == [6, 8]\nassert func([1, 1, 2, 2, 3, 3, 4, 4]) == []\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1, 1, 1, 1, 1]) == []"}
{"task_id": 280, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list_data):\n    '''\n    A python function is written to calculate the product of the unique numbers of a given list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == 120\nassert func([2, 2, 3, 4, 5]) == 60\nassert func([1, 2, 3, 3, 4, 5]) == 60\nassert func([1, 2, 3, 4, 5, 5]) == 120\nassert func([1, 2, 3, 4, 5, 5, 5]) == 120", "response_code": "assert func([1, 2, 3, 4, 5]) == 120\nassert func([2, 2, 3, 4, 5]) == 60\nassert func([1, 2, 3, 3, 4, 5]) == 60\nassert func([1, 2, 3, 4, 5, 5]) == 120\nassert func([1, 2, 3, 4, 5, 5, 5]) == 120"}
{"task_id": 281, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(r,h):\n    '''\n    A function should be written to find the surface area of a cylinder.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1, 1) == 6.283185307179586  # radius=1, height=1\nassert func(2, 3) == 62.83185307179586   # radius=2, height=3\nassert func(0, 5) == 0                   # radius=0, height=5\nassert func(4, 0) == 100.53096491487338  # radius=4, height=0\nassert func(3, 4) == 131.94689145077132  # radius=3, height=4\n```", "response_code": "\nassert func(1, 1) == 6.283185307179586  # radius=1, height=1\nassert func(2, 3) == 62.83185307179586   # radius=2, height=3\nassert func(0, 5) == 0                   # radius=0, height=5\nassert func(4, 0) == 100.53096491487338  # radius=4, height=0\nassert func(3, 4) == 131.94689145077132  # radius=3, height=4\n"}
{"task_id": 282, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(A,B): \n    '''\n    A python function is written to check whether an array is a subarray of another or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4], [1, 2]) == True\nassert func([1, 2, 3, 4], [2, 3]) == True\nassert func([1, 2, 3, 4], [4, 5]) == False\nassert func([1, 2, 3, 4], [3, 2]) == False\nassert func([1, 2, 3, 4], []) == True\n```", "response_code": "\nassert func([1, 2, 3, 4], [1, 2]) == True\nassert func([1, 2, 3, 4], [2, 3]) == True\nassert func([1, 2, 3, 4], [4, 5]) == False\nassert func([1, 2, 3, 4], [3, 2]) == False\nassert func([1, 2, 3, 4], []) == True\n"}
{"task_id": 283, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function is written to find the last digit in factorial of a given number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5) == 2\nassert func(10) == 0\nassert func(15) == 2\nassert func(20) == 0\nassert func(25) == 0\n```", "response_code": "\nassert func(5) == 2\nassert func(10) == 0\nassert func(15) == 2\nassert func(20) == 0\nassert func(25) == 0\n"}
{"task_id": 284, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1,list2,list3):\n    '''\n    A function should be written to interleave lists of the same length.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], ['a', 'b', 'c'], [True, False, True]) == [1, 'a', True, 2, 'b', False, 3, 'c', True]\nassert func(['x', 'y', 'z'], [10, 20, 30], ['apple', 'banana', 'cherry']) == ['x', 10, 'apple', 'y', 20, 'banana', 'z', 30, 'cherry']\nassert func([100, 200, 300], ['red', 'green', 'blue'], [0.5, 1.5, 2.5]) == [100, 'red', 0.5, 200, 'green', 1.5, 300, 'blue', 2.5]\nassert func(['dog', 'cat', 'bird'], [4, 5, 6], [True, False, True]) == ['dog', 4, True, 'cat', 5, False, 'bird', 6, True]\nassert func([0.1, 0.2, 0.3], ['one', 'two', 'three'], [7, 8, 9]) == [0.1, 'one', 7, 0.2, 'two', 8, 0.3, 'three', 9]\n```", "response_code": "\nassert func([1, 2, 3], ['a', 'b', 'c'], [True, False, True]) == [1, 'a', True, 2, 'b', False, 3, 'c', True]\nassert func(['x', 'y', 'z'], [10, 20, 30], ['apple', 'banana', 'cherry']) == ['x', 10, 'apple', 'y', 20, 'banana', 'z', 30, 'cherry']\nassert func([100, 200, 300], ['red', 'green', 'blue'], [0.5, 1.5, 2.5]) == [100, 'red', 0.5, 200, 'green', 1.5, 300, 'blue', 2.5]\nassert func(['dog', 'cat', 'bird'], [4, 5, 6], [True, False, True]) == ['dog', 4, True, 'cat', 5, False, 'bird', 6, True]\nassert func([0.1, 0.2, 0.3], ['one', 'two', 'three'], [7, 8, 9]) == [0.1, 'one', 7, 0.2, 'two', 8, 0.3, 'three', 9]\n"}
{"task_id": 285, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    A function should be written to find the dissimilar elements in the given two tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (2, 3, 4)) == (1, 4)\nassert func(('a', 'b', 'c'), ('b', 'c', 'd')) == ('a', 'd')\nassert func((10, 20, 30), (10, 20, 30)) == ()\nassert func(('x', 'y'), ('x', 'y', 'z')) == ('z',)\nassert func((), ()) == ()\n```", "response_code": "\nassert func((1, 2, 3), (2, 3, 4)) == (1, 4)\nassert func(('a', 'b', 'c'), ('b', 'c', 'd')) == ('a', 'd')\nassert func((10, 20, 30), (10, 20, 30)) == ()\nassert func(('x', 'y'), ('x', 'y', 'z')) == ('z',)\nassert func((), ()) == ()\n"}
{"task_id": 286, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tuple, even_fnc): \n    '''\n    A function should be written to extract the even elements in the nested mixed tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\ntest_tuple = (1, 2, (3, 4), [5, 6], 7, (8, 9, 10))\neven_fnc = lambda x: x % 2 == 0\nassert func(test_tuple, even_fnc) == (2, 4, 6, 8, 10)\n\ntest_tuple = ((2, 4, 6), [1, 3, 5], (8, 10), [7, 9])\neven_fnc = lambda x: x % 2 == 0\nassert func(test_tuple, even_fnc) == (2, 4, 6, 8, 10)\n\ntest_tuple = ((11, 12), [13, 14, 15], (16, 17, 18), [19, 20])\neven_fnc = lambda x: x % 2 == 0\nassert func(test_tuple, even_fnc) == (12, 14, 16, 18, 20)\n\ntest_tuple = ((21, 22, 23), [24, 25], (26, 27), [28, 29, 30])\neven_fnc = lambda x: x % 2 == 0\nassert func(test_tuple, even_fnc) == (22, 24, 26, 28, 30)\n\ntest_tuple = ((31, 32), [33, 34, 35], (36, 37), [38, 39, 40])\neven_fnc = lambda x: x % 2 == 0\nassert func(test_tuple, even_fnc) == (32, 34, 36, 38, 40)\n```", "response_code": "\ntest_tuple = (1, 2, (3, 4), [5, 6], 7, (8, 9, 10))\neven_fnc = lambda x: x % 2 == 0\nassert func(test_tuple, even_fnc) == (2, 4, 6, 8, 10)\n\ntest_tuple = ((2, 4, 6), [1, 3, 5], (8, 10), [7, 9])\neven_fnc = lambda x: x % 2 == 0\nassert func(test_tuple, even_fnc) == (2, 4, 6, 8, 10)\n\ntest_tuple = ((11, 12), [13, 14, 15], (16, 17, 18), [19, 20])\neven_fnc = lambda x: x % 2 == 0\nassert func(test_tuple, even_fnc) == (12, 14, 16, 18, 20)\n\ntest_tuple = ((21, 22, 23), [24, 25], (26, 27), [28, 29, 30])\neven_fnc = lambda x: x % 2 == 0\nassert func(test_tuple, even_fnc) == (22, 24, 26, 28, 30)\n\ntest_tuple = ((31, 32), [33, 34, 35], (36, 37), [38, 39, 40])\neven_fnc = lambda x: x % 2 == 0\nassert func(test_tuple, even_fnc) == (32, 34, 36, 38, 40)\n"}
{"task_id": 287, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(b,s): \n    '''\n    A python function is written to find the surface area of the square pyramid.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5, 10) == 125\nassert func(3, 6) == 27\nassert func(7, 14) == 147\nassert func(2, 4) == 20\nassert func(8, 16) == 256\n```", "response_code": "\nassert func(5, 10) == 125\nassert func(3, 6) == 27\nassert func(7, 14) == 147\nassert func(2, 4) == 20\nassert func(8, 16) == 256\n"}
{"task_id": 288, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(dict1):\n    '''\n    A function should be written to check if a dictionary is empty or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func({}) == True\nassert func({1: 'a', 2: 'b'}) == False\nassert func({'key': 'value'}) == False\nassert func({0: 0, 1: 1, 2: 2}) == False\nassert func({None: None}) == False", "response_code": "assert func({}) == True\nassert func({1: 'a', 2: 'b'}) == False\nassert func({'key': 'value'}) == False\nassert func({0: 0, 1: 1, 2: 2}) == False\nassert func({None: None}) == False"}
{"task_id": 289, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(num):\n    '''\n    A function for the nth catalan number is to be written.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 1\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 5\nassert func(4) == 14\n```", "response_code": "\nassert func(0) == 1\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 5\nassert func(4) == 14\n"}
{"task_id": 290, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function should be written to find all adverbs and their positions in a given sentence by using regex.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"She quickly ran to the store.\") == [('quickly', 4)]\nassert func(\"He carefully examined the evidence.\") == [('carefully', 3)]\nassert func(\"They happily accepted the award.\") == [('happily', 2)]\nassert func(\"The dog lazily slept in the sun.\") == [('lazily', 3)]\nassert func(\"She quietly entered the room.\") == [('quietly', 3)]\n```", "response_code": "\nassert func(\"She quickly ran to the store.\") == [('quickly', 4)]\nassert func(\"He carefully examined the evidence.\") == [('carefully', 3)]\nassert func(\"They happily accepted the award.\") == [('happily', 2)]\nassert func(\"The dog lazily slept in the sun.\") == [('lazily', 3)]\nassert func(\"She quietly entered the room.\") == [('quietly', 3)]\n"}
{"task_id": 291, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import heapq\ndef func(items,n):\n    '''\n    A function is written to find the n - expensive price items from a given dataset using heap queue algorithm.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([10, 20, 30, 40, 50], 2) == [40, 50]\nassert func([5, 10, 15, 20, 25, 30], 3) == [20, 25, 30]\nassert func([100, 200, 300, 400, 500], 1) == [500]\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == [6, 7, 8, 9, 10]\nassert func([50, 40, 30, 20, 10], 3) == [30, 40, 50]\n```", "response_code": "\nassert func([10, 20, 30, 40, 50], 2) == [40, 50]\nassert func([5, 10, 15, 20, 25, 30], 3) == [20, 25, 30]\nassert func([100, 200, 300, 400, 500], 1) == [500]\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == [6, 7, 8, 9, 10]\nassert func([50, 40, 30, 20, 10], 3) == [30, 40, 50]\n"}
{"task_id": 292, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l, n):\n    '''\n    A python function is written to split the array and add the first part to the end.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2]\nassert func([5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 5, 6, 7]\nassert func([10, 20, 30, 40, 50, 60, 70], 4) == [50, 60, 70, 10, 20, 30, 40]\nassert func([100, 200, 300, 400], 1) == [200, 300, 400, 100]\nassert func([1, 3, 5, 7, 9], 5) == [3, 5, 7, 9, 1]\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2]\nassert func([5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 5, 6, 7]\nassert func([10, 20, 30, 40, 50, 60, 70], 4) == [50, 60, 70, 10, 20, 30, 40]\nassert func([100, 200, 300, 400], 1) == [200, 300, 400, 100]\nassert func([1, 3, 5, 7, 9], 5) == [3, 5, 7, 9, 1]\n"}
{"task_id": 293, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(listx):\n    '''\n    A function should be written to convert a list to a tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3]) == (1, 2, 3)\nassert func(['a', 'b', 'c']) == ('a', 'b', 'c')\nassert func([]) == ()\nassert func([True, False, True]) == (True, False, True)\nassert func([4.5, 3.2, 1.0]) == (4.5, 3.2, 1.0)\n```", "response_code": "\nassert func([1, 2, 3]) == (1, 2, 3)\nassert func(['a', 'b', 'c']) == ('a', 'b', 'c')\nassert func([]) == ()\nassert func([True, False, True]) == (True, False, True)\nassert func([4.5, 3.2, 1.0]) == (4.5, 3.2, 1.0)\n"}
{"task_id": 294, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    A python function is written to find the difference between the largest and smallest value in a given array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 4\nassert func([5, 4, 3, 2, 1]) == 4\nassert func([10, 3, 7, 1, 9]) == 9\nassert func([0, 0, 0, 0, 0]) == 0\nassert func([-5, -3, 0, 2, 4]) == 9\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 4\nassert func([5, 4, 3, 2, 1]) == 4\nassert func([10, 3, 7, 1, 9]) == 9\nassert func([0, 0, 0, 0, 0]) == 0\nassert func([-5, -3, 0, 2, 4]) == 9\n"}
{"task_id": 295, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a, b):\n    '''\n    A function should be written to find perfect squares between two given numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1, 10) == [1, 4, 9]\nassert func(10, 20) == [16]\nassert func(25, 36) == [25, 36]\nassert func(40, 50) == []\nassert func(1, 100) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "response_code": "assert func(1, 10) == [1, 4, 9]\nassert func(10, 20) == [16]\nassert func(25, 36) == [25, 36]\nassert func(40, 50) == []\nassert func(1, 100) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": 296, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import cmath\ndef func(x,y):\n    '''\n    A function should be written to convert polar coordinates to rectangular coordinates.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1, 0) == (1+0j)\nassert func(2, cmath.pi/2) == (0+2j)\nassert func(3, cmath.pi) == (-3+0j)\nassert func(4, 3*cmath.pi/2) == (0-4j)\nassert func(5, cmath.pi/4) == (3.5355339059327378+3.5355339059327378j)\n```", "response_code": "\nassert func(1, 0) == (1+0j)\nassert func(2, cmath.pi/2) == (0+2j)\nassert func(3, cmath.pi) == (-3+0j)\nassert func(4, 3*cmath.pi/2) == (0-4j)\nassert func(5, cmath.pi/4) == (3.5355339059327378+3.5355339059327378j)\n"}
{"task_id": 297, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(newList): \n    '''\n    A python function is written to interchange the first and last elements in a list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]\nassert func(['a', 'b', 'c', 'd']) == ['d', 'b', 'c', 'a']\nassert func([10, 20, 30, 40, 50, 60]) == [60, 20, 30, 40, 50, 10]\nassert func([True, False, True]) == [True, False, True]\nassert func([]) == []", "response_code": "assert func([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]\nassert func(['a', 'b', 'c', 'd']) == ['d', 'b', 'c', 'a']\nassert func([10, 20, 30, 40, 50, 60]) == [60, 20, 30, 40, 50, 10]\nassert func([True, False, True]) == [True, False, True]\nassert func([]) == []"}
{"task_id": 298, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n,k): \n    '''\n    A python function is written to find the sum of product of binomial co-efficients.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(3,2) == 10\nassert func(4,3) == 35\nassert func(5,2) == 26\nassert func(6,4) == 126\nassert func(7,3) == 84", "response_code": "assert func(3,2) == 10\nassert func(4,3) == 35\nassert func(5,2) == 26\nassert func(6,4) == 126\nassert func(7,3) == 84"}
{"task_id": 299, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(ip):\n    '''\n    A function should be written to remove leading zeroes from an ip address.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"192.168.001.001\") == \"192.168.1.1\"\nassert func(\"010.001.001.001\") == \"10.1.1.1\"\nassert func(\"000.000.000.000\") == \"0.0.0.0\"\nassert func(\"255.255.255.255\") == \"255.255.255.255\"\nassert func(\"001.002.003.004\") == \"1.2.3.4\"\n```", "response_code": "\nassert func(\"192.168.001.001\") == \"192.168.1.1\"\nassert func(\"010.001.001.001\") == \"10.1.1.1\"\nassert func(\"000.000.000.000\") == \"0.0.0.0\"\nassert func(\"255.255.255.255\") == \"255.255.255.255\"\nassert func(\"001.002.003.004\") == \"1.2.3.4\"\n"}
{"task_id": 300, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to find the difference of the first even and odd number of a given list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 1\nassert func([2, 4, 6, 8, 10]) == -1\nassert func([3, 5, 7, 9, 11]) == 2\nassert func([2, 3, 4, 5, 6]) == -1\nassert func([1, 3, 5, 7, 9]) == 2\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 1\nassert func([2, 4, 6, 8, 10]) == -1\nassert func([3, 5, 7, 9, 11]) == 2\nassert func([2, 3, 4, 5, 6]) == -1\nassert func([1, 3, 5, 7, 9]) == 2\n"}
{"task_id": 301, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1,str2) : \n    '''\n    A python function is written to count the minimum number of swaps required to convert one binary string to another.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func('1101', '1110') == 1\nassert func('10101', '11010') == 2\nassert func('11111', '00000') == 3\nassert func('1010101', '0101010') == 4\nassert func('111000', '000111') == 3", "response_code": "assert func('1101', '1110') == 1\nassert func('10101', '11010') == 2\nassert func('11111', '00000') == 3\nassert func('1010101', '0101010') == 4\nassert func('111000', '000111') == 3"}
{"task_id": 302, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import sys \ndef func(tuple_list):\n    '''\n    A function should be written to find the size of the given tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func((1, 2, 3)) == 3\nassert func(('a', 'b', 'c', 'd')) == 4\nassert func((1, 'a', 3.14, 'hello')) == 4\nassert func(()) == 0\nassert func(('only',)) == 1\n```", "response_code": "\n# Test cases\nassert func((1, 2, 3)) == 3\nassert func(('a', 'b', 'c', 'd')) == 4\nassert func((1, 'a', 3.14, 'hello')) == 4\nassert func(()) == 0\nassert func(('only',)) == 1\n"}
{"task_id": 303, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr1, arr2, k):\n    '''\n    A function should be written to find the kth element from the given two sorted arrays.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 3, 5], [2, 4, 6], 3) == 3\nassert func([1, 3, 5], [2, 4, 6], 4) == 4\nassert func([1, 3, 5], [2, 4, 6], 5) == 5\nassert func([1, 3, 5], [2, 4, 6], 6) == 6\nassert func([1, 3, 5], [2, 4, 6], 7) == None\n```", "response_code": "\nassert func([1, 3, 5], [2, 4, 6], 3) == 3\nassert func([1, 3, 5], [2, 4, 6], 4) == 4\nassert func([1, 3, 5], [2, 4, 6], 5) == 5\nassert func([1, 3, 5], [2, 4, 6], 6) == 6\nassert func([1, 3, 5], [2, 4, 6], 7) == None\n"}
{"task_id": 304, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(number):\n    '''\n    A function should be written to check whether the given number is armstrong or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(153) == True\nassert func(370) == True\nassert func(9474) == True\nassert func(123) == False\nassert func(1634) == True\n```", "response_code": "\nassert func(153) == True\nassert func(370) == True\nassert func(9474) == True\nassert func(123) == False\nassert func(1634) == True\n"}
{"task_id": 305, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(number):\n    '''\n    A function should be written to find the sum and average of the first n natural numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5) == (15, 3.0)\nassert func(10) == (55, 5.5)\nassert func(1) == (1, 1.0)\nassert func(0) == (0, 0.0)\nassert func(100) == (5050, 50.5)\n```", "response_code": "\nassert func(5) == (15, 3.0)\nassert func(10) == (55, 5.5)\nassert func(1) == (1, 1.0)\nassert func(0) == (0, 0.0)\nassert func(100) == (5050, 50.5)\n"}
{"task_id": 306, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n) : \n    '''\n    A python function is written to check whether the given number is even or not using bitwise operator.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == True\nassert func(2) == True\nassert func(5) == False\nassert func(10) == True\nassert func(17) == False\n```", "response_code": "\nassert func(0) == True\nassert func(2) == True\nassert func(5) == False\nassert func(10) == True\nassert func(17) == False\n"}
{"task_id": 307, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1):\n    '''\n    A python function is written to find the first repeated character in a given string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == 'l'\nassert func(\"world\") == None\nassert func(\"apple\") == 'p'\nassert func(\"banana\") == 'a'\nassert func(\"racecar\") == 'r'\n```", "response_code": "\nassert func(\"hello\") == 'l'\nassert func(\"world\") == None\nassert func(\"apple\") == 'p'\nassert func(\"banana\") == 'a'\nassert func(\"racecar\") == 'r'\n"}
{"task_id": 308, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    A function should be written to get a lucid number smaller than or equal to n.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(10) == 8\nassert func(20) == 18\nassert func(30) == 18\nassert func(50) == 48\nassert func(100) == 98\n```", "response_code": "\nassert func(10) == 8\nassert func(20) == 18\nassert func(30) == 18\nassert func(50) == 48\nassert func(100) == 98\n"}
{"task_id": 309, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(s):\n    '''\n    A function should be written to reverse words in a given string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello World\") == \"olleH dlroW\"\nassert func(\"Python is fun\") == \"nohtyP si nuf\"\nassert func(\"12345\") == \"54321\"\nassert func(\"a b c d e\") == \"a b c d e\"\nassert func(\"racecar\") == \"racecar\"\n```", "response_code": "\nassert func(\"Hello World\") == \"olleH dlroW\"\nassert func(\"Python is fun\") == \"nohtyP si nuf\"\nassert func(\"12345\") == \"54321\"\nassert func(\"a b c d e\") == \"a b c d e\"\nassert func(\"racecar\") == \"racecar\"\n"}
{"task_id": 310, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(num):\n    '''\n    A function should be written to check if the given integer is a prime number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(2) == True\nassert func(3) == True\nassert func(7) == True\nassert func(10) == False\nassert func(29) == True\n```", "response_code": "\nassert func(2) == True\nassert func(3) == True\nassert func(7) == True\nassert func(10) == False\nassert func(29) == True\n"}
{"task_id": 311, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(degree):\n    '''\n    A function should be written to convert degrees to radians.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(0) == 0.0\nassert func(90) == math.pi/2\nassert func(180) == math.pi\nassert func(270) == 3*math.pi/2\nassert func(360) == 2*math.pi", "response_code": "assert func(0) == 0.0\nassert func(90) == math.pi/2\nassert func(180) == math.pi\nassert func(270) == 3*math.pi/2\nassert func(360) == 2*math.pi"}
{"task_id": 312, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\n\ndef func(text, pattern):\n    '''\n    A function should be written to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello world\", \"world\") == (True, 6)\nassert func(\"apple banana cherry\", \"orange\") == (False, -1)\nassert func(\"12345\", \"\\d+\") == (True, 0)\nassert func(\"hello123\", \"\\d+\") == (True, 5)\nassert func(\"hello world\", \"Hello\") == (False, -1)\n```", "response_code": "\nassert func(\"hello world\", \"world\") == (True, 6)\nassert func(\"apple banana cherry\", \"orange\") == (False, -1)\nassert func(\"12345\", \"\\d+\") == (True, 0)\nassert func(\"hello123\", \"\\d+\") == (True, 5)\nassert func(\"hello world\", \"Hello\") == (False, -1)\n"}
{"task_id": 313, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function is written to find the nth bell number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(0) == 1\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 5\nassert func(4) == 15", "response_code": "assert func(0) == 1\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 5\nassert func(4) == 15"}
{"task_id": 314, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1, L):\n    '''\n    A python function is written to remove the k'th element from a given list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 2) == [1, 3, 4, 5]\nassert func([10, 20, 30, 40, 50], 0) == [20, 30, 40, 50]\nassert func(['a', 'b', 'c', 'd'], 3) == ['a', 'b', 'c']\nassert func([100, 200, 300], 2) == [100, 200]\nassert func([], 0) == []\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 2) == [1, 3, 4, 5]\nassert func([10, 20, 30, 40, 50], 0) == [20, 30, 40, 50]\nassert func(['a', 'b', 'c', 'd'], 3) == ['a', 'b', 'c']\nassert func([100, 200, 300], 2) == [100, 200]\nassert func([], 0) == []\n"}
{"task_id": 315, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list, N):\n    '''\n    A function should be written to find the maximum of the nth column from the given tuple list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 0) == 7\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == 8\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == 9\nassert func([(10, 20, 30), (40, 50, 60), (70, 80, 90)], 1) == 80\nassert func([(100, 200, 300), (400, 500, 600), (700, 800, 900)], 2) == 900\n```", "response_code": "\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 0) == 7\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == 8\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == 9\nassert func([(10, 20, 30), (40, 50, 60), (70, 80, 90)], 1) == 80\nassert func([(100, 200, 300), (400, 500, 600), (700, 800, 900)], 2) == 900\n"}
{"task_id": 316, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lst):  \n    '''\n    A python function is written to merge the first and last elements separately in a list of lists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 3], [4, 6], [7, 9]]\nassert func([[10, 20], [30, 40], [50, 60]]) == [[10, 20], [30, 40], [50, 60]]\nassert func([[100, 200, 300], [400, 500, 600]]) == [[100, 300], [400, 600]]\nassert func([[1], [2], [3]]) == [[1, 1], [2, 2], [3, 3]]\nassert func([[7, 8], [9, 10], [11, 12]]) == [[7, 8], [9, 10], [11, 12]]\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 3], [4, 6], [7, 9]]\nassert func([[10, 20], [30, 40], [50, 60]]) == [[10, 20], [30, 40], [50, 60]]\nassert func([[100, 200, 300], [400, 500, 600]]) == [[100, 300], [400, 600]]\nassert func([[1], [2], [3]]) == [[1, 1], [2, 2], [3, 3]]\nassert func([[7, 8], [9, 10], [11, 12]]) == [[7, 8], [9, 10], [11, 12]]\n"}
{"task_id": 317, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    A function should be written to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [1, 3, 6, 10, 15, 21, 28, 36, 45]\nassert func([(10, 20), (30, 40, 50), (60)]) == [10, 30, 60, 100, 150, 210, 270]\nassert func([(2, 4, 6, 8), (1, 3, 5), (7, 9)]) == [2, 6, 12, 20, 21, 24, 28, 33, 39]\nassert func([(0, 0, 0), (1, 1, 1), (2, 2, 2)]) == [0, 0, 0, 1, 1, 1, 3, 3, 3]\nassert func([(5, 10, 15), (20, 25), (30, 35, 40)]) == [5, 15, 30, 50, 75, 95, 125, 160, 200]\n```", "response_code": "\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [1, 3, 6, 10, 15, 21, 28, 36, 45]\nassert func([(10, 20), (30, 40, 50), (60)]) == [10, 30, 60, 100, 150, 210, 270]\nassert func([(2, 4, 6, 8), (1, 3, 5), (7, 9)]) == [2, 6, 12, 20, 21, 24, 28, 33, 39]\nassert func([(0, 0, 0), (1, 1, 1), (2, 2, 2)]) == [0, 0, 0, 1, 1, 1, 3, 3, 3]\nassert func([(5, 10, 15), (20, 25), (30, 35, 40)]) == [5, 15, 30, 50, 75, 95, 125, 160, 200]\n"}
{"task_id": 318, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    A function should be written to find the average value of the numbers in a given tuple of tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(((1, 2, 3), (4, 5, 6), (7, 8, 9))) == 5.0\nassert func(((10, 20), (30, 40), (50, 60))) == 30.0\nassert func(((0, 0, 0), (0, 0, 0), (0, 0, 0))) == 0.0\nassert func(((1, 3, 5), (2, 4, 6), (7, 8, 9))) == 5.0\nassert func(((1, 1, 1), (2, 2, 2), (3, 3, 3))) == 2.0\n```", "response_code": "\nassert func(((1, 2, 3), (4, 5, 6), (7, 8, 9))) == 5.0\nassert func(((10, 20), (30, 40), (50, 60))) == 30.0\nassert func(((0, 0, 0), (0, 0, 0), (0, 0, 0))) == 0.0\nassert func(((1, 3, 5), (2, 4, 6), (7, 8, 9))) == 5.0\nassert func(((1, 1, 1), (2, 2, 2), (3, 3, 3))) == 2.0\n"}
{"task_id": 319, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    A function should be written to perform the modulo of tuple elements in the given two tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((10, 20, 30), (3, 4, 5)) == (1, 0, 0)\nassert func((15, 25, 35), (2, 3, 4)) == (1, 1, 3)\nassert func((18, 27, 36), (5, 6, 7)) == (3, 3, 1)\nassert func((12, 24, 36), (4, 8, 12)) == (0, 0, 0)\nassert func((100, 200, 300), (7, 8, 9)) == (2, 0, 3)\n```", "response_code": "\nassert func((10, 20, 30), (3, 4, 5)) == (1, 0, 0)\nassert func((15, 25, 35), (2, 3, 4)) == (1, 1, 3)\nassert func((18, 27, 36), (5, 6, 7)) == (3, 3, 1)\nassert func((12, 24, 36), (4, 8, 12)) == (0, 0, 0)\nassert func((100, 200, 300), (7, 8, 9)) == (2, 0, 3)\n"}
{"task_id": 320, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(steps, d): \n    '''\n    A function is written to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 6) == 2\nassert func(5, 12) == 3\nassert func(2, 4) == 2\nassert func(4, 8) == 2\nassert func(6, 18) == 3\n```", "response_code": "\nassert func(3, 6) == 2\nassert func(5, 12) == 3\nassert func(2, 4) == 2\nassert func(4, 8) == 2\nassert func(6, 18) == 3\n"}
{"task_id": 321, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums1,nums2):\n    '''\n    A function should be written to divide two lists using map and lambda function.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([10, 20, 30], [2, 4, 6]) == [5.0, 5.0, 5.0]\nassert func([5, 10, 15], [1, 2, 3]) == [5.0, 5.0, 5.0]\nassert func([100, 200, 300], [10, 20, 30]) == [10.0, 10.0, 10.0]\nassert func([8, 16, 24], [4, 8, 12]) == [2.0, 2.0, 2.0]\nassert func([25, 50, 75], [5, 10, 15]) == [5.0, 5.0, 5.0]\n```", "response_code": "\nassert func([10, 20, 30], [2, 4, 6]) == [5.0, 5.0, 5.0]\nassert func([5, 10, 15], [1, 2, 3]) == [5.0, 5.0, 5.0]\nassert func([100, 200, 300], [10, 20, 30]) == [10.0, 10.0, 10.0]\nassert func([8, 16, 24], [4, 8, 12]) == [2.0, 2.0, 2.0]\nassert func([25, 50, 75], [5, 10, 15]) == [5.0, 5.0, 5.0]\n"}
{"task_id": 322, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_str):\n    '''\n    A function should be written to move all the numbers in it to the given string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"abc123\") == \"123abc\"\nassert func(\"1a2b3c\") == \"123abc\"\nassert func(\"hello123world\") == \"123helloworld\"\nassert func(\"123\") == \"123\"\nassert func(\"abc\") == \"abc\"", "response_code": "assert func(\"abc123\") == \"123abc\"\nassert func(\"1a2b3c\") == \"123abc\"\nassert func(\"hello123world\") == \"123helloworld\"\nassert func(\"123\") == \"123\"\nassert func(\"abc\") == \"abc\""}
{"task_id": 323, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a):\n    '''\n    A function should be written to find the largest subset where each pair is divisible.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 6]) == [1, 2, 4, 6]\nassert func([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\nassert func([3, 6, 9, 12, 15]) == [3, 6, 12]\nassert func([5, 10, 15, 20, 25]) == [5, 10, 20]\nassert func([1, 3, 5, 7, 9]) == [1]", "response_code": "assert func([1, 2, 3, 4, 6]) == [1, 2, 4, 6]\nassert func([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\nassert func([3, 6, 9, 12, 15]) == [3, 6, 12]\nassert func([5, 10, 15, 20, 25]) == [5, 10, 20]\nassert func([1, 3, 5, 7, 9]) == [1]"}
{"task_id": 324, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr1, arr2, n):\n    '''\n    A function should be written to find the median of two sorted arrays of the same size.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 3, 5], [2, 4, 6], 3) == 3.5\nassert func([1, 2, 3, 4], [5, 6, 7, 8], 4) == 4.5\nassert func([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5) == 5.5\nassert func([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 5) == 5.5\nassert func([1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], 6) == 6.5\n```", "response_code": "\nassert func([1, 3, 5], [2, 4, 6], 3) == 3.5\nassert func([1, 2, 3, 4], [5, 6, 7, 8], 4) == 4.5\nassert func([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5) == 5.5\nassert func([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 5) == 5.5\nassert func([1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], 6) == 6.5\n"}
{"task_id": 325, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums,n):\n    '''\n    A function should be written to find the n-th power of individual elements in a list using a lambda function.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([2, 3, 4], 2) == [4, 9, 16]\nassert func([1, 2, 3, 4], 3) == [1, 8, 27, 64]\nassert func([5, 6, 7], 0) == [1, 1, 1]\nassert func([0, 1, 2], 4) == [0, 1, 16]\nassert func([3, 4, 5, 6], 1) == [3, 4, 5, 6]\n```", "response_code": "\nassert func([2, 3, 4], 2) == [4, 9, 16]\nassert func([1, 2, 3, 4], 3) == [1, 8, 27, 64]\nassert func([5, 6, 7], 0) == [1, 1, 1]\nassert func([0, 1, 2], 4) == [0, 1, 16]\nassert func([3, 4, 5, 6], 1) == [3, 4, 5, 6]\n"}
{"task_id": 326, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(string):\n    '''\n    A python function should be written to convert the given string to upper case.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == \"HELLO\"\nassert func(\"Python\") == \"PYTHON\"\nassert func(\"123abc\") == \"123ABC\"\nassert func(\"UPPERCASE\") == \"UPPERCASE\"\nassert func(\"\") == \"\"\n```", "response_code": "\nassert func(\"hello\") == \"HELLO\"\nassert func(\"Python\") == \"PYTHON\"\nassert func(\"123abc\") == \"123ABC\"\nassert func(\"UPPERCASE\") == \"UPPERCASE\"\nassert func(\"\") == \"\"\n"}
{"task_id": 327, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(newList): \n    '''\n    A python function should be written to interchange first and last elements in a given list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]\nassert func([10, 20, 30, 40, 50, 60]) == [60, 20, 30, 40, 50, 10]\nassert func(['a', 'b', 'c', 'd']) == ['d', 'b', 'c', 'a']\nassert func([100]) == [100]\nassert func([]) == []", "response_code": "assert func([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]\nassert func([10, 20, 30, 40, 50, 60]) == [60, 20, 30, 40, 50, 10]\nassert func(['a', 'b', 'c', 'd']) == ['d', 'b', 'c', 'a']\nassert func([100]) == [100]\nassert func([]) == []"}
{"task_id": 328, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(r) :  \n    '''\n    A python function should be written to find the largest triangle that can be inscribed in the semicircle.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5) == 12.5\nassert func(8) == 20\nassert func(10) == 25\nassert func(15) == 37.5\nassert func(20) == 50\n```", "response_code": "\nassert func(5) == 12.5\nassert func(8) == 20\nassert func(10) == 25\nassert func(15) == 37.5\nassert func(20) == 50\n"}
{"task_id": 329, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(array,start=0,end=None):\n    '''\n    A python function is written to find the smallest missing number from the given array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([0, 1, 2, 3, 4, 5]) == 6\nassert func([1, 2, 3, 4, 5]) == 0\nassert func([0, 1, 2, 3, 4]) == 5\nassert func([0, 1, 3, 4, 5]) == 2\nassert func([0, 1, 2, 3, 5]) == 4", "response_code": "assert func([0, 1, 2, 3, 4, 5]) == 6\nassert func([1, 2, 3, 4, 5]) == 0\nassert func([0, 1, 2, 3, 4]) == 5\nassert func([0, 1, 3, 4, 5]) == 2\nassert func([0, 1, 2, 3, 5]) == 4"}
{"task_id": 330, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(string):\n    '''\n    A function should be written to replace all spaces in the given string with the character * list item * list item * list item * list item '%20'.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello world\") == \"hello%20world\"\nassert func(\"a b c\") == \"a%20b%20c\"\nassert func(\"  \") == \"%20%20\"\nassert func(\"\") == \"\"\nassert func(\"noSpaces\") == \"noSpaces\"\n```", "response_code": "\nassert func(\"hello world\") == \"hello%20world\"\nassert func(\"a b c\") == \"a%20b%20c\"\nassert func(\"  \") == \"%20%20\"\nassert func(\"\") == \"\"\nassert func(\"noSpaces\") == \"noSpaces\"\n"}
{"task_id": 331, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list): \n    '''\n    A python function is written to find even numbers from a mixed list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == [2, 4]\nassert func([10, 15, 20, 25, 30]) == [10, 20, 30]\nassert func([11, 12, 13, 14, 15]) == [12, 14]\nassert func([0, 1, 2, 3, 4, 5]) == [0, 2, 4]\nassert func([100, 101, 102, 103, 104]) == [100, 102, 104]", "response_code": "assert func([1, 2, 3, 4, 5]) == [2, 4]\nassert func([10, 15, 20, 25, 30]) == [10, 20, 30]\nassert func([11, 12, 13, 14, 15]) == [12, 14]\nassert func([0, 1, 2, 3, 4, 5]) == [0, 2, 4]\nassert func([100, 101, 102, 103, 104]) == [100, 102, 104]"}
{"task_id": 332, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(ele, sub = []): \n    '''\n    A function should be written to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((0, 0)) == [(0, 1), (1, 0)]\nassert func((2, 3)) == [(2, 4), (3, 3), (2, 2), (1, 3)]\nassert func((5, 5)) == [(5, 6), (6, 5), (5, 4), (4, 5)]\nassert func((0, 0), [(0, 1)]) == [(0, 1), (1, 0)]\nassert func((3, 3), [(2, 3), (3, 4)]) == [(2, 3), (3, 4), (4, 3), (3, 2)]\n```", "response_code": "\nassert func((0, 0)) == [(0, 1), (1, 0)]\nassert func((2, 3)) == [(2, 4), (3, 3), (2, 2), (1, 3)]\nassert func((5, 5)) == [(5, 6), (6, 5), (5, 4), (4, 5)]\nassert func((0, 0), [(0, 1)]) == [(0, 1), (1, 0)]\nassert func((3, 3), [(2, 3), (3, 4)]) == [(2, 3), (3, 4), (4, 3), (3, 2)]\n"}
{"task_id": 333, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(text):\n    '''\n    A function should be written to replace whitespaces with an underscore and vice versa in a given string by using regex.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello world\") == \"hello_world\"\nassert func(\"python_is_fun\") == \"python is fun\"\nassert func(\"a_b_c_d\") == \"a b c d\"\nassert func(\"123_456_789\") == \"123 456 789\"\nassert func(\"   \") == \"___\"\n```", "response_code": "\nassert func(\"hello world\") == \"hello_world\"\nassert func(\"python_is_fun\") == \"python is fun\"\nassert func(\"a_b_c_d\") == \"a b c d\"\nassert func(\"123_456_789\") == \"123 456 789\"\nassert func(\"   \") == \"___\"\n"}
{"task_id": 334, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(num_list):\n    '''\n    A python function should be written to move all zeroes to the end of the given list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([0, 1, 0, 3, 12]) == [1, 3, 12, 0, 0]\nassert func([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([0, 0, 1, 0, 2]) == [1, 2, 0, 0, 0]\nassert func([0, 5, 0, 0, 3]) == [5, 3, 0, 0, 0]\n```", "response_code": "\nassert func([0, 1, 0, 3, 12]) == [1, 3, 12, 0, 0]\nassert func([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([0, 0, 1, 0, 2]) == [1, 2, 0, 0, 0]\nassert func([0, 5, 0, 0, 3]) == [5, 3, 0, 0, 0]\n"}
{"task_id": 335, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr,n) : \n    '''\n    A python function is written to find the sum of xor of all pairs of numbers in the given array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], 3) == 2\nassert func([4, 5, 6, 7], 4) == 8\nassert func([10, 20, 30, 40, 50], 5) == 80\nassert func([3, 5, 7, 9, 11, 13], 6) == 16\nassert func([2, 4, 6, 8, 10, 12, 14], 7) == 20\n```", "response_code": "\nassert func([1, 2, 3], 3) == 2\nassert func([4, 5, 6, 7], 4) == 8\nassert func([10, 20, 30, 40, 50], 5) == 80\nassert func([3, 5, 7, 9, 11, 13], 6) == 16\nassert func([2, 4, 6, 8, 10, 12, 14], 7) == 20\n"}
{"task_id": 336, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import heapq as hq\ndef func(iterable):\n    '''\n    A function should be written to push all values into a heap and then pop off the smallest values one at a time.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test case 1\ninput1 = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3]\nfunc(input1)\n# Expected output: [1, 1, 2, 3, 3, 4, 5, 5, 6, 9]\n\n# Test case 2\ninput2 = [9, 8, 7, 6, 5, 4, 3, 2, 1]\nfunc(input2)\n# Expected output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# Test case 3\ninput3 = [1, 2, 3, 4, 5]\nfunc(input3)\n# Expected output: [1, 2, 3, 4, 5]\n\n# Test case 4\ninput4 = [5, 4, 3, 2, 1]\nfunc(input4)\n# Expected output: [1, 2, 3, 4, 5]\n\n# Test case 5\ninput5 = [2, 4, 6, 8, 10]\nfunc(input5)\n# Expected output: [2, 4, 6, 8, 10]\n```", "response_code": "\n# Test case 1\ninput1 = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3]\nfunc(input1)\n# Expected output: [1, 1, 2, 3, 3, 4, 5, 5, 6, 9]\n\n# Test case 2\ninput2 = [9, 8, 7, 6, 5, 4, 3, 2, 1]\nfunc(input2)\n# Expected output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# Test case 3\ninput3 = [1, 2, 3, 4, 5]\nfunc(input3)\n# Expected output: [1, 2, 3, 4, 5]\n\n# Test case 4\ninput4 = [5, 4, 3, 2, 1]\nfunc(input4)\n# Expected output: [1, 2, 3, 4, 5]\n\n# Test case 5\ninput5 = [2, 4, 6, 8, 10]\nfunc(input5)\n# Expected output: [2, 4, 6, 8, 10]\n"}
{"task_id": 337, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(actual_cost,sale_amount): \n    '''\n    A function should be written to check whether the given amount has no profit and no loss.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(100, 100) == True\nassert func(50, 50) == True\nassert func(200, 200) == True\nassert func(75, 75) == True\nassert func(120, 120) == True", "response_code": "assert func(100, 100) == True\nassert func(50, 50) == True\nassert func(200, 200) == True\nassert func(75, 75) == True\nassert func(120, 120) == True"}
{"task_id": 338, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(v,t):\n    '''\n    A function should be written to calculate wind chill index.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(10, 5) == 6.807\nassert func(20, 10) == 8.694\nassert func(30, 15) == 10.581\nassert func(40, 20) == 12.468\nassert func(50, 25) == 14.355\n```", "response_code": "\nassert func(10, 5) == 6.807\nassert func(20, 10) == 8.694\nassert func(30, 15) == 10.581\nassert func(40, 20) == 12.468\nassert func(50, 25) == 14.355\n"}
{"task_id": 339, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(funces):\n    '''\n    A function should be written to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['Alice', 'bob', 'Charlie', 'david']) == 12\nassert func(['Eve', 'frank', 'Grace', 'henry']) == 10\nassert func(['Ivy', 'jack', 'Kate', 'lucas']) == 7\nassert func(['Mary', 'nathan', 'Olivia', 'peter']) == 10\nassert func(['Quinn', 'robert', 'Sarah', 'tom']) == 10\n```", "response_code": "\nassert func(['Alice', 'bob', 'Charlie', 'david']) == 12\nassert func(['Eve', 'frank', 'Grace', 'henry']) == 10\nassert func(['Ivy', 'jack', 'Kate', 'lucas']) == 7\nassert func(['Mary', 'nathan', 'Olivia', 'peter']) == 10\nassert func(['Quinn', 'robert', 'Sarah', 'tom']) == 10\n"}
{"task_id": 340, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(items):\n    '''\n    A function should be written to remove the parenthesis area in a string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello (World)\") == \"Hello \"\nassert func(\"Python (Programming) is fun\") == \"Python  is fun\"\nassert func(\"I love (coding) in Python\") == \"I love  in Python\"\nassert func(\"This is a (test) string\") == \"This is a  string\"\nassert func(\"(Remove) the parenthesis\") == \" the parenthesis\"\n```", "response_code": "\nassert func(\"Hello (World)\") == \"Hello \"\nassert func(\"Python (Programming) is fun\") == \"Python  is fun\"\nassert func(\"I love (coding) in Python\") == \"I love  in Python\"\nassert func(\"This is a (test) string\") == \"This is a  string\"\nassert func(\"(Remove) the parenthesis\") == \" the parenthesis\"\n"}
{"task_id": 341, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to find the nth nonagonal number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 1\nassert func(2) == 9\nassert func(3) == 19\nassert func(4) == 31\nassert func(5) == 45", "response_code": "assert func(1) == 1\nassert func(2) == 9\nassert func(3) == 19\nassert func(4) == 31\nassert func(5) == 45"}
{"task_id": 342, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function should be written that matches a word containing 'z', not at the start or end of the word.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"zebra\") == None\nassert func(\"amazing\") == \"amazing\"\nassert func(\"crazy\") == \"crazy\"\nassert func(\"fizz\") == \"fizz\"\nassert func(\"hazard\") == \"hazard\"\n```", "response_code": "\nassert func(\"zebra\") == None\nassert func(\"amazing\") == \"amazing\"\nassert func(\"crazy\") == \"crazy\"\nassert func(\"fizz\") == \"fizz\"\nassert func(\"hazard\") == \"hazard\"\n"}
{"task_id": 343, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(input, k): \n    '''\n    A python function is written to reverse an array upto a given position.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5], 2) == [2, 1, 3, 4, 5]\nassert func([5, 4, 3, 2, 1], 3) == [3, 4, 5, 2, 1]\nassert func([10, 20, 30, 40, 50], 0) == [10, 20, 30, 40, 50]\nassert func([100, 200, 300, 400, 500], 4) == [400, 300, 200, 100, 500]\nassert func([7, 8, 9, 10, 11], 5) == [11, 10, 9, 8, 7]", "response_code": "assert func([1, 2, 3, 4, 5], 2) == [2, 1, 3, 4, 5]\nassert func([5, 4, 3, 2, 1], 3) == [3, 4, 5, 2, 1]\nassert func([10, 20, 30, 40, 50], 0) == [10, 20, 30, 40, 50]\nassert func([100, 200, 300, 400, 500], 4) == [400, 300, 200, 100, 500]\nassert func([7, 8, 9, 10, 11], 5) == [11, 10, 9, 8, 7]"}
{"task_id": 344, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup, test_dict):\n    '''\n    A function should be written to add a dictionary to the tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\ntest_tup = (1, 2, 3)\ntest_dict = {'a': 1, 'b': 2}\n\nfunc(test_tup, test_dict)\nassert test_tup == (1, 2, 3, {'a': 1, 'b': 2})\n\ntest_tup = ('apple', 'banana')\ntest_dict = {'c': 'cherry', 'd': 'date'}\n\nfunc(test_tup, test_dict)\nassert test_tup == ('apple', 'banana', {'c': 'cherry', 'd': 'date'})\n\ntest_tup = (10,)\ntest_dict = {'x': 100}\n\nfunc(test_tup, test_dict)\nassert test_tup == (10, {'x': 100})\n\ntest_tup = ()\ntest_dict = {'empty': 'dictionary'}\n\nfunc(test_tup, test_dict)\nassert test_tup == ({'empty': 'dictionary'},)\n\ntest_tup = (True, False)\ntest_dict = {'yes': True, 'no': False}\n\nfunc(test_tup, test_dict)\nassert test_tup == (True, False, {'yes': True, 'no': False})\n```", "response_code": "\ntest_tup = (1, 2, 3)\ntest_dict = {'a': 1, 'b': 2}\n\nfunc(test_tup, test_dict)\nassert test_tup == (1, 2, 3, {'a': 1, 'b': 2})\n\ntest_tup = ('apple', 'banana')\ntest_dict = {'c': 'cherry', 'd': 'date'}\n\nfunc(test_tup, test_dict)\nassert test_tup == ('apple', 'banana', {'c': 'cherry', 'd': 'date'})\n\ntest_tup = (10,)\ntest_dict = {'x': 100}\n\nfunc(test_tup, test_dict)\nassert test_tup == (10, {'x': 100})\n\ntest_tup = ()\ntest_dict = {'empty': 'dictionary'}\n\nfunc(test_tup, test_dict)\nassert test_tup == ({'empty': 'dictionary'},)\n\ntest_tup = (True, False)\ntest_dict = {'yes': True, 'no': False}\n\nfunc(test_tup, test_dict)\nassert test_tup == (True, False, {'yes': True, 'no': False})\n"}
{"task_id": 345, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(cost):\n    '''\n    A function should be written to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.0\nassert func([[1, 2], [3, 4]]) == 3.5\nassert func([[5]]) == 5.0\nassert func([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) == 1.0\nassert func([[10, 20, 30], [40, 50, 60], [70, 80, 90]]) == 50.0\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.0\nassert func([[1, 2], [3, 4]]) == 3.5\nassert func([[5]]) == 5.0\nassert func([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) == 1.0\nassert func([[10, 20, 30], [40, 50, 60], [70, 80, 90]]) == 50.0\n"}
{"task_id": 346, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(students,h,w):\n    '''\n    A function should be written to filter the height and width of students which are stored in a dictionary.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nstudents = {\n    'Alice': (160, 50),\n    'Bob': (175, 70),\n    'Charlie': (165, 60),\n    'David': (180, 75),\n    'Eve': (155, 45)\n}\n\n# Test case 1: Filter students with height greater than 170 and width less than 65\nassert func(students, 170, 65) == {'Bob': (175, 70), 'David': (180, 75)}\n\n# Test case 2: Filter students with height less than 160 and width greater than 55\nassert func(students, 160, 55) == {'Charlie': (165, 60)}\n\n# Test case 3: Filter students with height equal to 155 and width equal to 45\nassert func(students, 155, 45) == {'Eve': (155, 45)}\n\n# Test case 4: Filter students with height greater than 190 and width less than 80\nassert func(students, 190, 80) == {}\n\n# Test case 5: Filter students with height less than 150 and width greater than 40\nassert func(students, 150, 40) == {}\n```", "response_code": "\nstudents = {\n    'Alice': (160, 50),\n    'Bob': (175, 70),\n    'Charlie': (165, 60),\n    'David': (180, 75),\n    'Eve': (155, 45)\n}\n\n# Test case 1: Filter students with height greater than 170 and width less than 65\nassert func(students, 170, 65) == {'Bob': (175, 70), 'David': (180, 75)}\n\n# Test case 2: Filter students with height less than 160 and width greater than 55\nassert func(students, 160, 55) == {'Charlie': (165, 60)}\n\n# Test case 3: Filter students with height equal to 155 and width equal to 45\nassert func(students, 155, 45) == {'Eve': (155, 45)}\n\n# Test case 4: Filter students with height greater than 190 and width less than 80\nassert func(students, 190, 80) == {}\n\n# Test case 5: Filter students with height less than 150 and width greater than 40\nassert func(students, 150, 40) == {}\n"}
{"task_id": 347, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from operator import eq\ndef func(nums1, nums2):\n    '''\n    A function should be written to count the same pair in two given lists using the map function.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], [1, 2, 3]) == 3\nassert func([1, 2, 3], [4, 5, 6]) == 0\nassert func([1, 2, 3], [3, 2, 1]) == 3\nassert func([1, 2, 2, 3], [1, 2, 2, 3]) == 4\nassert func([1, 2, 3], [1, 2, 3, 4, 5]) == 3\n```", "response_code": "\nassert func([1, 2, 3], [1, 2, 3]) == 3\nassert func([1, 2, 3], [4, 5, 6]) == 0\nassert func([1, 2, 3], [3, 2, 1]) == 3\nassert func([1, 2, 2, 3], [1, 2, 2, 3]) == 4\nassert func([1, 2, 3], [1, 2, 3, 4, 5]) == 3\n"}
{"task_id": 348, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(base, power):\n    '''\n    A function should be written to calculate the sum of all digits of the base to the specified power.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(2, 3) == 8\nassert func(5, 2) == 5\nassert func(10, 4) == 1\nassert func(3, 5) == 243\nassert func(7, 3) == 343", "response_code": "assert func(2, 3) == 8\nassert func(5, 2) == 5\nassert func(10, 4) == 1\nassert func(3, 5) == 243\nassert func(7, 3) == 343"}
{"task_id": 349, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text1):\n    '''\n    A function should be written to extract values between quotation marks of the given string by using regex.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func('This is a \"test\" string') == ['test']\nassert func('No quotes here') == []\nassert func('Multiple \"quotes\" \"in\" \"one\" string') == ['quotes', 'in', 'one']\nassert func('Only \"one\" quote') == ['one']\nassert func('Empty quotes \"\" should not be included') == []\n```", "response_code": "\nassert func('This is a \"test\" string') == ['test']\nassert func('No quotes here') == []\nassert func('Multiple \"quotes\" \"in\" \"one\" string') == ['quotes', 'in', 'one']\nassert func('Only \"one\" quote') == ['one']\nassert func('Empty quotes \"\" should not be included') == []\n"}
{"task_id": 350, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    A function should be written to multiply the adjacent elements of the given tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3, 4)) == (2, 6, 12)\nassert func((5, 10, 15, 20)) == (50, 150, 300)\nassert func((2, 4, 6, 8, 10)) == (8, 24, 48, 80)\nassert func((3, 6, 9, 12, 15, 18)) == (18, 54, 108, 180, 270)\nassert func((4, 8, 12, 16, 20, 24, 28)) == (32, 96, 192, 320, 480, 672)\n```", "response_code": "\nassert func((1, 2, 3, 4)) == (2, 6, 12)\nassert func((5, 10, 15, 20)) == (50, 150, 300)\nassert func((2, 4, 6, 8, 10)) == (8, 24, 48, 80)\nassert func((3, 6, 9, 12, 15, 18)) == (18, 54, 108, 180, 270)\nassert func((4, 8, 12, 16, 20, 24, 28)) == (32, 96, 192, 320, 480, 672)\n"}
{"task_id": 351, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lst1,lst2):\n    '''\n    A function should be written to sum elements in two lists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3], [4, 5, 6]) == [5, 7, 9]\nassert func([-1, -2, -3], [-4, -5, -6]) == [-5, -7, -9]\nassert func([0, 0, 0], [0, 0, 0]) == [0, 0, 0]\nassert func([1, 2, 3], [-1, -2, -3]) == [0, 0, 0]\nassert func([10, 20, 30], [1, 2, 3]) == [11, 22, 33]", "response_code": "assert func([1, 2, 3], [4, 5, 6]) == [5, 7, 9]\nassert func([-1, -2, -3], [-4, -5, -6]) == [-5, -7, -9]\nassert func([0, 0, 0], [0, 0, 0]) == [0, 0, 0]\nassert func([1, 2, 3], [-1, -2, -3]) == [0, 0, 0]\nassert func([10, 20, 30], [1, 2, 3]) == [11, 22, 33]"}
{"task_id": 352, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from itertools import groupby\ndef func(nums):\n    '''\n    A function should be written to remove consecutive duplicates of a given list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [1, 2, 3, 4]\nassert func([1, 1, 1, 1, 1]) == [1]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1, 1, 2, 2, 3, 3, 3, 4, 4, 4]) == [1, 2, 3, 4]\nassert func([]) == []\n```", "response_code": "\nassert func([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [1, 2, 3, 4]\nassert func([1, 1, 1, 1, 1]) == [1]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1, 1, 2, 2, 3, 3, 3, 4, 4, 4]) == [1, 2, 3, 4]\nassert func([]) == []\n"}
{"task_id": 353, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(r,h):\n    '''\n    A function should be written to find the lateral surface area of a cone.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 4) == 18.85\nassert func(5, 7) == 66.96\nassert func(1, 10) == 15.71\nassert func(0, 5) == 0\nassert func(8, 2) == 50.27\n```", "response_code": "\nassert func(3, 4) == 18.85\nassert func(5, 7) == 66.96\nassert func(1, 10) == 15.71\nassert func(0, 5) == 0\nassert func(8, 2) == 50.27\n"}
{"task_id": 354, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function should be written to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello, world\") == \"Hello:world\"\nassert func(\"Python is fun\") == \"Python:is:fun\"\nassert func(\"1,2,3,4,5\") == \"1:2:3:4:5\"\nassert func(\"Let's try this.\") == \"Let's:try:this:\"\nassert func(\"NoSpacesHere\") == \"NoSpacesHere\"\n```", "response_code": "\nassert func(\"Hello, world\") == \"Hello:world\"\nassert func(\"Python is fun\") == \"Python:is:fun\"\nassert func(\"1,2,3,4,5\") == \"1:2:3:4:5\"\nassert func(\"Let's try this.\") == \"Let's:try:this:\"\nassert func(\"NoSpacesHere\") == \"NoSpacesHere\"\n"}
{"task_id": 355, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(A, x):\n    '''\n    A function should be written to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 3) == 2\nassert func([1, 2, 3, 4, 5], 1) == 0\nassert func([1, 2, 3, 4, 5], 5) == 4\nassert func([1, 2, 3, 4, 5], 6) == -1\nassert func([1, 2, 3, 3, 4, 5], 3) == 2\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 3) == 2\nassert func([1, 2, 3, 4, 5], 1) == 0\nassert func([1, 2, 3, 4, 5], 5) == 4\nassert func([1, 2, 3, 4, 5], 6) == -1\nassert func([1, 2, 3, 3, 4, 5], 3) == 2\n"}
{"task_id": 356, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):\n    '''\n    A python function is written to find the sum of products of all possible subarrays.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3]) == 50\nassert func([4, 5, 6]) == 170\nassert func([2, 3, 4, 5]) == 290\nassert func([1, 2, 3, 4, 5]) == 605\nassert func([3, 4, 5, 6]) == 350\n```", "response_code": "\nassert func([1, 2, 3]) == 50\nassert func([4, 5, 6]) == 170\nassert func([2, 3, 4, 5]) == 290\nassert func([1, 2, 3, 4, 5]) == 605\nassert func([3, 4, 5, 6]) == 350\n"}
{"task_id": 357, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):  \n    '''\n    A python function is written to toggle bits of the number except the first and the last bit.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0b101010) == 0b101010\nassert func(0b110011) == 0b110000\nassert func(0b111111) == 0b111100\nassert func(0b100001) == 0b100000\nassert func(0b101101) == 0b101100\n```", "response_code": "\nassert func(0b101010) == 0b101010\nassert func(0b110011) == 0b110000\nassert func(0b111111) == 0b111100\nassert func(0b100001) == 0b100000\nassert func(0b101101) == 0b101100\n"}
{"task_id": 358, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import bisect\ndef func(a, x):\n    '''\n    A function should be written to locate the left insertion point for a specified value in sorted order.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 3, 5, 7, 9], 5) == 2\nassert func([1, 3, 5, 7, 9], 6) == 3\nassert func([1, 3, 5, 7, 9], 0) == 0\nassert func([1, 3, 5, 7, 9], 10) == 5\nassert func([1, 3, 5, 7, 9], 4) == 2\n```", "response_code": "\nassert func([1, 3, 5, 7, 9], 5) == 2\nassert func([1, 3, 5, 7, 9], 6) == 3\nassert func([1, 3, 5, 7, 9], 0) == 0\nassert func([1, 3, 5, 7, 9], 10) == 5\nassert func([1, 3, 5, 7, 9], 4) == 2\n"}
{"task_id": 359, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef func(string): \n    '''\n    A function should be written to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"apple\") == True\nassert func(\"banana\") == True\nassert func(\"123abc\") == False\nassert func(\"carrot\") == False\nassert func(\"Eggplant\") == True\n```", "response_code": "\nassert func(\"apple\") == True\nassert func(\"banana\") == True\nassert func(\"123abc\") == False\nassert func(\"carrot\") == False\nassert func(\"Eggplant\") == True\n"}
{"task_id": 360, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    A function should be written to calculate the geometric sum of n-1.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 0\nassert func(2) == 1\nassert func(3) == 1.5\nassert func(4) == 1.75\nassert func(5) == 1.875\n```", "response_code": "\nassert func(1) == 0\nassert func(2) == 1\nassert func(3) == 1.5\nassert func(4) == 1.75\nassert func(5) == 1.875\n"}
{"task_id": 361, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math \ndef func(n): \n    '''\n    A python function should be written to find the index of the smallest triangular number with n digits.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 3\nassert func(2) == 6\nassert func(3) == 45\nassert func(4) == 1035\nassert func(5) == 1035\n```", "response_code": "\nassert func(1) == 3\nassert func(2) == 6\nassert func(3) == 45\nassert func(4) == 1035\nassert func(5) == 1035\n"}
{"task_id": 362, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    A function should be written to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3, 4)) == {1: 2, 3: 4}\nassert func(('a', 'b', 'c', 'd', 'e', 'f')) == {'a': 'b', 'c': 'd', 'e': 'f'}\nassert func((10, 20, 30, 40, 50)) == {10: 20, 30: 40, 50: None}\nassert func(('x', 'y')) == {'x': 'y'}\nassert func(()) == {}\n```", "response_code": "\nassert func((1, 2, 3, 4)) == {1: 2, 3: 4}\nassert func(('a', 'b', 'c', 'd', 'e', 'f')) == {'a': 'b', 'c': 'd', 'e': 'f'}\nassert func((10, 20, 30, 40, 50)) == {10: 20, 30: 40, 50: None}\nassert func(('x', 'y')) == {'x': 'y'}\nassert func(()) == {}\n"}
{"task_id": 363, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(s) :\n    '''\n    A python function is written to check whether all the characters are same or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"aaaa\") == True\nassert func(\"abbb\") == False\nassert func(\"1111\") == True\nassert func(\"xyz\") == False\nassert func(\"\") == True", "response_code": "assert func(\"aaaa\") == True\nassert func(\"abbb\") == False\nassert func(\"1111\") == True\nassert func(\"xyz\") == False\nassert func(\"\") == True"}
{"task_id": 364, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(side):\n    '''\n    A function should be written to calculate the area of a tetrahedron.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(3) == 3.8971143170299753\nassert func(5) == 10.825317547305486\nassert func(7) == 21.21762239271875\nassert func(10) == 43.30127018922193\nassert func(12) == 65.56349284787284", "response_code": "assert func(3) == 3.8971143170299753\nassert func(5) == 10.825317547305486\nassert func(7) == 21.21762239271875\nassert func(10) == 43.30127018922193\nassert func(12) == 65.56349284787284"}
{"task_id": 365, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list, m):\n    '''\n    A function should be written to rotate a given list by a specified number of items to the right direction.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]\nassert func([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5], 1) == [5, 1, 2, 3, 4]\nassert func([1, 2, 3, 4, 5], 3) == [3, 4, 5, 1, 2]\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]\nassert func([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5], 1) == [5, 1, 2, 3, 4]\nassert func([1, 2, 3, 4, 5], 3) == [3, 4, 5, 1, 2]\n"}
{"task_id": 366, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    A function should be written to check if the given tuple has any none value or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func((1, 2, 3)) == False\nassert func((None, 2, 3)) == True\nassert func((1, None, 3)) == True\nassert func((1, 2, None)) == True\nassert func((None, None, None)) == True", "response_code": "assert func((1, 2, 3)) == False\nassert func((None, 2, 3)) == True\nassert func((1, None, 3)) == True\nassert func((1, 2, None)) == True\nassert func((None, None, None)) == True"}
{"task_id": 367, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(startnum, endnum):\n    '''\n    A function should be written to find numbers within a given range where every number is divisible by every digit it contains.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(10, 50) == [12, 15, 20, 24, 30, 40, 42, 45, 48]\nassert func(1, 20) == [12]\nassert func(50, 100) == [52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96]\nassert func(100, 150) == [102, 105, 108, 120, 126, 132, 135, 140, 144, 150]\nassert func(200, 250) == [204, 210, 216, 220, 224, 240, 252]\n```", "response_code": "\nassert func(10, 50) == [12, 15, 20, 24, 30, 40, 42, 45, 48]\nassert func(1, 20) == [12]\nassert func(50, 100) == [52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96]\nassert func(100, 150) == [102, 105, 108, 120, 126, 132, 135, 140, 144, 150]\nassert func(200, 250) == [204, 210, 216, 220, 224, 240, 252]\n"}
{"task_id": 368, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(r,a):\n    '''\n    A function should be written to find the area of a sector.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5, 30) == 7.853981633974483  # r=5, a=30 degrees\nassert func(10, 45) == 19.634954084936208  # r=10, a=45 degrees\nassert func(8, 60) == 16.755160819145562  # r=8, a=60 degrees\nassert func(12, 90) == 37.69911184307752  # r=12, a=90 degrees\nassert func(15, 120) == 58.90515489181724  # r=15, a=120 degrees\n```", "response_code": "\nassert func(5, 30) == 7.853981633974483  # r=5, a=30 degrees\nassert func(10, 45) == 19.634954084936208  # r=10, a=45 degrees\nassert func(8, 60) == 16.755160819145562  # r=8, a=60 degrees\nassert func(12, 90) == 37.69911184307752  # r=12, a=90 degrees\nassert func(15, 120) == 58.90515489181724  # r=15, a=120 degrees\n"}
{"task_id": 369, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(X, Y, Z): \n    '''\n    A function should be written to find the longest common subsequence for the given three string sequence.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"abcde\", \"ace\", \"abc\") == \"ac\"\nassert func(\"AGGTAB\", \"GXTXAYB\", \"GTAB\") == \"GTAB\"\nassert func(\"abcdef\", \"xyz\", \"123\") == \"\"\nassert func(\"ABCD\", \"EFGH\", \"IJKL\") == \"\"\nassert func(\"apple\", \"banana\", \"cherry\") == \"\"\n```", "response_code": "\nassert func(\"abcde\", \"ace\", \"abc\") == \"ac\"\nassert func(\"AGGTAB\", \"GXTXAYB\", \"GTAB\") == \"GTAB\"\nassert func(\"abcdef\", \"xyz\", \"123\") == \"\"\nassert func(\"ABCD\", \"EFGH\", \"IJKL\") == \"\"\nassert func(\"apple\", \"banana\", \"cherry\") == \"\"\n"}
{"task_id": 370, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(str1):\n    '''\n    A function should be written to put spaces between words starting with capital letters in a given string by using regex.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"HelloWorld\") == \"Hello World\"\nassert func(\"PythonIsGreat\") == \"Python Is Great\"\nassert func(\"RegexIsFun\") == \"Regex Is Fun\"\nassert func(\"MachineLearning\") == \"Machine Learning\"\nassert func(\"DataScienceIsCool\") == \"Data Science Is Cool\"\n```", "response_code": "\nassert func(\"HelloWorld\") == \"Hello World\"\nassert func(\"PythonIsGreat\") == \"Python Is Great\"\nassert func(\"RegexIsFun\") == \"Regex Is Fun\"\nassert func(\"MachineLearning\") == \"Machine Learning\"\nassert func(\"DataScienceIsCool\") == \"Data Science Is Cool\"\n"}
{"task_id": 371, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums_str):\n    '''\n    A function should be written to sort a given list of strings of numbers numerically.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([\"3\", \"1\", \"4\", \"1\", \"5\", \"9\", \"2\", \"6\", \"5\"]) == [\"1\", \"1\", \"2\", \"3\", \"4\", \"5\", \"5\", \"6\", \"9\"]\nassert func([\"10\", \"5\", \"20\", \"15\", \"30\"]) == [\"5\", \"10\", \"15\", \"20\", \"30\"]\nassert func([\"100\", \"20\", \"300\", \"40\", \"500\"]) == [\"20\", \"40\", \"100\", \"300\", \"500\"]\nassert func([\"9\", \"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\", \"1\"]) == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\nassert func([\"1000\", \"200\", \"30\", \"4\", \"5000\"]) == [\"4\", \"30\", \"200\", \"1000\", \"5000\"]\n```", "response_code": "\nassert func([\"3\", \"1\", \"4\", \"1\", \"5\", \"9\", \"2\", \"6\", \"5\"]) == [\"1\", \"1\", \"2\", \"3\", \"4\", \"5\", \"5\", \"6\", \"9\"]\nassert func([\"10\", \"5\", \"20\", \"15\", \"30\"]) == [\"5\", \"10\", \"15\", \"20\", \"30\"]\nassert func([\"100\", \"20\", \"300\", \"40\", \"500\"]) == [\"20\", \"40\", \"100\", \"300\", \"500\"]\nassert func([\"9\", \"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\", \"1\"]) == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\nassert func([\"1000\", \"200\", \"30\", \"4\", \"5000\"]) == [\"4\", \"30\", \"200\", \"1000\", \"5000\"]\n"}
{"task_id": 372, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list, test_tup):\n    '''\n    A function should be written to add the given tuple to the given list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\ntest_list = [1, 2, 3]\ntest_tup = (4, 5)\nfunc(test_list, test_tup)\nassert test_list == [1, 2, 3, (4, 5)]\n\ntest_list = ['a', 'b']\ntest_tup = ('c', 'd')\nfunc(test_list, test_tup)\nassert test_list == ['a', 'b', ('c', 'd')]\n\ntest_list = []\ntest_tup = (1,)\nfunc(test_list, test_tup)\nassert test_list == [(1,)]\n\ntest_list = [1, 2, 3]\ntest_tup = ()\nfunc(test_list, test_tup)\nassert test_list == [1, 2, 3, ()]\n\ntest_list = []\ntest_tup = ()\nfunc(test_list, test_tup)\nassert test_list == [()]\n```", "response_code": "\ntest_list = [1, 2, 3]\ntest_tup = (4, 5)\nfunc(test_list, test_tup)\nassert test_list == [1, 2, 3, (4, 5)]\n\ntest_list = ['a', 'b']\ntest_tup = ('c', 'd')\nfunc(test_list, test_tup)\nassert test_list == ['a', 'b', ('c', 'd')]\n\ntest_list = []\ntest_tup = (1,)\nfunc(test_list, test_tup)\nassert test_list == [(1,)]\n\ntest_list = [1, 2, 3]\ntest_tup = ()\nfunc(test_list, test_tup)\nassert test_list == [1, 2, 3, ()]\n\ntest_list = []\ntest_tup = ()\nfunc(test_list, test_tup)\nassert test_list == [()]\n"}
{"task_id": 373, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr, i):\n    '''\n    A function should be written to check if the given array represents a min heap or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 3, 5, 7, 9, 11], 0) == True\nassert func([1, 2, 3, 4, 5], 0) == True\nassert func([5, 4, 3, 2, 1], 0) == False\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0) == True\nassert func([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 0) == False", "response_code": "assert func([1, 3, 5, 7, 9, 11], 0) == True\nassert func([1, 2, 3, 4, 5], 0) == True\nassert func([5, 4, 3, 2, 1], 0) == False\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0) == True\nassert func([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 0) == False"}
{"task_id": 374, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    A function should be written to find the nth Jacobsthal number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 0\nassert func(1) == 1\nassert func(2) == 1\nassert func(5) == 11\nassert func(10) == 341\n```", "response_code": "\nassert func(0) == 0\nassert func(1) == 1\nassert func(2) == 1\nassert func(5) == 11\nassert func(10) == 341\n"}
{"task_id": 375, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list, K):\n    '''\n    A function should be written to find minimum k records from tuple list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')], 2) == [(1, 'a'), (2, 'b')]\nassert func([(5, 'e'), (6, 'f'), (7, 'g'), (8, 'h')], 3) == [(5, 'e'), (6, 'f'), (7, 'g')]\nassert func([(10, 'j'), (9, 'i'), (8, 'h'), (7, 'g')], 1) == [(7, 'g')]\nassert func([(100, 'z'), (50, 'y'), (75, 'x'), (25, 'w')], 4) == [(25, 'w'), (50, 'y'), (75, 'x'), (100, 'z')]\nassert func([(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')], 0) == []\n```", "response_code": "\nassert func([(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')], 2) == [(1, 'a'), (2, 'b')]\nassert func([(5, 'e'), (6, 'f'), (7, 'g'), (8, 'h')], 3) == [(5, 'e'), (6, 'f'), (7, 'g')]\nassert func([(10, 'j'), (9, 'i'), (8, 'h'), (7, 'g')], 1) == [(7, 'g')]\nassert func([(100, 'z'), (50, 'y'), (75, 'x'), (25, 'w')], 4) == [(25, 'w'), (50, 'y'), (75, 'x'), (100, 'z')]\nassert func([(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')], 0) == []\n"}
{"task_id": 376, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l1, l2, l3):\n    '''\n    A function should be written to find common index elements from three lists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]) == [3, 4]\nassert func([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]) == []\nassert func([1, 2, 3], [1, 2, 3], [1, 2, 3]) == [1, 2, 3]\nassert func([1, 2, 3], [4, 5, 6], [7, 8, 9]) == []\nassert func([], [], []) == []\n```", "response_code": "\nassert func([1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]) == [3, 4]\nassert func([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]) == []\nassert func([1, 2, 3], [1, 2, 3], [1, 2, 3]) == [1, 2, 3]\nassert func([1, 2, 3], [4, 5, 6], [7, 8, 9]) == []\nassert func([], [], []) == []\n"}
{"task_id": 377, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(numbers):\n    '''\n    A function should be written to find the second smallest number in a list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 2\nassert func([5, 4, 3, 2, 1]) == 2\nassert func([2, 2, 2, 2, 2]) == 2\nassert func([10, 5, 8, 3, 6]) == 5\nassert func([100, 200, 50, 75, 150]) == 75\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 2\nassert func([5, 4, 3, 2, 1]) == 2\nassert func([2, 2, 2, 2, 2]) == 2\nassert func([10, 5, 8, 3, 6]) == 5\nassert func([100, 200, 50, 75, 150]) == 75\n"}
{"task_id": 378, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function is written that matches a string that has an a followed by zero or one 'b'.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"ac\") == True\nassert func(\"abc\") == True\nassert func(\"abbc\") == False\nassert func(\"a\") == True\nassert func(\"ab\") == True\n```", "response_code": "\nassert func(\"ac\") == True\nassert func(\"abc\") == True\nassert func(\"abbc\") == False\nassert func(\"a\") == True\nassert func(\"ab\") == True\n"}
{"task_id": 379, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    A function should be written to count the pairs of reverse strings in the given string list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['ab', 'ba', 'cd', 'dc', 'ef', 'fe']) == 3\nassert func(['abc', 'cba', 'def', 'fed', 'ghi', 'ihg']) == 3\nassert func(['hello', 'olleh', 'world', 'dlrow']) == 2\nassert func(['racecar', 'racecar', 'level', 'level']) == 4\nassert func(['python', 'nohtyp', 'java', 'avaj']) == 2\n```", "response_code": "\nassert func(['ab', 'ba', 'cd', 'dc', 'ef', 'fe']) == 3\nassert func(['abc', 'cba', 'def', 'fed', 'ghi', 'ihg']) == 3\nassert func(['hello', 'olleh', 'world', 'dlrow']) == 2\nassert func(['racecar', 'racecar', 'level', 'level']) == 4\nassert func(['python', 'nohtyp', 'java', 'avaj']) == 2\n"}
{"task_id": 380, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to count the number of unique lists within a list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([[1, 2], [3, 4], [1, 2]]) == 2\nassert func([[1, 2], [3, 4], [5, 6]]) == 3\nassert func([[1, 2], [1, 2], [1, 2]]) == 1\nassert func([[1, 2, 3], [4, 5], [6, 7]]) == 3\nassert func([[1, 2], [3, 4], [5, 6], [1, 2]]) == 3", "response_code": "assert func([[1, 2], [3, 4], [1, 2]]) == 2\nassert func([[1, 2], [3, 4], [5, 6]]) == 3\nassert func([[1, 2], [1, 2], [1, 2]]) == 1\nassert func([[1, 2, 3], [4, 5], [6, 7]]) == 3\nassert func([[1, 2], [3, 4], [5, 6], [1, 2]]) == 3"}
{"task_id": 381, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(num):\n    '''\n    A function should be written to check a decimal with a precision of 2.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3.14159) == 3.14\nassert func(2.71828) == 2.72\nassert func(1.23456) == 1.23\nassert func(0.99999) == 1.00\nassert func(5.55555) == 5.56\n```", "response_code": "\nassert func(3.14159) == 3.14\nassert func(2.71828) == 2.72\nassert func(1.23456) == 1.23\nassert func(0.99999) == 1.00\nassert func(5.55555) == 5.56\n"}
{"task_id": 382, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):\n    '''\n    A python function should be written to check whether an array contains only one distinct element or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 1, 1, 1]) == True\nassert func([1, 2, 3, 4]) == False\nassert func([5, 5, 5, 5, 5]) == True\nassert func([0, 0, 0, 0, 1]) == False\nassert func([]) == True", "response_code": "assert func([1, 1, 1, 1]) == True\nassert func([1, 2, 3, 4]) == False\nassert func([5, 5, 5, 5, 5]) == True\nassert func([0, 0, 0, 0, 1]) == False\nassert func([]) == True"}
{"task_id": 383, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(monthnum3):\n    '''\n    A function should be written to check whether the given month number contains 30 days or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(4) == True\nassert func(6) == True\nassert func(9) == True\nassert func(11) == True\nassert func(2) == False", "response_code": "assert func(4) == True\nassert func(6) == True\nassert func(9) == True\nassert func(11) == True\nassert func(2) == False"}
{"task_id": 384, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr,n): \n    '''\n    A python function is written to find the minimum difference between any two elements in a given array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 5) == 1\nassert func([5, 10, 15, 20], 4) == 5\nassert func([3, 7, 10, 15, 20], 5) == 3\nassert func([10, 20, 30, 40, 50], 5) == 10\nassert func([5, 5, 5, 5, 5], 5) == 0\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 5) == 1\nassert func([5, 10, 15, 20], 4) == 5\nassert func([3, 7, 10, 15, 20], 5) == 3\nassert func([10, 20, 30, 40, 50], 5) == 10\nassert func([5, 5, 5, 5, 5], 5) == 0\n"}
{"task_id": 385, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str):\n    '''\n    A python function is written to count numeric values in a given string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"abc123\") == 3\nassert func(\"1a2b3c\") == 3\nassert func(\"12345\") == 5\nassert func(\"abc\") == 0\nassert func(\"\") == 0\n```", "response_code": "\nassert func(\"abc123\") == 3\nassert func(\"1a2b3c\") == 3\nassert func(\"12345\") == 5\nassert func(\"abc\") == 0\nassert func(\"\") == 0\n"}
{"task_id": 386, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math \ndef func(n): \n    '''\n    A function should be written to find the nth polite number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 3\nassert func(3) == 6\nassert func(4) == 10\nassert func(5) == 15\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 3\nassert func(3) == 6\nassert func(4) == 10\nassert func(5) == 15\n"}
{"task_id": 387, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l1):\n    '''\n    A function should be written to iterate over all pairs of consecutive items in a given list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4]) == [(1, 2), (2, 3), (3, 4)]\nassert func([5, 10, 15, 20, 25]) == [(5, 10), (10, 15), (15, 20), (20, 25)]\nassert func([100]) == []\nassert func([]) == []\nassert func([2, 4, 6, 8, 10, 12]) == [(2, 4), (4, 6), (6, 8), (8, 10), (10, 12)]", "response_code": "assert func([1, 2, 3, 4]) == [(1, 2), (2, 3), (3, 4)]\nassert func([5, 10, 15, 20, 25]) == [(5, 10), (10, 15), (15, 20), (20, 25)]\nassert func([100]) == []\nassert func([]) == []\nassert func([2, 4, 6, 8, 10, 12]) == [(2, 4), (4, 6), (6, 8), (8, 10), (10, 12)]"}
{"task_id": 388, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr, sum):\n    '''\n    A python function is written to count the number of pairs whose sum is equal to 'sum'.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5], 5) == 2\nassert func([1, 2, 3, 4, 5], 10) == 2\nassert func([1, 2, 3, 4, 5], 7) == 2\nassert func([1, 2, 3, 4, 5], 8) == 2\nassert func([1, 2, 3, 4, 5], 6) == 2", "response_code": "assert func([1, 2, 3, 4, 5], 5) == 2\nassert func([1, 2, 3, 4, 5], 10) == 2\nassert func([1, 2, 3, 4, 5], 7) == 2\nassert func([1, 2, 3, 4, 5], 8) == 2\nassert func([1, 2, 3, 4, 5], 6) == 2"}
{"task_id": 389, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(li1,li2):\n    '''\n    A python function is written to get the difference between two lists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5], [1, 2, 3]) == [4, 5]\nassert func([5, 4, 3, 2, 1], [1, 2, 3]) == [5, 4]\nassert func([1, 2, 3], [1, 2, 3]) == []\nassert func([], [1, 2, 3]) == []\nassert func([1, 2, 3], []) == []", "response_code": "assert func([1, 2, 3, 4, 5], [1, 2, 3]) == [4, 5]\nassert func([5, 4, 3, 2, 1], [1, 2, 3]) == [5, 4]\nassert func([1, 2, 3], [1, 2, 3]) == []\nassert func([], [1, 2, 3]) == []\nassert func([1, 2, 3], []) == []"}
{"task_id": 390, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n) : \n    '''\n    A python function is written to find the sum of the fourth power of the first n odd natural numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 17\nassert func(3) == 107\nassert func(4) == 341\nassert func(5) == 781\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 17\nassert func(3) == 107\nassert func(4) == 341\nassert func(5) == 781\n"}
{"task_id": 391, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from collections import deque\ndef func(exp):\n    '''\n    A function should be written to check if the given expression is balanced or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"()\") == True\nassert func(\"()[]{}\") == True\nassert func(\"(]\") == False\nassert func(\"([)]\") == False\nassert func(\"{[]}\") == True\n```", "response_code": "\nassert func(\"()\") == True\nassert func(\"()[]{}\") == True\nassert func(\"(]\") == False\nassert func(\"([)]\") == False\nassert func(\"{[]}\") == True\n"}
{"task_id": 392, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_str, K):\n    '''\n    A function should be written to remove all the words with k length in the given string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello world\", 5) == \"Hello\"\nassert func(\"Python is awesome\", 3) == \"Python is awesome\"\nassert func(\"Keep calm and code on\", 4) == \"Keep calm and code\"\nassert func(\"Testing the function\", 7) == \"Testing function\"\nassert func(\"This is a test\", 1) == \"This is test\"\n```", "response_code": "\nassert func(\"Hello world\", 5) == \"Hello\"\nassert func(\"Python is awesome\", 3) == \"Python is awesome\"\nassert func(\"Keep calm and code on\", 4) == \"Keep calm and code\"\nassert func(\"Testing the function\", 7) == \"Testing function\"\nassert func(\"This is a test\", 1) == \"This is test\"\n"}
{"task_id": 393, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text,pattern):\n    '''\n    A function should be written to find the occurrence and position of the substrings within a string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello world\", \"l\") == [(2, 3), (3, 4), (9, 10)]\nassert func(\"programming is fun\", \"ing\") == [(3, 6), (13, 16)]\nassert func(\"banana\", \"an\") == [(1, 3), (3, 5)]\nassert func(\"mississippi\", \"ss\") == [(2, 4), (3, 5), (5, 7)]\nassert func(\"abracadabra\", \"abr\") == [(1, 4), (8, 11)]\n```", "response_code": "\nassert func(\"hello world\", \"l\") == [(2, 3), (3, 4), (9, 10)]\nassert func(\"programming is fun\", \"ing\") == [(3, 6), (13, 16)]\nassert func(\"banana\", \"an\") == [(1, 3), (3, 5)]\nassert func(\"mississippi\", \"ss\") == [(2, 4), (3, 5), (5, 7)]\nassert func(\"abracadabra\", \"abr\") == [(1, 4), (8, 11)]\n"}
{"task_id": 394, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    A python function should be written to check whether every odd index contains odd numbers of a given list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == True\nassert func([2, 3, 4, 5, 6]) == False\nassert func([1, 3, 5, 7, 9]) == True\nassert func([2, 4, 6, 8, 10]) == False\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == True\nassert func([2, 3, 4, 5, 6]) == False\nassert func([1, 3, 5, 7, 9]) == True\nassert func([2, 4, 6, 8, 10]) == False\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\n"}
{"task_id": 395, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_str):\n    '''\n    A function should be written to count those characters which have vowels as their neighbors in the given string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == 2\nassert func(\"apple\") == 2\nassert func(\"banana\") == 3\nassert func(\"python\") == 1\nassert func(\"programming\") == 3\n```", "response_code": "\nassert func(\"hello\") == 2\nassert func(\"apple\") == 2\nassert func(\"banana\") == 3\nassert func(\"python\") == 1\nassert func(\"programming\") == 3\n"}
{"task_id": 396, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr): \n    '''\n    A python function is written to find the sum of non-repeated elements in a given array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == 15\nassert func([1, 1, 2, 2, 3, 3]) == 6\nassert func([5, 5, 5, 5, 5]) == 5\nassert func([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 15\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55", "response_code": "assert func([1, 2, 3, 4, 5]) == 15\nassert func([1, 1, 2, 2, 3, 3]) == 6\nassert func([5, 5, 5, 5, 5]) == 5\nassert func([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 15\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55"}
{"task_id": 397, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from itertools import groupby\ndef func(list1):\n    '''\n    A function should be written to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 1, 2, 3, 3, 3, 4, 4, 5]) == [[1, 1], [2], [3, 3, 3], [4, 4], [5]]\nassert func([1, 1, 1, 1, 1]) == [[1, 1, 1, 1, 1]]\nassert func([1, 2, 3, 4, 5]) == [[1], [2], [3], [4], [5]]\nassert func([]) == []\nassert func([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]\n```", "response_code": "\nassert func([1, 1, 2, 3, 3, 3, 4, 4, 5]) == [[1, 1], [2], [3, 3, 3], [4, 4], [5]]\nassert func([1, 1, 1, 1, 1]) == [[1, 1, 1, 1, 1]]\nassert func([1, 2, 3, 4, 5]) == [[1], [2], [3], [4], [5]]\nassert func([]) == []\nassert func([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]\n"}
{"task_id": 398, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to count the number of unique lists within a list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([[1, 2], [3, 4], [1, 2]]) == 2\nassert func([[1, 2], [3, 4], [5, 6]]) == 3\nassert func([[1, 2], [1, 2], [1, 2]]) == 1\nassert func([[1, 2, 3], [4, 5], [6, 7]]) == 3\nassert func([[1, 2], [3, 4], [5, 6], [1, 2]]) == 3", "response_code": "assert func([[1, 2], [3, 4], [1, 2]]) == 2\nassert func([[1, 2], [3, 4], [5, 6]]) == 3\nassert func([[1, 2], [1, 2], [1, 2]]) == 1\nassert func([[1, 2, 3], [4, 5], [6, 7]]) == 3\nassert func([[1, 2], [3, 4], [5, 6], [1, 2]]) == 3"}
{"task_id": 399, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from itertools import combinations \ndef func(test_list):\n    '''\n    A function should be written to find the combinations of sums with tuples in the given tuple list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\ntest_list = [(1, 2), (3, 4), (5, 6)]\nassert func(test_list) == [(1, 2), (3, 4), (5, 6), (1, 2, 3, 4), (1, 2, 5, 6), (3, 4, 5, 6), (1, 2, 3, 4, 5, 6)]\n\ntest_list = [(10, 20), (30, 40)]\nassert func(test_list) == [(10, 20), (30, 40), (10, 20, 30, 40)]\n\ntest_list = [(100, 200), (300, 400), (500, 600)]\nassert func(test_list) == [(100, 200), (300, 400), (500, 600), (100, 200, 300, 400), (100, 200, 500, 600), (300, 400, 500, 600), (100, 200, 300, 400, 500, 600)]\n\ntest_list = [(2, 3), (4, 5), (6, 7), (8, 9)]\nassert func(test_list) == [(2, 3), (4, 5), (6, 7), (8, 9), (2, 3, 4, 5), (2, 3, 6, 7), (2, 3, 8, 9), (4, 5, 6, 7), (4, 5, 8, 9), (6, 7, 8, 9), (2, 3, 4, 5, 6, 7), (2, 3, 4, 5, 8, 9), (2, 3, 6, 7, 8, 9), (4, 5, 6, 7, 8, 9), (2, 3, 4, 5, 6, 7, 8, 9)]\n\ntest_list = [(11, 22), (33, 44), (55, 66), (77, 88), (99, 111)]\nassert func(test_list) == [(11, 22), (33, 44), (55, 66), (77, 88), (99, 111), (11, 22, 33, 44), (11, 22, 55, 66), (11, 22, 77, 88), (11, 22, 99, 111), (33, 44, 55, 66), (33, 44, 77, 88), (33, 44, 99, 111), (55, 66, 77, 88), (55, 66, 99, 111), (77, 88, 99, 111), (11, 22, 33, 44, 55, 66), (11, 22, 33, 44, 77, 88), (11, 22, 33, 44, 99, 111), (11, 22, 55, 66, 77, 88), (11, 22, 55, 66, 99, 111), (11, 22, 77, 88, 99, 111), (33, 44, 55, 66, 77, 88), (33, 44, 55, 66, 99, 111), (33, 44, 77, 88, 99, 111), (55, 66, 77, 88, 99, 111), (11, 22, 33, 44, 55, 66, 77, 88), (11, 22, 33, 44, 55, 66, 99, 111), (11, 22, 33, 44, 77, 88, 99, 111), (11, 22, 55, 66, 77, 88, 99, 111), (33, 44, 55, 66, 77, 88, 99, 111), (11, 22, 33, 44, 55, 66, 77, 88, 99, 111)]\n```", "response_code": "\ntest_list = [(1, 2), (3, 4), (5, 6)]\nassert func(test_list) == [(1, 2), (3, 4), (5, 6), (1, 2, 3, 4), (1, 2, 5, 6), (3, 4, 5, 6), (1, 2, 3, 4, 5, 6)]\n\ntest_list = [(10, 20), (30, 40)]\nassert func(test_list) == [(10, 20), (30, 40), (10, 20, 30, 40)]\n\ntest_list = [(100, 200), (300, 400), (500, 600)]\nassert func(test_list) == [(100, 200), (300, 400), (500, 600), (100, 200, 300, 400), (100, 200, 500, 600), (300, 400, 500, 600), (100, 200, 300, 400, 500, 600)]\n\ntest_list = [(2, 3), (4, 5), (6, 7), (8, 9)]\nassert func(test_list) == [(2, 3), (4, 5), (6, 7), (8, 9), (2, 3, 4, 5), (2, 3, 6, 7), (2, 3, 8, 9), (4, 5, 6, 7), (4, 5, 8, 9), (6, 7, 8, 9), (2, 3, 4, 5, 6, 7), (2, 3, 4, 5, 8, 9), (2, 3, 6, 7, 8, 9), (4, 5, 6, 7, 8, 9), (2, 3, 4, 5, 6, 7, 8, 9)]\n\ntest_list = [(11, 22), (33, 44), (55, 66), (77, 88), (99, 111)]\nassert func(test_list) == [(11, 22), (33, 44), (55, 66), (77, 88), (99, 111), (11, 22, 33, 44), (11, 22, 55, 66), (11, 22, 77, 88), (11, 22, 99, 111), (33, 44, 55, 66), (33, 44, 77, 88), (33, 44, 99, 111), (55, 66, 77, 88), (55, 66, 99, 111), (77, 88, 99, 111), (11, 22, 33, 44, 55, 66), (11, 22, 33, 44, 77, 88), (11, 22, 33, 44, 99, 111), (11, 22, 55, 66, 77, 88), (11, 22, 55, 66, 99, 111), (11, 22, 77, 88, 99, 111), (33, 44, 55, 66, 77, 88), (33, 44, 55, 66, 99, 111), (33, 44, 77, 88, 99, 111), (55, 66, 77, 88, 99, 111), (11, 22, 33, 44, 55, 66, 77, 88), (11, 22, 33, 44, 55, 66, 99, 111), (11, 22, 33, 44, 77, 88, 99, 111), (11, 22, 55, 66, 77, 88, 99, 111), (33, 44, 55, 66, 77, 88, 99, 111), (11, 22, 33, 44, 55, 66, 77, 88, 99, 111)]\n"}
{"task_id": 400, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math \ndef func(n) : \n    '''\n    A python function should be written to check whether the count of divisors is even or odd.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(6) == 'even'\nassert func(7) == 'odd'\nassert func(12) == 'even'\nassert func(15) == 'even'\nassert func(28) == 'even'", "response_code": "assert func(6) == 'even'\nassert func(7) == 'odd'\nassert func(12) == 'even'\nassert func(15) == 'even'\nassert func(28) == 'even'"}
{"task_id": 401, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):\n    '''\n    A python function is written to find the sum of all odd length subarrays.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 4, 2, 5, 3]) == 31\nassert func([1, 2, 3, 4, 5]) == 50\nassert func([2, 4, 6, 8, 10]) == 0\nassert func([3, 7, 1, 4, 9]) == 55\nassert func([5, 5, 5, 5, 5]) == 75", "response_code": "assert func([1, 4, 2, 5, 3]) == 31\nassert func([1, 2, 3, 4, 5]) == 50\nassert func([2, 4, 6, 8, 10]) == 0\nassert func([3, 7, 1, 4, 9]) == 55\nassert func([5, 5, 5, 5, 5]) == 75"}
{"task_id": 402, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(r, g, b):\n    '''\n    A function should be written to convert rgb color to hsv color.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(255, 0, 0) == (0, 1, 1)  # Red color should be converted to HSV (0, 1, 1)\nassert func(0, 255, 0) == (120, 1, 1)  # Green color should be converted to HSV (120, 1, 1)\nassert func(0, 0, 255) == (240, 1, 1)  # Blue color should be converted to HSV (240, 1, 1)\nassert func(128, 128, 128) == (0, 0, 0.5)  # Gray color should be converted to HSV (0, 0, 0.5)\nassert func(255, 255, 0) == (60, 1, 1)  # Yellow color should be converted to HSV (60, 1, 1)\n```", "response_code": "\nassert func(255, 0, 0) == (0, 1, 1)  # Red color should be converted to HSV (0, 1, 1)\nassert func(0, 255, 0) == (120, 1, 1)  # Green color should be converted to HSV (120, 1, 1)\nassert func(0, 0, 255) == (240, 1, 1)  # Blue color should be converted to HSV (240, 1, 1)\nassert func(128, 128, 128) == (0, 0, 0.5)  # Gray color should be converted to HSV (0, 0, 0.5)\nassert func(255, 255, 0) == (60, 1, 1)  # Yellow color should be converted to HSV (60, 1, 1)\n"}
{"task_id": 403, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    A function should be written to find the product of the first even and odd number of a given list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([2, 3, 4, 5, 6]) == 6  # First even number is 2 and first odd number is 3, product is 6\nassert func([1, 2, 3, 4, 5]) == 2  # First even number is 2 and first odd number is 1, product is 2\nassert func([6, 4, 2, 8, 10]) == 6  # First even number is 6 and first odd number is 1, product is 6\nassert func([1, 3, 5, 7, 9]) == 3  # First even number is 2 and first odd number is 1, product is 3\nassert func([2, 4, 6, 8, 10]) == 2  # First even number is 2 and first odd number is 1, product is 2\n```", "response_code": "\nassert func([2, 3, 4, 5, 6]) == 6  # First even number is 2 and first odd number is 3, product is 6\nassert func([1, 2, 3, 4, 5]) == 2  # First even number is 2 and first odd number is 1, product is 2\nassert func([6, 4, 2, 8, 10]) == 6  # First even number is 6 and first odd number is 1, product is 6\nassert func([1, 3, 5, 7, 9]) == 3  # First even number is 2 and first odd number is 1, product is 3\nassert func([2, 4, 6, 8, 10]) == 2  # First even number is 2 and first odd number is 1, product is 2\n"}
{"task_id": 404, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_str):\n    '''\n    A function should be written to convert tuple string to integer tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"(1, 2, 3)\") == (1, 2, 3)\nassert func(\"(10, 20, 30)\") == (10, 20, 30)\nassert func(\"(100, 200, 300)\") == (100, 200, 300)\nassert func(\"(5, 10, 15)\") == (5, 10, 15)\nassert func(\"(0, 0, 0)\") == (0, 0, 0)\n```", "response_code": "\nassert func(\"(1, 2, 3)\") == (1, 2, 3)\nassert func(\"(10, 20, 30)\") == (10, 20, 30)\nassert func(\"(100, 200, 300)\") == (100, 200, 300)\nassert func(\"(5, 10, 15)\") == (5, 10, 15)\nassert func(\"(0, 0, 0)\") == (0, 0, 0)\n"}
{"task_id": 405, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import bisect\ndef func(a, x):\n    '''\n    A function should be written to locate the right insertion point for a specified value in sorted order.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 3, 5, 7, 9], 4) == 2\nassert func([1, 3, 5, 7, 9], 10) == 5\nassert func([1, 3, 5, 7, 9], 0) == 0\nassert func([1, 3, 5, 7, 9], 6) == 3\nassert func([1, 3, 5, 7, 9], 5) == 2\n```", "response_code": "\nassert func([1, 3, 5, 7, 9], 4) == 2\nassert func([1, 3, 5, 7, 9], 10) == 5\nassert func([1, 3, 5, 7, 9], 0) == 0\nassert func([1, 3, 5, 7, 9], 6) == 3\nassert func([1, 3, 5, 7, 9], 5) == 2\n"}
{"task_id": 406, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function should be written that matches a string that has an a followed by three 'b'.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"abbb\") == True\nassert func(\"aabbb\") == True\nassert func(\"abbbb\") == False\nassert func(\"abbbbbb\") == True\nassert func(\"bbb\") == False\n```", "response_code": "\nassert func(\"abbb\") == True\nassert func(\"aabbb\") == True\nassert func(\"abbbb\") == False\nassert func(\"abbbbbb\") == True\nassert func(\"bbb\") == False\n"}
{"task_id": 407, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list, test_str):\n    '''\n    A function should be written to create a new tuple from the given string and list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], 'hello') == ([1, 2, 3], 'hello')\nassert func(['a', 'b', 'c'], 'world') == (['a', 'b', 'c'], 'world')\nassert func([], 'python') == ([], 'python')\nassert func([4, 5], 'test') == ([4, 5], 'test')\nassert func(['x', 'y', 'z'], 'example') == (['x', 'y', 'z'], 'example')\n```", "response_code": "\nassert func([1, 2, 3], 'hello') == ([1, 2, 3], 'hello')\nassert func(['a', 'b', 'c'], 'world') == (['a', 'b', 'c'], 'world')\nassert func([], 'python') == ([], 'python')\nassert func([4, 5], 'test') == ([4, 5], 'test')\nassert func(['x', 'y', 'z'], 'example') == (['x', 'y', 'z'], 'example')\n"}
{"task_id": 408, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    A python function should be written to check whether every even index contains even numbers of a given list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([2, 3, 6, 8, 10]) == True\nassert func([1, 4, 7, 2, 9]) == False\nassert func([0, 2, 4, 6, 8]) == True\nassert func([1, 3, 5, 7, 9]) == True\nassert func([2, 4, 6, 8, 10, 12]) == True\n```", "response_code": "\nassert func([2, 3, 6, 8, 10]) == True\nassert func([1, 4, 7, 2, 9]) == False\nassert func([0, 2, 4, 6, 8]) == True\nassert func([1, 3, 5, 7, 9]) == True\nassert func([2, 4, 6, 8, 10, 12]) == True\n"}
{"task_id": 409, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    A function should be written to remove the nested record from the given tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, (2, 3), 4)) == (1, 2, 3, 4)\nassert func(('a', ('b', 'c'), 'd')) == ('a', 'b', 'c', 'd')\nassert func((10, (20, 30), 40)) == (10, 20, 30, 40)\nassert func((100, (200, 300), 400)) == (100, 200, 300, 400)\nassert func(('x', ('y', 'z'), 'w')) == ('x', 'y', 'z', 'w')\n```", "response_code": "\nassert func((1, (2, 3), 4)) == (1, 2, 3, 4)\nassert func(('a', ('b', 'c'), 'd')) == ('a', 'b', 'c', 'd')\nassert func((10, (20, 30), 40)) == (10, 20, 30, 40)\nassert func((100, (200, 300), 400)) == (100, 200, 300, 400)\nassert func(('x', ('y', 'z'), 'w')) == ('x', 'y', 'z', 'w')\n"}
{"task_id": 410, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(input_list): \n    '''\n    A python function is written to count the number of lists in a given number of lists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([[1, 2, 3], [4, 5], [6]]) == 3\nassert func([[1], [2], [3], [4], [5]]) == 5\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == 4\nassert func([[1, 2, 3, 4], [5, 6, 7], [8, 9]]) == 3\nassert func([[1, 2], [3], [4, 5, 6], [7, 8, 9, 10]]) == 4", "response_code": "assert func([[1, 2, 3], [4, 5], [6]]) == 3\nassert func([[1], [2], [3], [4], [5]]) == 5\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == 4\nassert func([[1, 2, 3, 4], [5, 6, 7], [8, 9]]) == 3\nassert func([[1, 2], [3], [4, 5, 6], [7, 8, 9, 10]]) == 4"}
{"task_id": 411, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr,x):\n    '''\n    A python function is written to find the last position of an element in a sorted array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 3) == 2\nassert func([1, 2, 3, 4, 5], 1) == 0\nassert func([1, 2, 3, 4, 5], 5) == 4\nassert func([1, 2, 2, 3, 4, 5], 2) == 2\nassert func([1, 2, 3, 4, 5], 6) == -1\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 3) == 2\nassert func([1, 2, 3, 4, 5], 1) == 0\nassert func([1, 2, 3, 4, 5], 5) == 4\nassert func([1, 2, 2, 3, 4, 5], 2) == 2\nassert func([1, 2, 3, 4, 5], 6) == -1\n"}
{"task_id": 412, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function is written that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"acb\") == True\nassert func(\"azb\") == True\nassert func(\"a123b\") == True\nassert func(\"a!@#b\") == True\nassert func(\"apple banana\") == False\n```", "response_code": "\nassert func(\"acb\") == True\nassert func(\"azb\") == True\nassert func(\"a123b\") == True\nassert func(\"a!@#b\") == True\nassert func(\"apple banana\") == False\n"}
{"task_id": 413, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(dict):\n    '''\n    A function should be written to find the sum of all items in the given dictionary.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test case 1\nassert func({'a': 1, 'b': 2, 'c': 3}) == 6\n\n# Test case 2\nassert func({'x': 10, 'y': 20, 'z': 30}) == 60\n\n# Test case 3\nassert func({'p': 5, 'q': 5, 'r': 5}) == 15\n\n# Test case 4\nassert func({'apple': 3, 'banana': 4, 'cherry': 5}) == 12\n\n# Test case 5\nassert func({'one': 100, 'two': 200, 'three': 300}) == 600\n```", "response_code": "\n# Test case 1\nassert func({'a': 1, 'b': 2, 'c': 3}) == 6\n\n# Test case 2\nassert func({'x': 10, 'y': 20, 'z': 30}) == 60\n\n# Test case 3\nassert func({'p': 5, 'q': 5, 'r': 5}) == 15\n\n# Test case 4\nassert func({'apple': 3, 'banana': 4, 'cherry': 5}) == 12\n\n# Test case 5\nassert func({'one': 100, 'two': 200, 'three': 300}) == 600\n"}
{"task_id": 414, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    A python function is written to find the sum of all odd natural numbers within the range l and r.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1, 10) == 25\nassert func(5, 15) == 55\nassert func(10, 20) == 75\nassert func(15, 25) == 110\nassert func(20, 30) == 140\n```", "response_code": "\nassert func(1, 10) == 25\nassert func(5, 15) == 55\nassert func(10, 20) == 75\nassert func(15, 25) == 110\nassert func(20, 30) == 140\n"}
{"task_id": 415, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):  \n    '''\n    A python function is written to find the sum of an array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 15\nassert func([5, 10, 15, 20]) == 50\nassert func([0, 0, 0, 0, 0]) == 0\nassert func([-1, 1, -1, 1]) == 0\nassert func([2, 4, 6, 8, 10]) == 30\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 15\nassert func([5, 10, 15, 20]) == 50\nassert func([0, 0, 0, 0, 0]) == 0\nassert func([-1, 1, -1, 1]) == 0\nassert func([2, 4, 6, 8, 10]) == 30\n"}
{"task_id": 416, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n,d):   \n    '''\n    A python function is written to left rotate the bits of a given number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5, 1) == 10\nassert func(8, 2) == 32\nassert func(16, 3) == 128\nassert func(7, 4) == 28\nassert func(10, 5) == 320\n```", "response_code": "\nassert func(5, 1) == 10\nassert func(8, 2) == 32\nassert func(16, 3) == 128\nassert func(7, 4) == 28\nassert func(10, 5) == 320\n"}
{"task_id": 417, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    A function should be written to remove all whitespaces from a string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello World\") == \"HelloWorld\"\nassert func(\"  Python  \") == \"Python\"\nassert func(\"  Spaces  between  words  \") == \"Spacesbetweenwords\"\nassert func(\"123 456 789\") == \"123456789\"\nassert func(\"  \") == \"\"\n```", "response_code": "\nassert func(\"Hello World\") == \"HelloWorld\"\nassert func(\"  Python  \") == \"Python\"\nassert func(\"  Spaces  between  words  \") == \"Spacesbetweenwords\"\nassert func(\"123 456 789\") == \"123456789\"\nassert func(\"  \") == \"\"\n"}
{"task_id": 418, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x,y,z):\n    '''\n    A python function is written to count the number of equal numbers from three given integers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1, 2, 3) == 0\nassert func(3, 3, 3) == 3\nassert func(5, 5, 6) == 2\nassert func(0, 0, 0) == 3\nassert func(-1, -1, -1) == 3", "response_code": "assert func(1, 2, 3) == 0\nassert func(3, 3, 3) == 3\nassert func(5, 5, 6) == 2\nassert func(0, 0, 0) == 3\nassert func(-1, -1, -1) == 3"}
{"task_id": 419, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):   \n    '''\n    A python function is written to count the number of rotations required to generate a sorted array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([3, 4, 5, 1, 2]) == 3\nassert func([7, 8, 9, 1, 2, 3, 4, 5, 6]) == 3\nassert func([1, 2, 3, 4, 5]) == 0\nassert func([2, 3, 4, 5, 1]) == 1\nassert func([5, 1, 2, 3, 4]) == 4\n```", "response_code": "\nassert func([3, 4, 5, 1, 2]) == 3\nassert func([7, 8, 9, 1, 2, 3, 4, 5, 6]) == 3\nassert func([1, 2, 3, 4, 5]) == 0\nassert func([2, 3, 4, 5, 1]) == 1\nassert func([5, 1, 2, 3, 4]) == 4\n"}
{"task_id": 420, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n) :\n    '''\n    A python function is written to check whether the given number is a perfect square or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(16) == True\nassert func(25) == True\nassert func(10) == False\nassert func(0) == True\nassert func(1) == True", "response_code": "assert func(16) == True\nassert func(25) == True\nassert func(10) == False\nassert func(0) == True\nassert func(1) == True"}
{"task_id": 421, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr): \n    '''\n    A python function is written to check whether the product of numbers is even or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([2, 4, 6]) == True\nassert func([1, 3, 5]) == False\nassert func([0, 2, 4]) == True\nassert func([1, 2, 3, 4, 5]) == True\nassert func([1, 3, 5, 7]) == False", "response_code": "assert func([2, 4, 6]) == True\nassert func([1, 3, 5]) == False\nassert func([0, 2, 4]) == True\nassert func([1, 2, 3, 4, 5]) == True\nassert func([1, 3, 5, 7]) == False"}
{"task_id": 422, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lists):\n    '''\n    A function should be written to find the list in a list of lists whose sum of elements is the highest.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9]\nassert func([[10, 20, 30], [40, 50, 60], [70, 80, 90]]) == [70, 80, 90]\nassert func([[5, 10, 15], [20, 25, 30], [35, 40, 45]]) == [35, 40, 45]\nassert func([[2, 4, 6], [8, 10, 12], [14, 16, 18]]) == [14, 16, 18]\nassert func([[3, 6, 9], [12, 15, 18], [21, 24, 27]]) == [21, 24, 27]\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9]\nassert func([[10, 20, 30], [40, 50, 60], [70, 80, 90]]) == [70, 80, 90]\nassert func([[5, 10, 15], [20, 25, 30], [35, 40, 45]]) == [35, 40, 45]\nassert func([[2, 4, 6], [8, 10, 12], [14, 16, 18]]) == [14, 16, 18]\nassert func([[3, 6, 9], [12, 15, 18], [21, 24, 27]]) == [21, 24, 27]\n"}
{"task_id": 423, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_str):\n    '''\n    A function should be written to find the maximum run of uppercase characters in the given string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello World\") == 1\nassert func(\"HELLO WORLD\") == 5\nassert func(\"AbCdEfG\") == 1\nassert func(\"UPPERCASE\") == 8\nassert func(\"lowercase\") == 0\n```", "response_code": "\nassert func(\"Hello World\") == 1\nassert func(\"HELLO WORLD\") == 5\nassert func(\"AbCdEfG\") == 1\nassert func(\"UPPERCASE\") == 8\nassert func(\"lowercase\") == 0\n"}
{"task_id": 424, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    A python function is written to find the first odd number in a given list of numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([2, 4, 6, 8, 10]) == None\nassert func([1, 2, 3, 4, 5]) == 1\nassert func([0, 2, 4, 6, 8]) == None\nassert func([11, 22, 33, 44, 55]) == 11\nassert func([2, 4, 6, 8, 9]) == 9", "response_code": "assert func([2, 4, 6, 8, 10]) == None\nassert func([1, 2, 3, 4, 5]) == 1\nassert func([0, 2, 4, 6, 8]) == None\nassert func([11, 22, 33, 44, 55]) == 11\nassert func([2, 4, 6, 8, 9]) == 9"}
{"task_id": 425, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup, K):\n    '''\n    A function should be written to check if the given tuples contain the k or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), 2) == True\nassert func((4, 5, 6), 7) == False\nassert func((8, 9, 10), 8) == True\nassert func((11, 12, 13), 14) == False\nassert func((15, 16, 17), 16) == True\n```", "response_code": "\nassert func((1, 2, 3), 2) == True\nassert func((4, 5, 6), 7) == False\nassert func((8, 9, 10), 8) == True\nassert func((11, 12, 13), 14) == False\nassert func((15, 16, 17), 16) == True\n"}
{"task_id": 426, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    A function should be written to check if each element of the second tuple is smaller than its corresponding index in the first tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (0, 1, 2)) == True\nassert func((5, 10, 15), (4, 9, 14)) == True\nassert func((100, 200, 300), (50, 150, 250)) == False\nassert func((0, 0, 0), (-1, -1, -1)) == True\nassert func((1, 2, 3), (1, 1, 1)) == False\n```", "response_code": "\nassert func((1, 2, 3), (0, 1, 2)) == True\nassert func((5, 10, 15), (4, 9, 14)) == True\nassert func((100, 200, 300), (50, 150, 250)) == False\nassert func((0, 0, 0), (-1, -1, -1)) == True\nassert func((1, 2, 3), (1, 1, 1)) == False\n"}
