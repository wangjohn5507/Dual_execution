{"task_id": 0, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Write a function to accurately find the similar elements from the given two tuple lists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (2, 3, 4)) == (2, 3)\nassert func(('a', 'b', 'c'), ('b', 'c', 'd')) == ('b', 'c')\nassert func((1, 2, 3), (4, 5, 6)) == ()\nassert func(('apple', 'banana', 'cherry'), ('date', 'banana', 'elderberry')) == ('banana',)\nassert func((), ()) == ()\n```", "response_code": "\nassert func((1, 2, 3), (2, 3, 4)) == (2, 3)\nassert func(('a', 'b', 'c'), ('b', 'c', 'd')) == ('b', 'c')\nassert func((1, 2, 3), (4, 5, 6)) == ()\nassert func(('apple', 'banana', 'cherry'), ('date', 'banana', 'elderberry')) == ('banana',)\nassert func((), ()) == ()\n"}
{"task_id": 1, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(n):\n    '''\n    Write a python function to accurately identify non-prime numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == False\nassert func(2) == True\nassert func(10) == False\nassert func(17) == True\nassert func(25) == False\n```", "response_code": "\nassert func(1) == False\nassert func(2) == True\nassert func(10) == False\nassert func(17) == True\nassert func(25) == False\n"}
{"task_id": 2, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import heapq as hq\ndef func(nums,n):\n    '''\n    Write a function to accurately find the largest integers from a given list of numbers using heap queue algorithm.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 3) == [9, 6, 5]\nassert func([10, 20, 30, 40, 50], 2) == [50, 40]\nassert func([5, 5, 5, 5, 5], 1) == [5]\nassert func([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\nassert func([100, 200, 300, 400, 500], 0) == []\n```", "response_code": "\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 3) == [9, 6, 5]\nassert func([10, 20, 30, 40, 50], 2) == [50, 40]\nassert func([5, 5, 5, 5, 5], 1) == [5]\nassert func([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\nassert func([100, 200, 300, 400, 500], 0) == []\n"}
{"task_id": 3, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x): \n    '''\n    Write a python function to accurately check whether the two numbers differ at one bit position only or not.\n    '''\n    pass\n\n# check the correctness of func \nassert "}], "response": "```python\nassert func(2, 3) == True\nassert func(5, 7) == True\nassert func(1, 2) == False\nassert func(0, 15) == False\nassert func(8, 9) == True\n```", "response_code": "\nassert func(2, 3) == True\nassert func(5, 7) == True\nassert func(1, 2) == False\nassert func(0, 15) == False\nassert func(8, 9) == True\n"}
{"task_id": 4, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Write a function to accurately find all words which are at least 4 characters long in a string by using regex.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello, this is a test\") == ['Hello', 'this', 'test']\nassert func(\"Python is a great programming language\") == ['Python', 'great', 'programming', 'language']\nassert func(\"1234 abcd efgh 5678\") == ['1234', 'abcd', 'efgh', '5678']\nassert func(\"Short words like cat and dog\") == ['Short', 'words', 'like']\nassert func(\"This is a sentence with some long words like elephant and giraffe\") == ['This', 'sentence', 'with', 'some', 'long', 'words', 'like', 'elephant', 'giraffe']\n```", "response_code": "\nassert func(\"Hello, this is a test\") == ['Hello', 'this', 'test']\nassert func(\"Python is a great programming language\") == ['Python', 'great', 'programming', 'language']\nassert func(\"1234 abcd efgh 5678\") == ['1234', 'abcd', 'efgh', '5678']\nassert func(\"Short words like cat and dog\") == ['Short', 'words', 'like']\nassert func(\"This is a sentence with some long words like elephant and giraffe\") == ['This', 'sentence', 'with', 'some', 'long', 'words', 'like', 'elephant', 'giraffe']\n"}
{"task_id": 5, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Accurately write a function to find squares of individual elements in a list using lambda function.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\nassert func([0, 10, 20, 30, 40]) == [0, 100, 400, 900, 1600]\nassert func([-1, -2, -3, -4, -5]) == [1, 4, 9, 16, 25]\nassert func([2.5, 3.5, 4.5, 5.5]) == [6.25, 12.25, 20.25, 30.25]\nassert func([0.5, 1.5, 2.5, 3.5, 4.5]) == [0.25, 2.25, 6.25, 12.25, 20.25]\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\nassert func([0, 10, 20, 30, 40]) == [0, 100, 400, 900, 1600]\nassert func([-1, -2, -3, -4, -5]) == [1, 4, 9, 16, 25]\nassert func([2.5, 3.5, 4.5, 5.5]) == [6.25, 12.25, 20.25, 30.25]\nassert func([0.5, 1.5, 2.5, 3.5, 4.5]) == [0.25, 2.25, 6.25, 12.25, 20.25]\n"}
{"task_id": 6, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str): \n    '''\n    Write a python function to accurately find the minimum number of rotations required to get the same string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\") == 5\nassert func(\"racecar\") == 7\nassert func(\"12345\") == 5\nassert func(\"aaaaa\") == 1\nassert func(\"ababab\") == 6", "response_code": "assert func(\"hello\") == 5\nassert func(\"racecar\") == 7\nassert func(\"12345\") == 5\nassert func(\"aaaaa\") == 1\nassert func(\"ababab\") == 6"}
{"task_id": 7, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(s,ch): \n    '''\n    Accurately write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello world\", \"o\") == \"hell world\"\nassert func(\"programming\", \"m\") == \"prograing\"\nassert func(\"banana\", \"a\") == \"bnn\"\nassert func(\"racecar\", \"r\") == \"aceca\"\nassert func(\"apple\", \"p\") == \"ale\"\n```", "response_code": "\nassert func(\"hello world\", \"o\") == \"hell world\"\nassert func(\"programming\", \"m\") == \"prograing\"\nassert func(\"banana\", \"a\") == \"bnn\"\nassert func(\"racecar\", \"r\") == \"aceca\"\nassert func(\"apple\", \"p\") == \"ale\"\n"}
{"task_id": 8, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(M):\n    '''\n    Accurately write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert func([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\nassert func([[5, 2, 3], [1, 5, 6], [7, 8, 4]]) == [[5, 2, 3], [7, 8, 4], [1, 5, 6]]\nassert func([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == [[1, 1, 1], [2, 2, 2], [3, 3, 3]]\nassert func([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert func([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\nassert func([[5, 2, 3], [1, 5, 6], [7, 8, 4]]) == [[5, 2, 3], [7, 8, 4], [1, 5, 6]]\nassert func([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == [[1, 1, 1], [2, 2, 2], [3, 3, 3]]\nassert func([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\n"}
{"task_id": 9, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l,b,h) : \n    '''\n    Write a python function to accurately find the volume of a triangular prism.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(3,4,5) == 30\nassert func(6,8,10) == 240\nassert func(1,1,1) == 0.5\nassert func(0,0,0) == 0\nassert func(2,3,4) == 12.", "response_code": "assert func(3,4,5) == 30\nassert func(6,8,10) == 240\nassert func(1,1,1) == 0.5\nassert func(0,0,0) == 0\nassert func(2,3,4) == 12."}
{"task_id": 10, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Accurately write a function to find sequences of lowercase letters joined with an underscore.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello_world\") == [\"hello_world\"]\nassert func(\"python_is_cool\") == [\"python_is_cool\"]\nassert func(\"abc_def_ghi\") == [\"abc_def_ghi\"]\nassert func(\"this_is_a_test\") == [\"this_is_a_test\"]\nassert func(\"one_two_three\") == [\"one_two_three\"]\n```", "response_code": "\nassert func(\"hello_world\") == [\"hello_world\"]\nassert func(\"python_is_cool\") == [\"python_is_cool\"]\nassert func(\"abc_def_ghi\") == [\"abc_def_ghi\"]\nassert func(\"this_is_a_test\") == [\"this_is_a_test\"]\nassert func(\"one_two_three\") == [\"one_two_three\"]\n"}
{"task_id": 11, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a):\n    '''\n    Write a function to accurately find the perimeter of a square.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(0) == 0\nassert func(1) == 4\nassert func(5) == 20\nassert func(10) == 40\nassert func(15) == 60", "response_code": "assert func(0) == 0\nassert func(1) == 4\nassert func(5) == 20\nassert func(10) == 40\nassert func(15) == 60"}
{"task_id": 12, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "NO_OF_CHARS = 256\ndef func(string): \n    '''\n    Write a function to accurately remove characters from the first string which are present in the second string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\", \"world\") == \"he\"\nassert func(\"apple\", \"pear\") == \"appl\"\nassert func(\"python\", \"java\") == \"python\"\nassert func(\"abc123\", \"123\") == \"abc\"\nassert func(\"hello\", \"hello\") == \"\"\n```", "response_code": "\nassert func(\"hello\", \"world\") == \"he\"\nassert func(\"apple\", \"pear\") == \"appl\"\nassert func(\"python\", \"java\") == \"python\"\nassert func(\"abc123\", \"123\") == \"abc\"\nassert func(\"hello\", \"hello\") == \"\"\n"}
{"task_id": 13, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arraynums):\n    '''\n    Accurately write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == False\nassert func([1, 2, 3, 4, 1]) == True\nassert func([5, 5, 5, 5, 5]) == True\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\nassert func([1, 2, 3, 4, 5, 1]) == True\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == False\nassert func([1, 2, 3, 4, 1]) == True\nassert func([5, 5, 5, 5, 5]) == True\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\nassert func([1, 2, 3, 4, 5, 1]) == True\n"}
{"task_id": 14, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x): \n    '''\n    Write a function to accurately check if the given number is woodball or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(7) == True\nassert func(10) == False\nassert func(15) == False\nassert func(21) == True\nassert func(28) == True", "response_code": "assert func(7) == True\nassert func(10) == False\nassert func(15) == False\nassert func(21) == True\nassert func(28) == True"}
{"task_id": 15, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(num):    \n    '''\n    Write a python function to accurately check if a given number is one less than twice its reverse.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(19) == True\nassert func(25) == False\nassert func(36) == True\nassert func(47) == False\nassert func(58) == False\n```", "response_code": "\nassert func(19) == True\nassert func(25) == False\nassert func(36) == True\nassert func(47) == False\nassert func(58) == False\n"}
{"task_id": 16, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr) : \n    '''\n    Accurately write a python function to find the largest number that can be formed with the given digits.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([3, 1, 4, 2]) == 4321\nassert func([5, 5, 5, 5]) == 5555\nassert func([9, 8, 7, 6, 5]) == 98765\nassert func([0, 1, 2, 3, 4, 5]) == 543210\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 987654321\n```", "response_code": "\nassert func([3, 1, 4, 2]) == 4321\nassert func([5, 5, 5, 5]) == 5555\nassert func([9, 8, 7, 6, 5]) == 98765\nassert func([0, 1, 2, 3, 4, 5]) == 543210\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 987654321\n"}
{"task_id": 17, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x,y): \n    '''\n    Write a python function to accurately check whether the given two integers have opposite sign or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(5, -3) == True\nassert func(-2, 8) == True\nassert func(0, 0) == False\nassert func(-10, -5) == False\nassert func(3, 3) == False", "response_code": "assert func(5, -3) == True\nassert func(-2, 8) == True\nassert func(0, 0) == False\nassert func(-10, -5) == False\nassert func(3, 3) == False"}
{"task_id": 18, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Accurately write a function to find the nth octagonal number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 8\nassert func(5) == 40\nassert func(10) == 82\nassert func(15) == 130\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 8\nassert func(5) == 40\nassert func(10) == 82\nassert func(15) == 130\n"}
{"task_id": 19, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from collections import defaultdict\ndef func(s):\n    '''\n    Accurately write a python function to count number of substrings with the sum of digits equal to their length.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"123\") == 1\nassert func(\"1234\") == 4\nassert func(\"111\") == 3\nassert func(\"12345\") == 6\nassert func(\"999\") == 3\n```", "response_code": "\nassert func(\"123\") == 1\nassert func(\"1234\") == 4\nassert func(\"111\") == 3\nassert func(\"12345\") == 6\nassert func(\"999\") == 3\n"}
