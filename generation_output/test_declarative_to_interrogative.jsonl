{"task_id": 0, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Can you write a function to find the similar elements from the given two tuple lists?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (2, 3, 4)) == (2, 3)\nassert func(('a', 'b', 'c'), ('b', 'c', 'd')) == ('b', 'c')\nassert func((1, 2, 3), (4, 5, 6)) == ()\nassert func(('apple', 'banana', 'cherry'), ('banana', 'cherry', 'date')) == ('banana', 'cherry')\nassert func((), ()) == ()\n```", "response_code": "\nassert func((1, 2, 3), (2, 3, 4)) == (2, 3)\nassert func(('a', 'b', 'c'), ('b', 'c', 'd')) == ('b', 'c')\nassert func((1, 2, 3), (4, 5, 6)) == ()\nassert func(('apple', 'banana', 'cherry'), ('banana', 'cherry', 'date')) == ('banana', 'cherry')\nassert func((), ()) == ()\n"}
{"task_id": 1, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "import math\ndef func(n):\n    '''\n    Can you write a python function to identify non-prime numbers?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == False\nassert func(2) == False\nassert func(3) == False\nassert func(4) == True\nassert func(17) == False\n```", "response_code": "\nassert func(1) == False\nassert func(2) == False\nassert func(3) == False\nassert func(4) == True\nassert func(17) == False\n"}
{"task_id": 2, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "import heapq as hq\ndef func(nums,n):\n    '''\n    Can you write a function to find the largest integers from a given list of numbers using the heap queue algorithm?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nnums = [4, 2, 7, 1, 9, 5]\nn = 3\nassert func(nums, n) == [9, 7, 5]\n\nnums = [10, 20, 30, 40, 50]\nn = 2\nassert func(nums, n) == [50, 40]\n\nnums = [100, 200, 300, 400, 500]\nn = 5\nassert func(nums, n) == [500, 400, 300, 200, 100]\n\nnums = [5, 5, 5, 5, 5]\nn = 3\nassert func(nums, n) == [5, 5, 5]\n\nnums = [1, 3, 5, 7, 9]\nn = 1\nassert func(nums, n) == [9]\n```", "response_code": "\nnums = [4, 2, 7, 1, 9, 5]\nn = 3\nassert func(nums, n) == [9, 7, 5]\n\nnums = [10, 20, 30, 40, 50]\nn = 2\nassert func(nums, n) == [50, 40]\n\nnums = [100, 200, 300, 400, 500]\nn = 5\nassert func(nums, n) == [500, 400, 300, 200, 100]\n\nnums = [5, 5, 5, 5, 5]\nn = 3\nassert func(nums, n) == [5, 5, 5]\n\nnums = [1, 3, 5, 7, 9]\nn = 1\nassert func(nums, n) == [9]\n"}
{"task_id": 3, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(x): \n    '''\n    Can you write a python function to check whether the two numbers differ at one bit position only or not?\n    '''\n    pass\n\n# check the correctness of func \nassert "}], "response": "```python\nassert func(2, 3) == True\nassert func(5, 7) == True\nassert func(1, 2) == False\nassert func(0, 15) == False\nassert func(8, 9) == True\n```", "response_code": "\nassert func(2, 3) == True\nassert func(5, 7) == True\nassert func(1, 2) == False\nassert func(0, 15) == False\nassert func(8, 9) == True\n"}
{"task_id": 4, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Can you write a function to find all words which are at least 4 characters long in a string by using regex?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello, this is a test\") == ['Hello', 'this', 'test']\nassert func(\"Python is a great programming language\") == ['Python', 'great', 'programming', 'language']\nassert func(\"1234 abcd efgh 5678\") == ['1234', 'abcd', 'efgh', '5678']\nassert func(\"Short words like 'cat' or 'dog' should be ignored\") == ['Short', 'words', 'like', 'should', 'ignored']\nassert func(\"Only one longword\") == ['longword']\n```", "response_code": "\nassert func(\"Hello, this is a test\") == ['Hello', 'this', 'test']\nassert func(\"Python is a great programming language\") == ['Python', 'great', 'programming', 'language']\nassert func(\"1234 abcd efgh 5678\") == ['1234', 'abcd', 'efgh', '5678']\nassert func(\"Short words like 'cat' or 'dog' should be ignored\") == ['Short', 'words', 'like', 'should', 'ignored']\nassert func(\"Only one longword\") == ['longword']\n"}
{"task_id": 5, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(nums):\n    '''\n    Can you write a function to find squares of individual elements in a list using a lambda function?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\nassert func([0, -1, 2, -3, 4]) == [0, 1, 4, 9, 16]\nassert func([5, 10, 15, 20, 25]) == [25, 100, 225, 400, 625]\nassert func([-2, -4, -6, -8, -10]) == [4, 16, 36, 64, 100]\nassert func([1.5, 2.5, 3.5, 4.5, 5.5]) == [2.25, 6.25, 12.25, 20.25, 30.25]\n```", "response_code": "\n# Test cases\nassert func([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\nassert func([0, -1, 2, -3, 4]) == [0, 1, 4, 9, 16]\nassert func([5, 10, 15, 20, 25]) == [25, 100, 225, 400, 625]\nassert func([-2, -4, -6, -8, -10]) == [4, 16, 36, 64, 100]\nassert func([1.5, 2.5, 3.5, 4.5, 5.5]) == [2.25, 6.25, 12.25, 20.25, 30.25]\n"}
{"task_id": 6, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(str): \n    '''\n    Can you write a python function to find the minimum number of rotations required to get the same string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == 5\nassert func(\"racecar\") == 0\nassert func(\"abcde\") == 5\nassert func(\"aaaaa\") == 0\nassert func(\"ababab\") == 3\n```", "response_code": "\nassert func(\"hello\") == 5\nassert func(\"racecar\") == 0\nassert func(\"abcde\") == 5\nassert func(\"aaaaa\") == 0\nassert func(\"ababab\") == 3\n"}
{"task_id": 7, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(s,ch): \n    '''\n    Can you write a python function to remove the first and last occurrence of a given character from the string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\", \"l\") == \"heo\"\nassert func(\"banana\", \"a\") == \"bnn\"\nassert func(\"racecar\", \"r\") == \"aceca\"\nassert func(\"apple\", \"p\") == \"ale\"\nassert func(\"mississippi\", \"i\") == \"msssspp\"\n```", "response_code": "\nassert func(\"hello\", \"l\") == \"heo\"\nassert func(\"banana\", \"a\") == \"bnn\"\nassert func(\"racecar\", \"r\") == \"aceca\"\nassert func(\"apple\", \"p\") == \"ale\"\nassert func(\"mississippi\", \"i\") == \"msssspp\"\n"}
{"task_id": 8, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(M):\n    '''\n    Can you write a function to sort a given matrix in ascending order according to the sum of its rows?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert func([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\nassert func([[5, 5, 5], [1, 1, 1], [3, 3, 3]]) == [[1, 1, 1], [3, 3, 3], [5, 5, 5]]\nassert func([[2, 4, 6], [1, 3, 5], [9, 7, 8]]) == [[1, 3, 5], [2, 4, 6], [9, 7, 8]]\nassert func([[10, 20, 30], [40, 50, 60], [70, 80, 90]]) == [[10, 20, 30], [40, 50, 60], [70, 80, 90]]\n```", "response_code": "\n# Test cases\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert func([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\nassert func([[5, 5, 5], [1, 1, 1], [3, 3, 3]]) == [[1, 1, 1], [3, 3, 3], [5, 5, 5]]\nassert func([[2, 4, 6], [1, 3, 5], [9, 7, 8]]) == [[1, 3, 5], [2, 4, 6], [9, 7, 8]]\nassert func([[10, 20, 30], [40, 50, 60], [70, 80, 90]]) == [[10, 20, 30], [40, 50, 60], [70, 80, 90]]\n"}
{"task_id": 9, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(l,b,h) : \n    '''\n    Can you write a python function to find the volume of a triangular prism?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 4, 5) == 30\nassert func(6, 8, 10) == 240\nassert func(1, 1, 1) == 0.4330127018922193\nassert func(0, 0, 0) == 0\nassert func(10, 10, 10) == 433.0127018922193\n```", "response_code": "\nassert func(3, 4, 5) == 30\nassert func(6, 8, 10) == 240\nassert func(1, 1, 1) == 0.4330127018922193\nassert func(0, 0, 0) == 0\nassert func(10, 10, 10) == 433.0127018922193\n"}
{"task_id": 10, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Can you write a function to find sequences of lowercase letters joined with an underscore?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello_world\") == [\"hello_world\"]\nassert func(\"python_is_cool\") == [\"python_is_cool\"]\nassert func(\"this_is_a_test\") == [\"this_is_a_test\"]\nassert func(\"abc_def_ghi\") == [\"abc_def_ghi\"]\nassert func(\"one_two_three\") == [\"one_two_three\"]\n```", "response_code": "\nassert func(\"hello_world\") == [\"hello_world\"]\nassert func(\"python_is_cool\") == [\"python_is_cool\"]\nassert func(\"this_is_a_test\") == [\"this_is_a_test\"]\nassert func(\"abc_def_ghi\") == [\"abc_def_ghi\"]\nassert func(\"one_two_three\") == [\"one_two_three\"]\n"}
{"task_id": 11, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(a):\n    '''\n    Can you write a function to find the perimeter of a square?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\ndef func(a):\n    '''\n    Can you write a function to find the perimeter of a square?\n    '''\n    return 4 * a\n\n# check the correctness of func\nassert func(1) == 4\nassert func(2) == 8\nassert func(5) == 20\nassert func(10) == 40\nassert func(0) == 0\n```", "response_code": "\ndef func(a):\n    '''\n    Can you write a function to find the perimeter of a square?\n    '''\n    return 4 * a\n\n# check the correctness of func\nassert func(1) == 4\nassert func(2) == 8\nassert func(5) == 20\nassert func(10) == 40\nassert func(0) == 0\n"}
{"task_id": 12, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "NO_OF_CHARS = 256\ndef func(string): \n    '''\n    Can you write a function to remove characters from the first string which are present in the second string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\", \"world\") == \"he\"\nassert func(\"apple\", \"banana\") == \"apple\"\nassert func(\"python\", \"java\") == \"python\"\nassert func(\"abcdef\", \"def\") == \"abc\"\nassert func(\"12345\", \"54321\") == \"12\"\n```", "response_code": "\nassert func(\"hello\", \"world\") == \"he\"\nassert func(\"apple\", \"banana\") == \"apple\"\nassert func(\"python\", \"java\") == \"python\"\nassert func(\"abcdef\", \"def\") == \"abc\"\nassert func(\"12345\", \"54321\") == \"12\"\n"}
{"task_id": 13, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(arraynums):\n    '''\n    Can you write a function to find whether a given array of integers contains any duplicate element?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == False\nassert func([1, 2, 3, 4, 1]) == True\nassert func([5, 5, 5, 5, 5]) == True\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\nassert func([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == True\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == False\nassert func([1, 2, 3, 4, 1]) == True\nassert func([5, 5, 5, 5, 5]) == True\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\nassert func([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == True\n"}
{"task_id": 14, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(x): \n    '''\n    Can you write a function to check if the given number is woodball or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == False\nassert func(2) == True\nassert func(3) == False\nassert func(4) == True\nassert func(5) == False\n```", "response_code": "\nassert func(1) == False\nassert func(2) == True\nassert func(3) == False\nassert func(4) == True\nassert func(5) == False\n"}
{"task_id": 15, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(num):    \n    '''\n    Can you write a python function to check if a given number is one less than twice its reverse?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(19) == True\nassert func(25) == False\nassert func(36) == True\nassert func(47) == False\nassert func(50) == True\n```", "response_code": "\nassert func(19) == True\nassert func(25) == False\nassert func(36) == True\nassert func(47) == False\nassert func(50) == True\n"}
{"task_id": 16, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(arr) : \n    '''\n    Can you write a python function to find the largest number that can be formed with the given digits?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([3, 1, 4, 2]) == 4321\nassert func([5, 5, 5, 5]) == 5555\nassert func([9, 8, 7, 6]) == 9876\nassert func([0, 1, 2, 3]) == 3210\nassert func([2, 0, 4, 9]) == 9420\n```", "response_code": "\nassert func([3, 1, 4, 2]) == 4321\nassert func([5, 5, 5, 5]) == 5555\nassert func([9, 8, 7, 6]) == 9876\nassert func([0, 1, 2, 3]) == 3210\nassert func([2, 0, 4, 9]) == 9420\n"}
{"task_id": 17, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(x,y): \n    '''\n    Can you write a python function to check whether the given two integers have opposite sign or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5, -3) == True\nassert func(-2, 8) == True\nassert func(0, 0) == False\nassert func(-10, -5) == False\nassert func(3, 3) == False\n```", "response_code": "\nassert func(5, -3) == True\nassert func(-2, 8) == True\nassert func(0, 0) == False\nassert func(-10, -5) == False\nassert func(3, 3) == False\n"}
{"task_id": 18, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a function to find the nth octagonal number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 8\nassert func(3) == 21\nassert func(4) == 40\nassert func(5) == 65\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 8\nassert func(3) == 21\nassert func(4) == 40\nassert func(5) == 65\n"}
{"task_id": 19, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "from collections import defaultdict\ndef func(s):\n    '''\n    Can you write a python function to count the number of substrings with the sum of digits equal to their length?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"123\") == 1\nassert func(\"1234\") == 2\nassert func(\"111\") == 3\nassert func(\"12345\") == 3\nassert func(\"987654321\") == 1\n```", "response_code": "\nassert func(\"123\") == 1\nassert func(\"1234\") == 2\nassert func(\"111\") == 3\nassert func(\"12345\") == 3\nassert func(\"987654321\") == 1\n"}
{"task_id": 20, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(xs):\n    '''\n    Can you write a python function to find the smallest number in a list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([3, 5, 1, 7, 2]) == 1\nassert func([10, 20, 30, 40, 50]) == 10\nassert func([5, 4, 3, 2, 1]) == 1\nassert func([100, 200, 300, 400, 500]) == 100\nassert func([2, 2, 2, 2, 2]) == 2\n```", "response_code": "\nassert func([3, 5, 1, 7, 2]) == 1\nassert func([10, 20, 30, 40, 50]) == 10\nassert func([5, 4, 3, 2, 1]) == 1\nassert func([100, 200, 300, 400, 500]) == 100\nassert func([2, 2, 2, 2, 2]) == 2\n"}
{"task_id": 21, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Can you write a function to find the maximum difference between available pairs in the given tuple list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (3, 4), (5, 6)]) == 5\nassert func([(10, 20), (30, 40), (50, 60)]) == 50\nassert func([(5, 10), (15, 20), (25, 30)]) == 25\nassert func([(100, 200), (300, 400), (500, 600)]) == 500\nassert func([(2, 8), (15, 20), (30, 35)]) == 28\n```", "response_code": "\nassert func([(1, 2), (3, 4), (5, 6)]) == 5\nassert func([(10, 20), (30, 40), (50, 60)]) == 50\nassert func([(5, 10), (15, 20), (25, 30)]) == 25\nassert func([(100, 200), (300, 400), (500, 600)]) == 500\nassert func([(2, 8), (15, 20), (30, 35)]) == 28\n"}
{"task_id": 22, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(subjectmarks):\n    '''\n    Can you write a function to sort a list of tuples using lambda?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([(80, 'Math'), (70, 'Science'), (90, 'English')]) == [(70, 'Science'), (80, 'Math'), (90, 'English')]\nassert func([(60, 'History'), (75, 'Geography'), (65, 'Civics')]) == [(60, 'History'), (65, 'Civics'), (75, 'Geography')]\nassert func([(95, 'Physics'), (85, 'Chemistry'), (100, 'Biology')]) == [(85, 'Chemistry'), (95, 'Physics'), (100, 'Biology')]\nassert func([(50, 'Art'), (40, 'Music'), (45, 'Dance')]) == [(40, 'Music'), (45, 'Dance'), (50, 'Art')]\nassert func([(75, 'Computer Science'), (80, 'Physical Education'), (70, 'Health')]) == [(70, 'Health'), (75, 'Computer Science'), (80, 'Physical Education')]\n```", "response_code": "\n# Test cases\nassert func([(80, 'Math'), (70, 'Science'), (90, 'English')]) == [(70, 'Science'), (80, 'Math'), (90, 'English')]\nassert func([(60, 'History'), (75, 'Geography'), (65, 'Civics')]) == [(60, 'History'), (65, 'Civics'), (75, 'Geography')]\nassert func([(95, 'Physics'), (85, 'Chemistry'), (100, 'Biology')]) == [(85, 'Chemistry'), (95, 'Physics'), (100, 'Biology')]\nassert func([(50, 'Art'), (40, 'Music'), (45, 'Dance')]) == [(40, 'Music'), (45, 'Dance'), (50, 'Art')]\nassert func([(75, 'Computer Science'), (80, 'Physical Education'), (70, 'Health')]) == [(70, 'Health'), (75, 'Computer Science'), (80, 'Physical Education')]\n"}
{"task_id": 23, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(data_list):\n    '''\n    Can you write a function of recursion list sum?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 15\nassert func([10, 20, 30]) == 60\nassert func([5, 10, 15, 20]) == 50\nassert func([2, 4, 6, 8, 10]) == 30\nassert func([3, 6, 9, 12, 15, 18]) == 63\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 15\nassert func([10, 20, 30]) == 60\nassert func([5, 10, 15, 20]) == 50\nassert func([2, 4, 6, 8, 10]) == 30\nassert func([3, 6, 9, 12, 15, 18]) == 63\n"}
{"task_id": 24, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(list):\n    '''\n    Can you write a python function to count positive numbers in a list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 5\nassert func([-1, -2, -3, -4, -5]) == 0\nassert func([0, 1, -1, 2, -2]) == 2\nassert func([10, -10, 20, -20, 30]) == 3\nassert func([]) == 0\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 5\nassert func([-1, -2, -3, -4, -5]) == 0\nassert func([0, 1, -1, 2, -2]) == 2\nassert func([10, -10, 20, -20, 30]) == 3\nassert func([]) == 0\n"}
{"task_id": 25, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(n):   \n    '''\n    Can you write a function to find the number of ways to partition a set of bell numbers?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 1\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 5\nassert func(4) == 15\n```", "response_code": "\nassert func(0) == 1\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 5\nassert func(4) == 15\n"}
{"task_id": 26, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(A): \n    '''\n    Can you write a python function to check whether the given array is monotonic or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == True\nassert func([5, 4, 3, 2, 1]) == True\nassert func([1, 3, 2, 4, 5]) == False\nassert func([1, 1, 1, 1, 1]) == True\nassert func([5, 5, 5, 5, 5]) == True\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == True\nassert func([5, 4, 3, 2, 1]) == True\nassert func([1, 3, 2, 4, 5]) == False\nassert func([1, 1, 1, 1, 1]) == True\nassert func([5, 5, 5, 5, 5]) == True\n"}
{"task_id": 27, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(l, s):\n    '''\n    Can you write a function to check whether a list contains the given sublist or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], [2, 3]) == True\nassert func([1, 2, 3, 4, 5], [4, 6]) == False\nassert func([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\nassert func([1, 2, 3, 4, 5], [5, 4, 3]) == False\nassert func([1, 2, 3, 4, 5], [6]) == False\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], [2, 3]) == True\nassert func([1, 2, 3, 4, 5], [4, 6]) == False\nassert func([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\nassert func([1, 2, 3, 4, 5], [5, 4, 3]) == False\nassert func([1, 2, 3, 4, 5], [6]) == False\n"}
{"task_id": 28, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(Input):\n    '''\n    Can you write a function to find whether all the given tuples have equal length or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (3, 4), (5, 6)]) == True\nassert func([(1, 2, 3), (4, 5), (6, 7, 8)]) == False\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == True\nassert func([(1,), (2,), (3,)]) == True\nassert func([]) == True\n```", "response_code": "\nassert func([(1, 2), (3, 4), (5, 6)]) == True\nassert func([(1, 2, 3), (4, 5), (6, 7, 8)]) == False\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == True\nassert func([(1,), (2,), (3,)]) == True\nassert func([]) == True\n"}
{"task_id": 29, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(nums):\n    '''\n    Can you write a function to sort a list of elements using comb sort?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([4, 2, 7, 1, 5]) == [1, 2, 4, 5, 7]\nassert func([9, 3, 6, 2, 8, 1, 5, 7, 4]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert func([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1]) == [1]\n```", "response_code": "\n# Test cases\nassert func([4, 2, 7, 1, 5]) == [1, 2, 4, 5, 7]\nassert func([9, 3, 6, 2, 8, 1, 5, 7, 4]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert func([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1]) == [1]\n"}
{"task_id": 30, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a python function to check whether the given number can be represented as difference of two squares or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(10) == True\nassert func(25) == True\nassert func(7) == False\nassert func(15) == False\nassert func(36) == True\n```", "response_code": "\nassert func(10) == True\nassert func(25) == True\nassert func(7) == False\nassert func(15) == False\nassert func(36) == True\n"}
{"task_id": 31, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(colors, patterns):    \n    '''\n    Can you write a function to check whether it follows the sequence given in the patterns array?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['red', 'blue', 'green'], ['solid', 'striped', 'polka dot']) == True\nassert func(['red', 'blue', 'green'], ['solid', 'striped', 'solid']) == False\nassert func(['red', 'blue', 'green'], ['solid', 'striped']) == False\nassert func(['red', 'blue', 'green'], ['solid', 'striped', 'polka dot', 'solid']) == False\nassert func(['red', 'blue', 'green'], ['solid', 'striped', 'polka dot', 'striped']) == True\n```", "response_code": "\nassert func(['red', 'blue', 'green'], ['solid', 'striped', 'polka dot']) == True\nassert func(['red', 'blue', 'green'], ['solid', 'striped', 'solid']) == False\nassert func(['red', 'blue', 'green'], ['solid', 'striped']) == False\nassert func(['red', 'blue', 'green'], ['solid', 'striped', 'polka dot', 'solid']) == False\nassert func(['red', 'blue', 'green'], ['solid', 'striped', 'polka dot', 'striped']) == True\n"}
{"task_id": 32, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(test_list, K):\n    '''\n    Can you write a function to find tuples which have all elements divisible by k from the given list of tuples?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == [(4, 5, 6)]\nassert func([(10, 20, 30), (40, 50, 60), (70, 80, 90)], 10) == [(10, 20, 30), (40, 50, 60), (70, 80, 90)]\nassert func([(3, 6, 9), (12, 15, 18), (21, 24, 27)], 3) == [(3, 6, 9), (12, 15, 18), (21, 24, 27)]\nassert func([(2, 4, 6), (8, 10, 12), (14, 16, 18)], 2) == [(2, 4, 6), (8, 10, 12), (14, 16, 18)]\nassert func([(5, 10, 15), (20, 25, 30), (35, 40, 45)], 5) == [(5, 10, 15), (20, 25, 30), (35, 40, 45)]\n```", "response_code": "\n# Test cases\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == [(4, 5, 6)]\nassert func([(10, 20, 30), (40, 50, 60), (70, 80, 90)], 10) == [(10, 20, 30), (40, 50, 60), (70, 80, 90)]\nassert func([(3, 6, 9), (12, 15, 18), (21, 24, 27)], 3) == [(3, 6, 9), (12, 15, 18), (21, 24, 27)]\nassert func([(2, 4, 6), (8, 10, 12), (14, 16, 18)], 2) == [(2, 4, 6), (8, 10, 12), (14, 16, 18)]\nassert func([(5, 10, 15), (20, 25, 30), (35, 40, 45)], 5) == [(5, 10, 15), (20, 25, 30), (35, 40, 45)]\n"}
{"task_id": 33, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a python function to find the difference between sum of even and odd digits?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1234) == 2  # 2 - 4 = -2\nassert func(2468) == 8  # 2 + 4 + 6 + 8 - 0 = 20\nassert func(13579) == -14  # 1 + 3 + 5 + 7 + 9 - 0 = 25\nassert func(1111) == -2  # 1 + 1 + 1 + 1 - 0 = 4\nassert func(987654321) == 0  # 9 + 7 + 5 + 3 + 1 - 8 - 6 - 4 - 2 = 5\n```", "response_code": "\nassert func(1234) == 2  # 2 - 4 = -2\nassert func(2468) == 8  # 2 + 4 + 6 + 8 - 0 = 20\nassert func(13579) == -14  # 1 + 3 + 5 + 7 + 9 - 0 = 25\nassert func(1111) == -2  # 1 + 1 + 1 + 1 - 0 = 4\nassert func(987654321) == 0  # 9 + 7 + 5 + 3 + 1 - 8 - 6 - 4 - 2 = 5\n"}
{"task_id": 34, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(s): \n    '''\n    Can you write a python function to check whether the length of the word is odd or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == True\nassert func(\"world\") == True\nassert func(\"python\") == False\nassert func(\"programming\") == False\nassert func(\"test\") == True\n```", "response_code": "\nassert func(\"hello\") == True\nassert func(\"world\") == True\nassert func(\"python\") == False\nassert func(\"programming\") == False\nassert func(\"test\") == True\n"}
{"task_id": 35, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a function to find the nth tetrahedral number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 4\nassert func(3) == 10\nassert func(4) == 20\nassert func(5) == 35\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 4\nassert func(3) == 10\nassert func(4) == 20\nassert func(5) == 35\n"}
{"task_id": 36, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "import math\ndef func(r):\n    '''\n    Can you write a function to find the volume of a sphere?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nimport math\ndef func(r):\n    '''\n    Can you write a function to find the volume of a sphere?\n    '''\n    return (4/3) * math.pi * r**3\n\n# check the correctness of func\nassert func(1) == (4/3) * math.pi\nassert func(2) == (32/3) * math.pi\nassert func(3) == 36 * math.pi\nassert func(0) == 0\nassert func(5) == (500/3) * math.pi\n```", "response_code": "\nimport math\ndef func(r):\n    '''\n    Can you write a function to find the volume of a sphere?\n    '''\n    return (4/3) * math.pi * r**3\n\n# check the correctness of func\nassert func(1) == (4/3) * math.pi\nassert func(2) == (32/3) * math.pi\nassert func(3) == 36 * math.pi\nassert func(0) == 0\nassert func(5) == (500/3) * math.pi\n"}
{"task_id": 37, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(strr):  \n    '''\n    Can you write a python function to find the character made by adding all the characters of the given string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"abc\") == 'c'\nassert func(\"hello\") == 'o'\nassert func(\"12345\") == '5'\nassert func(\"python\") == 'n'\nassert func(\"racecar\") == 'r'\n```", "response_code": "\nassert func(\"abc\") == 'c'\nassert func(\"hello\") == 'o'\nassert func(\"12345\") == '5'\nassert func(\"python\") == 'n'\nassert func(\"racecar\") == 'r'\n"}
{"task_id": 38, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a function to find the n-th number in the Newman Conway sequence?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 1\nassert func(3) == 2\nassert func(4) == 2\nassert func(5) == 3\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 1\nassert func(3) == 2\nassert func(4) == 2\nassert func(5) == 3\n"}
{"task_id": 39, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "import math\ndef func(r):\n    '''\n    Can you write a function to find the surface area of a sphere?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 4 * math.pi\nassert func(2) == 4 * math.pi * 2**2\nassert func(0) == 0\nassert func(5) == 4 * math.pi * 5**2\nassert func(10) == 4 * math.pi * 10**2\n```", "response_code": "\nassert func(1) == 4 * math.pi\nassert func(2) == 4 * math.pi * 2**2\nassert func(0) == 0\nassert func(5) == 4 * math.pi * 5**2\nassert func(10) == 4 * math.pi * 10**2\n"}
{"task_id": 40, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(n):\n    '''\n    Can you write a function to find the nth centered hexagonal number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 7\nassert func(3) == 19\nassert func(4) == 37\nassert func(5) == 61\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 7\nassert func(3) == 19\nassert func(4) == 37\nassert func(5) == 61\n"}
{"task_id": 41, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "import collections as ct\ndef func(dict1,dict2, dict3):\n    '''\n    Can you write a function to merge three dictionaries into a single expression?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'b': 3, 'c': 4}\ndict3 = {'d': 5}\n\n# Expected output: {'a': 1, 'b': 3, 'c': 4, 'd': 5}\nassert func(dict1, dict2, dict3) == {'a': 1, 'b': 3, 'c': 4, 'd': 5}\n\ndict1 = {'x': 10, 'y': 20}\ndict2 = {'y': 30, 'z': 40}\ndict3 = {'w': 50}\n\n# Expected output: {'x': 10, 'y': 30, 'z': 40, 'w': 50}\nassert func(dict1, dict2, dict3) == {'x': 10, 'y': 30, 'z': 40, 'w': 50}\n\ndict1 = {'apple': 'red', 'banana': 'yellow'}\ndict2 = {'banana': 'green', 'cherry': 'red'}\ndict3 = {'date': 'brown'}\n\n# Expected output: {'apple': 'red', 'banana': 'green', 'cherry': 'red', 'date': 'brown'}\nassert func(dict1, dict2, dict3) == {'apple': 'red', 'banana': 'green', 'cherry': 'red', 'date': 'brown'}\n\ndict1 = {'1': 'one', '2': 'two'}\ndict2 = {'2': 'dos', '3': 'tres'}\ndict3 = {'4': 'quatro'}\n\n# Expected output: {'1': 'one', '2': 'dos', '3': 'tres', '4': 'quatro'}\nassert func(dict1, dict2, dict3) == {'1': 'one', '2': 'dos', '3': 'tres', '4': 'quatro'}\n\ndict1 = {'red': 1, 'green': 2}\ndict2 = {'green': 3, 'blue': 4}\ndict3 = {'yellow': 5}\n\n# Expected output: {'red': 1, 'green': 3, 'blue': 4, 'yellow': 5}\nassert func(dict1, dict2, dict3) == {'red': 1, 'green': 3, 'blue': 4, 'yellow': 5}\n```", "response_code": "\n# Test cases\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'b': 3, 'c': 4}\ndict3 = {'d': 5}\n\n# Expected output: {'a': 1, 'b': 3, 'c': 4, 'd': 5}\nassert func(dict1, dict2, dict3) == {'a': 1, 'b': 3, 'c': 4, 'd': 5}\n\ndict1 = {'x': 10, 'y': 20}\ndict2 = {'y': 30, 'z': 40}\ndict3 = {'w': 50}\n\n# Expected output: {'x': 10, 'y': 30, 'z': 40, 'w': 50}\nassert func(dict1, dict2, dict3) == {'x': 10, 'y': 30, 'z': 40, 'w': 50}\n\ndict1 = {'apple': 'red', 'banana': 'yellow'}\ndict2 = {'banana': 'green', 'cherry': 'red'}\ndict3 = {'date': 'brown'}\n\n# Expected output: {'apple': 'red', 'banana': 'green', 'cherry': 'red', 'date': 'brown'}\nassert func(dict1, dict2, dict3) == {'apple': 'red', 'banana': 'green', 'cherry': 'red', 'date': 'brown'}\n\ndict1 = {'1': 'one', '2': 'two'}\ndict2 = {'2': 'dos', '3': 'tres'}\ndict3 = {'4': 'quatro'}\n\n# Expected output: {'1': 'one', '2': 'dos', '3': 'tres', '4': 'quatro'}\nassert func(dict1, dict2, dict3) == {'1': 'one', '2': 'dos', '3': 'tres', '4': 'quatro'}\n\ndict1 = {'red': 1, 'green': 2}\ndict2 = {'green': 3, 'blue': 4}\ndict3 = {'yellow': 5}\n\n# Expected output: {'red': 1, 'green': 3, 'blue': 4, 'yellow': 5}\nassert func(dict1, dict2, dict3) == {'red': 1, 'green': 3, 'blue': 4, 'yellow': 5}\n"}
{"task_id": 42, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "import collections\ndef func(list1):\n    '''\n    Can you write a function to get the frequency of the elements in a list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([1, 2, 2, 3, 3, 3]) == {1: 1, 2: 2, 3: 3}\nassert func([1, 1, 1, 1, 1]) == {1: 5}\nassert func([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}\nassert func([]) == {}\nassert func([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == {1: 2, 2: 2, 3: 2, 4: 2, 5: 2}\n```", "response_code": "\n# Test cases\nassert func([1, 2, 2, 3, 3, 3]) == {1: 1, 2: 2, 3: 3}\nassert func([1, 1, 1, 1, 1]) == {1: 5}\nassert func([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}\nassert func([]) == {}\nassert func([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == {1: 2, 2: 2, 3: 2, 4: 2, 5: 2}\n"}
{"task_id": 43, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(N):\n    '''\n    Can you write a function to find the closest smaller number than n?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5) == 4\nassert func(10) == 9\nassert func(20) == 19\nassert func(3) == 2\nassert func(15) == 14\n```", "response_code": "\nassert func(5) == 4\nassert func(10) == 9\nassert func(20) == 19\nassert func(3) == 2\nassert func(15) == 14\n"}
{"task_id": 44, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(list1):\n    '''\n    Can you write a python function to find the length of the longest word?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([\"apple\", \"banana\", \"cherry\"]) == 6\nassert func([\"hello\", \"world\"]) == 5\nassert func([\"python\", \"programming\", \"language\"]) == 11\nassert func([\"data\", \"science\", \"machine\", \"learning\"]) == 8\nassert func([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"]) == 5\n```", "response_code": "\nassert func([\"apple\", \"banana\", \"cherry\"]) == 6\nassert func([\"hello\", \"world\"]) == 5\nassert func([\"python\", \"programming\", \"language\"]) == 11\nassert func([\"data\", \"science\", \"machine\", \"learning\"]) == 8\nassert func([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"]) == 5\n"}
{"task_id": 45, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(str1, sub_str):\n    '''\n    Can you write a function to check if a substring is present in a given list of string values?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['apple', 'banana', 'cherry'], 'ban') == True\nassert func(['apple', 'banana', 'cherry'], 'berry') == False\nassert func(['apple', 'banana', 'cherry'], 'apple') == True\nassert func(['apple', 'banana', 'cherry'], 'peach') == False\nassert func(['apple', 'banana', 'cherry'], 'ch') == True\n```", "response_code": "\nassert func(['apple', 'banana', 'cherry'], 'ban') == True\nassert func(['apple', 'banana', 'cherry'], 'berry') == False\nassert func(['apple', 'banana', 'cherry'], 'apple') == True\nassert func(['apple', 'banana', 'cherry'], 'peach') == False\nassert func(['apple', 'banana', 'cherry'], 'ch') == True\n"}
{"task_id": 46, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a function to check whether the given number is undulating or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(121) == True\nassert func(10101) == True\nassert func(12321) == True\nassert func(123) == False\nassert func(111) == False\n```", "response_code": "\nassert func(121) == True\nassert func(10101) == True\nassert func(12321) == True\nassert func(123) == False\nassert func(111) == False\n"}
{"task_id": 47, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(a,b):\n    '''\n    Can you write a function to calculate the value of 'a' to the power 'b'?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(2, 3) == 8\nassert func(5, 2) == 25\nassert func(3, 4) == 81\nassert func(0, 5) == 0\nassert func(10, 0) == 1\n```", "response_code": "\nassert func(2, 3) == 8\nassert func(5, 2) == 25\nassert func(3, 4) == 81\nassert func(0, 5) == 0\nassert func(10, 0) == 1\n"}
{"task_id": 48, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "from operator import itemgetter \ndef func(test_list):\n    '''\n    Can you write a function to extract the index minimum value record from the given tuples?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([(1, 'a'), (2, 'b'), (3, 'c')]) == 0\nassert func([(5, 'x'), (3, 'y'), (7, 'z')]) == 1\nassert func([(10, 'apple'), (5, 'banana'), (8, 'cherry')]) == 1\nassert func([(100, 'red'), (50, 'green'), (75, 'blue')]) == 1\nassert func([(8, 'dog'), (8, 'cat'), (8, 'bird')]) == 0\n```", "response_code": "\n# Test cases\nassert func([(1, 'a'), (2, 'b'), (3, 'c')]) == 0\nassert func([(5, 'x'), (3, 'y'), (7, 'z')]) == 1\nassert func([(10, 'apple'), (5, 'banana'), (8, 'cherry')]) == 1\nassert func([(100, 'red'), (50, 'green'), (75, 'blue')]) == 1\nassert func([(8, 'dog'), (8, 'cat'), (8, 'bird')]) == 0\n"}
{"task_id": 49, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(lst):  \n    '''\n    Can you write a python function to find the minimum length of sublist?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 2\nassert func([[1, 2, 3, 4], [5, 6], [7, 8, 9]]) == 2\nassert func([[1], [2], [3], [4]]) == 1\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 3\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == 2", "response_code": "assert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 2\nassert func([[1, 2, 3, 4], [5, 6], [7, 8, 9]]) == 2\nassert func([[1], [2], [3], [4]]) == 1\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 3\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == 2"}
{"task_id": 50, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(n):\n    '''\n    Can you write a python function to find the number of divisors of a given integer?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(10) == 4\nassert func(15) == 4\nassert func(20) == 6\nassert func(25) == 3\nassert func(30) == 8\n```", "response_code": "\nassert func(10) == 4\nassert func(15) == 4\nassert func(20) == 6\nassert func(25) == 3\nassert func(30) == 8\n"}
{"task_id": 51, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(list1):\n    '''\n    Can you write a function to find the frequency count of a list of lists?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([[1, 2], [2, 3], [1, 2], [4, 5]]) == {1: 2, 2: 2, 3: 1, 4: 1, 5: 1}\nassert func([[1, 1, 1], [2, 2], [3, 3, 3, 3]]) == {1: 3, 2: 2, 3: 4}\nassert func([[1], [2], [3], [4]]) == {1: 1, 2: 1, 3: 1, 4: 1}\nassert func([[1, 2, 3], [4, 5], [6, 7, 8]]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1}\nassert func([[1, 2, 3, 4], [5, 6, 7], [8, 9]]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}", "response_code": "assert func([[1, 2], [2, 3], [1, 2], [4, 5]]) == {1: 2, 2: 2, 3: 1, 4: 1, 5: 1}\nassert func([[1, 1, 1], [2, 2], [3, 3, 3, 3]]) == {1: 3, 2: 2, 3: 4}\nassert func([[1], [2], [3], [4]]) == {1: 1, 2: 1, 3: 1, 4: 1}\nassert func([[1, 2, 3], [4, 5], [6, 7, 8]]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1}\nassert func([[1, 2, 3, 4], [5, 6, 7], [8, 9]]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}"}
{"task_id": 52, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(numbers):  \n    '''\n    Can you write a function to multiply all the numbers in a list and divide with the length of the list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 3.0\nassert func([10, 20, 30]) == 200.0\nassert func([2, 4, 6, 8]) == 10.0\nassert func([5, 5, 5, 5, 5, 5]) == 5.0\nassert func([1, 3, 5, 7, 9]) == 15.0\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 3.0\nassert func([10, 20, 30]) == 200.0\nassert func([2, 4, 6, 8]) == 10.0\nassert func([5, 5, 5, 5, 5, 5]) == 5.0\nassert func([1, 3, 5, 7, 9]) == 15.0\n"}
{"task_id": 53, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a function to convert the given decimal number to its binary equivalent?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == '0'\nassert func(1) == '1'\nassert func(5) == '101'\nassert func(10) == '1010'\nassert func(15) == '1111'\n```", "response_code": "\nassert func(0) == '0'\nassert func(1) == '1'\nassert func(5) == '101'\nassert func(10) == '1010'\nassert func(15) == '1111'\n"}
{"task_id": 54, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "import sys\ndef func(num):\n    '''\n    Can you write a function to find the next smallest palindrome of a specified number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(123) == 131\nassert func(999) == 1001\nassert func(45678) == 45754\nassert func(123456789) == 123454321\nassert func(987654321) == 98778789\n```", "response_code": "\nassert func(123) == 131\nassert func(999) == 1001\nassert func(45678) == 45754\nassert func(123456789) == 123454321\nassert func(987654321) == 98778789\n"}
{"task_id": 55, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(arr, k):\n    '''\n    Can you write a function to find the kth element in the given array?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3], 3) == 4\nassert func([10, 20, 30, 40, 50], 1) == 10\nassert func([5, 8, 2, 7, 1], 5) == 8\nassert func([100, 200, 300, 400, 500], 2) == 200\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7) == 7\n```", "response_code": "\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3], 3) == 4\nassert func([10, 20, 30, 40, 50], 1) == 10\nassert func([5, 8, 2, 7, 1], 5) == 8\nassert func([100, 200, 300, 400, 500], 2) == 200\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7) == 7\n"}
{"task_id": 56, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(word):\n    '''\n    Can you write a function to convert snake case string to camel case string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello_world\") == \"HelloWorld\"\nassert func(\"snake_case_example\") == \"SnakeCaseExample\"\nassert func(\"this_is_a_test\") == \"ThisIsATest\"\nassert func(\"camelCaseExample\") == \"CamelCaseExample\"\nassert func(\"another_example\") == \"AnotherExample\"\n```", "response_code": "\nassert func(\"hello_world\") == \"HelloWorld\"\nassert func(\"snake_case_example\") == \"SnakeCaseExample\"\nassert func(\"this_is_a_test\") == \"ThisIsATest\"\nassert func(\"camelCaseExample\") == \"CamelCaseExample\"\nassert func(\"another_example\") == \"AnotherExample\"\n"}
{"task_id": 57, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(n, m): \n    '''\n    Can you write a function to find the Eulerian number a(n, m)?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0, 0) == 1\nassert func(3, 2) == 4\nassert func(5, 3) == 30\nassert func(4, 1) == 14\nassert func(6, 4) == 154\n```", "response_code": "\nassert func(0, 0) == 1\nassert func(3, 2) == 4\nassert func(5, 3) == 30\nassert func(4, 1) == 14\nassert func(6, 4) == 154\n"}
{"task_id": 58, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(input_list):\n    '''\n    Can you write a function to sort each sublist of strings in a given list of lists using lambda function?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([['banana', 'apple', 'cherry'], ['orange', 'grape', 'kiwi']]) == [['apple', 'banana', 'cherry'], ['grape', 'kiwi', 'orange']]\nassert func([['zebra', 'lion', 'elephant'], ['tiger', 'giraffe', 'monkey']]) == [['elephant', 'lion', 'zebra'], ['giraffe', 'monkey', 'tiger']]\nassert func([['pear', 'peach', 'plum'], ['strawberry', 'blueberry', 'raspberry']]) == [['peach', 'pear', 'plum'], ['blueberry', 'raspberry', 'strawberry']]\nassert func([['dog', 'cat', 'rabbit'], ['hamster', 'guinea pig', 'ferret']]) == [['cat', 'dog', 'rabbit'], ['ferret', 'guinea pig', 'hamster']]\nassert func([['sunflower', 'rose', 'tulip'], ['daisy', 'lily', 'carnation']]) == [['rose', 'sunflower', 'tulip'], ['carnation', 'daisy', 'lily']]\n```", "response_code": "\n# Test cases\nassert func([['banana', 'apple', 'cherry'], ['orange', 'grape', 'kiwi']]) == [['apple', 'banana', 'cherry'], ['grape', 'kiwi', 'orange']]\nassert func([['zebra', 'lion', 'elephant'], ['tiger', 'giraffe', 'monkey']]) == [['elephant', 'lion', 'zebra'], ['giraffe', 'monkey', 'tiger']]\nassert func([['pear', 'peach', 'plum'], ['strawberry', 'blueberry', 'raspberry']]) == [['peach', 'pear', 'plum'], ['blueberry', 'raspberry', 'strawberry']]\nassert func([['dog', 'cat', 'rabbit'], ['hamster', 'guinea pig', 'ferret']]) == [['cat', 'dog', 'rabbit'], ['ferret', 'guinea pig', 'hamster']]\nassert func([['sunflower', 'rose', 'tulip'], ['daisy', 'lily', 'carnation']]) == [['rose', 'sunflower', 'tulip'], ['carnation', 'daisy', 'lily']]\n"}
{"task_id": 59, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(lst):   \n    '''\n    Can you write a python function to count true booleans in the given list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([True, False, True, False, True]) == 3\nassert func([True, True, True, True, True]) == 5\nassert func([False, False, False, False, False]) == 0\nassert func([True, False, True, False, False]) == 2\nassert func([]) == 0\n```", "response_code": "\nassert func([True, False, True, False, True]) == 3\nassert func([True, True, True, True, True]) == 5\nassert func([False, False, False, False, False]) == 0\nassert func([True, False, True, False, False]) == 2\nassert func([]) == 0\n"}
{"task_id": 60, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(test_list, test_tup):\n    '''\n    Can you write a function to add the given list to the given tuples?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([1, 2, 3], (4, 5)) == [(1, 2, 3, 4, 5)]\nassert func(['a', 'b'], ('c', 'd')) == [('a', 'b', 'c', 'd')]\nassert func([], (1, 2, 3)) == [(1, 2, 3)]\nassert func([10, 20], (30,)) == [(10, 20, 30)]\nassert func(['x'], ('y', 'z')) == [('x', 'y', 'z')]\n```", "response_code": "\n# Test cases\nassert func([1, 2, 3], (4, 5)) == [(1, 2, 3, 4, 5)]\nassert func(['a', 'b'], ('c', 'd')) == [('a', 'b', 'c', 'd')]\nassert func([], (1, 2, 3)) == [(1, 2, 3)]\nassert func([10, 20], (30,)) == [(10, 20, 30)]\nassert func(['x'], ('y', 'z')) == [('x', 'y', 'z')]\n"}
{"task_id": 61, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "import heapq\ndef func(num1,num2,num3):\n    '''\n    Can you write a function to merge multiple sorted inputs into a single sorted iterator using the heap queue algorithm?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert list(func([1, 3, 5], [2, 4, 6], [0, 7, 8])) == [0, 1, 2, 3, 4, 5, 6, 7, 8]\nassert list(func([1, 2, 3], [4, 5, 6], [7, 8, 9])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert list(func([1, 4, 7], [2, 5, 8], [3, 6, 9])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert list(func([1, 2, 3], [1, 2, 3], [1, 2, 3])) == [1, 1, 1, 2, 2, 2, 3, 3, 3]\nassert list(func([3, 2, 1], [6, 5, 4], [9, 8, 7])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```", "response_code": "\n# Test cases\nassert list(func([1, 3, 5], [2, 4, 6], [0, 7, 8])) == [0, 1, 2, 3, 4, 5, 6, 7, 8]\nassert list(func([1, 2, 3], [4, 5, 6], [7, 8, 9])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert list(func([1, 4, 7], [2, 5, 8], [3, 6, 9])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert list(func([1, 2, 3], [1, 2, 3], [1, 2, 3])) == [1, 1, 1, 2, 2, 2, 3, 3, 3]\nassert list(func([3, 2, 1], [6, 5, 4], [9, 8, 7])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"}
{"task_id": 62, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(s,n): \n    '''\n    Can you write a python function to find the count of rotations of a binary string with odd value?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func('101', 3) == 1\nassert func('1101', 4) == 2\nassert func('11111', 5) == 0\nassert func('1001', 4) == 1\nassert func('10101', 5) == 2\n```", "response_code": "\nassert func('101', 3) == 1\nassert func('1101', 4) == 2\nassert func('11111', 5) == 0\nassert func('1001', 4) == 1\nassert func('10101', 5) == 2\n"}
{"task_id": 63, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(nestedlist):\n    '''\n    Can you write a function to find common elements in given nested lists?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == []\nassert func([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]\nassert func([[1, 2, 3], [4, 5, 6], [1, 2, 3]]) == [1, 2, 3]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3]]) == []\n```", "response_code": "\nassert func([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == []\nassert func([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]\nassert func([[1, 2, 3], [4, 5, 6], [1, 2, 3]]) == [1, 2, 3]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3]]) == []\n"}
{"task_id": 64, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(text):\n    '''\n    Can you write a function to check if a string represents an integer or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"123\") == True\nassert func(\"-456\") == True\nassert func(\"0\") == True\nassert func(\"12.34\") == False\nassert func(\"abc\") == False\n```", "response_code": "\nassert func(\"123\") == True\nassert func(\"-456\") == True\nassert func(\"0\") == True\nassert func(\"12.34\") == False\nassert func(\"abc\") == False\n"}
{"task_id": 65, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(list1):\n    '''\n    Can you write a function to check whether all dictionaries in a list are empty or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases for func\n\n# Test case 1: Empty list\nassert func([]) == True\n\n# Test case 2: List with one empty dictionary\nassert func([{}]) == True\n\n# Test case 3: List with multiple empty dictionaries\nassert func([{}, {}, {}]) == True\n\n# Test case 4: List with one non-empty dictionary\nassert func([{'a': 1}]) == False\n\n# Test case 5: List with a mix of empty and non-empty dictionaries\nassert func([{}, {'a': 1}, {}, {'b': 2}]) == False\n```", "response_code": "\n# Test cases for func\n\n# Test case 1: Empty list\nassert func([]) == True\n\n# Test case 2: List with one empty dictionary\nassert func([{}]) == True\n\n# Test case 3: List with multiple empty dictionaries\nassert func([{}, {}, {}]) == True\n\n# Test case 4: List with one non-empty dictionary\nassert func([{'a': 1}]) == False\n\n# Test case 5: List with a mix of empty and non-empty dictionaries\nassert func([{}, {'a': 1}, {}, {'b': 2}]) == False\n"}
{"task_id": 66, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(nums):\n    '''\n    Can you write a function to convert a given tuple of positive integers into an integer?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3)) == 123\nassert func((9, 8, 7, 6)) == 9876\nassert func((5, 0, 2, 1)) == 5021\nassert func((4, 3, 2, 1, 0)) == 43210\nassert func((1, 0, 0, 0, 0)) == 10000\n```", "response_code": "\nassert func((1, 2, 3)) == 123\nassert func((9, 8, 7, 6)) == 9876\nassert func((5, 0, 2, 1)) == 5021\nassert func((4, 3, 2, 1, 0)) == 43210\nassert func((1, 0, 0, 0, 0)) == 10000\n"}
{"task_id": 67, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Can you write a function to convert all possible convertible elements in the list to float?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([1, 2, 3]) == [1.0, 2.0, 3.0]\nassert func([1.5, '2.5', '3']) == [1.5, 2.5, 3.0]\nassert func(['1.2', '2.3', '3.4']) == [1.2, 2.3, 3.4]\nassert func(['1.2', '2.3', 'three']) == [1.2, 2.3, 'three']\nassert func(['1.2', '2.3', '3.4', 'four']) == [1.2, 2.3, 3.4, 'four']\n```", "response_code": "\n# Test cases\nassert func([1, 2, 3]) == [1.0, 2.0, 3.0]\nassert func([1.5, '2.5', '3']) == [1.5, 2.5, 3.0]\nassert func(['1.2', '2.3', '3.4']) == [1.2, 2.3, 3.4]\nassert func(['1.2', '2.3', 'three']) == [1.2, 2.3, 'three']\nassert func(['1.2', '2.3', '3.4', 'four']) == [1.2, 2.3, 3.4, 'four']\n"}
{"task_id": 68, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(string): \n    '''\n    Can you write a function to convert a string to a list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == ['h', 'e', 'l', 'l', 'o']\nassert func(\"12345\") == ['1', '2', '3', '4', '5']\nassert func(\"abc123\") == ['a', 'b', 'c', '1', '2', '3']\nassert func(\"\") == []\nassert func(\"testing 123\") == ['t', 'e', 's', 't', 'i', 'n', 'g', ' ', '1', '2', '3']\n```", "response_code": "\nassert func(\"hello\") == ['h', 'e', 'l', 'l', 'o']\nassert func(\"12345\") == ['1', '2', '3', '4', '5']\nassert func(\"abc123\") == ['a', 'b', 'c', '1', '2', '3']\nassert func(\"\") == []\nassert func(\"testing 123\") == ['t', 'e', 's', 't', 'i', 'n', 'g', ' ', '1', '2', '3']\n"}
{"task_id": 69, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(arr):\n    '''\n    Can you write a python function to find the element that appears only once in a sorted array?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 1, 2, 2, 3, 4, 4, 5, 5]) == 3\nassert func([1, 1, 2, 2, 3, 3, 4, 4, 5]) == 5\nassert func([1, 2, 2, 3, 3, 4, 4, 5, 5]) == 1\nassert func([1, 1, 2, 2, 3, 3, 4, 5, 5]) == 4\nassert func([1, 1, 2, 2, 3, 3, 4, 4, 5]) == 5\n```", "response_code": "\nassert func([1, 1, 2, 2, 3, 4, 4, 5, 5]) == 3\nassert func([1, 1, 2, 2, 3, 3, 4, 4, 5]) == 5\nassert func([1, 2, 2, 3, 3, 4, 4, 5, 5]) == 1\nassert func([1, 1, 2, 2, 3, 3, 4, 5, 5]) == 4\nassert func([1, 1, 2, 2, 3, 3, 4, 4, 5]) == 5\n"}
{"task_id": 70, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(list1):\n    '''\n    Can you write a function to find the maximum product from the pairs of tuples within a given list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (3, 4), (5, 6)]) == 30\nassert func([(2, 3), (4, 5), (6, 7)]) == 42\nassert func([(10, 2), (3, 5), (7, 8)]) == 80\nassert func([(1, 1), (2, 2), (3, 3)]) == 9\nassert func([(4, 5), (6, 7), (8, 9)]) == 72\n```", "response_code": "\nassert func([(1, 2), (3, 4), (5, 6)]) == 30\nassert func([(2, 3), (4, 5), (6, 7)]) == 42\nassert func([(10, 2), (3, 5), (7, 8)]) == 80\nassert func([(1, 1), (2, 2), (3, 3)]) == 9\nassert func([(4, 5), (6, 7), (8, 9)]) == 72\n"}
{"task_id": 71, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(limit):\n    '''\n    Can you write a function to sum all amicable numbers from 1 to a specified number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(100) == 504\nassert func(200) == 2898\nassert func(500) == 8442\nassert func(1000) == 31626\nassert func(2000) == 63918\n```", "response_code": "\nassert func(100) == 504\nassert func(200) == 2898\nassert func(500) == 8442\nassert func(1000) == 31626\nassert func(2000) == 63918\n"}
{"task_id": 72, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "import cmath\ndef func(a,b):\n    '''\n    Can you write a function to get the angle of a complex number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1, 0) == 0\nassert func(0, 1) == cmath.pi/2\nassert func(-1, 0) == cmath.pi\nassert func(0, -1) == -cmath.pi/2\nassert func(1, 1) == cmath.pi/4\n```", "response_code": "\nassert func(1, 0) == 0\nassert func(0, 1) == cmath.pi/2\nassert func(-1, 0) == cmath.pi\nassert func(0, -1) == -cmath.pi/2\nassert func(1, 1) == cmath.pi/4\n"}
{"task_id": 73, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(string): \n    '''\n    Can you write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"110101\") == 2\nassert func(\"1010101\") == 4\nassert func(\"1111\") == 0\nassert func(\"0000\") == 0\nassert func(\"101010101\") == 6\n```", "response_code": "\nassert func(\"110101\") == 2\nassert func(\"1010101\") == 4\nassert func(\"1111\") == 0\nassert func(\"0000\") == 0\nassert func(\"101010101\") == 6\n"}
{"task_id": 74, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(a,b): \n    '''\n    Can you write a python function to find the sum of common divisors of two given numbers?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(12, 18) == 6\nassert func(15, 25) == 5\nassert func(20, 30) == 12\nassert func(36, 48) == 24\nassert func(50, 75) == 15\n```", "response_code": "\nassert func(12, 18) == 6\nassert func(15, 25) == 5\nassert func(20, 30) == 12\nassert func(36, 48) == 24\nassert func(50, 75) == 15\n"}
{"task_id": 75, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(x, y):\n    '''\n    Can you write a function to multiply two integers without using the * operator in python?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(2, 3) == 6\nassert func(5, 0) == 0\nassert func(-4, 7) == -28\nassert func(10, -2) == -20\nassert func(-3, -6) == 18\n```", "response_code": "\nassert func(2, 3) == 6\nassert func(5, 0) == 0\nassert func(-4, 7) == -28\nassert func(10, -2) == -20\nassert func(-3, -6) == 18\n"}
{"task_id": 76, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(n, str):\n    '''\n    Can you write a function to shortlist words that are longer than n from a given list of words?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5, [\"apple\", \"banana\", \"orange\", \"kiwi\", \"grape\"]) == [\"banana\", \"orange\"]\nassert func(4, [\"hello\", \"world\", \"python\", \"programming\"]) == [\"hello\", \"world\", \"python\", \"programming\"]\nassert func(6, [\"cat\", \"dog\", \"elephant\", \"giraffe\", \"lion\"]) == [\"elephant\", \"giraffe\"]\nassert func(3, [\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"]) == [\"ccc\", \"dddd\", \"eeeee\"]\nassert func(2, [\"word\", \"test\", \"check\", \"this\", \"out\"]) == [\"word\", \"test\", \"check\", \"this\"]\n```", "response_code": "\nassert func(5, [\"apple\", \"banana\", \"orange\", \"kiwi\", \"grape\"]) == [\"banana\", \"orange\"]\nassert func(4, [\"hello\", \"world\", \"python\", \"programming\"]) == [\"hello\", \"world\", \"python\", \"programming\"]\nassert func(6, [\"cat\", \"dog\", \"elephant\", \"giraffe\", \"lion\"]) == [\"elephant\", \"giraffe\"]\nassert func(3, [\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"]) == [\"ccc\", \"dddd\", \"eeeee\"]\nassert func(2, [\"word\", \"test\", \"check\", \"this\", \"out\"]) == [\"word\", \"test\", \"check\", \"this\"]\n"}
{"task_id": 77, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(my_matrix):\n    '''\n    Can you write a function to calculate a magic square?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test case 1: 3x3 magic square\nassert func([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == True\n\n# Test case 2: 3x3 non-magic square\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False\n\n# Test case 3: 4x4 magic square\nassert func([[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]) == True\n\n# Test case 4: 4x4 non-magic square\nassert func([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == False\n\n# Test case 5: 5x5 magic square\nassert func([[17, 24, 1, 8, 15], [23, 5, 7, 14, 16], [4, 6, 13, 20, 22], [10, 12, 19, 21, 3], [11, 18, 25, 2, 9]]) == True\n```", "response_code": "\n# Test case 1: 3x3 magic square\nassert func([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == True\n\n# Test case 2: 3x3 non-magic square\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False\n\n# Test case 3: 4x4 magic square\nassert func([[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]) == True\n\n# Test case 4: 4x4 non-magic square\nassert func([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == False\n\n# Test case 5: 5x5 magic square\nassert func([[17, 24, 1, 8, 15], [23, 5, 7, 14, 16], [4, 6, 13, 20, 22], [10, 12, 19, 21, 3], [11, 18, 25, 2, 9]]) == True\n"}
{"task_id": 78, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "from collections import defaultdict\ndef func(nums):\n    '''\n    Can you write a function to find the item with maximum frequency in a given list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == 4\nassert func([1, 1, 1, 2, 2, 3, 3, 3, 3, 3]) == 3\nassert func([1, 2, 3, 4, 5]) == 1\nassert func([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == 1\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1\n```", "response_code": "\n# Test cases\nassert func([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == 4\nassert func([1, 1, 1, 2, 2, 3, 3, 3, 3, 3]) == 3\nassert func([1, 2, 3, 4, 5]) == 1\nassert func([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == 1\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1\n"}
{"task_id": 79, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(str1):\n    '''\n    Can you write a python function to reverse only the vowels of a given string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == \"holle\"\nassert func(\"world\") == \"werld\"\nassert func(\"apple\") == \"eppla\"\nassert func(\"banana\") == \"bonana\"\nassert func(\"python\") == \"pythan\"\n```", "response_code": "\nassert func(\"hello\") == \"holle\"\nassert func(\"world\") == \"werld\"\nassert func(\"apple\") == \"eppla\"\nassert func(\"banana\") == \"bonana\"\nassert func(\"python\") == \"pythan\"\n"}
{"task_id": 80, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(tup1):\n    '''\n    Can you write a function to convert tuple to a string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(('a', 'b', 'c')) == 'abc'\nassert func(('hello', 'world')) == 'helloworld'\nassert func(('1', '2', '3')) == '123'\nassert func(('apple', 'banana', 'cherry')) == 'applebananacherry'\nassert func(('python', 'is', 'fun')) == 'pythonisfun'\n```", "response_code": "\nassert func(('a', 'b', 'c')) == 'abc'\nassert func(('hello', 'world')) == 'helloworld'\nassert func(('1', '2', '3')) == '123'\nassert func(('apple', 'banana', 'cherry')) == 'applebananacherry'\nassert func(('python', 'is', 'fun')) == 'pythonisfun'\n"}
{"task_id": 81, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(nums):\n    '''\n    Can you write a function to calculate the sum of the negative numbers of a given list of numbers using a lambda function?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([1, -2, 3, -4, 5]) == -6\nassert func([-1, -2, -3, -4, -5]) == -15\nassert func([0, 1, 2, 3, 4]) == 0\nassert func([-1, 0, 1, 0, -1]) == -2\nassert func([-5, -4, -3, -2, -1]) == -15\n```", "response_code": "\n# Test cases\nassert func([1, -2, 3, -4, 5]) == -6\nassert func([-1, -2, -3, -4, -5]) == -15\nassert func([0, 1, 2, 3, 4]) == 0\nassert func([-1, 0, 1, 0, -1]) == -2\nassert func([-5, -4, -3, -2, -1]) == -15\n"}
{"task_id": 82, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a function to find the nth hexagonal number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 6\nassert func(3) == 15\nassert func(4) == 28\nassert func(5) == 45\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 6\nassert func(3) == 15\nassert func(4) == 28\nassert func(5) == 45\n"}
{"task_id": 83, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "from array import array\ndef func(nums):\n    '''\n    Can you write a function to find the ratio of zeroes in an array of integers?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(array('i', [0, 0, 0, 0, 0])) == 1.0\nassert func(array('i', [1, 2, 3, 4, 5])) == 0.0\nassert func(array('i', [0, 1, 0, 1, 0])) == 0.6\nassert func(array('i', [0, 0, 1, 1, 1])) == 0.4\nassert func(array('i', [0, 0, 0, 1, 1])) == 0.6\n```", "response_code": "\nassert func(array('i', [0, 0, 0, 0, 0])) == 1.0\nassert func(array('i', [1, 2, 3, 4, 5])) == 0.0\nassert func(array('i', [0, 1, 0, 1, 0])) == 0.6\nassert func(array('i', [0, 0, 1, 1, 1])) == 0.4\nassert func(array('i', [0, 0, 0, 1, 1])) == 0.6\n"}
{"task_id": 84, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(6) == True\nassert func(10) == True\nassert func(15) == False\nassert func(18) == True\nassert func(20) == True\n```", "response_code": "\nassert func(6) == True\nassert func(10) == True\nassert func(15) == False\nassert func(18) == True\nassert func(20) == True\n"}
{"task_id": 85, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(r):\n    '''\n    Can you write a function to find the circumference of a circle?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 6.283185307179586\nassert func(2) == 12.566370614359172\nassert func(5) == 31.41592653589793\nassert func(10) == 62.83185307179586\nassert func(0) == 0\n```", "response_code": "\nassert func(1) == 6.283185307179586\nassert func(2) == 12.566370614359172\nassert func(5) == 31.41592653589793\nassert func(10) == 62.83185307179586\nassert func(0) == 0\n"}
{"task_id": 86, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Can you write a function to extract elements that occur singly in the given tuple list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([(1, 2), (2, 3), (3, 4), (4, 5)]) == [(1, 2), (3, 4), (4, 5)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]) == [(1, 2), (3, 4), (5, 6)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]) == [(1, 2), (3, 4), (5, 6), (6, 7)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)]) == [(1, 2), (3, 4), (5, 6), (7, 8)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)]) == [(1, 2), (3, 4), (5, 6), (7, 8), (8, 9)]\n```", "response_code": "\n# Test cases\nassert func([(1, 2), (2, 3), (3, 4), (4, 5)]) == [(1, 2), (3, 4), (4, 5)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]) == [(1, 2), (3, 4), (5, 6)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]) == [(1, 2), (3, 4), (5, 6), (6, 7)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)]) == [(1, 2), (3, 4), (5, 6), (7, 8)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)]) == [(1, 2), (3, 4), (5, 6), (7, 8), (8, 9)]\n"}
{"task_id": 87, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(nums):\n    '''\n    Can you write a function to sort a list of elements using pancake sort?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test Case 1: Sorting a list of integers in ascending order\nnums1 = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\nassert func(nums1) == sorted(nums1)\n\n# Test Case 2: Sorting a list of integers in descending order\nnums2 = [9, 8, 7, 6, 5, 4, 3, 2, 1]\nassert func(nums2) == sorted(nums2)\n\n# Test Case 3: Sorting a list of strings in ascending order\nnums3 = ['banana', 'apple', 'cherry', 'date', 'grape']\nassert func(nums3) == sorted(nums3)\n\n# Test Case 4: Sorting a list of strings in descending order\nnums4 = ['zebra', 'lion', 'elephant', 'tiger', 'giraffe']\nassert func(nums4) == sorted(nums4)\n\n# Test Case 5: Sorting an empty list\nnums5 = []\nassert func(nums5) == sorted(nums5)\n```", "response_code": "\n# Test Case 1: Sorting a list of integers in ascending order\nnums1 = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\nassert func(nums1) == sorted(nums1)\n\n# Test Case 2: Sorting a list of integers in descending order\nnums2 = [9, 8, 7, 6, 5, 4, 3, 2, 1]\nassert func(nums2) == sorted(nums2)\n\n# Test Case 3: Sorting a list of strings in ascending order\nnums3 = ['banana', 'apple', 'cherry', 'date', 'grape']\nassert func(nums3) == sorted(nums3)\n\n# Test Case 4: Sorting a list of strings in descending order\nnums4 = ['zebra', 'lion', 'elephant', 'tiger', 'giraffe']\nassert func(nums4) == sorted(nums4)\n\n# Test Case 5: Sorting an empty list\nnums5 = []\nassert func(nums5) == sorted(nums5)\n"}
{"task_id": 88, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(list1,list2,list3):\n    '''\n    Can you write a function to count the same pair in three given lists?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([1, 2, 3], [2, 3, 4], [3, 4, 5]) == 1\nassert func([1, 2, 3], [2, 3, 4], [3, 4, 5, 6]) == 1\nassert func([1, 2, 3], [2, 3, 4], [3, 4, 5, 6, 7]) == 1\nassert func([1, 2, 3], [2, 3, 4], [3, 4, 5, 6, 7, 8]) == 1\nassert func([1, 2, 3], [2, 3, 4], [3, 4, 5, 6, 7, 8, 9]) == 1\n```", "response_code": "\n# Test cases\nassert func([1, 2, 3], [2, 3, 4], [3, 4, 5]) == 1\nassert func([1, 2, 3], [2, 3, 4], [3, 4, 5, 6]) == 1\nassert func([1, 2, 3], [2, 3, 4], [3, 4, 5, 6, 7]) == 1\nassert func([1, 2, 3], [2, 3, 4], [3, 4, 5, 6, 7, 8]) == 1\nassert func([1, 2, 3], [2, 3, 4], [3, 4, 5, 6, 7, 8, 9]) == 1\n"}
{"task_id": 89, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(Input): \n    '''\n    Can you write a function to find the number of lists present in the given tuple?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(([], [], [])) == 3\nassert func(([1, 2], [3, 4])) == 2\nassert func(([], [1], [2], [3, 4])) == 4\nassert func(()) == 0\nassert func(([1, 2, 3],)) == 1\n```", "response_code": "\nassert func(([], [], [])) == 3\nassert func(([1, 2], [3, 4])) == 2\nassert func(([], [1], [2], [3, 4])) == 4\nassert func(()) == 0\nassert func(([1, 2, 3],)) == 1\n"}
{"task_id": 90, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(arr): \n    '''\n    Can you write a python function to find the maximum difference between any two elements in a given array?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 4\nassert func([5, 4, 3, 2, 1]) == 4\nassert func([1, 10, 3, 8, 5]) == 9\nassert func([5, 5, 5, 5, 5]) == 0\nassert func([-5, -3, 0, 2, 4]) == 9\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 4\nassert func([5, 4, 3, 2, 1]) == 4\nassert func([1, 10, 3, 8, 5]) == 9\nassert func([5, 5, 5, 5, 5]) == 0\nassert func([-5, -3, 0, 2, 4]) == 9\n"}
{"task_id": 91, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(a, b, n):\n    '''\n    Can you write a function to find x and y that satisfies ax + by = n?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(2, 3, 7) == (7, -3)\nassert func(4, 5, 18) == (18, -14)\nassert func(6, 8, 10) == (10, -7)\nassert func(3, 7, 11) == (11, -2)\nassert func(1, 1, 5) == (5, -5)\n```", "response_code": "\nassert func(2, 3, 7) == (7, -3)\nassert func(4, 5, 18) == (18, -14)\nassert func(6, 8, 10) == (10, -7)\nassert func(3, 7, 11) == (11, -2)\nassert func(1, 1, 5) == (5, -5)\n"}
{"task_id": 92, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(list1, list2):\n    '''\n    Can you write a function to remove all elements from a given list present in another list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]\nassert func([1, 2, 3, 4, 5], [6, 7, 8]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5], [1, 3, 5]) == [2, 4]\nassert func([1, 2, 3, 4, 5], []) == [1, 2, 3, 4, 5]\nassert func([], [1, 2, 3, 4, 5]) == []\n```", "response_code": "\n# Test cases\nassert func([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]\nassert func([1, 2, 3, 4, 5], [6, 7, 8]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5], [1, 3, 5]) == [2, 4]\nassert func([1, 2, 3, 4, 5], []) == [1, 2, 3, 4, 5]\nassert func([], [1, 2, 3, 4, 5]) == []\n"}
{"task_id": 93, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(n):\n    '''\n    Can you write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0)?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5) == 9\nassert func(10) == 25\nassert func(3) == 4\nassert func(7) == 16\nassert func(1) == 1\n```", "response_code": "\nassert func(5) == 9\nassert func(10) == 25\nassert func(3) == 4\nassert func(7) == 16\nassert func(1) == 1\n"}
{"task_id": 94, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "from math import tan, pi\ndef func(s, l):\n    '''\n    Can you write a function to calculate the area of a regular polygon?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 5) == 10.83\nassert func(4, 10) == 100.0\nassert func(5, 7) == 85.30\nassert func(6, 3) == 23.38\nassert func(8, 6) == 96.0\n```", "response_code": "\nassert func(3, 5) == 10.83\nassert func(4, 10) == 100.0\nassert func(5, 7) == 85.30\nassert func(6, 3) == 23.38\nassert func(8, 6) == 96.0\n"}
{"task_id": 95, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "import math \ndef func(n): \n    '''\n    Can you write a python function to check whether the sum of divisors are same or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(6) == True\nassert func(28) == True\nassert func(12) == False\nassert func(496) == True\nassert func(10) == False\n```", "response_code": "\nassert func(6) == True\nassert func(28) == True\nassert func(12) == False\nassert func(496) == True\nassert func(10) == False\n"}
{"task_id": 96, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(str1): \n    '''\n    Can you write a python function to count characters at the same position in a given string (lower and uppercase characters) as in the English alphabet?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"abc\") == 3\nassert func(\"aBc\") == 2\nassert func(\"aBcD\") == 2\nassert func(\"aBcDeF\") == 3\nassert func(\"aBcDeFgHiJ\") == 5\n```", "response_code": "\nassert func(\"abc\") == 3\nassert func(\"aBc\") == 2\nassert func(\"aBcD\") == 2\nassert func(\"aBcDeF\") == 3\nassert func(\"aBcDeFgHiJ\") == 5\n"}
{"task_id": 97, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(A): \n    '''\n    Can you write a python function to count the pairs with xor as an even number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 4\nassert func([2, 4, 6, 8, 10]) == 10\nassert func([1, 3, 5, 7, 9]) == 0\nassert func([0, 0, 0, 0, 0]) == 10\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 20\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 4\nassert func([2, 4, 6, 8, 10]) == 10\nassert func([1, 3, 5, 7, 9]) == 0\nassert func([0, 0, 0, 0, 0]) == 10\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 20\n"}
{"task_id": 98, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a python function to find the smallest power of 2 greater than or equal to n?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5) == 8\nassert func(10) == 16\nassert func(20) == 32\nassert func(50) == 64\nassert func(100) == 128\n```", "response_code": "\nassert func(5) == 8\nassert func(10) == 16\nassert func(20) == 32\nassert func(50) == 64\nassert func(100) == 128\n"}
{"task_id": 99, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases."}, {"role": "user", "content": "def func(a,x): \n    '''\n    Can you write a python function to find the frequency of a number in a given array?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 2, 2, 3, 1], 2) == 3\nassert func([5, 5, 5, 5, 5], 5) == 5\nassert func([1, 2, 3, 4, 5], 6) == 0\nassert func([1, 1, 1, 1, 1], 1) == 5\nassert func([], 10) == 0\n```", "response_code": "\nassert func([1, 2, 3, 4, 2, 2, 3, 1], 2) == 3\nassert func([5, 5, 5, 5, 5], 5) == 5\nassert func([1, 2, 3, 4, 5], 6) == 0\nassert func([1, 1, 1, 1, 1], 1) == 5\nassert func([], 10) == 0\n"}
