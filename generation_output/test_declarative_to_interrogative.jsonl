{"task_id": 0, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Can you write a function to find the similar elements from the given two tuple lists?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (2, 3, 4)) == (2, 3)\nassert func(('a', 'b', 'c'), ('b', 'c', 'd')) == ('b', 'c')\nassert func((1, 2, 3), (4, 5, 6)) == ()\nassert func(('apple', 'banana', 'cherry'), ('banana', 'cherry', 'date')) == ('banana', 'cherry')\nassert func((), ()) == ()\n```", "response_code": "\nassert func((1, 2, 3), (2, 3, 4)) == (2, 3)\nassert func(('a', 'b', 'c'), ('b', 'c', 'd')) == ('b', 'c')\nassert func((1, 2, 3), (4, 5, 6)) == ()\nassert func(('apple', 'banana', 'cherry'), ('banana', 'cherry', 'date')) == ('banana', 'cherry')\nassert func((), ()) == ()\n"}
{"task_id": 1, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(n):\n    '''\n    Can you write a python function to identify non-prime numbers?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == False\nassert func(2) == False\nassert func(3) == False\nassert func(4) == True\nassert func(9) == True\n```", "response_code": "\nassert func(1) == False\nassert func(2) == False\nassert func(3) == False\nassert func(4) == True\nassert func(9) == True\n"}
{"task_id": 2, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import heapq as hq\ndef func(nums,n):\n    '''\n    Can you write a function to find the largest integers from a given list of numbers using the heap queue algorithm?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([3, 7, 2, 8, 5], 3) == [8, 7, 5]\nassert func([10, 20, 30, 40, 50], 2) == [50, 40]\nassert func([5, 5, 5, 5, 5], 1) == [5]\nassert func([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\nassert func([9, 8, 7, 6, 5], 4) == [9, 8, 7, 6]\n```", "response_code": "\nassert func([3, 7, 2, 8, 5], 3) == [8, 7, 5]\nassert func([10, 20, 30, 40, 50], 2) == [50, 40]\nassert func([5, 5, 5, 5, 5], 1) == [5]\nassert func([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\nassert func([9, 8, 7, 6, 5], 4) == [9, 8, 7, 6]\n"}
{"task_id": 3, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x): \n    '''\n    Can you write a python function to check whether the two numbers differ at one bit position only or not?\n    '''\n    pass\n\n# check the correctness of func \nassert "}], "response": "assert func(2, 3) == True\nassert func(5, 7) == True\nassert func(1, 2) == False\nassert func(0, 15) == False\nassert func(8, 9) == True", "response_code": "assert func(2, 3) == True\nassert func(5, 7) == True\nassert func(1, 2) == False\nassert func(0, 15) == False\nassert func(8, 9) == True"}
{"task_id": 4, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Can you write a function to find all words which are at least 4 characters long in a string by using regex?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello, this is a test\") == ['Hello', 'this', 'test']\nassert func(\"Python is a great programming language\") == ['Python', 'great', 'programming', 'language']\nassert func(\"1234 abcd efgh 5678\") == ['1234', 'abcd', 'efgh', '5678']\nassert func(\"Short words like 'cat' and 'dog'\") == ['Short', 'words', 'like', 'cat', 'dog']\nassert func(\"Only one longword\") == ['longword']\n```", "response_code": "\nassert func(\"Hello, this is a test\") == ['Hello', 'this', 'test']\nassert func(\"Python is a great programming language\") == ['Python', 'great', 'programming', 'language']\nassert func(\"1234 abcd efgh 5678\") == ['1234', 'abcd', 'efgh', '5678']\nassert func(\"Short words like 'cat' and 'dog'\") == ['Short', 'words', 'like', 'cat', 'dog']\nassert func(\"Only one longword\") == ['longword']\n"}
{"task_id": 5, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Can you write a function to find squares of individual elements in a list using a lambda function?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\nassert func([0, -1, 2, -3, 4]) == [0, 1, 4, 9, 16]\nassert func([5, 10, 15, 20, 25]) == [25, 100, 225, 400, 625]\nassert func([-2, -4, -6, -8, -10]) == [4, 16, 36, 64, 100]\nassert func([0.5, 1.5, 2.5, 3.5, 4.5]) == [0.25, 2.25, 6.25, 12.25, 20.25]\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\nassert func([0, -1, 2, -3, 4]) == [0, 1, 4, 9, 16]\nassert func([5, 10, 15, 20, 25]) == [25, 100, 225, 400, 625]\nassert func([-2, -4, -6, -8, -10]) == [4, 16, 36, 64, 100]\nassert func([0.5, 1.5, 2.5, 3.5, 4.5]) == [0.25, 2.25, 6.25, 12.25, 20.25]\n"}
{"task_id": 6, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str): \n    '''\n    Can you write a python function to find the minimum number of rotations required to get the same string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == 5\nassert func(\"racecar\") == 7\nassert func(\"python\") == 6\nassert func(\"level\") == 5\nassert func(\"rotor\") == 5\n```", "response_code": "\nassert func(\"hello\") == 5\nassert func(\"racecar\") == 7\nassert func(\"python\") == 6\nassert func(\"level\") == 5\nassert func(\"rotor\") == 5\n"}
{"task_id": 7, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(s,ch): \n    '''\n    Can you write a python function to remove the first and last occurrence of a given character from the string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello world\", \"o\") == \"hell world\"\nassert func(\"banana\", \"a\") == \"bnn\"\nassert func(\"racecar\", \"r\") == \"aceca\"\nassert func(\"programming\", \"m\") == \"prograing\"\nassert func(\"apple\", \"p\") == \"ale\"\n```", "response_code": "\nassert func(\"hello world\", \"o\") == \"hell world\"\nassert func(\"banana\", \"a\") == \"bnn\"\nassert func(\"racecar\", \"r\") == \"aceca\"\nassert func(\"programming\", \"m\") == \"prograing\"\nassert func(\"apple\", \"p\") == \"ale\"\n"}
{"task_id": 8, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(M):\n    '''\n    Can you write a function to sort a given matrix in ascending order according to the sum of its rows?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert func([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\nassert func([[5, 2, 3], [1, 5, 6], [7, 8, 4]]) == [[5, 2, 3], [7, 8, 4], [1, 5, 6]]\nassert func([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == [[1, 1, 1], [2, 2, 2], [3, 3, 3]]\nassert func([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert func([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\nassert func([[5, 2, 3], [1, 5, 6], [7, 8, 4]]) == [[5, 2, 3], [7, 8, 4], [1, 5, 6]]\nassert func([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == [[1, 1, 1], [2, 2, 2], [3, 3, 3]]\nassert func([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\n"}
{"task_id": 9, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l,b,h) : \n    '''\n    Can you write a python function to find the volume of a triangular prism?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 4, 5) == 30\nassert func(6, 8, 10) == 240\nassert func(1, 1, 1) == 0.4330127018922193\nassert func(0, 0, 0) == 0\nassert func(10, 10, 10) == 433.0127018922193\n```", "response_code": "\nassert func(3, 4, 5) == 30\nassert func(6, 8, 10) == 240\nassert func(1, 1, 1) == 0.4330127018922193\nassert func(0, 0, 0) == 0\nassert func(10, 10, 10) == 433.0127018922193\n"}
{"task_id": 10, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Can you write a function to find sequences of lowercase letters joined with an underscore?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello_world\") == [\"hello_world\"]\nassert func(\"python_is_cool\") == [\"python_is_cool\"]\nassert func(\"abc_def_ghi\") == [\"abc_def_ghi\"]\nassert func(\"this_is_a_test\") == [\"this_is_a_test\"]\nassert func(\"no_match_here\") == []\n```", "response_code": "\nassert func(\"hello_world\") == [\"hello_world\"]\nassert func(\"python_is_cool\") == [\"python_is_cool\"]\nassert func(\"abc_def_ghi\") == [\"abc_def_ghi\"]\nassert func(\"this_is_a_test\") == [\"this_is_a_test\"]\nassert func(\"no_match_here\") == []\n"}
{"task_id": 11, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a):\n    '''\n    Can you write a function to find the perimeter of a square?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(0) == 0\nassert func(1) == 4\nassert func(5) == 20\nassert func(10) == 40\nassert func(100) == 400", "response_code": "assert func(0) == 0\nassert func(1) == 4\nassert func(5) == 20\nassert func(10) == 40\nassert func(100) == 400"}
{"task_id": 12, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "NO_OF_CHARS = 256\ndef func(string): \n    '''\n    Can you write a function to remove characters from the first string which are present in the second string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\", \"world\") == \"he\"\nassert func(\"apple\", \"pear\") == \"apple\"\nassert func(\"python\", \"java\") == \"python\"\nassert func(\"hello\", \"h\") == \"ello\"\nassert func(\"goodbye\", \"good\") == \"bye\"", "response_code": "assert func(\"hello\", \"world\") == \"he\"\nassert func(\"apple\", \"pear\") == \"apple\"\nassert func(\"python\", \"java\") == \"python\"\nassert func(\"hello\", \"h\") == \"ello\"\nassert func(\"goodbye\", \"good\") == \"bye\""}
{"task_id": 13, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arraynums):\n    '''\n    Can you write a function to find whether a given array of integers contains any duplicate element?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == False\nassert func([1, 2, 3, 4, 1]) == True\nassert func([5, 4, 3, 2, 1]) == False\nassert func([1, 1, 1, 1, 1]) == True\nassert func([1, 2, 3, 4, 5, 5]) == True", "response_code": "assert func([1, 2, 3, 4, 5]) == False\nassert func([1, 2, 3, 4, 1]) == True\nassert func([5, 4, 3, 2, 1]) == False\nassert func([1, 1, 1, 1, 1]) == True\nassert func([1, 2, 3, 4, 5, 5]) == True"}
{"task_id": 14, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x): \n    '''\n    Can you write a function to check if the given number is woodball or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(7) == True\nassert func(10) == False\nassert func(15) == False\nassert func(21) == True\nassert func(28) == True", "response_code": "assert func(7) == True\nassert func(10) == False\nassert func(15) == False\nassert func(21) == True\nassert func(28) == True"}
{"task_id": 15, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(num):    \n    '''\n    Can you write a python function to check if a given number is one less than twice its reverse?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(19) == True\nassert func(25) == False\nassert func(36) == True\nassert func(47) == False\nassert func(58) == True\n```", "response_code": "\nassert func(19) == True\nassert func(25) == False\nassert func(36) == True\nassert func(47) == False\nassert func(58) == True\n"}
{"task_id": 16, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr) : \n    '''\n    Can you write a python function to find the largest number that can be formed with the given digits?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([3, 1, 4, 2]) == 4321\nassert func([9, 5, 2, 7, 1]) == 97521\nassert func([0, 0, 0, 0]) == 0\nassert func([8, 6, 7, 5, 3, 0, 9]) == 9876530\nassert func([2, 2, 2, 2, 2]) == 22222\n```", "response_code": "\nassert func([3, 1, 4, 2]) == 4321\nassert func([9, 5, 2, 7, 1]) == 97521\nassert func([0, 0, 0, 0]) == 0\nassert func([8, 6, 7, 5, 3, 0, 9]) == 9876530\nassert func([2, 2, 2, 2, 2]) == 22222\n"}
{"task_id": 17, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x,y): \n    '''\n    Can you write a python function to check whether the given two integers have opposite sign or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(5, -3) == True\nassert func(-2, 8) == True\nassert func(0, 0) == False\nassert func(-10, -5) == False\nassert func(3, 3) == False", "response_code": "assert func(5, -3) == True\nassert func(-2, 8) == True\nassert func(0, 0) == False\nassert func(-10, -5) == False\nassert func(3, 3) == False"}
{"task_id": 18, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a function to find the nth octagonal number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 8\nassert func(5) == 40\nassert func(10) == 82\nassert func(15) == 130\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 8\nassert func(5) == 40\nassert func(10) == 82\nassert func(15) == 130\n"}
{"task_id": 19, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from collections import defaultdict\ndef func(s):\n    '''\n    Can you write a python function to count the number of substrings with the sum of digits equal to their length?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"123\") == 1\nassert func(\"1234\") == 4\nassert func(\"111\") == 6\nassert func(\"12345\") == 6\nassert func(\"987654321\") == 9\n```", "response_code": "\nassert func(\"123\") == 1\nassert func(\"1234\") == 4\nassert func(\"111\") == 6\nassert func(\"12345\") == 6\nassert func(\"987654321\") == 9\n"}
{"task_id": 20, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(xs):\n    '''\n    Can you write a python function to find the smallest number in a list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([3, 5, 1, 7, 2]) == 1\nassert func([10, 20, 30, 40, 50]) == 10\nassert func([5, 4, 3, 2, 1]) == 1\nassert func([100, 200, 300, 400, 500]) == 100\nassert func([7, 7, 7, 7, 7]) == 7", "response_code": "assert func([3, 5, 1, 7, 2]) == 1\nassert func([10, 20, 30, 40, 50]) == 10\nassert func([5, 4, 3, 2, 1]) == 1\nassert func([100, 200, 300, 400, 500]) == 100\nassert func([7, 7, 7, 7, 7]) == 7"}
{"task_id": 21, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Can you write a function to find the maximum difference between available pairs in the given tuple list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([(1, 2), (3, 4), (5, 6)]) == 5\nassert func([(10, 20), (30, 40), (50, 60)]) == 50\nassert func([(100, 200), (300, 400), (500, 600)]) == 500\nassert func([(5, 10), (15, 20), (25, 30)]) == 25\nassert func([(2, 8), (12, 18), (22, 28)]) == 20", "response_code": "assert func([(1, 2), (3, 4), (5, 6)]) == 5\nassert func([(10, 20), (30, 40), (50, 60)]) == 50\nassert func([(100, 200), (300, 400), (500, 600)]) == 500\nassert func([(5, 10), (15, 20), (25, 30)]) == 25\nassert func([(2, 8), (12, 18), (22, 28)]) == 20"}
{"task_id": 22, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(subjectmarks):\n    '''\n    Can you write a function to sort a list of tuples using lambda?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test Case 1\nassert func([(80, 'Math'), (70, 'Science'), (90, 'English')]) == [(70, 'Science'), (80, 'Math'), (90, 'English')]\n\n# Test Case 2\nassert func([(60, 'History'), (75, 'Geography'), (65, 'Art')]) == [(60, 'History'), (65, 'Art'), (75, 'Geography')]\n\n# Test Case 3\nassert func([(95, 'Physics'), (85, 'Chemistry'), (100, 'Biology')]) == [(85, 'Chemistry'), (95, 'Physics'), (100, 'Biology')]\n\n# Test Case 4\nassert func([(50, 'Music'), (55, 'Dance'), (45, 'Drama')]) == [(45, 'Drama'), (50, 'Music'), (55, 'Dance')]\n\n# Test Case 5\nassert func([(70, 'Computer Science'), (80, 'Physical Education'), (75, 'Health')]) == [(70, 'Computer Science'), (75, 'Health'), (80, 'Physical Education')]\n```", "response_code": "\n# Test Case 1\nassert func([(80, 'Math'), (70, 'Science'), (90, 'English')]) == [(70, 'Science'), (80, 'Math'), (90, 'English')]\n\n# Test Case 2\nassert func([(60, 'History'), (75, 'Geography'), (65, 'Art')]) == [(60, 'History'), (65, 'Art'), (75, 'Geography')]\n\n# Test Case 3\nassert func([(95, 'Physics'), (85, 'Chemistry'), (100, 'Biology')]) == [(85, 'Chemistry'), (95, 'Physics'), (100, 'Biology')]\n\n# Test Case 4\nassert func([(50, 'Music'), (55, 'Dance'), (45, 'Drama')]) == [(45, 'Drama'), (50, 'Music'), (55, 'Dance')]\n\n# Test Case 5\nassert func([(70, 'Computer Science'), (80, 'Physical Education'), (75, 'Health')]) == [(70, 'Computer Science'), (75, 'Health'), (80, 'Physical Education')]\n"}
{"task_id": 23, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(data_list):\n    '''\n    Can you write a function of recursion list sum?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 15\nassert func([10, 20, 30]) == 60\nassert func([5, 10, 15, 20]) == 50\nassert func([2, 4, 6, 8, 10]) == 30\nassert func([3, 6, 9, 12, 15, 18]) == 63\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 15\nassert func([10, 20, 30]) == 60\nassert func([5, 10, 15, 20]) == 50\nassert func([2, 4, 6, 8, 10]) == 30\nassert func([3, 6, 9, 12, 15, 18]) == 63\n"}
{"task_id": 24, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list):\n    '''\n    Can you write a python function to count positive numbers in a list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == 5\nassert func([-1, -2, -3, -4, -5]) == 0\nassert func([0, 1, -1, 2, -2]) == 2\nassert func([10, -10, 20, -20, 30]) == 3\nassert func([]) == 0", "response_code": "assert func([1, 2, 3, 4, 5]) == 5\nassert func([-1, -2, -3, -4, -5]) == 0\nassert func([0, 1, -1, 2, -2]) == 2\nassert func([10, -10, 20, -20, 30]) == 3\nassert func([]) == 0"}
{"task_id": 25, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):   \n    '''\n    Can you write a function to find the number of ways to partition a set of bell numbers?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(0) == 1\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 5\nassert func(4) == 15", "response_code": "assert func(0) == 1\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 5\nassert func(4) == 15"}
{"task_id": 26, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(A): \n    '''\n    Can you write a python function to check whether the given array is monotonic or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == True\nassert func([5, 4, 3, 2, 1]) == True\nassert func([1, 3, 2, 4, 5]) == False\nassert func([1, 1, 1, 1, 1]) == True\nassert func([1, 2, 2, 3, 4]) == True", "response_code": "assert func([1, 2, 3, 4, 5]) == True\nassert func([5, 4, 3, 2, 1]) == True\nassert func([1, 3, 2, 4, 5]) == False\nassert func([1, 1, 1, 1, 1]) == True\nassert func([1, 2, 2, 3, 4]) == True"}
{"task_id": 27, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l, s):\n    '''\n    Can you write a function to check whether a list contains the given sublist or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], [2, 3]) == True\nassert func([1, 2, 3, 4, 5], [4, 6]) == False\nassert func([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\nassert func([1, 2, 3, 4, 5], [5, 4, 3]) == False\nassert func([1, 2, 3, 4, 5], [6]) == False\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], [2, 3]) == True\nassert func([1, 2, 3, 4, 5], [4, 6]) == False\nassert func([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\nassert func([1, 2, 3, 4, 5], [5, 4, 3]) == False\nassert func([1, 2, 3, 4, 5], [6]) == False\n"}
{"task_id": 28, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(Input):\n    '''\n    Can you write a function to find whether all the given tuples have equal length or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([(1, 2), (3, 4), (5, 6)]) == True\nassert func([(1, 2, 3), (4, 5), (6, 7, 8)]) == False\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == True\nassert func([(1,), (2,), (3,)]) == True\nassert func([]) == True", "response_code": "assert func([(1, 2), (3, 4), (5, 6)]) == True\nassert func([(1, 2, 3), (4, 5), (6, 7, 8)]) == False\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == True\nassert func([(1,), (2,), (3,)]) == True\nassert func([]) == True"}
{"task_id": 29, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Can you write a function to sort a list of elements using comb sort?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([4, 2, 7, 1, 5]) == [1, 2, 4, 5, 7]\nassert func([9, 3, 6, 2, 8, 1, 5, 7, 4]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert func([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1]) == [1]\n```", "response_code": "\nassert func([4, 2, 7, 1, 5]) == [1, 2, 4, 5, 7]\nassert func([9, 3, 6, 2, 8, 1, 5, 7, 4]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert func([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1]) == [1]\n"}
{"task_id": 30, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a python function to check whether the given number can be represented as difference of two squares or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(10) == True\nassert func(25) == True\nassert func(7) == False\nassert func(15) == False\nassert func(36) == True", "response_code": "assert func(10) == True\nassert func(25) == True\nassert func(7) == False\nassert func(15) == False\nassert func(36) == True"}
{"task_id": 31, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(colors, patterns):    \n    '''\n    Can you write a function to check whether it follows the sequence given in the patterns array?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['red', 'blue', 'green'], ['A', 'B', 'C']) == True\nassert func(['red', 'blue', 'green'], ['A', 'B', 'A']) == False\nassert func(['red', 'blue', 'green'], ['X', 'Y', 'Z']) == True\nassert func(['red', 'blue', 'green'], ['X', 'Y', 'X']) == False\nassert func(['red', 'blue', 'green'], ['A', 'B', 'C', 'D']) == False\n```", "response_code": "\nassert func(['red', 'blue', 'green'], ['A', 'B', 'C']) == True\nassert func(['red', 'blue', 'green'], ['A', 'B', 'A']) == False\nassert func(['red', 'blue', 'green'], ['X', 'Y', 'Z']) == True\nassert func(['red', 'blue', 'green'], ['X', 'Y', 'X']) == False\nassert func(['red', 'blue', 'green'], ['A', 'B', 'C', 'D']) == False\n"}
{"task_id": 32, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list, K):\n    '''\n    Can you write a function to find tuples which have all elements divisible by k from the given list of tuples?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == [(4, 5, 6)]\nassert func([(10, 20, 30), (40, 50, 60), (70, 80, 90)], 10) == [(10, 20, 30), (40, 50, 60), (70, 80, 90)]\nassert func([(3, 6, 9), (12, 15, 18), (21, 24, 27)], 3) == [(3, 6, 9), (12, 15, 18), (21, 24, 27)]\nassert func([(2, 4, 6), (8, 10, 12), (14, 16, 18)], 2) == [(2, 4, 6), (8, 10, 12), (14, 16, 18)]\nassert func([(5, 10, 15), (20, 25, 30), (35, 40, 45)], 5) == [(5, 10, 15), (20, 25, 30), (35, 40, 45)]\n```", "response_code": "\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == [(4, 5, 6)]\nassert func([(10, 20, 30), (40, 50, 60), (70, 80, 90)], 10) == [(10, 20, 30), (40, 50, 60), (70, 80, 90)]\nassert func([(3, 6, 9), (12, 15, 18), (21, 24, 27)], 3) == [(3, 6, 9), (12, 15, 18), (21, 24, 27)]\nassert func([(2, 4, 6), (8, 10, 12), (14, 16, 18)], 2) == [(2, 4, 6), (8, 10, 12), (14, 16, 18)]\nassert func([(5, 10, 15), (20, 25, 30), (35, 40, 45)], 5) == [(5, 10, 15), (20, 25, 30), (35, 40, 45)]\n"}
{"task_id": 33, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a python function to find the difference between sum of even and odd digits?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1234) == 2\nassert func(2468) == 8\nassert func(13579) == -10\nassert func(1111) == 0\nassert func(987654321) == 0", "response_code": "assert func(1234) == 2\nassert func(2468) == 8\nassert func(13579) == -10\nassert func(1111) == 0\nassert func(987654321) == 0"}
{"task_id": 34, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(s): \n    '''\n    Can you write a python function to check whether the length of the word is odd or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\") == True\nassert func(\"world\") == True\nassert func(\"python\") == False\nassert func(\"programming\") == False\nassert func(\"test\") == True", "response_code": "assert func(\"hello\") == True\nassert func(\"world\") == True\nassert func(\"python\") == False\nassert func(\"programming\") == False\nassert func(\"test\") == True"}
{"task_id": 35, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a function to find the nth tetrahedral number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 1\nassert func(2) == 4\nassert func(3) == 10\nassert func(4) == 20\nassert func(5) == 35", "response_code": "assert func(1) == 1\nassert func(2) == 4\nassert func(3) == 10\nassert func(4) == 20\nassert func(5) == 35"}
{"task_id": 36, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(r):\n    '''\n    Can you write a function to find the volume of a sphere?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == (4/3) * math.pi\nassert func(2) == (4/3) * math.pi * 2**3\nassert func(0) == 0\nassert func(5) == (4/3) * math.pi * 5**3\nassert func(10) == (4/3) * math.pi * 10**3\n```", "response_code": "\nassert func(1) == (4/3) * math.pi\nassert func(2) == (4/3) * math.pi * 2**3\nassert func(0) == 0\nassert func(5) == (4/3) * math.pi * 5**3\nassert func(10) == (4/3) * math.pi * 10**3\n"}
{"task_id": 37, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(strr):  \n    '''\n    Can you write a python function to find the character made by adding all the characters of the given string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"abc\") == 'c'\nassert func(\"hello\") == 'o'\nassert func(\"12345\") == '5'\nassert func(\"python\") == 'n'\nassert func(\"racecar\") == 'r'\n```", "response_code": "\nassert func(\"abc\") == 'c'\nassert func(\"hello\") == 'o'\nassert func(\"12345\") == '5'\nassert func(\"python\") == 'n'\nassert func(\"racecar\") == 'r'\n"}
{"task_id": 38, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a function to find the n-th number in the Newman Conway sequence?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 1\nassert func(3) == 2\nassert func(4) == 2\nassert func(5) == 3\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 1\nassert func(3) == 2\nassert func(4) == 2\nassert func(5) == 3\n"}
{"task_id": 39, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(r):\n    '''\n    Can you write a function to find the surface area of a sphere?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 4 * math.pi  # radius = 1\nassert func(2) == 4 * math.pi * 4  # radius = 2\nassert func(0) == 0  # radius = 0\nassert func(5) == 4 * math.pi * 25  # radius = 5\nassert func(10) == 4 * math.pi * 100  # radius = 10\n```", "response_code": "\nassert func(1) == 4 * math.pi  # radius = 1\nassert func(2) == 4 * math.pi * 4  # radius = 2\nassert func(0) == 0  # radius = 0\nassert func(5) == 4 * math.pi * 25  # radius = 5\nassert func(10) == 4 * math.pi * 100  # radius = 10\n"}
{"task_id": 40, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    Can you write a function to find the nth centered hexagonal number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 1\nassert func(2) == 7\nassert func(3) == 19\nassert func(4) == 37\nassert func(5) == 61", "response_code": "assert func(1) == 1\nassert func(2) == 7\nassert func(3) == 19\nassert func(4) == 37\nassert func(5) == 61"}
{"task_id": 41, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import collections as ct\ndef func(dict1,dict2, dict3):\n    '''\n    Can you write a function to merge three dictionaries into a single expression?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'b': 3, 'c': 4}\ndict3 = {'d': 5}\n\nassert func(dict1, dict2, dict3) == {'a': 1, 'b': 3, 'c': 4, 'd': 5}\n\ndict1 = {'x': 10, 'y': 20}\ndict2 = {'y': 30, 'z': 40}\ndict3 = {'w': 50}\n\nassert func(dict1, dict2, dict3) == {'x': 10, 'y': 30, 'z': 40, 'w': 50}\n\ndict1 = {'apple': 1, 'banana': 2}\ndict2 = {'banana': 3, 'cherry': 4}\ndict3 = {'date': 5}\n\nassert func(dict1, dict2, dict3) == {'apple': 1, 'banana': 3, 'cherry': 4, 'date': 5}\n\ndict1 = {'red': 10, 'green': 20}\ndict2 = {'green': 30, 'blue': 40}\ndict3 = {'yellow': 50}\n\nassert func(dict1, dict2, dict3) == {'red': 10, 'green': 30, 'blue': 40, 'yellow': 50}\n\ndict1 = {'dog': 1, 'cat': 2}\ndict2 = {'cat': 3, 'bird': 4}\ndict3 = {'fish': 5}\n\nassert func(dict1, dict2, dict3) == {'dog': 1, 'cat': 3, 'bird': 4, 'fish': 5}\n```", "response_code": "\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'b': 3, 'c': 4}\ndict3 = {'d': 5}\n\nassert func(dict1, dict2, dict3) == {'a': 1, 'b': 3, 'c': 4, 'd': 5}\n\ndict1 = {'x': 10, 'y': 20}\ndict2 = {'y': 30, 'z': 40}\ndict3 = {'w': 50}\n\nassert func(dict1, dict2, dict3) == {'x': 10, 'y': 30, 'z': 40, 'w': 50}\n\ndict1 = {'apple': 1, 'banana': 2}\ndict2 = {'banana': 3, 'cherry': 4}\ndict3 = {'date': 5}\n\nassert func(dict1, dict2, dict3) == {'apple': 1, 'banana': 3, 'cherry': 4, 'date': 5}\n\ndict1 = {'red': 10, 'green': 20}\ndict2 = {'green': 30, 'blue': 40}\ndict3 = {'yellow': 50}\n\nassert func(dict1, dict2, dict3) == {'red': 10, 'green': 30, 'blue': 40, 'yellow': 50}\n\ndict1 = {'dog': 1, 'cat': 2}\ndict2 = {'cat': 3, 'bird': 4}\ndict3 = {'fish': 5}\n\nassert func(dict1, dict2, dict3) == {'dog': 1, 'cat': 3, 'bird': 4, 'fish': 5}\n"}
{"task_id": 42, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import collections\ndef func(list1):\n    '''\n    Can you write a function to get the frequency of the elements in a list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 2, 3, 3, 3]) == {1: 1, 2: 2, 3: 3}\nassert func([1, 1, 1, 1, 1]) == {1: 5}\nassert func([4, 4, 4, 4, 5, 5, 5, 6]) == {4: 4, 5: 3, 6: 1}\nassert func([7, 8, 9, 10]) == {7: 1, 8: 1, 9: 1, 10: 1}\nassert func([]) == {}\n```", "response_code": "\nassert func([1, 2, 2, 3, 3, 3]) == {1: 1, 2: 2, 3: 3}\nassert func([1, 1, 1, 1, 1]) == {1: 5}\nassert func([4, 4, 4, 4, 5, 5, 5, 6]) == {4: 4, 5: 3, 6: 1}\nassert func([7, 8, 9, 10]) == {7: 1, 8: 1, 9: 1, 10: 1}\nassert func([]) == {}\n"}
{"task_id": 43, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(N):\n    '''\n    Can you write a function to find the closest smaller number than n?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(5) == 4\nassert func(10) == 9\nassert func(20) == 19\nassert func(0) == -1\nassert func(100) == 99", "response_code": "assert func(5) == 4\nassert func(10) == 9\nassert func(20) == 19\nassert func(0) == -1\nassert func(100) == 99"}
{"task_id": 44, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Can you write a python function to find the length of the longest word?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([\"apple\", \"banana\", \"cherry\"]) == 6\nassert func([\"hello\", \"world\"]) == 5\nassert func([\"python\", \"programming\", \"language\"]) == 11\nassert func([\"data\", \"science\", \"machine\", \"learning\"]) == 8\nassert func([\"a\", \"bb\", \"ccc\", \"dddd\"]) == 4", "response_code": "assert func([\"apple\", \"banana\", \"cherry\"]) == 6\nassert func([\"hello\", \"world\"]) == 5\nassert func([\"python\", \"programming\", \"language\"]) == 11\nassert func([\"data\", \"science\", \"machine\", \"learning\"]) == 8\nassert func([\"a\", \"bb\", \"ccc\", \"dddd\"]) == 4"}
{"task_id": 45, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1, sub_str):\n    '''\n    Can you write a function to check if a substring is present in a given list of string values?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['apple', 'banana', 'cherry'], 'banana') == True\nassert func(['apple', 'banana', 'cherry'], 'orange') == False\nassert func(['hello', 'world', 'python'], 'world') == True\nassert func(['hello', 'world', 'python'], 'java') == False\nassert func(['cat', 'dog', 'rabbit'], 'rabbit') == True\n```", "response_code": "\nassert func(['apple', 'banana', 'cherry'], 'banana') == True\nassert func(['apple', 'banana', 'cherry'], 'orange') == False\nassert func(['hello', 'world', 'python'], 'world') == True\nassert func(['hello', 'world', 'python'], 'java') == False\nassert func(['cat', 'dog', 'rabbit'], 'rabbit') == True\n"}
{"task_id": 46, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a function to check whether the given number is undulating or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(121) == True\nassert func(10101) == True\nassert func(12321) == True\nassert func(123) == False\nassert func(111) == False", "response_code": "assert func(121) == True\nassert func(10101) == True\nassert func(12321) == True\nassert func(123) == False\nassert func(111) == False"}
{"task_id": 47, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a,b):\n    '''\n    Can you write a function to calculate the value of 'a' to the power 'b'?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(2, 3) == 8\nassert func(5, 2) == 25\nassert func(0, 5) == 0\nassert func(3, 0) == 1\nassert func(4, -2) == 0.0625\n```", "response_code": "\nassert func(2, 3) == 8\nassert func(5, 2) == 25\nassert func(0, 5) == 0\nassert func(3, 0) == 1\nassert func(4, -2) == 0.0625\n"}
{"task_id": 48, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from operator import itemgetter \ndef func(test_list):\n    '''\n    Can you write a function to extract the index minimum value record from the given tuples?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 'apple'), (2, 'banana'), (3, 'cherry')]) == (0, 'apple')\nassert func([(5, 'kiwi'), (3, 'orange'), (7, 'grape')]) == (1, 'orange')\nassert func([(10, 'pear'), (8, 'melon'), (12, 'strawberry')]) == (1, 'melon')\nassert func([(4, 'peach'), (4, 'plum'), (4, 'apricot')]) == (0, 'peach')\nassert func([(0, 'blueberry'), (0, 'raspberry'), (0, 'blackberry')]) == (0, 'blueberry')\n```", "response_code": "\nassert func([(1, 'apple'), (2, 'banana'), (3, 'cherry')]) == (0, 'apple')\nassert func([(5, 'kiwi'), (3, 'orange'), (7, 'grape')]) == (1, 'orange')\nassert func([(10, 'pear'), (8, 'melon'), (12, 'strawberry')]) == (1, 'melon')\nassert func([(4, 'peach'), (4, 'plum'), (4, 'apricot')]) == (0, 'peach')\nassert func([(0, 'blueberry'), (0, 'raspberry'), (0, 'blackberry')]) == (0, 'blueberry')\n"}
{"task_id": 49, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lst):  \n    '''\n    Can you write a python function to find the minimum length of sublist?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == 1\nassert func([5, 4, 3, 2, 1]) == 1\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\nassert func([9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1", "response_code": "assert func([1, 2, 3, 4, 5]) == 1\nassert func([5, 4, 3, 2, 1]) == 1\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\nassert func([9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1"}
{"task_id": 50, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    Can you write a python function to find the number of divisors of a given integer?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 2\nassert func(10) == 4\nassert func(12) == 6\nassert func(25) == 3\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 2\nassert func(10) == 4\nassert func(12) == 6\nassert func(25) == 3\n"}
{"task_id": 51, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Can you write a function to find the frequency count of a list of lists?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([[1, 2], [2, 3], [1, 2], [4, 5]]) == {(1, 2): 2, (2, 3): 1, (4, 5): 1}\nassert func([[1, 1, 1], [2, 2], [3, 3, 3, 3]]) == {(1, 1, 1): 1, (2, 2): 1, (3, 3, 3, 3): 1}\nassert func([[1], [2], [3], [4]]) == {(1): 1, (2): 1, (3): 1, (4): 1}\nassert func([[1, 2, 3], [4, 5], [6, 7, 8]]) == {(1, 2, 3): 1, (4, 5): 1, (6, 7, 8): 1}\nassert func([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == {(1, 2, 3): 3}", "response_code": "assert func([[1, 2], [2, 3], [1, 2], [4, 5]]) == {(1, 2): 2, (2, 3): 1, (4, 5): 1}\nassert func([[1, 1, 1], [2, 2], [3, 3, 3, 3]]) == {(1, 1, 1): 1, (2, 2): 1, (3, 3, 3, 3): 1}\nassert func([[1], [2], [3], [4]]) == {(1): 1, (2): 1, (3): 1, (4): 1}\nassert func([[1, 2, 3], [4, 5], [6, 7, 8]]) == {(1, 2, 3): 1, (4, 5): 1, (6, 7, 8): 1}\nassert func([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == {(1, 2, 3): 3}"}
{"task_id": 52, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(numbers):  \n    '''\n    Can you write a function to multiply all the numbers in a list and divide with the length of the list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 3.0\nassert func([10, 20, 30]) == 200.0\nassert func([2, 4, 6, 8, 10]) == 40.0\nassert func([5, 5, 5, 5]) == 6.25\nassert func([1, 3, 5, 7, 9]) == 37.8\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 3.0\nassert func([10, 20, 30]) == 200.0\nassert func([2, 4, 6, 8, 10]) == 40.0\nassert func([5, 5, 5, 5]) == 6.25\nassert func([1, 3, 5, 7, 9]) == 37.8\n"}
{"task_id": 53, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a function to convert the given decimal number to its binary equivalent?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(5) == '101'\nassert func(10) == '1010'\nassert func(16) == '10000'\nassert func(25) == '11001'\nassert func(50) == '110010'", "response_code": "assert func(5) == '101'\nassert func(10) == '1010'\nassert func(16) == '10000'\nassert func(25) == '11001'\nassert func(50) == '110010'"}
{"task_id": 54, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import sys\ndef func(num):\n    '''\n    Can you write a function to find the next smallest palindrome of a specified number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(123) == 131\nassert func(999) == 1001\nassert func(45678) == 45754\nassert func(123456789) == 123464321\nassert func(987654321) == 987676789\n```", "response_code": "\nassert func(123) == 131\nassert func(999) == 1001\nassert func(45678) == 45754\nassert func(123456789) == 123464321\nassert func(987654321) == 987676789\n"}
{"task_id": 55, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr, k):\n    '''\n    Can you write a function to find the kth element in the given array?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3], 3) == 3\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3], 7) == 6\nassert func([10, 20, 30, 40, 50], 1) == 10\nassert func([10, 20, 30, 40, 50], 5) == 50\nassert func([5, 4, 3, 2, 1], 2) == 4\n```", "response_code": "\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3], 3) == 3\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3], 7) == 6\nassert func([10, 20, 30, 40, 50], 1) == 10\nassert func([10, 20, 30, 40, 50], 5) == 50\nassert func([5, 4, 3, 2, 1], 2) == 4\n"}
{"task_id": 56, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(word):\n    '''\n    Can you write a function to convert snake case string to camel case string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello_world\") == \"HelloWorld\"\nassert func(\"snake_case_example\") == \"SnakeCaseExample\"\nassert func(\"this_is_a_test\") == \"ThisIsATest\"\nassert func(\"camel_case\") == \"CamelCase\"\nassert func(\"another_example\") == \"AnotherExample\"\n```", "response_code": "\nassert func(\"hello_world\") == \"HelloWorld\"\nassert func(\"snake_case_example\") == \"SnakeCaseExample\"\nassert func(\"this_is_a_test\") == \"ThisIsATest\"\nassert func(\"camel_case\") == \"CamelCase\"\nassert func(\"another_example\") == \"AnotherExample\"\n"}
{"task_id": 57, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n, m): \n    '''\n    Can you write a function to find the Eulerian number a(n, m)?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0, 0) == 1\nassert func(3, 2) == 6\nassert func(5, 3) == 90\nassert func(4, 4) == 334\nassert func(6, 1) == 0\n```", "response_code": "\nassert func(0, 0) == 1\nassert func(3, 2) == 6\nassert func(5, 3) == 90\nassert func(4, 4) == 334\nassert func(6, 1) == 0\n"}
{"task_id": 58, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(input_list):\n    '''\n    Can you write a function to sort each sublist of strings in a given list of lists using lambda function?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([['banana', 'apple', 'cherry'], ['orange', 'grape', 'kiwi'], ['pear', 'strawberry', 'blueberry']]) == [['apple', 'banana', 'cherry'], ['grape', 'kiwi', 'orange'], ['blueberry', 'pear', 'strawberry']]\nassert func([['zoo', 'elephant', 'lion'], ['dog', 'cat', 'bird'], ['apple', 'banana', 'cherry']]) == [['elephant', 'lion', 'zoo'], ['bird', 'cat', 'dog'], ['apple', 'banana', 'cherry']]\nassert func([['carrot', 'potato', 'tomato'], ['onion', 'garlic', 'ginger'], ['broccoli', 'cabbage', 'lettuce']]) == [['carrot', 'potato', 'tomato'], ['garlic', 'ginger', 'onion'], ['broccoli', 'cabbage', 'lettuce']]\nassert func([['one', 'two', 'three'], ['four', 'five', 'six'], ['seven', 'eight', 'nine']]) == [['one', 'three', 'two'], ['five', 'four', 'six'], ['eight', 'nine', 'seven']]\nassert func([['red', 'green', 'blue'], ['yellow', 'purple', 'orange'], ['pink', 'brown', 'black']]) == [['blue', 'green', 'red'], ['orange', 'purple', 'yellow'], ['black', 'brown', 'pink']]", "response_code": "assert func([['banana', 'apple', 'cherry'], ['orange', 'grape', 'kiwi'], ['pear', 'strawberry', 'blueberry']]) == [['apple', 'banana', 'cherry'], ['grape', 'kiwi', 'orange'], ['blueberry', 'pear', 'strawberry']]\nassert func([['zoo', 'elephant', 'lion'], ['dog', 'cat', 'bird'], ['apple', 'banana', 'cherry']]) == [['elephant', 'lion', 'zoo'], ['bird', 'cat', 'dog'], ['apple', 'banana', 'cherry']]\nassert func([['carrot', 'potato', 'tomato'], ['onion', 'garlic', 'ginger'], ['broccoli', 'cabbage', 'lettuce']]) == [['carrot', 'potato', 'tomato'], ['garlic', 'ginger', 'onion'], ['broccoli', 'cabbage', 'lettuce']]\nassert func([['one', 'two', 'three'], ['four', 'five', 'six'], ['seven', 'eight', 'nine']]) == [['one', 'three', 'two'], ['five', 'four', 'six'], ['eight', 'nine', 'seven']]\nassert func([['red', 'green', 'blue'], ['yellow', 'purple', 'orange'], ['pink', 'brown', 'black']]) == [['blue', 'green', 'red'], ['orange', 'purple', 'yellow'], ['black', 'brown', 'pink']]"}
{"task_id": 59, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lst):   \n    '''\n    Can you write a python function to count true booleans in the given list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([True, False, True, False, True]) == 3\nassert func([True, True, True, True, True]) == 5\nassert func([False, False, False, False, False]) == 0\nassert func([]) == 0\nassert func([True, False, True, False, True, False, True]) == 4\n```", "response_code": "\nassert func([True, False, True, False, True]) == 3\nassert func([True, True, True, True, True]) == 5\nassert func([False, False, False, False, False]) == 0\nassert func([]) == 0\nassert func([True, False, True, False, True, False, True]) == 4\n"}
{"task_id": 60, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list, test_tup):\n    '''\n    Can you write a function to add the given list to the given tuples?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], (4, 5)) == [(1, 2, 3, 4, 5)]\nassert func([4, 5], (1, 2, 3)) == [(4, 5, 1, 2, 3)]\nassert func([7, 8], (9, 10, 11)) == [(7, 8, 9, 10, 11)]\nassert func([1, 2, 3], (4,)) == [(1, 2, 3, 4)]\nassert func([4], (1, 2, 3)) == [(4, 1, 2, 3)]\n```", "response_code": "\nassert func([1, 2, 3], (4, 5)) == [(1, 2, 3, 4, 5)]\nassert func([4, 5], (1, 2, 3)) == [(4, 5, 1, 2, 3)]\nassert func([7, 8], (9, 10, 11)) == [(7, 8, 9, 10, 11)]\nassert func([1, 2, 3], (4,)) == [(1, 2, 3, 4)]\nassert func([4], (1, 2, 3)) == [(4, 1, 2, 3)]\n"}
{"task_id": 61, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import heapq\ndef func(num1,num2,num3):\n    '''\n    Can you write a function to merge multiple sorted inputs into a single sorted iterator using the heap queue algorithm?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert list(func([1, 3, 5], [2, 4, 6], [0, 7, 8])) == [0, 1, 2, 3, 4, 5, 6, 7, 8]\nassert list(func([1, 2, 3], [4, 5, 6], [7, 8, 9])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert list(func([1, 4, 7], [2, 5, 8], [3, 6, 9])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert list(func([1, 2, 3], [1, 2, 3], [1, 2, 3])) == [1, 1, 1, 2, 2, 2, 3, 3, 3]\nassert list(func([3, 6, 9], [2, 5, 8], [1, 4, 7])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```", "response_code": "\nassert list(func([1, 3, 5], [2, 4, 6], [0, 7, 8])) == [0, 1, 2, 3, 4, 5, 6, 7, 8]\nassert list(func([1, 2, 3], [4, 5, 6], [7, 8, 9])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert list(func([1, 4, 7], [2, 5, 8], [3, 6, 9])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert list(func([1, 2, 3], [1, 2, 3], [1, 2, 3])) == [1, 1, 1, 2, 2, 2, 3, 3, 3]\nassert list(func([3, 6, 9], [2, 5, 8], [1, 4, 7])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"}
{"task_id": 62, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(s,n): \n    '''\n    Can you write a python function to find the count of rotations of a binary string with odd value?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func('101', 3) == 1\nassert func('1101', 4) == 2\nassert func('11111', 5) == 0\nassert func('1001', 4) == 1\nassert func('10101', 5) == 2\n```", "response_code": "\nassert func('101', 3) == 1\nassert func('1101', 4) == 2\nassert func('11111', 5) == 0\nassert func('1001', 4) == 1\nassert func('10101', 5) == 2\n"}
{"task_id": 63, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nestedlist):\n    '''\n    Can you write a function to find common elements in given nested lists?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == []\nassert func([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]\nassert func([[1, 2, 3], [4, 5, 6], [1, 2, 3]]) == []\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3]]) == []\n```", "response_code": "\nassert func([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == []\nassert func([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]\nassert func([[1, 2, 3], [4, 5, 6], [1, 2, 3]]) == []\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3]]) == []\n"}
{"task_id": 64, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(text):\n    '''\n    Can you write a function to check if a string represents an integer or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"123\") == True\nassert func(\"-456\") == True\nassert func(\"0\") == True\nassert func(\"12.34\") == False\nassert func(\"abc\") == False", "response_code": "assert func(\"123\") == True\nassert func(\"-456\") == True\nassert func(\"0\") == True\nassert func(\"12.34\") == False\nassert func(\"abc\") == False"}
{"task_id": 65, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Can you write a function to check whether all dictionaries in a list are empty or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([{}, {}, {}]) == True\nassert func([{'a': 1}, {'b': 2}, {}]) == False\nassert func([{}, {'a': 1}, {'b': 2}]) == False\nassert func([{}, {}, {'c': 3}]) == False\nassert func([{}, {}, {}]) == True", "response_code": "assert func([{}, {}, {}]) == True\nassert func([{'a': 1}, {'b': 2}, {}]) == False\nassert func([{}, {'a': 1}, {'b': 2}]) == False\nassert func([{}, {}, {'c': 3}]) == False\nassert func([{}, {}, {}]) == True"}
{"task_id": 66, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Can you write a function to convert a given tuple of positive integers into an integer?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3)) == 123\nassert func((9, 8, 7, 6)) == 9876\nassert func((5, 0, 2, 1)) == 5021\nassert func((4, 3, 2, 1, 0)) == 43210\nassert func((1, 0, 0, 0, 0)) == 10000\n```", "response_code": "\nassert func((1, 2, 3)) == 123\nassert func((9, 8, 7, 6)) == 9876\nassert func((5, 0, 2, 1)) == 5021\nassert func((4, 3, 2, 1, 0)) == 43210\nassert func((1, 0, 0, 0, 0)) == 10000\n"}
{"task_id": 67, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Can you write a function to convert all possible convertible elements in the list to float?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3]) == [1.0, 2.0, 3.0]\nassert func([1.5, '2.5', '3.5']) == [1.5, 2.5, 3.5]\nassert func(['1.1', '2.2', '3.3']) == [1.1, 2.2, 3.3]\nassert func(['1', '2', '3']) == [1.0, 2.0, 3.0]\nassert func(['1.0', '2.0', '3.0']) == [1.0, 2.0, 3.0]\n```", "response_code": "\nassert func([1, 2, 3]) == [1.0, 2.0, 3.0]\nassert func([1.5, '2.5', '3.5']) == [1.5, 2.5, 3.5]\nassert func(['1.1', '2.2', '3.3']) == [1.1, 2.2, 3.3]\nassert func(['1', '2', '3']) == [1.0, 2.0, 3.0]\nassert func(['1.0', '2.0', '3.0']) == [1.0, 2.0, 3.0]\n"}
{"task_id": 68, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(string): \n    '''\n    Can you write a function to convert a string to a list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\") == ['h', 'e', 'l', 'l', 'o']\nassert func(\"12345\") == ['1', '2', '3', '4', '5']\nassert func(\"abc123\") == ['a', 'b', 'c', '1', '2', '3']\nassert func(\"\") == []\nassert func(\"testing 123\") == ['t', 'e', 's', 't', 'i', 'n', 'g', ' ', '1', '2', '3']", "response_code": "assert func(\"hello\") == ['h', 'e', 'l', 'l', 'o']\nassert func(\"12345\") == ['1', '2', '3', '4', '5']\nassert func(\"abc123\") == ['a', 'b', 'c', '1', '2', '3']\nassert func(\"\") == []\nassert func(\"testing 123\") == ['t', 'e', 's', 't', 'i', 'n', 'g', ' ', '1', '2', '3']"}
{"task_id": 69, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):\n    '''\n    Can you write a python function to find the element that appears only once in a sorted array?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 1, 2, 2, 3, 4, 4, 5, 5]) == 3\nassert func([1, 1, 2, 2, 3, 3, 4, 4, 5]) == 5\nassert func([1, 1, 2, 2, 3, 3, 4, 5, 5]) == 4\nassert func([1, 1, 2, 3, 3, 4, 4, 5, 5]) == 2\nassert func([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]) == 6", "response_code": "assert func([1, 1, 2, 2, 3, 4, 4, 5, 5]) == 3\nassert func([1, 1, 2, 2, 3, 3, 4, 4, 5]) == 5\nassert func([1, 1, 2, 2, 3, 3, 4, 5, 5]) == 4\nassert func([1, 1, 2, 3, 3, 4, 4, 5, 5]) == 2\nassert func([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]) == 6"}
{"task_id": 70, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Can you write a function to find the maximum product from the pairs of tuples within a given list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (3, 4), (5, 6)]) == 30\nassert func([(2, 3), (4, 5), (6, 7)]) == 42\nassert func([(1, 1), (2, 2), (3, 3)]) == 9\nassert func([(2, 5), (3, 4), (6, 1)]) == 30\nassert func([(4, 3), (2, 1), (5, 6)]) == 30\n```", "response_code": "\nassert func([(1, 2), (3, 4), (5, 6)]) == 30\nassert func([(2, 3), (4, 5), (6, 7)]) == 42\nassert func([(1, 1), (2, 2), (3, 3)]) == 9\nassert func([(2, 5), (3, 4), (6, 1)]) == 30\nassert func([(4, 3), (2, 1), (5, 6)]) == 30\n"}
{"task_id": 71, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(limit):\n    '''\n    Can you write a function to sum all amicable numbers from 1 to a specified number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(100) == 0\nassert func(200) == 504\nassert func(500) == 2898\nassert func(1000) == 5040\nassert func(2000) == 15990", "response_code": "assert func(100) == 0\nassert func(200) == 504\nassert func(500) == 2898\nassert func(1000) == 5040\nassert func(2000) == 15990"}
{"task_id": 72, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import cmath\ndef func(a,b):\n    '''\n    Can you write a function to get the angle of a complex number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1, 0) == 0\nassert func(0, 1) == 1.5707963267948966\nassert func(-1, 0) == 3.141592653589793\nassert func(0, -1) == -1.5707963267948966\nassert func(1, 1) == 0.7853981633974483\n```", "response_code": "\nassert func(1, 0) == 0\nassert func(0, 1) == 1.5707963267948966\nassert func(-1, 0) == 3.141592653589793\nassert func(0, -1) == -1.5707963267948966\nassert func(1, 1) == 0.7853981633974483\n"}
{"task_id": 73, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(string): \n    '''\n    Can you write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"110101\") == 2\nassert func(\"1010101\") == 4\nassert func(\"1111\") == 0\nassert func(\"0000\") == 0\nassert func(\"101010101\") == 6\n```", "response_code": "\nassert func(\"110101\") == 2\nassert func(\"1010101\") == 4\nassert func(\"1111\") == 0\nassert func(\"0000\") == 0\nassert func(\"101010101\") == 6\n"}
{"task_id": 74, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a,b): \n    '''\n    Can you write a python function to find the sum of common divisors of two given numbers?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(12, 18) == 6\nassert func(15, 25) == 5\nassert func(20, 30) == 10\nassert func(36, 48) == 12\nassert func(50, 75) == 25", "response_code": "assert func(12, 18) == 6\nassert func(15, 25) == 5\nassert func(20, 30) == 10\nassert func(36, 48) == 12\nassert func(50, 75) == 25"}
{"task_id": 75, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x, y):\n    '''\n    Can you write a function to multiply two integers without using the * operator in python?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 4) == 12\nassert func(0, 5) == 0\nassert func(-2, 6) == -12\nassert func(7, -3) == -21\nassert func(-4, -2) == 8\n```", "response_code": "\nassert func(3, 4) == 12\nassert func(0, 5) == 0\nassert func(-2, 6) == -12\nassert func(7, -3) == -21\nassert func(-4, -2) == 8\n"}
{"task_id": 76, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n, str):\n    '''\n    Can you write a function to shortlist words that are longer than n from a given list of words?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(5, ['apple', 'banana', 'orange', 'kiwi', 'grape']) == ['banana', 'orange']\nassert func(4, ['cat', 'dog', 'elephant', 'lion', 'tiger']) == ['elephant']\nassert func(3, ['red', 'green', 'blue', 'yellow']) == ['green', 'blue', 'yellow']\nassert func(6, ['programming', 'python', 'java', 'javascript']) == ['programming', 'javascript']\nassert func(2, ['hello', 'world', 'python', 'programming']) == ['hello', 'world', 'python', 'programming']", "response_code": "assert func(5, ['apple', 'banana', 'orange', 'kiwi', 'grape']) == ['banana', 'orange']\nassert func(4, ['cat', 'dog', 'elephant', 'lion', 'tiger']) == ['elephant']\nassert func(3, ['red', 'green', 'blue', 'yellow']) == ['green', 'blue', 'yellow']\nassert func(6, ['programming', 'python', 'java', 'javascript']) == ['programming', 'javascript']\nassert func(2, ['hello', 'world', 'python', 'programming']) == ['hello', 'world', 'python', 'programming']"}
{"task_id": 77, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(my_matrix):\n    '''\n    Can you write a function to calculate a magic square?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test Case 1\nmy_matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\nassert func(my_matrix) == True\n\n# Test Case 2\nmy_matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert func(my_matrix) == False\n\n# Test Case 3\nmy_matrix = [[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]\nassert func(my_matrix) == True\n\n# Test Case 4\nmy_matrix = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\nassert func(my_matrix) == False\n\n# Test Case 5\nmy_matrix = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\nassert func(my_matrix) == True\n```", "response_code": "\n# Test Case 1\nmy_matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\nassert func(my_matrix) == True\n\n# Test Case 2\nmy_matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert func(my_matrix) == False\n\n# Test Case 3\nmy_matrix = [[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]\nassert func(my_matrix) == True\n\n# Test Case 4\nmy_matrix = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\nassert func(my_matrix) == False\n\n# Test Case 5\nmy_matrix = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\nassert func(my_matrix) == True\n"}
{"task_id": 78, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from collections import defaultdict\ndef func(nums):\n    '''\n    Can you write a function to find the item with maximum frequency in a given list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test Case 1\nnums = [1, 2, 2, 3, 3, 3]\nassert func(nums) == 3\n\n# Test Case 2\nnums = [4, 4, 4, 4, 5, 5, 6]\nassert func(nums) == 4\n\n# Test Case 3\nnums = [1, 2, 3, 4, 5]\nassert func(nums) == 1\n\n# Test Case 4\nnums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]\nassert func(nums) == 1\n\n# Test Case 5\nnums = [1, 1, 1, 2, 2, 3, 3, 3, 3]\nassert func(nums) == 3\n```", "response_code": "\n# Test Case 1\nnums = [1, 2, 2, 3, 3, 3]\nassert func(nums) == 3\n\n# Test Case 2\nnums = [4, 4, 4, 4, 5, 5, 6]\nassert func(nums) == 4\n\n# Test Case 3\nnums = [1, 2, 3, 4, 5]\nassert func(nums) == 1\n\n# Test Case 4\nnums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]\nassert func(nums) == 1\n\n# Test Case 5\nnums = [1, 1, 1, 2, 2, 3, 3, 3, 3]\nassert func(nums) == 3\n"}
{"task_id": 79, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1):\n    '''\n    Can you write a python function to reverse only the vowels of a given string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == \"holle\"\nassert func(\"world\") == \"werld\"\nassert func(\"apple\") == \"eppla\"\nassert func(\"python\") == \"pythan\"\nassert func(\"algorithm\") == \"ilgorhtam\"\n```", "response_code": "\nassert func(\"hello\") == \"holle\"\nassert func(\"world\") == \"werld\"\nassert func(\"apple\") == \"eppla\"\nassert func(\"python\") == \"pythan\"\nassert func(\"algorithm\") == \"ilgorhtam\"\n"}
{"task_id": 80, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(tup1):\n    '''\n    Can you write a function to convert tuple to a string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(('a', 'b', 'c')) == 'abc'\nassert func(('hello', 'world')) == 'helloworld'\nassert func(('123', '456', '789')) == '123456789'\nassert func(('apple', 'banana', 'cherry')) == 'applebananacherry'\nassert func(('python', 'is', 'fun')) == 'pythonisfun'", "response_code": "assert func(('a', 'b', 'c')) == 'abc'\nassert func(('hello', 'world')) == 'helloworld'\nassert func(('123', '456', '789')) == '123456789'\nassert func(('apple', 'banana', 'cherry')) == 'applebananacherry'\nassert func(('python', 'is', 'fun')) == 'pythonisfun'"}
{"task_id": 81, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Can you write a function to calculate the sum of the negative numbers of a given list of numbers using a lambda function?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, -2, 3, -4, 5]) == -6\nassert func([-1, -2, -3, -4, -5]) == -15\nassert func([0, 1, 2, 3, 4]) == 0\nassert func([-1, 2, -3, 4, -5]) == -9\nassert func([]) == 0", "response_code": "assert func([1, -2, 3, -4, 5]) == -6\nassert func([-1, -2, -3, -4, -5]) == -15\nassert func([0, 1, 2, 3, 4]) == 0\nassert func([-1, 2, -3, 4, -5]) == -9\nassert func([]) == 0"}
{"task_id": 82, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a function to find the nth hexagonal number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 1\nassert func(2) == 6\nassert func(3) == 15\nassert func(4) == 28\nassert func(5) == 45", "response_code": "assert func(1) == 1\nassert func(2) == 6\nassert func(3) == 15\nassert func(4) == 28\nassert func(5) == 45"}
{"task_id": 83, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from array import array\ndef func(nums):\n    '''\n    Can you write a function to find the ratio of zeroes in an array of integers?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(array('i', [0, 1, 2, 3, 0, 5])) == 0.3333333333333333\nassert func(array('i', [0, 0, 0, 0, 0])) == 1.0\nassert func(array('i', [1, 2, 3, 4, 5])) == 0.0\nassert func(array('i', [0, 1, 0, 1, 0, 1])) == 0.5\nassert func(array('i', [0, 0, 1, 1, 0, 0, 0, 1])) == 0.625\n```", "response_code": "\nassert func(array('i', [0, 1, 2, 3, 0, 5])) == 0.3333333333333333\nassert func(array('i', [0, 0, 0, 0, 0])) == 1.0\nassert func(array('i', [1, 2, 3, 4, 5])) == 0.0\nassert func(array('i', [0, 1, 0, 1, 0, 1])) == 0.5\nassert func(array('i', [0, 0, 1, 1, 0, 0, 0, 1])) == 0.625\n"}
{"task_id": 84, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(10) == True\nassert func(7) == True\nassert func(6) == False\nassert func(15) == False\nassert func(16) == True", "response_code": "assert func(10) == True\nassert func(7) == True\nassert func(6) == False\nassert func(15) == False\nassert func(16) == True"}
{"task_id": 85, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(r):\n    '''\n    Can you write a function to find the circumference of a circle?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 6.283185307179586\nassert func(2) == 12.566370614359172\nassert func(5) == 31.41592653589793\nassert func(10) == 62.83185307179586\nassert func(0) == 0\n```", "response_code": "\nassert func(1) == 6.283185307179586\nassert func(2) == 12.566370614359172\nassert func(5) == 31.41592653589793\nassert func(10) == 62.83185307179586\nassert func(0) == 0\n"}
{"task_id": 86, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Can you write a function to extract elements that occur singly in the given tuple list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([(1, 2), (2, 3), (3, 4), (4, 5)]) == [(1, 2), (3, 4), (4, 5)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]) == [(1, 2), (3, 4), (5, 6)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (1, 2)]) == [(3, 4), (4, 5)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (1, 2), (5, 6)]) == [(3, 4), (4, 5), (5, 6)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (1, 2), (3, 4)]) == [(5, 6)]", "response_code": "assert func([(1, 2), (2, 3), (3, 4), (4, 5)]) == [(1, 2), (3, 4), (4, 5)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]) == [(1, 2), (3, 4), (5, 6)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (1, 2)]) == [(3, 4), (4, 5)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (1, 2), (5, 6)]) == [(3, 4), (4, 5), (5, 6)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (1, 2), (3, 4)]) == [(5, 6)]"}
{"task_id": 87, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Can you write a function to sort a list of elements using pancake sort?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([3, 2, 1]) == [1, 2, 3]\nassert func([5, 2, 9, 1, 5]) == [1, 2, 5, 5, 9]\nassert func([10, 5, 8, 3, 1, 6]) == [1, 3, 5, 6, 8, 10]\nassert func([7, 4, 2, 9, 1, 5, 8]) == [1, 2, 4, 5, 7, 8, 9]\nassert func([1]) == [1]", "response_code": "assert func([3, 2, 1]) == [1, 2, 3]\nassert func([5, 2, 9, 1, 5]) == [1, 2, 5, 5, 9]\nassert func([10, 5, 8, 3, 1, 6]) == [1, 3, 5, 6, 8, 10]\nassert func([7, 4, 2, 9, 1, 5, 8]) == [1, 2, 4, 5, 7, 8, 9]\nassert func([1]) == [1]"}
{"task_id": 88, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1,list2,list3):\n    '''\n    Can you write a function to count the same pair in three given lists?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3], [2, 3, 4], [3, 4, 5]) == 1\nassert func([1, 2, 3], [2, 3, 4], [3, 4, 5, 3]) == 2\nassert func([1, 2, 3], [2, 3, 4], [3, 4, 5, 3, 3]) == 3\nassert func([1, 2, 3], [2, 3, 4], [3, 4, 5, 3, 3, 3]) == 4\nassert func([1, 2, 3], [2, 3, 4], [3, 4, 5, 3, 3, 3, 3]) == 5", "response_code": "assert func([1, 2, 3], [2, 3, 4], [3, 4, 5]) == 1\nassert func([1, 2, 3], [2, 3, 4], [3, 4, 5, 3]) == 2\nassert func([1, 2, 3], [2, 3, 4], [3, 4, 5, 3, 3]) == 3\nassert func([1, 2, 3], [2, 3, 4], [3, 4, 5, 3, 3, 3]) == 4\nassert func([1, 2, 3], [2, 3, 4], [3, 4, 5, 3, 3, 3, 3]) == 5"}
{"task_id": 89, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(Input): \n    '''\n    Can you write a function to find the number of lists present in the given tuple?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(([], [1, 2], [3], [], [4, 5, 6])) == 5\nassert func(([], [], [])) == 3\nassert func(()) == 0\nassert func(([1], [2], [3], [4])) == 4\nassert func(([1, 2, 3], [4, 5], [6, 7, 8])) == 3", "response_code": "assert func(([], [1, 2], [3], [], [4, 5, 6])) == 5\nassert func(([], [], [])) == 3\nassert func(()) == 0\nassert func(([1], [2], [3], [4])) == 4\nassert func(([1, 2, 3], [4, 5], [6, 7, 8])) == 3"}
{"task_id": 90, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr): \n    '''\n    Can you write a python function to find the maximum difference between any two elements in a given array?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == 4\nassert func([5, 4, 3, 2, 1]) == 4\nassert func([1, 10, 3, 8, 5]) == 9\nassert func([5, 5, 5, 5, 5]) == 0\nassert func([1, 1, 1, 1, 1]) == 0", "response_code": "assert func([1, 2, 3, 4, 5]) == 4\nassert func([5, 4, 3, 2, 1]) == 4\nassert func([1, 10, 3, 8, 5]) == 9\nassert func([5, 5, 5, 5, 5]) == 0\nassert func([1, 1, 1, 1, 1]) == 0"}
{"task_id": 91, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a, b, n):\n    '''\n    Can you write a function to find x and y that satisfies ax + by = n?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(2, 3, 7) == (7, 1)\nassert func(4, 5, 18) == (18, -6)\nassert func(6, 8, 10) == (10, -5)\nassert func(3, 7, 13) == (13, -2)\nassert func(5, 2, 9) == (9, 1)", "response_code": "assert func(2, 3, 7) == (7, 1)\nassert func(4, 5, 18) == (18, -6)\nassert func(6, 8, 10) == (10, -5)\nassert func(3, 7, 13) == (13, -2)\nassert func(5, 2, 9) == (9, 1)"}
{"task_id": 92, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1, list2):\n    '''\n    Can you write a function to remove all elements from a given list present in another list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]\nassert func([1, 2, 3, 4, 5], [6, 7]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5], []) == [1, 2, 3, 4, 5]\nassert func([], [1, 2, 3]) == []\nassert func([1, 2, 3], [1, 2, 3]) == []\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]\nassert func([1, 2, 3, 4, 5], [6, 7]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5], []) == [1, 2, 3, 4, 5]\nassert func([], [1, 2, 3]) == []\nassert func([1, 2, 3], [1, 2, 3]) == []\n"}
{"task_id": 93, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    Can you write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0)?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(5) == 9\nassert func(10) == 25\nassert func(3) == 4\nassert func(7) == 16\nassert func(1) == 1", "response_code": "assert func(5) == 9\nassert func(10) == 25\nassert func(3) == 4\nassert func(7) == 16\nassert func(1) == 1"}
{"task_id": 94, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from math import tan, pi\ndef func(s, l):\n    '''\n    Can you write a function to calculate the area of a regular polygon?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 5) == 10.83\nassert func(4, 7) == 24.50\nassert func(5, 10) == 43.01\nassert func(6, 8) == 41.57\nassert func(8, 12) == 110.11\n```", "response_code": "\nassert func(3, 5) == 10.83\nassert func(4, 7) == 24.50\nassert func(5, 10) == 43.01\nassert func(6, 8) == 41.57\nassert func(8, 12) == 110.11\n"}
{"task_id": 95, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math \ndef func(n): \n    '''\n    Can you write a python function to check whether the sum of divisors are same or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(6) == True\nassert func(28) == True\nassert func(12) == False\nassert func(496) == True\nassert func(10) == False", "response_code": "assert func(6) == True\nassert func(28) == True\nassert func(12) == False\nassert func(496) == True\nassert func(10) == False"}
{"task_id": 96, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1): \n    '''\n    Can you write a python function to count characters at the same position in a given string (lower and uppercase characters) as in the English alphabet?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"abc\") == 3\nassert func(\"aBc\") == 2\nassert func(\"aBcD\") == 2\nassert func(\"aBcDeF\") == 3\nassert func(\"aBcDeFgHiJ\") == 5", "response_code": "assert func(\"abc\") == 3\nassert func(\"aBc\") == 2\nassert func(\"aBcD\") == 2\nassert func(\"aBcDeF\") == 3\nassert func(\"aBcDeFgHiJ\") == 5"}
{"task_id": 97, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(A): \n    '''\n    Can you write a python function to count the pairs with xor as an even number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 4\nassert func([2, 4, 6, 8, 10]) == 10\nassert func([3, 5, 7, 9, 11]) == 0\nassert func([0, 0, 0, 0, 0]) == 10\nassert func([1, 3, 5, 7, 9]) == 0\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 4\nassert func([2, 4, 6, 8, 10]) == 10\nassert func([3, 5, 7, 9, 11]) == 0\nassert func([0, 0, 0, 0, 0]) == 10\nassert func([1, 3, 5, 7, 9]) == 0\n"}
{"task_id": 98, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a python function to find the smallest power of 2 greater than or equal to n?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5) == 8\nassert func(10) == 16\nassert func(20) == 32\nassert func(50) == 64\nassert func(100) == 128\n```", "response_code": "\nassert func(5) == 8\nassert func(10) == 16\nassert func(20) == 32\nassert func(50) == 64\nassert func(100) == 128\n"}
{"task_id": 99, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a,x): \n    '''\n    Can you write a python function to find the frequency of a number in a given array?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 2, 2, 3, 1], 2) == 3\nassert func([5, 5, 5, 5, 5], 5) == 5\nassert func([1, 2, 3, 4, 5], 6) == 0\nassert func([1, 1, 1, 1, 1], 1) == 5\nassert func([], 10) == 0\n```", "response_code": "\nassert func([1, 2, 3, 4, 2, 2, 3, 1], 2) == 3\nassert func([5, 5, 5, 5, 5], 5) == 5\nassert func([1, 2, 3, 4, 5], 6) == 0\nassert func([1, 1, 1, 1, 1], 1) == 5\nassert func([], 10) == 0\n"}
{"task_id": 100, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1, m, n):                                                                                                                                                                                                \n    '''\n    Can you write a function to find the sum of the numbers in a list between the indices of a specified range?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5], 1, 3) == 9\nassert func([10, 20, 30, 40, 50], 2, 4) == 70\nassert func([5, 10, 15, 20, 25], 0, 2) == 30\nassert func([100, 200, 300, 400, 500], 3, 4) == 900\nassert func([2, 4, 6, 8, 10], 2, 2) == 6", "response_code": "assert func([1, 2, 3, 4, 5], 1, 3) == 9\nassert func([10, 20, 30, 40, 50], 2, 4) == 70\nassert func([5, 10, 15, 20, 25], 0, 2) == 30\nassert func([100, 200, 300, 400, 500], 3, 4) == 900\nassert func([2, 4, 6, 8, 10], 2, 2) == 6"}
{"task_id": 101, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(a):\n    '''\n    Can you write a function to find the perimeter of a pentagon?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(5) == 25\nassert func(7) == 35\nassert func(10) == 50\nassert func(3) == 15\nassert func(12) == 60", "response_code": "assert func(5) == 25\nassert func(7) == 35\nassert func(10) == 50\nassert func(3) == 15\nassert func(12) == 60"}
{"task_id": 102, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(s):\n    '''\n    Can you write a function to find the occurrence of characters 'std' in the given string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"students\") == 1\nassert func(\"stand\") == 1\nassert func(\"student\") == 1\nassert func(\"studying\") == 1\nassert func(\"standard\") == 1", "response_code": "assert func(\"students\") == 1\nassert func(\"stand\") == 1\nassert func(\"student\") == 1\nassert func(\"studying\") == 1\nassert func(\"standard\") == 1"}
{"task_id": 103, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tuple):\n    '''\n    Can you write a function to check if all the elements in a tuple have the same data type or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3)) == True\nassert func(('a', 'b', 'c')) == True\nassert func((1, 'a', 3.14)) == False\nassert func((True, False, True)) == True\nassert func(([], {}, set())) == True\n```", "response_code": "\nassert func((1, 2, 3)) == True\nassert func(('a', 'b', 'c')) == True\nassert func((1, 'a', 3.14)) == False\nassert func((True, False, True)) == True\nassert func(([], {}, set())) == True\n"}
{"task_id": 104, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr, n, x):\n    '''\n    Can you write a function to check for majority element in the given sorted array?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 2, 3, 3, 3, 3, 4, 5], 9, 3) == True\nassert func([1, 2, 2, 3, 3, 3, 3, 4, 5], 9, 2) == False\nassert func([1, 1, 2, 2, 2, 2, 3, 3, 3], 9, 2) == True\nassert func([1, 1, 2, 2, 2, 2, 3, 3, 3], 9, 3) == False\nassert func([1, 1, 1, 1, 2, 2, 2, 2, 2], 9, 1) == True\n```", "response_code": "\nassert func([1, 2, 2, 3, 3, 3, 3, 4, 5], 9, 3) == True\nassert func([1, 2, 2, 3, 3, 3, 3, 4, 5], 9, 2) == False\nassert func([1, 1, 2, 2, 2, 2, 3, 3, 3], 9, 2) == True\nassert func([1, 1, 2, 2, 2, 2, 3, 3, 3], 9, 3) == False\nassert func([1, 1, 1, 1, 2, 2, 2, 2, 2], 9, 1) == True\n"}
{"task_id": 105, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a python function to count set bits of a given number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(0) == 0\nassert func(1) == 1\nassert func(5) == 2\nassert func(15) == 4\nassert func(255) == 8", "response_code": "assert func(0) == 0\nassert func(1) == 1\nassert func(5) == 2\nassert func(15) == 4\nassert func(255) == 8"}
{"task_id": 106, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str):\n    '''\n    Can you write a python function to remove the characters which have odd index values of a given string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\") == \"hlo\"\nassert func(\"python\") == \"pto\"\nassert func(\"abcdefg\") == \"aceg\"\nassert func(\"12345\") == \"135\"\nassert func(\"a\") == \"a\"", "response_code": "assert func(\"hello\") == \"hlo\"\nassert func(\"python\") == \"pto\"\nassert func(\"abcdefg\") == \"aceg\"\nassert func(\"12345\") == \"135\"\nassert func(\"a\") == \"a\""}
{"task_id": 107, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a,b,c): \n    '''\n    Can you write a function to find the minimum of three numbers?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1,2,3) == 1\nassert func(5,5,5) == 5\nassert func(-1,-2,-3) == -3\nassert func(10,5,15) == 5\nassert func(100,200,50) == 50", "response_code": "assert func(1,2,3) == 1\nassert func(5,5,5) == 5\nassert func(-1,-2,-3) == -3\nassert func(10,5,15) == 5\nassert func(100,200,50) == 50"}
{"task_id": 108, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n,l,r):  \n    '''\n    Can you write a python function to check whether all the bits are unset in the given range or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5, 1, 3) == False\nassert func(8, 2, 4) == True\nassert func(15, 0, 3) == False\nassert func(10, 2, 2) == True\nassert func(0, 0, 2) == True\n```", "response_code": "\nassert func(5, 1, 3) == False\nassert func(8, 2, 4) == True\nassert func(15, 0, 3) == False\nassert func(10, 2, 2) == True\nassert func(0, 0, 2) == True\n"}
{"task_id": 109, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr, n):\n    '''\n    Can you write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([-1, 2, -3, 4, 5], 5) == [-1, -3, 2, 4, 5]\nassert func([1, -2, 3, -4, 5], 5) == [-2, -4, 1, 3, 5]\nassert func([5, 4, 3, 2, 1], 5) == [5, 4, 3, 2, 1]\nassert func([-1, -2, -3, -4, -5], 5) == [-1, -2, -3, -4, -5]\nassert func([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\n```", "response_code": "\nassert func([-1, 2, -3, 4, 5], 5) == [-1, -3, 2, 4, 5]\nassert func([1, -2, 3, -4, 5], 5) == [-2, -4, 1, 3, 5]\nassert func([5, 4, 3, 2, 1], 5) == [5, 4, 3, 2, 1]\nassert func([-1, -2, -3, -4, -5], 5) == [-1, -2, -3, -4, -5]\nassert func([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\n"}
{"task_id": 110, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1,char):\n    '''\n    Can you write a function to replace blank spaces with any character in a string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello world\", \"-\") == \"hello-world\"\nassert func(\"python is fun\", \"*\") == \"python*is*fun\"\nassert func(\"a b c d e\", \"+\") == \"a+b+c+d+e\"\nassert func(\"123 456 789\", \"#\") == \"123#456#789\"\nassert func(\"apple banana cherry\", \"&\") == \"apple&banana&cherry\"", "response_code": "assert func(\"hello world\", \"-\") == \"hello-world\"\nassert func(\"python is fun\", \"*\") == \"python*is*fun\"\nassert func(\"a b c d e\", \"+\") == \"a+b+c+d+e\"\nassert func(\"123 456 789\", \"#\") == \"123#456#789\"\nassert func(\"apple banana cherry\", \"&\") == \"apple&banana&cherry\""}
{"task_id": 111, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import heapq\ndef func(list1,n):\n    '''\n    Can you write a function to get the n largest items from a dataset?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([4, 2, 7, 1, 5], 2) == [7, 5]\nassert func([10, 20, 30, 40, 50], 3) == [50, 40, 30]\nassert func([1, 3, 5, 7, 9], 1) == [9]\nassert func([100, 200, 300, 400, 500], 5) == [500, 400, 300, 200, 100]\nassert func([8, 6, 4, 2, 0], 4) == [8, 6, 4, 2]\n```", "response_code": "\nassert func([4, 2, 7, 1, 5], 2) == [7, 5]\nassert func([10, 20, 30, 40, 50], 3) == [50, 40, 30]\nassert func([1, 3, 5, 7, 9], 1) == [9]\nassert func([100, 200, 300, 400, 500], 5) == [500, 400, 300, 200, 100]\nassert func([8, 6, 4, 2, 0], 4) == [8, 6, 4, 2]\n"}
{"task_id": 112, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(r,h):\n    '''\n    Can you write a function to find the lateral surface area of a cylinder?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(3, 4) == 75.3981633974483\nassert func(5, 2) == 62.83185307179586\nassert func(0, 10) == 0\nassert func(7, 3) == 131.94689145077132\nassert func(2, 8) == 100.53096491487338", "response_code": "assert func(3, 4) == 75.3981633974483\nassert func(5, 2) == 62.83185307179586\nassert func(0, 10) == 0\nassert func(7, 3) == 131.94689145077132\nassert func(2, 8) == 100.53096491487338"}
{"task_id": 113, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l):\n    '''\n    Can you write a function to find the volume of a cube?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(3) == 27\nassert func(5) == 125\nassert func(0) == 0\nassert func(10) == 1000\nassert func(2.5) == 15.625", "response_code": "assert func(3) == 27\nassert func(5) == 125\nassert func(0) == 0\nassert func(10) == 1000\nassert func(2.5) == 15.625"}
{"task_id": 114, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a python function to set all even bits of a given number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 0\nassert func(1) == 2\nassert func(5) == 10\nassert func(10) == 10\nassert func(15) == 10\n```", "response_code": "\nassert func(0) == 0\nassert func(1) == 2\nassert func(5) == 10\nassert func(10) == 10\nassert func(15) == 10\n"}
{"task_id": 115, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from collections import Counter \ndef func(test_list):\n    '''\n    Can you write a function to check the occurrences of records which occur similar times in the given tuples?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)]) == []\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11)]) == []\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12)]) == []\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13)]) == []\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14)]) == []\n```", "response_code": "\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)]) == []\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11)]) == []\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12)]) == []\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13)]) == []\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14)]) == []\n"}
{"task_id": 116, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str): \n    '''\n    Can you write a python function to count the number of non-empty substrings of a given string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"abc\") == 6\nassert func(\"hello\") == 15\nassert func(\"12345\") == 15\nassert func(\"a\") == 1\nassert func(\"\") == 0", "response_code": "assert func(\"abc\") == 6\nassert func(\"hello\") == 15\nassert func(\"12345\") == 15\nassert func(\"a\") == 1\nassert func(\"\") == 0"}
{"task_id": 117, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(m,n): \n    '''\n    Can you write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 2) == 3\nassert func(4, 3) == 6\nassert func(5, 4) == 10\nassert func(6, 5) == 15\nassert func(7, 6) == 21\n```", "response_code": "\nassert func(3, 2) == 3\nassert func(4, 3) == 6\nassert func(5, 4) == 10\nassert func(6, 5) == 15\nassert func(7, 6) == 21\n"}
{"task_id": 118, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1,list2):\n    '''\n    Can you write a function to replace the last element of the list with another list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3], [4, 5]) == [1, 2, 4, 5]\nassert func([5, 6, 7, 8], [9, 10, 11]) == [5, 6, 7, 9, 10, 11]\nassert func(['a', 'b'], ['c']) == ['a', 'c']\nassert func([], [1, 2, 3]) == [1, 2, 3]\nassert func([0], [1]) == [1]", "response_code": "assert func([1, 2, 3], [4, 5]) == [1, 2, 4, 5]\nassert func([5, 6, 7, 8], [9, 10, 11]) == [5, 6, 7, 9, 10, 11]\nassert func(['a', 'b'], ['c']) == ['a', 'c']\nassert func([], [1, 2, 3]) == [1, 2, 3]\nassert func([0], [1]) == [1]"}
{"task_id": 119, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1):\n    '''\n    Can you write a function to count total characters in a string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\") == 5\nassert func(\"12345\") == 5\nassert func(\"\") == 0\nassert func(\"aabbcc\") == 6\nassert func(\"testing 123\") == 11", "response_code": "assert func(\"hello\") == 5\nassert func(\"12345\") == 5\nassert func(\"\") == 0\nassert func(\"aabbcc\") == 6\nassert func(\"testing 123\") == 11"}
{"task_id": 120, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math  \ndef func(N): \n    '''\n    Can you write a python function to find the next perfect square greater than a given number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(10) == 16\nassert func(25) == 36\nassert func(50) == 64\nassert func(100) == 121\nassert func(500) == 529", "response_code": "assert func(10) == 16\nassert func(25) == 36\nassert func(50) == 64\nassert func(100) == 121\nassert func(500) == 529"}
{"task_id": 121, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr): \n    '''\n    Can you write a function to find the maximum sum of bi-tonic sub-sequence for the given array?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 15\nassert func([3, 8, 6, 4, 5, 7, 2, 1]) == 27\nassert func([1, 2, 3, 4, 5, 4, 3, 2, 1]) == 15\nassert func([10, 5, 4, 3, 2, 1, 6, 7, 8, 9]) == 33\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 15\nassert func([3, 8, 6, 4, 5, 7, 2, 1]) == 27\nassert func([1, 2, 3, 4, 5, 4, 3, 2, 1]) == 15\nassert func([10, 5, 4, 3, 2, 1, 6, 7, 8, 9]) == 33\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45\n"}
{"task_id": 122, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(number):\n    '''\n    Can you write a function for computing square roots using the Babylonian method?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(16) == 4\nassert func(25) == 5\nassert func(36) == 6\nassert func(49) == 7\nassert func(64) == 8\n```", "response_code": "\nassert func(16) == 4\nassert func(25) == 5\nassert func(36) == 6\nassert func(49) == 7\nassert func(64) == 8\n"}
{"task_id": 123, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str): \n    '''\n    Can you write a function to find the longest palindromic subsequence in the given string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"babad\") == \"aba\"  # \"aba\" is the longest palindromic subsequence in \"babad\"\nassert func(\"cbbd\") == \"bb\"  # \"bb\" is the longest palindromic subsequence in \"cbbd\"\nassert func(\"racecar\") == \"racecar\"  # \"racecar\" is a palindrome itself\nassert func(\"abcde\") == \"a\"  # \"a\" is the longest palindromic subsequence in \"abcde\"\nassert func(\"abacdfgdcaba\") == \"aba\"  # \"aba\" is the longest palindromic subsequence in \"abacdfgdcaba\"\n```", "response_code": "\nassert func(\"babad\") == \"aba\"  # \"aba\" is the longest palindromic subsequence in \"babad\"\nassert func(\"cbbd\") == \"bb\"  # \"bb\" is the longest palindromic subsequence in \"cbbd\"\nassert func(\"racecar\") == \"racecar\"  # \"racecar\" is a palindrome itself\nassert func(\"abcde\") == \"a\"  # \"a\" is the longest palindromic subsequence in \"abcde\"\nassert func(\"abacdfgdcaba\") == \"aba\"  # \"aba\" is the longest palindromic subsequence in \"abacdfgdcaba\"\n"}
{"task_id": 124, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    Can you write a function to calculate the harmonic sum of n-1?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 0\nassert func(2) == 1\nassert func(5) == 2.283333333333333\nassert func(10) == 2.9289682539682538\nassert func(20) == 3.597739657143682", "response_code": "assert func(1) == 0\nassert func(2) == 1\nassert func(5) == 2.283333333333333\nassert func(10) == 2.9289682539682538\nassert func(20) == 3.597739657143682"}
{"task_id": 125, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(array_nums1,array_nums2):\n    '''\n    Can you write a function to find the intersection of two arrays using a lambda function?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]) == [4, 5]\nassert func([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == []\nassert func([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3], [4, 5, 6]) == []\nassert func([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]) == [4, 5]\nassert func([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == []\nassert func([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3], [4, 5, 6]) == []\nassert func([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n"}
{"task_id": 126, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(tup, x): \n    '''\n    Can you write a python function to count the occcurences of an element in a tuple?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func((1, 2, 3, 4, 2, 2), 2) == 3\nassert func((5, 5, 5, 5, 5), 5) == 5\nassert func((1, 2, 3, 4), 5) == 0\nassert func((), 10) == 0\nassert func((1, 1, 1, 1, 1, 1), 1) == 6", "response_code": "assert func((1, 2, 3, 4, 2, 2), 2) == 3\nassert func((5, 5, 5, 5, 5), 5) == 5\nassert func((1, 2, 3, 4), 5) == 0\nassert func((), 10) == 0\nassert func((1, 1, 1, 1, 1, 1), 1) == 6"}
{"task_id": 127, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list,element):\n    '''\n    Can you write a function to insert an element before each element of a list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3], 0) == [0, 1, 0, 2, 0, 3]\nassert func(['a', 'b', 'c'], 'z') == ['z', 'a', 'z', 'b', 'z', 'c']\nassert func([], 5) == []\nassert func([10, 20, 30, 40], 15) == [15, 10, 15, 20, 15, 30, 15, 40]\nassert func(['apple', 'banana'], 'orange') == ['orange', 'apple', 'orange', 'banana']", "response_code": "assert func([1, 2, 3], 0) == [0, 1, 0, 2, 0, 3]\nassert func(['a', 'b', 'c'], 'z') == ['z', 'a', 'z', 'b', 'z', 'c']\nassert func([], 5) == []\nassert func([10, 20, 30, 40], 15) == [15, 10, 15, 20, 15, 30, 15, 40]\nassert func(['apple', 'banana'], 'orange') == ['orange', 'apple', 'orange', 'banana']"}
{"task_id": 128, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import cmath  \ndef func(numbers):    \n    '''\n    Can you write a python function to convert complex numbers to polar coordinates?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1+1j) == (1.4142135623730951, 0.7853981633974483)\nassert func(3-4j) == (5.0, -0.9272952180016122)\nassert func(-2+2j) == (2.8284271247461903, 2.356194490192345)\nassert func(-1-1j) == (1.4142135623730951, -2.356194490192345)\nassert func(0+5j) == (5.0, 1.5707963267948966)\n```", "response_code": "\nassert func(1+1j) == (1.4142135623730951, 0.7853981633974483)\nassert func(3-4j) == (5.0, -0.9272952180016122)\nassert func(-2+2j) == (2.8284271247461903, 2.356194490192345)\nassert func(-1-1j) == (1.4142135623730951, -2.356194490192345)\nassert func(0+5j) == (5.0, 1.5707963267948966)\n"}
{"task_id": 129, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Can you write a python function to count integers from a given list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == 5\nassert func([10, 20, 30, 40, 50]) == 5\nassert func([0, 0, 0, 0, 0]) == 5\nassert func([-1, -2, -3, -4, -5]) == 5\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10", "response_code": "assert func([1, 2, 3, 4, 5]) == 5\nassert func([10, 20, 30, 40, 50]) == 5\nassert func([0, 0, 0, 0, 0]) == 5\nassert func([-1, -2, -3, -4, -5]) == 5\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10"}
{"task_id": 130, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from itertools import combinations_with_replacement \ndef func(l, n):\n    '''\n    Can you write a function to choose a specified number of colors from three different colors and generate all the combinations with repetitions?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test Case 1\nassert func(['red', 'green', 'blue'], 2) == [('red', 'red'), ('red', 'green'), ('red', 'blue'), ('green', 'green'), ('green', 'blue'), ('blue', 'blue')]\n\n# Test Case 2\nassert func(['yellow', 'purple', 'orange'], 3) == [('yellow', 'yellow', 'yellow'), ('yellow', 'yellow', 'purple'), ('yellow', 'yellow', 'orange'), ('yellow', 'purple', 'purple'), ('yellow', 'purple', 'orange'), ('yellow', 'orange', 'orange'), ('purple', 'purple', 'purple'), ('purple', 'purple', 'orange'), ('purple', 'orange', 'orange'), ('orange', 'orange', 'orange')]\n\n# Test Case 3\nassert func(['white', 'black'], 1) == [('white',), ('black',)]\n\n# Test Case 4\nassert func(['pink', 'brown', 'gray'], 2) == [('pink', 'pink'), ('pink', 'brown'), ('pink', 'gray'), ('brown', 'brown'), ('brown', 'gray'), ('gray', 'gray')]\n\n# Test Case 5\nassert func(['cyan', 'magenta', 'yellow'], 2) == [('cyan', 'cyan'), ('cyan', 'magenta'), ('cyan', 'yellow'), ('magenta', 'magenta'), ('magenta', 'yellow'), ('yellow', 'yellow')]\n```", "response_code": "\n# Test Case 1\nassert func(['red', 'green', 'blue'], 2) == [('red', 'red'), ('red', 'green'), ('red', 'blue'), ('green', 'green'), ('green', 'blue'), ('blue', 'blue')]\n\n# Test Case 2\nassert func(['yellow', 'purple', 'orange'], 3) == [('yellow', 'yellow', 'yellow'), ('yellow', 'yellow', 'purple'), ('yellow', 'yellow', 'orange'), ('yellow', 'purple', 'purple'), ('yellow', 'purple', 'orange'), ('yellow', 'orange', 'orange'), ('purple', 'purple', 'purple'), ('purple', 'purple', 'orange'), ('purple', 'orange', 'orange'), ('orange', 'orange', 'orange')]\n\n# Test Case 3\nassert func(['white', 'black'], 1) == [('white',), ('black',)]\n\n# Test Case 4\nassert func(['pink', 'brown', 'gray'], 2) == [('pink', 'pink'), ('pink', 'brown'), ('pink', 'gray'), ('brown', 'brown'), ('brown', 'gray'), ('gray', 'gray')]\n\n# Test Case 5\nassert func(['cyan', 'magenta', 'yellow'], 2) == [('cyan', 'cyan'), ('cyan', 'magenta'), ('cyan', 'yellow'), ('magenta', 'magenta'), ('magenta', 'yellow'), ('yellow', 'yellow')]\n"}
{"task_id": 131, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    Can you write a python function to count the number of prime numbers less than a given non-negative number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(10) == 4\nassert func(20) == 8\nassert func(30) == 10\nassert func(50) == 15\nassert func(100) == 25\n```", "response_code": "\nassert func(10) == 4\nassert func(20) == 8\nassert func(30) == 10\nassert func(50) == 15\nassert func(100) == 25\n"}
{"task_id": 132, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a,b):\n    '''\n    Can you write a function to swap two numbers?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(2, 3) == (3, 2)\nassert func(-5, 10) == (10, -5)\nassert func(0, 0) == (0, 0)\nassert func(100, 200) == (200, 100)\nassert func(-3, -7) == (-7, -3)", "response_code": "assert func(2, 3) == (3, 2)\nassert func(-5, 10) == (10, -5)\nassert func(0, 0) == (0, 0)\nassert func(100, 200) == (200, 100)\nassert func(-3, -7) == (-7, -3)"}
{"task_id": 133, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Can you write a function to maximize the given two tuples?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (4, 5, 6)) == (4, 5, 6)\nassert func((10, 20, 30), (4, 5, 6)) == (10, 20, 30)\nassert func((1, 2, 3), (1, 2, 3)) == (1, 2, 3)\nassert func((100, 200, 300), (50, 60, 70)) == (100, 200, 300)\nassert func((5, 10, 15), (5, 10, 15)) == (5, 10, 15)\n```", "response_code": "\nassert func((1, 2, 3), (4, 5, 6)) == (4, 5, 6)\nassert func((10, 20, 30), (4, 5, 6)) == (10, 20, 30)\nassert func((1, 2, 3), (1, 2, 3)) == (1, 2, 3)\nassert func((100, 200, 300), (50, 60, 70)) == (100, 200, 300)\nassert func((5, 10, 15), (5, 10, 15)) == (5, 10, 15)\n"}
{"task_id": 134, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a function to find the nth newman\u2013shanks\u2013williams prime number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 5\nassert func(2) == 11\nassert func(3) == 17\nassert func(4) == 41\nassert func(5) == 821", "response_code": "assert func(1) == 5\nassert func(2) == 11\nassert func(3) == 17\nassert func(4) == 41\nassert func(5) == 821"}
{"task_id": 135, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Can you write a function to perform mathematical division operation across the given tuples?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((10, 20), (2, 5)) == (5.0, 4.0)\nassert func((15, 30), (3, 6)) == (5.0, 5.0)\nassert func((25, 50), (5, 10)) == (5.0, 5.0)\nassert func((8, 16), (2, 4)) == (4.0, 4.0)\nassert func((12, 24), (3, 6)) == (4.0, 4.0)\n```", "response_code": "\nassert func((10, 20), (2, 5)) == (5.0, 4.0)\nassert func((15, 30), (3, 6)) == (5.0, 5.0)\nassert func((25, 50), (5, 10)) == (5.0, 5.0)\nassert func((8, 16), (2, 4)) == (4.0, 4.0)\nassert func((12, 24), (3, 6)) == (4.0, 4.0)\n"}
{"task_id": 136, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1, L):\n    '''\n    Can you write a function to split a given list into two parts where the length of the first part of the list is given?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])\nassert func([10, 20, 30, 40, 50, 60], 4) == ([10, 20, 30, 40], [50, 60])\nassert func(['a', 'b', 'c', 'd'], 1) == (['a'], ['b', 'c', 'd'])\nassert func([], 0) == ([], [])\nassert func([100], 1) == ([100], [])\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])\nassert func([10, 20, 30, 40, 50, 60], 4) == ([10, 20, 30, 40], [50, 60])\nassert func(['a', 'b', 'c', 'd'], 1) == (['a'], ['b', 'c', 'd'])\nassert func([], 0) == ([], [])\nassert func([100], 1) == ([100], [])\n"}
{"task_id": 137, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(h_age):\n    '''\n    Can you write a function to calculate a dog's age in dog's years?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 15\nassert func(2) == 24\nassert func(5) == 39\nassert func(10) == 64\nassert func(15) == 84", "response_code": "assert func(1) == 15\nassert func(2) == 24\nassert func(5) == 39\nassert func(10) == 64\nassert func(15) == 84"}
{"task_id": 138, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(S, step):\n    '''\n    Can you write a function to split a list for every nth element?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == [[1, 2], [3, 4], [5, 6], [7, 8], [9]]\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == [[1], [2], [3], [4], [5], [6], [7], [8], [9]]\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == [[1, 2, 3, 4, 5], [6, 7, 8, 9]]\n```", "response_code": "\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == [[1, 2], [3, 4], [5, 6], [7, 8], [9]]\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == [[1], [2], [3], [4], [5], [6], [7], [8], [9]]\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == [[1, 2, 3, 4, 5], [6, 7, 8, 9]]\n"}
{"task_id": 139, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l):\n    '''\n    Can you write a function to find the lateral surface area of a cube?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5) == 100\nassert func(3) == 54\nassert func(7) == 294\nassert func(0) == 0\nassert func(10) == 600\n```", "response_code": "\nassert func(5) == 100\nassert func(3) == 54\nassert func(7) == 294\nassert func(0) == 0\nassert func(10) == 600\n"}
{"task_id": 140, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):  \n    '''\n    Can you write a python function to find the sum of squares of first n odd natural numbers?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1  # 1^2 = 1\nassert func(2) == 10  # 1^2 + 3^2 = 1 + 9 = 10\nassert func(3) == 35  # 1^2 + 3^2 + 5^2 = 1 + 9 + 25 = 35\nassert func(4) == 84  # 1^2 + 3^2 + 5^2 + 7^2 = 1 + 9 + 25 + 49 = 84\nassert func(5) == 165  # 1^2 + 3^2 + 5^2 + 7^2 + 9^2 = 1 + 9 + 25 + 49 + 81 = 165\n```", "response_code": "\nassert func(1) == 1  # 1^2 = 1\nassert func(2) == 10  # 1^2 + 3^2 = 1 + 9 = 10\nassert func(3) == 35  # 1^2 + 3^2 + 5^2 = 1 + 9 + 25 = 35\nassert func(4) == 84  # 1^2 + 3^2 + 5^2 + 7^2 = 1 + 9 + 25 + 49 = 84\nassert func(5) == 165  # 1^2 + 3^2 + 5^2 + 7^2 + 9^2 = 1 + 9 + 25 + 49 + 81 = 165\n"}
{"task_id": 141, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a function to find the n'th star number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 1\nassert func(2) == 13\nassert func(3) == 37\nassert func(4) == 73\nassert func(5) == 121", "response_code": "assert func(1) == 1\nassert func(2) == 13\nassert func(3) == 37\nassert func(4) == 73\nassert func(5) == 121"}
{"task_id": 142, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(k):\n    '''\n    Can you write a function to find the ascii value of a character?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func('A') == 65\nassert func('a') == 97\nassert func('1') == 49\nassert func('!') == 33\nassert func(' ') == 32", "response_code": "assert func('A') == 65\nassert func('a') == 97\nassert func('1') == 49\nassert func('!') == 33\nassert func(' ') == 32"}
{"task_id": 143, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):  \n    '''\n    Can you write a python function to find the sum of even numbers at even positions?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5, 6]) == 6\nassert func([2, 4, 6, 8, 10]) == 20\nassert func([1, 3, 5, 7, 9]) == 0\nassert func([2, 3, 4, 5, 6, 7, 8, 9]) == 18\nassert func([10, 20, 30, 40, 50, 60]) == 120", "response_code": "assert func([1, 2, 3, 4, 5, 6]) == 6\nassert func([2, 4, 6, 8, 10]) == 20\nassert func([1, 3, 5, 7, 9]) == 0\nassert func([2, 3, 4, 5, 6, 7, 8, 9]) == 18\nassert func([10, 20, 30, 40, 50, 60]) == 120"}
{"task_id": 144, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a python function to find the sum of fifth power of first n even natural numbers?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 2**5\nassert func(2) == 2**5 + 4**5\nassert func(3) == 2**5 + 4**5 + 6**5\nassert func(4) == 2**5 + 4**5 + 6**5 + 8**5\nassert func(5) == 2**5 + 4**5 + 6**5 + 8**5 + 10**5", "response_code": "assert func(1) == 2**5\nassert func(2) == 2**5 + 4**5\nassert func(3) == 2**5 + 4**5 + 6**5\nassert func(4) == 2**5 + 4**5 + 6**5 + 8**5\nassert func(5) == 2**5 + 4**5 + 6**5 + 8**5 + 10**5"}
{"task_id": 145, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Can you write a function to perform the rear element extraction from a list of tuples records?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test Case 1\ntest_list = [(1, 'apple'), (2, 'banana'), (3, 'cherry')]\nassert func(test_list) == ['apple', 'banana', 'cherry']\n\n# Test Case 2\ntest_list = [(10, 'dog'), (20, 'cat'), (30, 'rabbit')]\nassert func(test_list) == ['dog', 'cat', 'rabbit']\n\n# Test Case 3\ntest_list = [(100, 'red'), (200, 'green'), (300, 'blue')]\nassert func(test_list) == ['red', 'green', 'blue']\n\n# Test Case 4\ntest_list = [(111, 'one'), (222, 'two'), (333, 'three')]\nassert func(test_list) == ['one', 'two', 'three']\n\n# Test Case 5\ntest_list = [(5, 'elephant'), (10, 'lion'), (15, 'tiger')]\nassert func(test_list) == ['elephant', 'lion', 'tiger']\n```", "response_code": "\n# Test Case 1\ntest_list = [(1, 'apple'), (2, 'banana'), (3, 'cherry')]\nassert func(test_list) == ['apple', 'banana', 'cherry']\n\n# Test Case 2\ntest_list = [(10, 'dog'), (20, 'cat'), (30, 'rabbit')]\nassert func(test_list) == ['dog', 'cat', 'rabbit']\n\n# Test Case 3\ntest_list = [(100, 'red'), (200, 'green'), (300, 'blue')]\nassert func(test_list) == ['red', 'green', 'blue']\n\n# Test Case 4\ntest_list = [(111, 'one'), (222, 'two'), (333, 'three')]\nassert func(test_list) == ['one', 'two', 'three']\n\n# Test Case 5\ntest_list = [(5, 'elephant'), (10, 'lion'), (15, 'tiger')]\nassert func(test_list) == ['elephant', 'lion', 'tiger']\n"}
{"task_id": 146, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Can you write a function to subtract the contents of one tuple with the corresponding index of another tuple?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (1, 1, 1)) == (0, 1, 2)\nassert func((5, 10, 15), (2, 4, 6)) == (3, 6, 9)\nassert func((0, 0, 0), (1, 2, 3)) == (-1, -2, -3)\nassert func((100, 200, 300), (10, 20, 30)) == (90, 180, 270)\nassert func((7, 8, 9), (7, 8, 9)) == (0, 0, 0)\n```", "response_code": "\nassert func((1, 2, 3), (1, 1, 1)) == (0, 1, 2)\nassert func((5, 10, 15), (2, 4, 6)) == (3, 6, 9)\nassert func((0, 0, 0), (1, 2, 3)) == (-1, -2, -3)\nassert func((100, 200, 300), (10, 20, 30)) == (90, 180, 270)\nassert func((7, 8, 9), (7, 8, 9)) == (0, 0, 0)\n"}
{"task_id": 147, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math  \ndef func( n): \n    '''\n    Can you write a python function to find the sum of even index binomial coefficients?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 1\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 3\nassert func(4) == 5\n```", "response_code": "\nassert func(0) == 1\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 3\nassert func(4) == 5\n"}
{"task_id": 148, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(r,h):\n    '''\n    Can you write a function to find the volume of a cylinder?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(2, 3) == 37.69911184307752\nassert func(5, 7) == 549.7787143782138\nassert func(1, 10) == 31.41592653589793\nassert func(3, 4) == 113.09733552923255\nassert func(6, 2) == 226.1946710584651", "response_code": "assert func(2, 3) == 37.69911184307752\nassert func(5, 7) == 549.7787143782138\nassert func(1, 10) == 31.41592653589793\nassert func(3, 4) == 113.09733552923255\nassert func(6, 2) == 226.1946710584651"}
{"task_id": 149, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(dict,n):\n    '''\n    Can you write a function to filter a dictionary based on values?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func({'a': 1, 'b': 2, 'c': 3, 'd': 2}, 2) == {'b': 2, 'd': 2}\nassert func({'apple': 5, 'banana': 3, 'cherry': 5, 'date': 7}, 5) == {'apple': 5, 'cherry': 5}\nassert func({'x': 10, 'y': 20, 'z': 30}, 15) == {'x': 10, 'y': 20, 'z': 30}\nassert func({'red': 100, 'green': 200, 'blue': 300}, 150) == {'red': 100, 'green': 200, 'blue': 300}\nassert func({'one': 1, 'two': 2, 'three': 3, 'four': 4}, 0) == {}", "response_code": "assert func({'a': 1, 'b': 2, 'c': 3, 'd': 2}, 2) == {'b': 2, 'd': 2}\nassert func({'apple': 5, 'banana': 3, 'cherry': 5, 'date': 7}, 5) == {'apple': 5, 'cherry': 5}\nassert func({'x': 10, 'y': 20, 'z': 30}, 15) == {'x': 10, 'y': 20, 'z': 30}\nassert func({'red': 100, 'green': 200, 'blue': 300}, 150) == {'red': 100, 'green': 200, 'blue': 300}\nassert func({'one': 1, 'two': 2, 'three': 3, 'four': 4}, 0) == {}"}
{"task_id": 150, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    Can you write a function to find the element count that occurs before the record in the given tuple?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func((1, 2, 3, 4, 5), 3) == 2\nassert func((10, 20, 30, 40, 50), 40) == 3\nassert func((5, 10, 15, 20, 25), 5) == 0\nassert func((100, 200, 300, 400, 500), 600) == -1\nassert func((1, 3, 5, 7, 9), 4) == 2", "response_code": "assert func((1, 2, 3, 4, 5), 3) == 2\nassert func((10, 20, 30, 40, 50), 40) == 3\nassert func((5, 10, 15, 20, 25), 5) == 0\nassert func((100, 200, 300, 400, 500), 600) == -1\nassert func((1, 3, 5, 7, 9), 4) == 2"}
{"task_id": 151, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a function to find the nth decagonal number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 10\nassert func(2) == 30\nassert func(3) == 60\nassert func(4) == 100\nassert func(5) == 150", "response_code": "assert func(1) == 10\nassert func(2) == 30\nassert func(3) == 60\nassert func(4) == 100\nassert func(5) == 150"}
{"task_id": 152, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(dlist, item):\n    '''\n    Can you write a function to search an element in the given array by using sequential search?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5], 3) == 2\nassert func([10, 20, 30, 40, 50], 40) == 3\nassert func([5, 10, 15, 20, 25], 100) == -1\nassert func([100, 200, 300, 400, 500], 200) == 1\nassert func([7, 14, 21, 28, 35], 7) == 0", "response_code": "assert func([1, 2, 3, 4, 5], 3) == 2\nassert func([10, 20, 30, 40, 50], 40) == 3\nassert func([5, 10, 15, 20, 25], 100) == -1\nassert func([100, 200, 300, 400, 500], 200) == 1\nassert func([7, 14, 21, 28, 35], 7) == 0"}
{"task_id": 153, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Can you write a python function to check if the elements of a given list are unique or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == True\nassert func([1, 2, 3, 4, 4]) == False\nassert func(['a', 'b', 'c', 'd']) == True\nassert func(['a', 'b', 'c', 'c']) == False\nassert func([]) == True", "response_code": "assert func([1, 2, 3, 4, 5]) == True\nassert func([1, 2, 3, 4, 4]) == False\nassert func(['a', 'b', 'c', 'd']) == True\nassert func(['a', 'b', 'c', 'c']) == False\nassert func([]) == True"}
{"task_id": 154, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums1,nums2):\n    '''\n    Can you write a function to subtract two lists using map and lambda function?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3], [1, 1, 1]) == [0, 1, 2]\nassert func([5, 10, 15], [2, 4, 6]) == [3, 6, 9]\nassert func([0, 0, 0], [1, 2, 3]) == [-1, -2, -3]\nassert func([10, 20, 30], [10, 20, 30]) == [0, 0, 0]\nassert func([100, 200, 300], [50, 100, 150]) == [50, 100, 150]", "response_code": "assert func([1, 2, 3], [1, 1, 1]) == [0, 1, 2]\nassert func([5, 10, 15], [2, 4, 6]) == [3, 6, 9]\nassert func([0, 0, 0], [1, 2, 3]) == [-1, -2, -3]\nassert func([10, 20, 30], [10, 20, 30]) == [0, 0, 0]\nassert func([100, 200, 300], [50, 100, 150]) == [50, 100, 150]"}
{"task_id": 155, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a python function to check whether the frequency of each digit is less than or equal to the digit itself?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(123) == True\nassert func(112233) == True\nassert func(444) == True\nassert func(9876543210) == False\nassert func(111222333) == False", "response_code": "assert func(123) == True\nassert func(112233) == True\nassert func(444) == True\nassert func(9876543210) == False\nassert func(111222333) == False"}
{"task_id": 156, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list,element):\n    '''\n    Can you write a function to check whether all items of a list are equal to a given string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(['apple', 'apple', 'apple'], 'apple') == True\nassert func(['apple', 'banana', 'apple'], 'apple') == False\nassert func(['apple', 'apple', 'apple'], 'banana') == False\nassert func([], 'apple') == True\nassert func(['apple', 'apple', 'apple'], '') == False", "response_code": "assert func(['apple', 'apple', 'apple'], 'apple') == True\nassert func(['apple', 'banana', 'apple'], 'apple') == False\nassert func(['apple', 'apple', 'apple'], 'banana') == False\nassert func([], 'apple') == True\nassert func(['apple', 'apple', 'apple'], '') == False"}
{"task_id": 157, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Can you write a function that matches a string that has an a followed by two to three 'b'?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"ab\") == False\nassert func(\"abb\") == True\nassert func(\"abbb\") == True\nassert func(\"abbbb\") == False\nassert func(\"aabbb\") == False\n```", "response_code": "\nassert func(\"ab\") == False\nassert func(\"abb\") == True\nassert func(\"abbb\") == True\nassert func(\"abbbb\") == False\nassert func(\"aabbb\") == False\n"}
{"task_id": 158, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a, n, k): \n    '''\n    Can you write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, -2, 3, 4], 4, 2) == 25\nassert func([1, -2, 3, 4], 4, 3) == 37\nassert func([1, -2, 3, 4], 4, 1) == 10\nassert func([5, -2, 7, 4, 2], 5, 2) == 52\nassert func([5, -2, 7, 4, 2], 5, 3) == 75\n```", "response_code": "\nassert func([1, -2, 3, 4], 4, 2) == 25\nassert func([1, -2, 3, 4], 4, 3) == 37\nassert func([1, -2, 3, 4], 4, 1) == 10\nassert func([5, -2, 7, 4, 2], 5, 2) == 52\nassert func([5, -2, 7, 4, 2], 5, 3) == 75\n"}
{"task_id": 159, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):  \n    '''\n    Can you write a python function to find the sum of squares of first n even natural numbers?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 4\nassert func(2) == 20\nassert func(3) == 56\nassert func(4) == 120\nassert func(5) == 220", "response_code": "assert func(1) == 4\nassert func(2) == 20\nassert func(3) == 56\nassert func(4) == 120\nassert func(5) == 220"}
{"task_id": 160, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Can you write a function to find the list of lists with maximum length?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [[6, 7, 8, 9]]\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 2], [3, 4], [5, 6], [7, 8]]\nassert func([[1], [2], [3], [4], [5]]) == [[1], [2], [3], [4], [5]]\nassert func([[1, 2, 3, 4, 5]]) == [[1, 2, 3, 4, 5]]\nassert func([]) == []", "response_code": "assert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [[6, 7, 8, 9]]\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 2], [3, 4], [5, 6], [7, 8]]\nassert func([[1], [2], [3], [4], [5]]) == [[1], [2], [3], [4], [5]]\nassert func([[1, 2, 3, 4, 5]]) == [[1, 2, 3, 4, 5]]\nassert func([]) == []"}
{"task_id": 161, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n, k): \n    '''\n    Can you write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 2) == 6\nassert func(4, 3) == 66\nassert func(5, 4) == 246\nassert func(6, 2) == 30\nassert func(7, 3) == 390\n```", "response_code": "\nassert func(3, 2) == 6\nassert func(4, 3) == 66\nassert func(5, 4) == 246\nassert func(6, 2) == 30\nassert func(7, 3) == 390\n"}
{"task_id": 162, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n,m):  \n    '''\n    Can you write a python function to find the quotient of two numbers?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(10, 2) == 5\nassert func(15, 3) == 5\nassert func(20, 4) == 5\nassert func(25, 5) == 5\nassert func(30, 6) == 5", "response_code": "assert func(10, 2) == 5\nassert func(15, 3) == 5\nassert func(20, 4) == 5\nassert func(25, 5) == 5\nassert func(30, 6) == 5"}
{"task_id": 163, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(w,h):\n    '''\n    Can you write a function to find the third side of a right angled triangle?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(3, 4) == 5\nassert func(5, 12) == 13\nassert func(7, 24) == 25\nassert func(8, 15) == 17\nassert func(9, 40) == 41", "response_code": "assert func(3, 4) == 5\nassert func(5, 12) == 13\nassert func(7, 24) == 25\nassert func(8, 15) == 17\nassert func(9, 40) == 41"}
{"task_id": 164, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(listval):\n    '''\n    Can you write a function to find the maximum value in a given heterogeneous list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == 5\nassert func([-10, 0, 10, 20, 30]) == 30\nassert func(['a', 'b', 'c', 'd', 'e']) == 'e'\nassert func([True, False, True, False]) == True\nassert func([1, 'a', True, 5.5]) == 5.5", "response_code": "assert func([1, 2, 3, 4, 5]) == 5\nassert func([-10, 0, 10, 20, 30]) == 30\nassert func(['a', 'b', 'c', 'd', 'e']) == 'e'\nassert func([True, False, True, False]) == True\nassert func([1, 'a', True, 5.5]) == 5.5"}
{"task_id": 165, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(number):\n    '''\n    Can you write a function to return the sum of all divisors of a number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(6) == 12\nassert func(10) == 18\nassert func(15) == 24\nassert func(28) == 56\nassert func(36) == 91", "response_code": "assert func(6) == 12\nassert func(10) == 18\nassert func(15) == 24\nassert func(28) == 56\nassert func(36) == 91"}
{"task_id": 166, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr): \n    '''\n    Can you write a python function to count inversions in an array?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == 0\nassert func([5, 4, 3, 2, 1]) == 10\nassert func([2, 4, 1, 3, 5]) == 3\nassert func([1, 1, 1, 1, 1]) == 0\nassert func([5, 3, 2, 4, 1]) == 8", "response_code": "assert func([1, 2, 3, 4, 5]) == 0\nassert func([5, 4, 3, 2, 1]) == 10\nassert func([2, 4, 1, 3, 5]) == 3\nassert func([1, 1, 1, 1, 1]) == 0\nassert func([5, 3, 2, 4, 1]) == 8"}
{"task_id": 167, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Can you write a function to flatten a given nested list structure?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([[1,2,3],[4,5],[6]]) == [1,2,3,4,5,6]\nassert func([[1],[2],[3]]) == [1,2,3]\nassert func([[1,2],[3,4],[5,6]]) == [1,2,3,4,5,6]\nassert func([[1,2,3],[4],[5,6]]) == [1,2,3,4,5,6]\nassert func([[1,2,3],[4,5,6]]) == [1,2,3,4,5,6]", "response_code": "assert func([[1,2,3],[4,5],[6]]) == [1,2,3,4,5,6]\nassert func([[1],[2],[3]]) == [1,2,3]\nassert func([[1,2],[3,4],[5,6]]) == [1,2,3,4,5,6]\nassert func([[1,2,3],[4],[5,6]]) == [1,2,3,4,5,6]\nassert func([[1,2,3],[4,5,6]]) == [1,2,3,4,5,6]"}
{"task_id": 168, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from collections import defaultdict\ndef func(stdata):\n    '''\n    Can you write a function to calculate the maximum aggregate from the list of tuples?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nstdata = [(1, 2), (3, 4), (5, 6)]\nassert func(stdata) == 15\n\nstdata = [(10, 20), (30, 40), (50, 60)]\nassert func(stdata) == 150\n\nstdata = [(5, 10), (15, 20), (25, 30)]\nassert func(stdata) == 75\n\nstdata = [(2, 8), (4, 6), (10, 12)]\nassert func(stdata) == 30\n\nstdata = [(7, 9), (11, 13), (15, 17)]\nassert func(stdata) == 42\n```", "response_code": "\nstdata = [(1, 2), (3, 4), (5, 6)]\nassert func(stdata) == 15\n\nstdata = [(10, 20), (30, 40), (50, 60)]\nassert func(stdata) == 150\n\nstdata = [(5, 10), (15, 20), (25, 30)]\nassert func(stdata) == 75\n\nstdata = [(2, 8), (4, 6), (10, 12)]\nassert func(stdata) == 30\n\nstdata = [(7, 9), (11, 13), (15, 17)]\nassert func(stdata) == 42\n"}
{"task_id": 169, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a function to find the count of all binary sequences of length 2n such that the sum of the first n bits is the same as the sum of the last n bits?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 2\nassert func(2) == 6\nassert func(3) == 20\nassert func(4) == 70\nassert func(5) == 252", "response_code": "assert func(1) == 2\nassert func(2) == 6\nassert func(3) == 20\nassert func(4) == 70\nassert func(5) == 252"}
{"task_id": 170, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(d):\n    '''\n    Can you write a function to find the depth of a dictionary?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func({}) == 1\nassert func({'a': 1}) == 2\nassert func({'a': {'b': 2}}) == 3\nassert func({'a': {'b': {'c': 3}}}) == 4\nassert func({'a': {'b': {'c': {'d': 4}}}}) == 5", "response_code": "assert func({}) == 1\nassert func({'a': 1}) == 2\nassert func({'a': {'b': 2}}) == 3\nassert func({'a': {'b': {'c': 3}}}) == 4\nassert func({'a': {'b': {'c': {'d': 4}}}}) == 5"}
{"task_id": 171, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr,ranges,rotations,index) :  \n    '''\n    Can you write a python function to find an element at a given index after a number of rotations?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], [(0, 2), (1, 3)], 2, 3) == 4\nassert func([1, 2, 3, 4, 5], [(0, 4)], 1, 2) == 5\nassert func([1, 2, 3, 4, 5], [(0, 1), (2, 3)], 3, 0) == 4\nassert func([1, 2, 3, 4, 5], [(0, 3)], 4, 1) == 1\nassert func([1, 2, 3, 4, 5], [(1, 4)], 1, 4) == 2\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], [(0, 2), (1, 3)], 2, 3) == 4\nassert func([1, 2, 3, 4, 5], [(0, 4)], 1, 2) == 5\nassert func([1, 2, 3, 4, 5], [(0, 1), (2, 3)], 3, 0) == 4\nassert func([1, 2, 3, 4, 5], [(0, 3)], 4, 1) == 1\nassert func([1, 2, 3, 4, 5], [(1, 4)], 1, 4) == 2\n"}
{"task_id": 172, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(words):\n    '''\n    Can you write a function to match two words from a list of words starting with letter 'p'?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['apple', 'banana', 'pear', 'peach']) == ['pear', 'peach']\nassert func(['potato', 'pineapple', 'pear', 'peach']) == ['potato', 'pineapple', 'pear', 'peach']\nassert func(['pear', 'peach', 'plum', 'pomegranate']) == ['pear', 'peach', 'plum', 'pomegranate']\nassert func(['peanut', 'pumpkin', 'potato', 'pineapple']) == ['peanut', 'pumpkin', 'potato', 'pineapple']\nassert func(['apple', 'banana', 'orange', 'kiwi']) == []\n```", "response_code": "\nassert func(['apple', 'banana', 'pear', 'peach']) == ['pear', 'peach']\nassert func(['potato', 'pineapple', 'pear', 'peach']) == ['potato', 'pineapple', 'pear', 'peach']\nassert func(['pear', 'peach', 'plum', 'pomegranate']) == ['pear', 'peach', 'plum', 'pomegranate']\nassert func(['peanut', 'pumpkin', 'potato', 'pineapple']) == ['peanut', 'pumpkin', 'potato', 'pineapple']\nassert func(['apple', 'banana', 'orange', 'kiwi']) == []\n"}
{"task_id": 173, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a, n, index, k):\n    '''\n    Can you write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 5, 2, 4) == 10\nassert func([3, 2, 6, 4, 5, 1], 6, 2, 4) == 12\nassert func([5, 4, 3, 2, 1], 5, 1, 3) == 7\nassert func([1, 2, 3, 4, 5], 5, 0, 3) == 6\nassert func([5, 4, 3, 2, 1], 5, 3, 4) == 9\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 5, 2, 4) == 10\nassert func([3, 2, 6, 4, 5, 1], 6, 2, 4) == 12\nassert func([5, 4, 3, 2, 1], 5, 1, 3) == 7\nassert func([1, 2, 3, 4, 5], 5, 0, 3) == 6\nassert func([5, 4, 3, 2, 1], 5, 3, 4) == 9\n"}
{"task_id": 174, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from copy import deepcopy\ndef func(tuplex,m,n):\n    '''\n    Can you write a function to get a colon of a tuple?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\ntuplex = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nm = 1\nn = 2\nassert func(tuplex, m, n) == (3, 6, 9)\n\ntuplex = ((10, 20, 30), (40, 50, 60), (70, 80, 90))\nm = 0\nn = 1\nassert func(tuplex, m, n) == (10, 40, 70)\n\ntuplex = ((11, 22, 33), (44, 55, 66), (77, 88, 99))\nm = 2\nn = 0\nassert func(tuplex, m, n) == (77, 44, 11)\n\ntuplex = ((111, 222, 333), (444, 555, 666), (777, 888, 999))\nm = 0\nn = 0\nassert func(tuplex, m, n) == (111, 444, 777)\n\ntuplex = ((1111, 2222, 3333), (4444, 5555, 6666), (7777, 8888, 9999))\nm = 2\nn = 2\nassert func(tuplex, m, n) == (3333, 6666, 9999)\n```", "response_code": "\ntuplex = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nm = 1\nn = 2\nassert func(tuplex, m, n) == (3, 6, 9)\n\ntuplex = ((10, 20, 30), (40, 50, 60), (70, 80, 90))\nm = 0\nn = 1\nassert func(tuplex, m, n) == (10, 40, 70)\n\ntuplex = ((11, 22, 33), (44, 55, 66), (77, 88, 99))\nm = 2\nn = 0\nassert func(tuplex, m, n) == (77, 44, 11)\n\ntuplex = ((111, 222, 333), (444, 555, 666), (777, 888, 999))\nm = 0\nn = 0\nassert func(tuplex, m, n) == (111, 444, 777)\n\ntuplex = ((1111, 2222, 3333), (4444, 5555, 6666), (7777, 8888, 9999))\nm = 2\nn = 2\nassert func(tuplex, m, n) == (3333, 6666, 9999)\n"}
{"task_id": 175, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums1, nums2, N):\n    '''\n    Can you write a function to find the specified number of largest products from two given lists?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], [4, 5, 6], 1) == [18]\nassert func([1, 2, 3], [4, 5, 6], 2) == [18, 15]\nassert func([1, 2, 3], [4, 5, 6], 3) == [18, 15, 12]\nassert func([5, 10, 15], [2, 4, 6], 2) == [90, 75]\nassert func([5, 10, 15], [2, 4, 6], 3) == [90, 75, 60]\n```", "response_code": "\nassert func([1, 2, 3], [4, 5, 6], 1) == [18]\nassert func([1, 2, 3], [4, 5, 6], 2) == [18, 15]\nassert func([1, 2, 3], [4, 5, 6], 3) == [18, 15, 12]\nassert func([5, 10, 15], [2, 4, 6], 2) == [90, 75]\nassert func([5, 10, 15], [2, 4, 6], 3) == [90, 75, 60]\n"}
{"task_id": 176, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a,b):   \n    '''\n    Can you write a python function to find the maximum of two numbers?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(3, 5) == 5\nassert func(10, 10) == 10\nassert func(-2, 0) == 0\nassert func(100, 50) == 100\nassert func(-5, -10) == -5", "response_code": "assert func(3, 5) == 5\nassert func(10, 10) == 10\nassert func(-2, 0) == 0\nassert func(100, 50) == 100\nassert func(-5, -10) == -5"}
{"task_id": 177, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1):\n    '''\n    Can you write a function to convert a given string to a tuple?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\") == ('h', 'e', 'l', 'l', 'o')\nassert func(\"12345\") == ('1', '2', '3', '4', '5')\nassert func(\"abcde\") == ('a', 'b', 'c', 'd', 'e')\nassert func(\"\") == ()\nassert func(\"testing 123\") == ('t', 'e', 's', 't', 'i', 'n', 'g', ' ', '1', '2', '3')", "response_code": "assert func(\"hello\") == ('h', 'e', 'l', 'l', 'o')\nassert func(\"12345\") == ('1', '2', '3', '4', '5')\nassert func(\"abcde\") == ('a', 'b', 'c', 'd', 'e')\nassert func(\"\") == ()\nassert func(\"testing 123\") == ('t', 'e', 's', 't', 'i', 'n', 'g', ' ', '1', '2', '3')"}
{"task_id": 178, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a python function to set the left most unset bit?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0b1010) == 0b1011\nassert func(0b1100) == 0b1101\nassert func(0b1111) == 0b10000\nassert func(0b100000) == 0b100001\nassert func(0b1001) == 0b1010\n```", "response_code": "\nassert func(0b1010) == 0b1011\nassert func(0b1100) == 0b1101\nassert func(0b1111) == 0b10000\nassert func(0b100000) == 0b100001\nassert func(0b1001) == 0b1010\n"}
{"task_id": 179, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(r,h):\n    '''\n    Can you write a function to find the volume of a cone?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 4) == math.pi * 3**2 * 4 / 3  # r=3, h=4\nassert func(5, 7) == math.pi * 5**2 * 7 / 3  # r=5, h=7\nassert func(1, 10) == math.pi * 1**2 * 10 / 3  # r=1, h=10\nassert func(2, 6) == math.pi * 2**2 * 6 / 3  # r=2, h=6\nassert func(4, 8) == math.pi * 4**2 * 8 / 3  # r=4, h=8\n```", "response_code": "\nassert func(3, 4) == math.pi * 3**2 * 4 / 3  # r=3, h=4\nassert func(5, 7) == math.pi * 5**2 * 7 / 3  # r=5, h=7\nassert func(1, 10) == math.pi * 1**2 * 10 / 3  # r=1, h=10\nassert func(2, 6) == math.pi * 2**2 * 6 / 3  # r=2, h=6\nassert func(4, 8) == math.pi * 4**2 * 8 / 3  # r=4, h=8\n"}
{"task_id": 180, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a python function to find the highest power of 2 that is less than or equal to n?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(10) == 8\nassert func(16) == 16\nassert func(25) == 16\nassert func(32) == 32\nassert func(100) == 64", "response_code": "assert func(10) == 8\nassert func(16) == 16\nassert func(25) == 16\nassert func(32) == 32\nassert func(100) == 64"}
{"task_id": 181, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a function to find the n'th lucas number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 2\nassert func(1) == 1\nassert func(5) == 11\nassert func(10) == 123\nassert func(15) == 1364\n```", "response_code": "\nassert func(0) == 2\nassert func(1) == 1\nassert func(5) == 11\nassert func(10) == 123\nassert func(15) == 1364\n"}
{"task_id": 182, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list_, string):\n    '''\n    Can you write a function to insert a given string at the beginning of all items in a list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], 'a') == ['a1', 'a2', 'a3']\nassert func(['apple', 'banana', 'cherry'], 'fruit_') == ['fruit_apple', 'fruit_banana', 'fruit_cherry']\nassert func([], 'hello') == []\nassert func([True, False], 'is_') == ['is_True', 'is_False']\nassert func(['cat', 'dog', 'bird'], '') == ['cat', 'dog', 'bird']\n```", "response_code": "\nassert func([1, 2, 3], 'a') == ['a1', 'a2', 'a3']\nassert func(['apple', 'banana', 'cherry'], 'fruit_') == ['fruit_apple', 'fruit_banana', 'fruit_cherry']\nassert func([], 'hello') == []\nassert func([True, False], 'is_') == ['is_True', 'is_False']\nassert func(['cat', 'dog', 'bird'], '') == ['cat', 'dog', 'bird']\n"}
{"task_id": 183, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l1, l2, l3):\n    '''\n    Can you write a function to convert more than one list to nested dictionary?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(['a', 'b', 'c'], [1, 2, 3], ['x', 'y', 'z']) == {'a': {1: 'x', 2: 'y', 3: 'z'}}\nassert func(['apple', 'banana'], [3, 5], ['red', 'yellow']) == {'apple': {3: 'red', 5: 'yellow'}, 'banana': {}}\nassert func([1, 2, 3], ['a', 'b'], ['x', 'y', 'z']) == {1: {'a': 'x', 'b': 'y'}, 2: {}, 3: {'z': {}}}\nassert func([], [], []) == {}\nassert func(['hello'], [1], ['world']) == {'hello': {1: 'world'}}", "response_code": "assert func(['a', 'b', 'c'], [1, 2, 3], ['x', 'y', 'z']) == {'a': {1: 'x', 2: 'y', 3: 'z'}}\nassert func(['apple', 'banana'], [3, 5], ['red', 'yellow']) == {'apple': {3: 'red', 5: 'yellow'}, 'banana': {}}\nassert func([1, 2, 3], ['a', 'b'], ['x', 'y', 'z']) == {1: {'a': 'x', 'b': 'y'}, 2: {}, 3: {'z': {}}}\nassert func([], [], []) == {}\nassert func(['hello'], [1], ['world']) == {'hello': {1: 'world'}}"}
{"task_id": 184, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    Can you write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)?\n    '''\n    pass\n\n# check the correctness of func \nassert "}], "response": "```python\nassert func(10) == 12\nassert func(20) == 21\nassert func(30) == 31\nassert func(50) == 52\nassert func(100) == 105\n```", "response_code": "\nassert func(10) == 12\nassert func(20) == 21\nassert func(30) == 31\nassert func(50) == 52\nassert func(100) == 105\n"}
{"task_id": 185, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(input_list):\n    '''\n    Can you write a function to find the list with maximum length using a lambda function?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]\nassert func([[1], [2, 3], [4, 5, 6]]) == [4, 5, 6]\nassert func([[1, 2], [3, 4], [5, 6], [7, 8, 9]]) == [7, 8, 9]\nassert func([[1, 2, 3, 4], [5, 6], [7, 8]]) == [1, 2, 3, 4]\nassert func([[1, 2], [3], [4, 5, 6, 7]]) == [4, 5, 6, 7]\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]\nassert func([[1], [2, 3], [4, 5, 6]]) == [4, 5, 6]\nassert func([[1, 2], [3, 4], [5, 6], [7, 8, 9]]) == [7, 8, 9]\nassert func([[1, 2, 3, 4], [5, 6], [7, 8]]) == [1, 2, 3, 4]\nassert func([[1, 2], [3], [4, 5, 6, 7]]) == [4, 5, 6, 7]\n"}
{"task_id": 186, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    Can you write a function to check if a given tuple is distinct or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func((1, 2, 3, 4)) == True\nassert func((1, 2, 2, 4)) == False\nassert func(('a', 'b', 'c')) == True\nassert func(('a', 'b', 'b')) == False\nassert func(()) == True", "response_code": "assert func((1, 2, 3, 4)) == True\nassert func((1, 2, 2, 4)) == False\nassert func(('a', 'b', 'c')) == True\nassert func(('a', 'b', 'b')) == False\nassert func(()) == True"}
{"task_id": 187, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1):\n    '''\n    Can you write a python function to find the first non-repeated character in a given string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\") == \"h\"\nassert func(\"programming\") == \"p\"\nassert func(\"python\") == \"y\"\nassert func(\"racecar\") == \"e\"\nassert func(\"aabbc\") == \"c\"", "response_code": "assert func(\"hello\") == \"h\"\nassert func(\"programming\") == \"p\"\nassert func(\"python\") == \"y\"\nassert func(\"racecar\") == \"e\"\nassert func(\"aabbc\") == \"c\""}
{"task_id": 188, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef func(string): \n    '''\n    Can you write a function to check whether the given string starts and ends with the same character or not using regex?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == False\nassert func(\"level\") == True\nassert func(\"racecar\") == True\nassert func(\"python\") == False\nassert func(\"aba\") == True\n```", "response_code": "\nassert func(\"hello\") == False\nassert func(\"level\") == True\nassert func(\"racecar\") == True\nassert func(\"python\") == False\nassert func(\"aba\") == True\n"}
{"task_id": 189, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a,b,c):\n    '''\n    Can you write a function to find the median of three specific numbers?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1,2,3) == 2\nassert func(4,4,4) == 4\nassert func(10,5,15) == 10\nassert func(-1,0,1) == 0\nassert func(100,200,300) == 200", "response_code": "assert func(1,2,3) == 2\nassert func(4,4,4) == 4\nassert func(10,5,15) == 10\nassert func(-1,0,1) == 0\nassert func(100,200,300) == 200"}
{"task_id": 190, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Can you write a function to compute the sum of digits of each number of a given list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([123, 456, 789]) == [6, 15, 24]\nassert func([111, 222, 333]) == [3, 6, 9]\nassert func([9876, 5432, 1098]) == [30, 14, 18]\nassert func([876, 543, 210]) == [21, 12, 3]\nassert func([999, 888, 777]) == [27, 24, 21]", "response_code": "assert func([123, 456, 789]) == [6, 15, 24]\nassert func([111, 222, 333]) == [3, 6, 9]\nassert func([9876, 5432, 1098]) == [30, 14, 18]\nassert func([876, 543, 210]) == [21, 12, 3]\nassert func([999, 888, 777]) == [27, 24, 21]"}
{"task_id": 191, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Can you write a function to perform the mathematical bitwise xor operation across the given tuples?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (2, 3, 4)) == (3, 1, 7)\nassert func((5, 6, 7), (2, 2, 2)) == (7, 4, 5)\nassert func((0, 0, 0), (1, 1, 1)) == (1, 1, 1)\nassert func((255, 255, 255), (0, 0, 0)) == (255, 255, 255)\nassert func((8, 16, 32), (8, 16, 32)) == (0, 0, 0)\n```", "response_code": "\nassert func((1, 2, 3), (2, 3, 4)) == (3, 1, 7)\nassert func((5, 6, 7), (2, 2, 2)) == (7, 4, 5)\nassert func((0, 0, 0), (1, 1, 1)) == (1, 1, 1)\nassert func((255, 255, 255), (0, 0, 0)) == (255, 255, 255)\nassert func((8, 16, 32), (8, 16, 32)) == (0, 0, 0)\n"}
{"task_id": 192, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Can you write a function to extract the frequency of unique tuples in the given list order irrespective?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (2, 1), (1, 2), (3, 4)]) == {(1, 2): 2, (2, 1): 1, (3, 4): 1}\nassert func([(1, 2), (1, 2), (1, 2), (1, 2)]) == {(1, 2): 4}\nassert func([(1, 2), (2, 1), (1, 2), (1, 2), (2, 1)]) == {(1, 2): 3, (2, 1): 2}\nassert func([(1, 2), (2, 1), (3, 4), (5, 6)]) == {(1, 2): 1, (2, 1): 1, (3, 4): 1, (5, 6): 1}\nassert func([(1, 2), (2, 1), (1, 2), (3, 4), (3, 4), (3, 4)]) == {(1, 2): 1, (2, 1): 1, (3, 4): 3}\n```", "response_code": "\nassert func([(1, 2), (2, 1), (1, 2), (3, 4)]) == {(1, 2): 2, (2, 1): 1, (3, 4): 1}\nassert func([(1, 2), (1, 2), (1, 2), (1, 2)]) == {(1, 2): 4}\nassert func([(1, 2), (2, 1), (1, 2), (1, 2), (2, 1)]) == {(1, 2): 3, (2, 1): 2}\nassert func([(1, 2), (2, 1), (3, 4), (5, 6)]) == {(1, 2): 1, (2, 1): 1, (3, 4): 1, (5, 6): 1}\nassert func([(1, 2), (2, 1), (1, 2), (3, 4), (3, 4), (3, 4)]) == {(1, 2): 1, (2, 1): 1, (3, 4): 3}\n"}
{"task_id": 193, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Can you write a function to perform index wise addition of tuple elements in the given two nested tuples?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(((1, 2), (3, 4)), ((5, 6), (7, 8))) == ((6, 8), (10, 12))\nassert func(((0, 0), (0, 0)), ((1, 1), (1, 1))) == ((1, 1), (1, 1))\nassert func(((10, 20), (30, 40)), ((-5, -10), (-15, -20))) == ((5, 10), (15, 20))\nassert func(((100, 200), (300, 400)), ((-50, -100), (-150, -200))) == ((50, 100), (150, 200))\nassert func(((2, 3, 5), (7, 11, 13)), ((1, 2, 3), (4, 5, 6))) == ((3, 5, 8), (11, 16, 19))\n```", "response_code": "\nassert func(((1, 2), (3, 4)), ((5, 6), (7, 8))) == ((6, 8), (10, 12))\nassert func(((0, 0), (0, 0)), ((1, 1), (1, 1))) == ((1, 1), (1, 1))\nassert func(((10, 20), (30, 40)), ((-5, -10), (-15, -20))) == ((5, 10), (15, 20))\nassert func(((100, 200), (300, 400)), ((-50, -100), (-150, -200))) == ((50, 100), (150, 200))\nassert func(((2, 3, 5), (7, 11, 13)), ((1, 2, 3), (4, 5, 6))) == ((3, 5, 8), (11, 16, 19))\n"}
{"task_id": 194, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a,b):   \n    '''\n    Can you write a python function to find the minimum of two numbers?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(3, 5) == 3\nassert func(10, 2) == 2\nassert func(-1, 1) == -1\nassert func(0, 0) == 0\nassert func(100, 100) == 100", "response_code": "assert func(3, 5) == 3\nassert func(10, 2) == 2\nassert func(-1, 1) == -1\nassert func(0, 0) == 0\nassert func(100, 100) == 100"}
{"task_id": 195, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(tuplex,tuple1): \n    '''\n    Can you write a function to check whether an element exists within a tuple?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), 2) == True\nassert func(('a', 'b', 'c'), 'd') == False\nassert func((True, False, True), False) == True\nassert func(('apple', 'banana', 'cherry'), 'apple') == True\nassert func((4.5, 6.7, 8.9), 5.5) == False\n```", "response_code": "\nassert func((1, 2, 3), 2) == True\nassert func(('a', 'b', 'c'), 'd') == False\nassert func((True, False, True), False) == True\nassert func(('apple', 'banana', 'cherry'), 'apple') == True\nassert func((4.5, 6.7, 8.9), 5.5) == False\n"}
{"task_id": 196, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x): \n    '''\n    Can you write a python function to find the parity of a given number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(0) == 'even'\nassert func(1) == 'odd'\nassert func(10) == 'even'\nassert func(15) == 'odd'\nassert func(-5) == 'odd'", "response_code": "assert func(0) == 'even'\nassert func(1) == 'odd'\nassert func(10) == 'even'\nassert func(15) == 'odd'\nassert func(-5) == 'odd'"}
{"task_id": 197, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    Can you write a function to create the next bigger number by rearranging the digits of a given number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(123) == 132\nassert func(9876543210) == 1023456789\nassert func(111) == 111\nassert func(54321) == 12345\nassert func(999) == 999", "response_code": "assert func(123) == 132\nassert func(9876543210) == 1023456789\nassert func(111) == 111\nassert func(54321) == 12345\nassert func(999) == 999"}
{"task_id": 198, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import heapq\ndef func(nums1, nums2, k):\n    '''\n    Can you write a function to find k number of pairs which consist of one element from the first array and one element from the second array?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1,7,11], [2,4,6], 3) == [(1, 2), (1, 4), (1, 6)]\nassert func([1,1,2], [1,2,3], 2) == [(1, 1), (1, 1)]\nassert func([1,2], [3,4], 1) == [(1, 3)]\nassert func([5,6,7], [1,2,3], 4) == [(5, 1), (5, 2), (5, 3), (6, 1)]\nassert func([3,5,7], [2,4,6], 5) == [(3, 2), (3, 4), (3, 6), (5, 2), (5, 4)]\n```", "response_code": "\nassert func([1,7,11], [2,4,6], 3) == [(1, 2), (1, 4), (1, 6)]\nassert func([1,1,2], [1,2,3], 2) == [(1, 1), (1, 1)]\nassert func([1,2], [3,4], 1) == [(1, 3)]\nassert func([5,6,7], [1,2,3], 4) == [(5, 1), (5, 2), (5, 3), (6, 1)]\nassert func([3,5,7], [2,4,6], 5) == [(3, 2), (3, 4), (3, 6), (5, 2), (5, 4)]\n"}
{"task_id": 199, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Can you write a function to find the minimum product from the pairs of tuples within a given list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (3, 4), (5, 6)]) == 6\nassert func([(-1, 2), (3, -4), (5, 6)]) == -24\nassert func([(0, 2), (3, 4), (5, 6)]) == 0\nassert func([(1, 1), (1, 1), (1, 1)]) == 1\nassert func([(2, 3), (4, 5), (6, 7)]) == 6\n```", "response_code": "\nassert func([(1, 2), (3, 4), (5, 6)]) == 6\nassert func([(-1, 2), (3, -4), (5, 6)]) == -24\nassert func([(0, 2), (3, 4), (5, 6)]) == 0\nassert func([(1, 1), (1, 1), (1, 1)]) == 1\nassert func([(2, 3), (4, 5), (6, 7)]) == 6\n"}
{"task_id": 200, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(listval):\n    '''\n    Can you write a function to find the minimum value in a given heterogeneous list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([5, 'a', 3.5, -2]) == -2\nassert func(['hello', 'world', 'python']) == 'hello'\nassert func([True, False, 0, 1]) == 0\nassert func([10, 20, 30, 40, 50]) == 10\nassert func([-5, -10, -15, -20]) == -20", "response_code": "assert func([5, 'a', 3.5, -2]) == -2\nassert func(['hello', 'world', 'python']) == 'hello'\nassert func([True, False, 0, 1]) == 0\nassert func([10, 20, 30, 40, 50]) == 10\nassert func([-5, -10, -15, -20]) == -20"}
{"task_id": 201, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(word):\n    '''\n    Can you write a function to convert the given snake case string to camel case string by using regex?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello_world\") == \"helloWorld\"\nassert func(\"snake_case_example\") == \"snakeCaseExample\"\nassert func(\"this_is_a_long_snake_case_string\") == \"thisIsALongSnakeCaseString\"\nassert func(\"camel_case_string\") == \"camelCaseString\"\nassert func(\"another_example\") == \"anotherExample\"\n```", "response_code": "\nassert func(\"hello_world\") == \"helloWorld\"\nassert func(\"snake_case_example\") == \"snakeCaseExample\"\nassert func(\"this_is_a_long_snake_case_string\") == \"thisIsALongSnakeCaseString\"\nassert func(\"camel_case_string\") == \"camelCaseString\"\nassert func(\"another_example\") == \"anotherExample\"\n"}
{"task_id": 202, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l):\n    '''\n    Can you write a python function to remove odd numbers from a given list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == [2, 4]\nassert func([11, 22, 33, 44, 55]) == [22, 44]\nassert func([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10]\nassert func([15, 25, 35, 45, 55]) == []\nassert func([1, 3, 5, 7, 9]) == []", "response_code": "assert func([1, 2, 3, 4, 5]) == [2, 4]\nassert func([11, 22, 33, 44, 55]) == [22, 44]\nassert func([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10]\nassert func([15, 25, 35, 45, 55]) == []\nassert func([1, 3, 5, 7, 9]) == []"}
{"task_id": 203, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1, n):\n    '''\n    Can you write a function to extract the nth element from a given list of tuples?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (3, 4), (5, 6)], 0) == [1, 3, 5]\nassert func([(1, 2), (3, 4), (5, 6)], 1) == [2, 4, 6]\nassert func([(10, 20, 30), (40, 50, 60), (70, 80, 90)], 2) == [30, 60, 90]\nassert func([(1,), (2,), (3,)], 0) == [1, 2, 3]\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == [3, 6, 9]\n```", "response_code": "\nassert func([(1, 2), (3, 4), (5, 6)], 0) == [1, 3, 5]\nassert func([(1, 2), (3, 4), (5, 6)], 1) == [2, 4, 6]\nassert func([(10, 20, 30), (40, 50, 60), (70, 80, 90)], 2) == [30, 60, 90]\nassert func([(1,), (2,), (3,)], 0) == [1, 2, 3]\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == [3, 6, 9]\n"}
{"task_id": 204, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1,list2):  \n    '''\n    Can you write a python function to check whether the value exists in a sequence or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 3) == True\nassert func([1, 2, 3, 4, 5], 6) == False\nassert func(['a', 'b', 'c', 'd'], 'c') == True\nassert func(['apple', 'banana', 'cherry'], 'pear') == False\nassert func([True, False, True], False) == True\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 3) == True\nassert func([1, 2, 3, 4, 5], 6) == False\nassert func(['a', 'b', 'c', 'd'], 'c') == True\nassert func(['apple', 'banana', 'cherry'], 'pear') == False\nassert func([True, False, True], False) == True\n"}
{"task_id": 205, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr): \n    '''\n    Can you write a python function to find a pair with highest product from a given array of integers?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == (4, 5)\nassert func([-10, -3, 5, 2, -7]) == (-10, -7)\nassert func([0, 1, 2, 3, 4]) == (3, 4)\nassert func([-5, -4, -3, -2, -1]) == (-1, -2)\nassert func([2, 2, 2, 2, 2]) == (2, 2)", "response_code": "assert func([1, 2, 3, 4, 5]) == (4, 5)\nassert func([-10, -3, 5, 2, -7]) == (-10, -7)\nassert func([0, 1, 2, 3, 4]) == (3, 4)\nassert func([-5, -4, -3, -2, -1]) == (-1, -2)\nassert func([2, 2, 2, 2, 2]) == (2, 2)"}
{"task_id": 206, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(Input): \n    '''\n    Can you write a function to find the common first element in a given list of tuples?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([(1, 2), (1, 3), (1, 4)]) == 1\nassert func([(5, 2), (3, 5), (5, 4)]) == 5\nassert func([(7, 2), (7, 3), (7, 4)]) == 7\nassert func([(1, 2), (3, 4), (5, 6)]) == None\nassert func([(1, 2), (1, 3), (1, 4), (1, 5)]) == 1", "response_code": "assert func([(1, 2), (1, 3), (1, 4)]) == 1\nassert func([(5, 2), (3, 5), (5, 4)]) == 5\nassert func([(7, 2), (7, 3), (7, 4)]) == 7\nassert func([(1, 2), (3, 4), (5, 6)]) == None\nassert func([(1, 2), (1, 3), (1, 4), (1, 5)]) == 1"}
{"task_id": 207, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lst): \n    '''\n    Can you write a python function to find the sublist having maximum length?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]\nassert func([[1, 2], [3, 4, 5], [6, 7]]) == [3, 4, 5]\nassert func([[1], [2], [3], [4]]) == [1]\nassert func([[1, 2, 3, 4, 5]]) == [1, 2, 3, 4, 5]\nassert func([[1, 2], [3], [4, 5, 6]]) == [4, 5, 6]", "response_code": "assert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]\nassert func([[1, 2], [3, 4, 5], [6, 7]]) == [3, 4, 5]\nassert func([[1], [2], [3], [4]]) == [1]\nassert func([[1, 2, 3, 4, 5]]) == [1, 2, 3, 4, 5]\nassert func([[1, 2], [3], [4, 5, 6]]) == [4, 5, 6]"}
{"task_id": 208, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Can you write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1.5, 2.3, 3.8]) == 21\nassert func([4.2, 5.7, 6.9, 7.1]) == 48\nassert func([0.9, 1.1, 2.5, 3.7, 4.9]) == 44\nassert func([2.4, 3.6, 4.8, 5.2, 6.7, 7.9]) == 60\nassert func([1.2, 2.3, 3.4, 4.5, 5.6, 6.7, 7.8]) == 63\n```", "response_code": "\nassert func([1.5, 2.3, 3.8]) == 21\nassert func([4.2, 5.7, 6.9, 7.1]) == 48\nassert func([0.9, 1.1, 2.5, 3.7, 4.9]) == 44\nassert func([2.4, 3.6, 4.8, 5.2, 6.7, 7.9]) == 60\nassert func([1.2, 2.3, 3.4, 4.5, 5.6, 6.7, 7.8]) == 63\n"}
{"task_id": 209, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a python function to find the cube sum of first n even natural numbers?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 8\nassert func(2) == 72\nassert func(3) == 216\nassert func(4) == 432\nassert func(5) == 720", "response_code": "assert func(1) == 8\nassert func(2) == 72\nassert func(3) == 216\nassert func(4) == 432\nassert func(5) == 720"}
{"task_id": 210, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    Can you write a function to concatenate each element of a tuple by the delimiter?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(('a', 'b', 'c'), '-') == 'a-b-c'\nassert func(('hello', 'world'), ' ') == 'hello world'\nassert func(('123', '456', '789'), '') == '123456789'\nassert func(('apple', 'banana', 'cherry'), ', ') == 'apple, banana, cherry'\nassert func(('cat', 'dog', 'rabbit'), '->') == 'cat->dog->rabbit'\n```", "response_code": "\nassert func(('a', 'b', 'c'), '-') == 'a-b-c'\nassert func(('hello', 'world'), ' ') == 'hello world'\nassert func(('123', '456', '789'), '') == '123456789'\nassert func(('apple', 'banana', 'cherry'), ', ') == 'apple, banana, cherry'\nassert func(('cat', 'dog', 'rabbit'), '->') == 'cat->dog->rabbit'\n"}
{"task_id": 211, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):  \n    '''\n    Can you write a python function to find the average of cubes of first n natural numbers?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 1\nassert func(2) == 4.5\nassert func(3) == 14.67\nassert func(5) == 55\nassert func(10) == 385", "response_code": "assert func(1) == 1\nassert func(2) == 4.5\nassert func(3) == 14.67\nassert func(5) == 55\nassert func(10) == 385"}
{"task_id": 212, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tuple):\n    '''\n    Can you write a function to extract only the rear index element of each string in the given tuple?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(('apple', 'banana', 'cherry')) == ('e', 'a', 'y')\nassert func(('hello', 'world', 'python')) == ('o', 'd', 'n')\nassert func(('123', '456', '789')) == ('3', '6', '9')\nassert func(('cat', 'dog', 'bird')) == ('t', 'g', 'd')\nassert func(('sun', 'moon', 'star')) == ('n', 'n', 'r')\n```", "response_code": "\nassert func(('apple', 'banana', 'cherry')) == ('e', 'a', 'y')\nassert func(('hello', 'world', 'python')) == ('o', 'd', 'n')\nassert func(('123', '456', '789')) == ('3', '6', '9')\nassert func(('cat', 'dog', 'bird')) == ('t', 'g', 'd')\nassert func(('sun', 'moon', 'star')) == ('n', 'n', 'r')\n"}
{"task_id": 213, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1, x): \n    '''\n    Can you write a function to count the number of sublists containing a particular element?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([[1, 2, 3], [4, 5], [6, 7, 8, 9], [1, 2, 3]], 1) == 2\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9], [1, 2, 3]], 4) == 1\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9], [1, 2, 3]], 9) == 1\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9], [1, 2, 3]], 10) == 0\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9], [1, 2, 3]], 3) == 2", "response_code": "assert func([[1, 2, 3], [4, 5], [6, 7, 8, 9], [1, 2, 3]], 1) == 2\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9], [1, 2, 3]], 4) == 1\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9], [1, 2, 3]], 9) == 1\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9], [1, 2, 3]], 10) == 0\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9], [1, 2, 3]], 3) == 2"}
{"task_id": 214, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Can you write a function to filter odd numbers using lambda function?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == [1, 3, 5]\nassert func([10, 21, 36, 47, 50]) == [21, 47]\nassert func([2, 4, 6, 8, 10]) == []\nassert func([15, 25, 35, 45, 55]) == [15, 25, 35, 45, 55]\nassert func([11, 22, 33, 44, 55]) == [11, 33, 55]", "response_code": "assert func([1, 2, 3, 4, 5]) == [1, 3, 5]\nassert func([10, 21, 36, 47, 50]) == [21, 47]\nassert func([2, 4, 6, 8, 10]) == []\nassert func([15, 25, 35, 45, 55]) == [15, 25, 35, 45, 55]\nassert func([11, 22, 33, 44, 55]) == [11, 33, 55]"}
{"task_id": 215, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(dt):\n    '''\n    Can you write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"2022-12-31\") == \"31-12-2022\"\nassert func(\"1999-01-15\") == \"15-01-1999\"\nassert func(\"2023-05-20\") == \"20-05-2023\"\nassert func(\"2000-10-05\") == \"05-10-2000\"\nassert func(\"1988-03-08\") == \"08-03-1988\"\n```", "response_code": "\nassert func(\"2022-12-31\") == \"31-12-2022\"\nassert func(\"1999-01-15\") == \"15-01-1999\"\nassert func(\"2023-05-20\") == \"20-05-2023\"\nassert func(\"2000-10-05\") == \"05-10-2000\"\nassert func(\"1988-03-08\") == \"08-03-1988\"\n"}
{"task_id": 216, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(my_list):\n    '''\n    Can you write a function to sort the given array using shell sort?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([4, 2, 7, 1, 5]) == [1, 2, 4, 5, 7]\nassert func([9, 3, 6, 2, 8, 1, 5, 7, 4]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert func([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1]) == [1]", "response_code": "assert func([4, 2, 7, 1, 5]) == [1, 2, 4, 5, 7]\nassert func([9, 3, 6, 2, 8, 1, 5, 7, 4]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert func([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1]) == [1]"}
{"task_id": 217, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Can you write a function to extract the elementwise and tuples from the given two tuples?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (4, 5, 6)) == ((1, 4), (2, 5), (3, 6))\nassert func(('a', 'b', 'c'), ('x', 'y', 'z')) == (('a', 'x'), ('b', 'y'), ('c', 'z'))\nassert func((10, 20, 30), (40, 50, 60)) == ((10, 40), (20, 50), (30, 60))\nassert func(('apple', 'banana', 'cherry'), ('orange', 'pear', 'grape')) == (('apple', 'orange'), ('banana', 'pear'), ('cherry', 'grape'))\nassert func((), ()) == ()\n```", "response_code": "\nassert func((1, 2, 3), (4, 5, 6)) == ((1, 4), (2, 5), (3, 6))\nassert func(('a', 'b', 'c'), ('x', 'y', 'z')) == (('a', 'x'), ('b', 'y'), ('c', 'z'))\nassert func((10, 20, 30), (40, 50, 60)) == ((10, 40), (20, 50), (30, 60))\nassert func(('apple', 'banana', 'cherry'), ('orange', 'pear', 'grape')) == (('apple', 'orange'), ('banana', 'pear'), ('cherry', 'grape'))\nassert func((), ()) == ()\n"}
{"task_id": 218, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a, b, c): \n    '''\n    Can you write a function to find the directrix of a parabola?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1, 2, 3) == -1\nassert func(2, 3, 4) == -1.5\nassert func(3, 4, 5) == -2\nassert func(4, 5, 6) == -2.5\nassert func(5, 6, 7) == -3", "response_code": "assert func(1, 2, 3) == -1\nassert func(2, 3, 4) == -1.5\nassert func(3, 4, 5) == -2\nassert func(4, 5, 6) == -2.5\nassert func(5, 6, 7) == -3"}
{"task_id": 219, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1, list2):\n    '''\n    Can you write a function that takes two lists and returns true if they have at least one common element?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], [4, 5, 6]) == False\nassert func([1, 2, 3], [3, 4, 5]) == True\nassert func([], [1, 2, 3]) == False\nassert func([1, 2, 3], []) == False\nassert func([1, 2, 3], [4, 5, 6, 3]) == True\n```", "response_code": "\nassert func([1, 2, 3], [4, 5, 6]) == False\nassert func([1, 2, 3], [3, 4, 5]) == True\nassert func([], [1, 2, 3]) == False\nassert func([1, 2, 3], []) == False\nassert func([1, 2, 3], [4, 5, 6, 3]) == True\n"}
{"task_id": 220, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(base1,base2,height):\n    '''\n    Can you write a function to find the median of a trapezium?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(2, 4, 3) == 3.0\nassert func(5, 7, 4) == 5.5\nassert func(10, 12, 6) == 9.0\nassert func(3, 5, 2) == 3.5\nassert func(8, 10, 5) == 8.0\n```", "response_code": "\nassert func(2, 4, 3) == 3.0\nassert func(5, 7, 4) == 5.5\nassert func(10, 12, 6) == 9.0\nassert func(3, 5, 2) == 3.5\nassert func(8, 10, 5) == 8.0\n"}
{"task_id": 221, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr, number):\n    '''\n    Can you write a function to check whether the entered number is greater than the elements of the given array?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5], 6) == True\nassert func([1, 2, 3, 4, 5], 3) == False\nassert func([10, 20, 30, 40, 50], 25) == False\nassert func([5, 10, 15, 20, 25], 30) == True\nassert func([100, 200, 300, 400, 500], 500) == True", "response_code": "assert func([1, 2, 3, 4, 5], 6) == True\nassert func([1, 2, 3, 4, 5], 3) == False\nassert func([10, 20, 30, 40, 50], 25) == False\nassert func([5, 10, 15, 20, 25], 30) == True\nassert func([100, 200, 300, 400, 500], 500) == True"}
{"task_id": 222, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Can you write a function that matches a string that has an a followed by one or more b's?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"ab\") == True\nassert func(\"abb\") == True\nassert func(\"aabb\") == True\nassert func(\"ac\") == False\nassert func(\"bb\") == False\n```", "response_code": "\nassert func(\"ab\") == True\nassert func(\"abb\") == True\nassert func(\"aabb\") == True\nassert func(\"ac\") == False\nassert func(\"bb\") == False\n"}
{"task_id": 223, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n) :\n    '''\n    Can you write a python function to find the last digit of a given number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(123) == 3\nassert func(456) == 6\nassert func(789) == 9\nassert func(100) == 0\nassert func(9999) == 9", "response_code": "assert func(123) == 3\nassert func(456) == 6\nassert func(789) == 9\nassert func(100) == 0\nassert func(9999) == 9"}
{"task_id": 224, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Can you write a python function to print negative numbers in a list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, -2, 3, -4, 5]) == [-2, -4]\nassert func([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]\nassert func([0, 1, 2, 3, 4]) == []\nassert func([-1, 0, 1]) == [-1]\nassert func([]) == []", "response_code": "assert func([1, -2, 3, -4, 5]) == [-2, -4]\nassert func([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]\nassert func([0, 1, 2, 3, 4]) == []\nassert func([-1, 0, 1]) == [-1]\nassert func([]) == []"}
{"task_id": 225, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1):\n    '''\n    Can you write a function to remove odd characters in a string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\") == \"el\"\nassert func(\"python\") == \"yhn\"\nassert func(\"abcdefg\") == \"bdf\"\nassert func(\"123456\") == \"24\"\nassert func(\"a1b2c3d4e5f6g7\") == \"123456\"", "response_code": "assert func(\"hello\") == \"el\"\nassert func(\"python\") == \"yhn\"\nassert func(\"abcdefg\") == \"bdf\"\nassert func(\"123456\") == \"24\"\nassert func(\"a1b2c3d4e5f6g7\") == \"123456\""}
{"task_id": 226, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Can you write a function to count bidirectional tuple pairs?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([(1, 2), (2, 1), (3, 4), (4, 3)]) == 2\nassert func([(1, 2), (2, 1), (3, 4), (4, 3), (1, 3)]) == 2\nassert func([(1, 2), (2, 1), (3, 4), (4, 3), (1, 3), (3, 1)]) == 3\nassert func([(1, 2), (2, 1), (3, 4), (4, 3), (1, 3), (3, 1), (2, 3)]) == 3\nassert func([(1, 2), (2, 1), (3, 4), (4, 3), (1, 3), (3, 1), (2, 3), (3, 2)]) == 4", "response_code": "assert func([(1, 2), (2, 1), (3, 4), (4, 3)]) == 2\nassert func([(1, 2), (2, 1), (3, 4), (4, 3), (1, 3)]) == 2\nassert func([(1, 2), (2, 1), (3, 4), (4, 3), (1, 3), (3, 1)]) == 3\nassert func([(1, 2), (2, 1), (3, 4), (4, 3), (1, 3), (3, 1), (2, 3)]) == 3\nassert func([(1, 2), (2, 1), (3, 4), (4, 3), (1, 3), (3, 1), (2, 3), (3, 2)]) == 4"}
{"task_id": 227, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(L):\n    '''\n    Can you write a function to convert a list of multiple integers into a single integer?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3]) == 123\nassert func([9, 8, 7, 6]) == 9876\nassert func([0, 0, 0, 0]) == 0\nassert func([5, 0, 2, 1]) == 5021\nassert func([3, 5, 0, 9, 2]) == 35092", "response_code": "assert func([1, 2, 3]) == 123\nassert func([9, 8, 7, 6]) == 9876\nassert func([0, 0, 0, 0]) == 0\nassert func([5, 0, 2, 1]) == 5021\nassert func([3, 5, 0, 9, 2]) == 35092"}
{"task_id": 228, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Can you write a function to find all adverbs and their positions in a given sentence?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"She quickly ran to the store.\") == [('quickly', 4)]\nassert func(\"He carefully examined the evidence.\") == [('carefully', 2)]\nassert func(\"They happily accepted the award.\") == [('happily', 1)]\nassert func(\"The cat lazily stretched out on the couch.\") == [('lazily', 3)]\nassert func(\"I will gladly help you with your project.\") == [('gladly', 3)]\n```", "response_code": "\nassert func(\"She quickly ran to the store.\") == [('quickly', 4)]\nassert func(\"He carefully examined the evidence.\") == [('carefully', 2)]\nassert func(\"They happily accepted the award.\") == [('happily', 1)]\nassert func(\"The cat lazily stretched out on the couch.\") == [('lazily', 3)]\nassert func(\"I will gladly help you with your project.\") == [('gladly', 3)]\n"}
{"task_id": 229, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l):\n    '''\n    Can you write a function to find the surface area of a cube?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 6\nassert func(2) == 24\nassert func(3) == 54\nassert func(4) == 96\nassert func(5) == 150", "response_code": "assert func(1) == 6\nassert func(2) == 24\nassert func(3) == 54\nassert func(4) == 96\nassert func(5) == 150"}
{"task_id": 230, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from array import array\ndef func(nums):\n    '''\n    Can you write a function to find the ratio of positive numbers in an array of integers?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(array('i', [1, 2, 3, 4, 5])) == 1.0\nassert func(array('i', [-1, -2, -3, -4, -5])) == 0.0\nassert func(array('i', [0, 0, 0, 0, 0])) == 0.0\nassert func(array('i', [1, -2, 3, -4, 5])) == 0.6\nassert func(array('i', [-1, 2, -3, 4, -5])) == 0.4\n```", "response_code": "\nassert func(array('i', [1, 2, 3, 4, 5])) == 1.0\nassert func(array('i', [-1, -2, -3, -4, -5])) == 0.0\nassert func(array('i', [0, 0, 0, 0, 0])) == 0.0\nassert func(array('i', [1, -2, 3, -4, 5])) == 0.6\nassert func(array('i', [-1, 2, -3, 4, -5])) == 0.4\n"}
{"task_id": 231, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1): \n    '''\n    Can you write a python function to find the largest negative number from the given list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([-1, -2, -3, -4, -5]) == -1\nassert func([-5, -4, -3, -2, -1]) == -1\nassert func([-10, -20, -30, -40, -50]) == -10\nassert func([-5, -10, -15, -20, -25]) == -5\nassert func([-2, -4, -6, -8, -10]) == -2\n```", "response_code": "\nassert func([-1, -2, -3, -4, -5]) == -1\nassert func([-5, -4, -3, -2, -1]) == -1\nassert func([-10, -20, -30, -40, -50]) == -10\nassert func([-5, -10, -15, -20, -25]) == -5\nassert func([-2, -4, -6, -8, -10]) == -2\n"}
{"task_id": 232, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list, K):\n    '''\n    Can you write a function to trim each tuple by k in the given tuple list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == [(2, 3), (5, 6), (8, 9)]\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == [(3,), (6,), (9,)]\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3) == [(), (), ()]\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 0) == [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 4) == [(), (), ()]\n```", "response_code": "\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == [(2, 3), (5, 6), (8, 9)]\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == [(3,), (6,), (9,)]\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3) == [(), (), ()]\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 0) == [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 4) == [(), (), ()]\n"}
{"task_id": 233, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Can you write a function to perform index wise multiplication of tuple elements in the given two tuples?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func((1, 2, 3), (4, 5, 6)) == (4, 10, 18)\nassert func((0, 0, 0), (1, 2, 3)) == (0, 0, 0)\nassert func((-1, -2, -3), (1, 2, 3)) == (-1, -4, -9)\nassert func((5, 10, 15), (2, 4, 6)) == (10, 40, 90)\nassert func((2, 3, 4), (0, 0, 0)) == (0, 0, 0)", "response_code": "assert func((1, 2, 3), (4, 5, 6)) == (4, 10, 18)\nassert func((0, 0, 0), (1, 2, 3)) == (0, 0, 0)\nassert func((-1, -2, -3), (1, 2, 3)) == (-1, -4, -9)\nassert func((5, 10, 15), (2, 4, 6)) == (10, 40, 90)\nassert func((2, 3, 4), (0, 0, 0)) == (0, 0, 0)"}
{"task_id": 234, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from collections import Counter \ndef func(tup, lst): \n    '''\n    Can you write a python function to count the occurence of all elements of list in a tuple?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3, 4, 5), [1, 2, 3]) == {1: 1, 2: 1, 3: 1}\nassert func(('a', 'b', 'c', 'a', 'b'), ['a', 'b']) == {'a': 2, 'b': 2}\nassert func((1, 2, 3, 4, 5), [6, 7, 8]) == {}\nassert func(('apple', 'banana', 'apple', 'cherry'), ['apple', 'banana']) == {'apple': 2, 'banana': 1}\nassert func(('x', 'y', 'z'), ['a', 'b', 'c']) == {}\n```", "response_code": "\nassert func((1, 2, 3, 4, 5), [1, 2, 3]) == {1: 1, 2: 1, 3: 1}\nassert func(('a', 'b', 'c', 'a', 'b'), ['a', 'b']) == {'a': 2, 'b': 2}\nassert func((1, 2, 3, 4, 5), [6, 7, 8]) == {}\nassert func(('apple', 'banana', 'apple', 'cherry'), ['apple', 'banana']) == {'apple': 2, 'banana': 1}\nassert func(('x', 'y', 'z'), ['a', 'b', 'c']) == {}\n"}
{"task_id": 235, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Can you write a function to find cubes of individual elements in a list using a lambda function?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3]) == [1, 8, 27]\nassert func([0, 4, 5]) == [0, 64, 125]\nassert func([-1, -2, -3]) == [-1, -8, -27]\nassert func([10, 20, 30]) == [1000, 8000, 27000]\nassert func([2, 4, 6, 8]) == [8, 64, 216, 512]\n```", "response_code": "\nassert func([1, 2, 3]) == [1, 8, 27]\nassert func([0, 4, 5]) == [0, 64, 125]\nassert func([-1, -2, -3]) == [-1, -8, -27]\nassert func([10, 20, 30]) == [1000, 8000, 27000]\nassert func([2, 4, 6, 8]) == [8, 64, 216, 512]\n"}
{"task_id": 236, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a function to calculate the sum of Perrin numbers?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 3\nassert func(1) == 0\nassert func(5) == 10\nassert func(10) == 57\nassert func(15) == 165\n```", "response_code": "\nassert func(0) == 3\nassert func(1) == 0\nassert func(5) == 10\nassert func(10) == 57\nassert func(15) == 165\n"}
{"task_id": 237, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str, l):\n    '''\n    Can you write a function to extract specified size of strings from a given list of string values?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['apple', 'banana', 'cherry', 'date'], 5) == ['apple', 'banan', 'cherr', 'date']\nassert func(['hello', 'world', 'python'], 3) == ['hel', 'wor', 'pyt']\nassert func(['abc', 'def', 'ghi'], 2) == ['ab', 'de', 'gh']\nassert func(['cat', 'dog', 'fish'], 4) == ['cat', 'dog', 'fish']\nassert func(['one', 'two', 'three'], 1) == ['o', 't', 't']\n```", "response_code": "\nassert func(['apple', 'banana', 'cherry', 'date'], 5) == ['apple', 'banan', 'cherr', 'date']\nassert func(['hello', 'world', 'python'], 3) == ['hel', 'wor', 'pyt']\nassert func(['abc', 'def', 'ghi'], 2) == ['ab', 'de', 'gh']\nassert func(['cat', 'dog', 'fish'], 4) == ['cat', 'dog', 'fish']\nassert func(['one', 'two', 'three'], 1) == ['o', 't', 't']\n"}
{"task_id": 238, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text1):\n    '''\n    Can you write a function to remove all whitespaces from the given string using regex?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello World\") == \"HelloWorld\"\nassert func(\"  Python  \") == \"Python\"\nassert func(\"  Regex  is  fun  \") == \"Regexisfun\"\nassert func(\"123 456 789\") == \"123456789\"\nassert func(\"  Special  characters  !@#$%  \") == \"Specialcharacters!@#$%\"\n```", "response_code": "\nassert func(\"Hello World\") == \"HelloWorld\"\nassert func(\"  Python  \") == \"Python\"\nassert func(\"  Regex  is  fun  \") == \"Regexisfun\"\nassert func(\"123 456 789\") == \"123456789\"\nassert func(\"  Special  characters  !@#$%  \") == \"Specialcharacters!@#$%\"\n"}
{"task_id": 239, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(actual_cost,sale_amount): \n    '''\n    Can you write a function that gives the loss amount if the given amount has loss, or returns none?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(100, 80) == 20\nassert func(50, 60) == None\nassert func(120, 100) == 20\nassert func(75, 75) == None\nassert func(200, 150) == 50", "response_code": "assert func(100, 80) == 20\nassert func(50, 60) == None\nassert func(120, 100) == 20\nassert func(75, 75) == None\nassert func(200, 150) == 50"}
{"task_id": 240, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math \ndef func(n) : \n    '''\n    Can you write a python function to find the sum of even factors of a number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(6) == 12\nassert func(10) == 18\nassert func(15) == 24\nassert func(20) == 42\nassert func(25) == 26\n```", "response_code": "\nassert func(6) == 12\nassert func(10) == 18\nassert func(15) == 24\nassert func(20) == 42\nassert func(25) == 26\n"}
{"task_id": 241, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Can you write a function that matches a word containing 'z'?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == None\nassert func(\"amazing\") == \"amazing\"\nassert func(\"zebra\") == \"zebra\"\nassert func(\"buzz\") == None\nassert func(\"crazy\") == \"crazy\"\n```", "response_code": "\nassert func(\"hello\") == None\nassert func(\"amazing\") == \"amazing\"\nassert func(\"zebra\") == \"zebra\"\nassert func(\"buzz\") == None\nassert func(\"crazy\") == \"crazy\"\n"}
{"task_id": 242, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(monthnum2):\n    '''\n    Can you write a function to check whether the given month number contains 31 days or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == True\nassert func(4) == True\nassert func(6) == True\nassert func(9) == True\nassert func(11) == True", "response_code": "assert func(1) == True\nassert func(4) == True\nassert func(6) == True\nassert func(9) == True\nassert func(11) == True"}
{"task_id": 243, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(stringlist):\n    '''\n    Can you write a function to reverse strings in a given list of string values?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['hello', 'world']) == ['olleh', 'dlrow']\nassert func(['python', 'is', 'awesome']) == ['nohtyp', 'si', 'emosewa']\nassert func(['racecar', 'level', 'radar']) == ['racecar', 'level', 'radar']\nassert func(['12345', '54321']) == ['54321', '12345']\nassert func(['', '']) == ['', '']\n```", "response_code": "\nassert func(['hello', 'world']) == ['olleh', 'dlrow']\nassert func(['python', 'is', 'awesome']) == ['nohtyp', 'si', 'emosewa']\nassert func(['racecar', 'level', 'radar']) == ['racecar', 'level', 'radar']\nassert func(['12345', '54321']) == ['54321', '12345']\nassert func(['', '']) == ['', '']\n"}
{"task_id": 244, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lst): \n    '''\n    Can you write a python function to find the sublist having minimum length?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [4, 5]\nassert func([[1, 2], [3, 4, 5], [6, 7]]) == [1, 2]\nassert func([[1], [2], [3], [4]]) == [1]\nassert func([[1, 2, 3, 4], [5, 6, 7], [8, 9]]) == [8, 9]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3]", "response_code": "assert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [4, 5]\nassert func([[1, 2], [3, 4, 5], [6, 7]]) == [1, 2]\nassert func([[1], [2], [3], [4]]) == [1]\nassert func([[1, 2, 3, 4], [5, 6, 7], [8, 9]]) == [8, 9]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3]"}
{"task_id": 245, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l,b):\n    '''\n    Can you write a function to find the area of a rectangle?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(3, 4) == 12\nassert func(5, 7) == 35\nassert func(10, 2) == 20\nassert func(6, 9) == 54\nassert func(8, 8) == 64", "response_code": "assert func(3, 4) == 12\nassert func(5, 7) == 35\nassert func(10, 2) == 20\nassert func(6, 9) == 54\nassert func(8, 8) == 64"}
{"task_id": 246, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(str1):\n    '''\n    Can you write a function to remove uppercase substrings from a given string by using regex?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello World\") == \"ello \"\nassert func(\"PythonIsFun\") == \"ython s\"\nassert func(\"ABCD1234\") == \"1234\"\nassert func(\"UPPERCASE\") == \"\"\nassert func(\"lowercase\") == \"lowercase\"\n```", "response_code": "\nassert func(\"Hello World\") == \"ello \"\nassert func(\"PythonIsFun\") == \"ython s\"\nassert func(\"ABCD1234\") == \"1234\"\nassert func(\"UPPERCASE\") == \"\"\nassert func(\"lowercase\") == \"lowercase\"\n"}
{"task_id": 247, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lst): \n    '''\n    Can you write a python function to get the first element of each sublist?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]\nassert func([[10, 20], [30, 40], [50, 60]]) == [10, 30, 50]\nassert func([[100], [200], [300]]) == [100, 200, 300]\nassert func([[1, 2], [3, 4], [5, 6]]) == [1, 3, 5]\nassert func([[0, 0, 0], [1, 1, 1], [2, 2, 2]]) == [0, 1, 2]", "response_code": "assert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]\nassert func([[10, 20], [30, 40], [50, 60]]) == [10, 30, 50]\nassert func([[100], [200], [300]]) == [100, 200, 300]\nassert func([[1, 2], [3, 4], [5, 6]]) == [1, 3, 5]\nassert func([[0, 0, 0], [1, 1, 1], [2, 2, 2]]) == [0, 1, 2]"}
{"task_id": 248, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str):\n    '''\n    Can you write a python function to count the upper case characters in a given string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"Hello World\") == 2\nassert func(\"Python Programming\") == 2\nassert func(\"UPPERCASE\") == 9\nassert func(\"lowercase\") == 0\nassert func(\"\") == 0", "response_code": "assert func(\"Hello World\") == 2\nassert func(\"Python Programming\") == 2\nassert func(\"UPPERCASE\") == 9\nassert func(\"lowercase\") == 0\nassert func(\"\") == 0"}
{"task_id": 249, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Can you write a function to find all possible combinations of the elements of a given list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2]) == [[1], [2], [1, 2], [2, 1]]\nassert func([1, 2, 3]) == [[1], [2], [3], [1, 2], [2, 1], [1, 3], [3, 1], [2, 3], [3, 2], [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\nassert func(['a', 'b', 'c']) == [['a'], ['b'], ['c'], ['a', 'b'], ['b', 'a'], ['a', 'c'], ['c', 'a'], ['b', 'c'], ['c', 'b'], ['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]\nassert func([]) == [[]]\nassert func([1]) == [[1]]\n```", "response_code": "\nassert func([1, 2]) == [[1], [2], [1, 2], [2, 1]]\nassert func([1, 2, 3]) == [[1], [2], [3], [1, 2], [2, 1], [1, 3], [3, 1], [2, 3], [3, 2], [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\nassert func(['a', 'b', 'c']) == [['a'], ['b'], ['c'], ['a', 'b'], ['b', 'a'], ['a', 'c'], ['c', 'a'], ['b', 'c'], ['c', 'b'], ['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]\nassert func([]) == [[]]\nassert func([1]) == [[1]]\n"}
{"task_id": 250, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):\n    '''\n    Can you write a function to find the maximum product subarray of the given array?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([2, 3, -2, 4]) == 6\nassert func([-2, 0, -1]) == 0\nassert func([-2, 3, -4]) == 24\nassert func([2, -5, -2, -4, 3]) == 48\nassert func([1, -2, 3, -4, 5]) == 120\n```", "response_code": "\nassert func([2, 3, -2, 4]) == 6\nassert func([-2, 0, -1]) == 0\nassert func([-2, 3, -4]) == 24\nassert func([2, -5, -2, -4, 3]) == 48\nassert func([1, -2, 3, -4, 5]) == 120\n"}
{"task_id": 251, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(dict, n):\n    '''\n    Can you write a function to check if all values are the same in a dictionary?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func({'a': 1, 'b': 1, 'c': 1}, 1) == True\nassert func({'x': 5, 'y': 5, 'z': 5}, 5) == True\nassert func({'p': 3, 'q': 3, 'r': 4}, 3) == False\nassert func({'m': 0, 'n': 0, 'o': 0}, 0) == True\nassert func({'d': 2, 'e': 2, 'f': 2}, 2) == True", "response_code": "assert func({'a': 1, 'b': 1, 'c': 1}, 1) == True\nassert func({'x': 5, 'y': 5, 'z': 5}, 5) == True\nassert func({'p': 3, 'q': 3, 'r': 4}, 3) == False\nassert func({'m': 0, 'n': 0, 'o': 0}, 0) == True\nassert func({'d': 2, 'e': 2, 'f': 2}, 2) == True"}
{"task_id": 252, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(dict1):\n    '''\n    Can you write a function to drop empty items from a given dictionary?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func({'a': 1, 'b': 2, 'c': None}) == {'a': 1, 'b': 2}\nassert func({'x': '', 'y': 0, 'z': False}) == {'y': 0, 'z': False}\nassert func({'key1': 'value1', 'key2': '', 'key3': None}) == {'key1': 'value1'}\nassert func({'apple': 'red', 'banana': 'yellow', 'cherry': 'pink'}) == {'apple': 'red', 'banana': 'yellow', 'cherry': 'pink'}\nassert func({}) == {}", "response_code": "assert func({'a': 1, 'b': 2, 'c': None}) == {'a': 1, 'b': 2}\nassert func({'x': '', 'y': 0, 'z': False}) == {'y': 0, 'z': False}\nassert func({'key1': 'value1', 'key2': '', 'key3': None}) == {'key1': 'value1'}\nassert func({'apple': 'red', 'banana': 'yellow', 'cherry': 'pink'}) == {'apple': 'red', 'banana': 'yellow', 'cherry': 'pink'}\nassert func({}) == {}"}
{"task_id": 253, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):   \n    '''\n    Can you write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == 120\nassert func([5, 4, 3, 2, 1]) == 20\nassert func([3, 1, 4, 2, 5]) == 60\nassert func([2, 3, 1, 4, 5]) == 60\nassert func([1, 2, 3, 4, 5, 6]) == 120", "response_code": "assert func([1, 2, 3, 4, 5]) == 120\nassert func([5, 4, 3, 2, 1]) == 20\nassert func([3, 1, 4, 2, 5]) == 60\nassert func([2, 3, 1, 4, 5]) == 60\nassert func([1, 2, 3, 4, 5, 6]) == 120"}
{"task_id": 254, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    Can you write a function to find the pairwise addition of the elements of the given tuples?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func((1, 2, 3), (4, 5, 6)) == (5, 7, 9)\nassert func((-1, -2, -3), (-4, -5, -6)) == (-5, -7, -9)\nassert func((0, 0, 0), (0, 0, 0)) == (0, 0, 0)\nassert func((10, 20, 30), (40, 50, 60)) == (50, 70, 90)\nassert func((100, 200, 300), (400, 500, 600)) == (500, 700, 900)", "response_code": "assert func((1, 2, 3), (4, 5, 6)) == (5, 7, 9)\nassert func((-1, -2, -3), (-4, -5, -6)) == (-5, -7, -9)\nassert func((0, 0, 0), (0, 0, 0)) == (0, 0, 0)\nassert func((10, 20, 30), (40, 50, 60)) == (50, 70, 90)\nassert func((100, 200, 300), (400, 500, 600)) == (500, 700, 900)"}
{"task_id": 255, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr, n): \n    '''\n    Can you write a python function to find remainder of array multiplication divided by n?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([3, 4, 5], 3) == 0\nassert func([1, 2, 3, 4, 5], 5) == 0\nassert func([2, 3, 4, 5], 7) == 1\nassert func([10, 20, 30], 4) == 0\nassert func([7, 8, 9], 2) == 1\n```", "response_code": "\nassert func([3, 4, 5], 3) == 0\nassert func([1, 2, 3, 4, 5], 5) == 0\nassert func([2, 3, 4, 5], 7) == 1\nassert func([10, 20, 30], 4) == 0\nassert func([7, 8, 9], 2) == 1\n"}
{"task_id": 256, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l): \n    '''\n    Can you write a python function to check whether the given list contains consecutive numbers or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == True\nassert func([5, 4, 3, 2, 1]) == True\nassert func([1, 3, 5, 7, 9]) == False\nassert func([1, 2, 4, 5, 6]) == False\nassert func([1, 2, 3, 5, 6]) == False\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == True\nassert func([5, 4, 3, 2, 1]) == True\nassert func([1, 3, 5, 7, 9]) == False\nassert func([1, 2, 4, 5, 6]) == False\nassert func([1, 2, 3, 5, 6]) == False\n"}
{"task_id": 257, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list1, test_list2):\n    '''\n    Can you write a function to find the tuple intersection of elements in the given tuple list irrespective of their order?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (2, 3), (3, 4)], [(2, 1), (3, 2), (4, 3)]) == [(1, 2), (2, 3), (3, 4)]\nassert func([(1, 2), (2, 3), (3, 4)], [(4, 3), (3, 2), (2, 1)]) == [(1, 2), (2, 3), (3, 4)]\nassert func([(1, 2), (2, 3), (3, 4)], [(5, 6), (6, 7), (7, 8)]) == []\nassert func([(1, 2), (2, 3), (3, 4)], [(1, 2), (2, 3), (3, 4)]) == [(1, 2), (2, 3), (3, 4)]\nassert func([(1, 2), (2, 3), (3, 4)], [(4, 3), (3, 2), (2, 1), (1, 2)]) == [(1, 2), (2, 3), (3, 4)]\n```", "response_code": "\nassert func([(1, 2), (2, 3), (3, 4)], [(2, 1), (3, 2), (4, 3)]) == [(1, 2), (2, 3), (3, 4)]\nassert func([(1, 2), (2, 3), (3, 4)], [(4, 3), (3, 2), (2, 1)]) == [(1, 2), (2, 3), (3, 4)]\nassert func([(1, 2), (2, 3), (3, 4)], [(5, 6), (6, 7), (7, 8)]) == []\nassert func([(1, 2), (2, 3), (3, 4)], [(1, 2), (2, 3), (3, 4)]) == [(1, 2), (2, 3), (3, 4)]\nassert func([(1, 2), (2, 3), (3, 4)], [(4, 3), (3, 2), (2, 1), (1, 2)]) == [(1, 2), (2, 3), (3, 4)]\n"}
{"task_id": 258, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1,ch,newch):\n    '''\n    Can you write a function to replace characters in a string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\", \"l\", \"x\") == \"hexxo\"\nassert func(\"programming\", \"m\", \"z\") == \"prozgraazing\"\nassert func(\"banana\", \"a\", \"o\") == \"bonono\"\nassert func(\"apple\", \"p\", \"b\") == \"abble\"\nassert func(\"python\", \"o\", \"a\") == \"pythan\"\n```", "response_code": "\nassert func(\"hello\", \"l\", \"x\") == \"hexxo\"\nassert func(\"programming\", \"m\", \"z\") == \"prozgraazing\"\nassert func(\"banana\", \"a\", \"o\") == \"bonono\"\nassert func(\"apple\", \"p\", \"b\") == \"abble\"\nassert func(\"python\", \"o\", \"a\") == \"pythan\"\n"}
{"task_id": 259, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from collections import Counter\ndef func(dict1):\n    '''\n    Can you write a function to sort counter by value?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test Case 1\ndict1 = {'a': 3, 'b': 1, 'c': 2}\nassert func(dict1) == [('b', 1), ('c', 2), ('a', 3)]\n\n# Test Case 2\ndict1 = {'x': 5, 'y': 5, 'z': 5}\nassert func(dict1) == [('x', 5), ('y', 5), ('z', 5)]\n\n# Test Case 3\ndict1 = {'apple': 10, 'banana': 5, 'cherry': 8}\nassert func(dict1) == [('banana', 5), ('cherry', 8), ('apple', 10)]\n\n# Test Case 4\ndict1 = {'one': 1, 'two': 2, 'three': 3}\nassert func(dict1) == [('one', 1), ('two', 2), ('three', 3)]\n\n# Test Case 5\ndict1 = {'red': 4, 'green': 4, 'blue': 4}\nassert func(dict1) == [('red', 4), ('green', 4), ('blue', 4)]\n```", "response_code": "\n# Test Case 1\ndict1 = {'a': 3, 'b': 1, 'c': 2}\nassert func(dict1) == [('b', 1), ('c', 2), ('a', 3)]\n\n# Test Case 2\ndict1 = {'x': 5, 'y': 5, 'z': 5}\nassert func(dict1) == [('x', 5), ('y', 5), ('z', 5)]\n\n# Test Case 3\ndict1 = {'apple': 10, 'banana': 5, 'cherry': 8}\nassert func(dict1) == [('banana', 5), ('cherry', 8), ('apple', 10)]\n\n# Test Case 4\ndict1 = {'one': 1, 'two': 2, 'three': 3}\nassert func(dict1) == [('one', 1), ('two', 2), ('three', 3)]\n\n# Test Case 5\ndict1 = {'red': 4, 'green': 4, 'blue': 4}\nassert func(dict1) == [('red', 4), ('green', 4), ('blue', 4)]\n"}
{"task_id": 260, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Can you write a python function to find the sum of the largest and smallest value in a given array?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == 6\nassert func([10, 20, 30, 40, 50]) == 60\nassert func([-5, 0, 5, 10]) == 5\nassert func([100, 200, 300, 400, 500]) == 600\nassert func([-10, -5, 0, 5, 10]) == 0", "response_code": "assert func([1, 2, 3, 4, 5]) == 6\nassert func([10, 20, 30, 40, 50]) == 60\nassert func([-5, 0, 5, 10]) == 5\nassert func([100, 200, 300, 400, 500]) == 600\nassert func([-10, -5, 0, 5, 10]) == 0"}
{"task_id": 261, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(string):\n    '''\n    Can you write a python function to convert the given string to lower case?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"Hello World\") == \"hello world\"\nassert func(\"PYTHON\") == \"python\"\nassert func(\"tEsT StRiNg\") == \"test string\"\nassert func(\"12345\") == \"12345\"\nassert func(\"\") == \"\"", "response_code": "assert func(\"Hello World\") == \"hello world\"\nassert func(\"PYTHON\") == \"python\"\nassert func(\"tEsT StRiNg\") == \"test string\"\nassert func(\"12345\") == \"12345\"\nassert func(\"\") == \"\""}
{"task_id": 262, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(str1):\n    '''\n    Can you write a function to remove lowercase substrings from a given string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello World\") == \"H W\"\nassert func(\"abc123def456\") == \"123456\"\nassert func(\"PythonIsFun\") == \"P\"\nassert func(\"12345\") == \"12345\"\nassert func(\"aBcDeF\") == \"BDF\"\n```", "response_code": "\nassert func(\"Hello World\") == \"H W\"\nassert func(\"abc123def456\") == \"123456\"\nassert func(\"PythonIsFun\") == \"P\"\nassert func(\"12345\") == \"12345\"\nassert func(\"aBcDeF\") == \"BDF\"\n"}
{"task_id": 263, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n) :  \n    '''\n    Can you write a python function to find the first digit of a given number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(123) == 1\nassert func(4567) == 4\nassert func(78901) == 7\nassert func(555) == 5\nassert func(987654321) == 9", "response_code": "assert func(123) == 1\nassert func(4567) == 4\nassert func(78901) == 7\nassert func(555) == 5\nassert func(987654321) == 9"}
{"task_id": 264, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list): \n    '''\n    Can you write a python function to find odd numbers from a mixed list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == [1, 3, 5]\nassert func([10, 21, 30, 45, 62]) == [21, 45]\nassert func([2, 4, 6, 8, 10]) == []\nassert func([11, 22, 33, 44, 55]) == [11, 33, 55]\nassert func([15, 25, 35, 45, 55]) == [15, 25, 35, 45, 55]", "response_code": "assert func([1, 2, 3, 4, 5]) == [1, 3, 5]\nassert func([10, 21, 30, 45, 62]) == [21, 45]\nassert func([2, 4, 6, 8, 10]) == []\nassert func([11, 22, 33, 44, 55]) == [11, 33, 55]\nassert func([15, 25, 35, 45, 55]) == [15, 25, 35, 45, 55]"}
{"task_id": 265, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n) :  \n    '''\n    Can you write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 0\nassert func(2) == 7\nassert func(3) == 36\nassert func(4) == 100\nassert func(5) == 225\n```", "response_code": "\nassert func(1) == 0\nassert func(2) == 7\nassert func(3) == 36\nassert func(4) == 100\nassert func(5) == 225\n"}
{"task_id": 266, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(A,N) : \n    '''\n    Can you write a python function to count the pairs with xor as an odd number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([2, 3, 4, 5, 6], 5) == 4\nassert func([1, 2, 3, 4, 5], 5) == 6\nassert func([10, 20, 30, 40, 50], 5) == 0\nassert func([7, 8, 9, 10, 11], 5) == 8\nassert func([15, 16, 17, 18, 19], 5) == 8\n```", "response_code": "\nassert func([2, 3, 4, 5, 6], 5) == 4\nassert func([1, 2, 3, 4, 5], 5) == 6\nassert func([10, 20, 30, 40, 50], 5) == 0\nassert func([7, 8, 9, 10, 11], 5) == 8\nassert func([15, 16, 17, 18, 19], 5) == 8\n"}
{"task_id": 267, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(string):\n    '''\n    Can you write a function to toggle characters case in a string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"Hello World\") == \"hELLO wORLD\"\nassert func(\"12345\") == \"12345\"\nassert func(\"aBcDeF\") == \"AbCdEf\"\nassert func(\"Python is Fun\") == \"pYTHON IS fUN\"\nassert func(\"\") == \"\"", "response_code": "assert func(\"Hello World\") == \"hELLO wORLD\"\nassert func(\"12345\") == \"12345\"\nassert func(\"aBcDeF\") == \"AbCdEf\"\nassert func(\"Python is Fun\") == \"pYTHON IS fUN\"\nassert func(\"\") == \"\""}
{"task_id": 268, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n1, n2):\n    '''\n    Can you write a python function to find the digit distance between two integers?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(123, 456) == 3\nassert func(100, 1000) == 1\nassert func(555, 555) == 0\nassert func(9876, 1234) == 4\nassert func(0, 999) == 3", "response_code": "assert func(123, 456) == 3\nassert func(100, 1000) == 1\nassert func(555, 555) == 0\nassert func(9876, 1234) == 4\nassert func(0, 999) == 3"}
{"task_id": 269, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a, size):\n    '''\n    Can you write a function to find the largest sum of contiguous subarray in the given array?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 5) == 15\nassert func([-2, 1, -3, 4, -1, 2, 1, -5, 4], 9) == 6\nassert func([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert func([1, -2, 3, -2, 5], 5) == 6\nassert func([-1, -2, -3, -4, -5], 5) == -1\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 5) == 15\nassert func([-2, 1, -3, 4, -1, 2, 1, -5, 4], 9) == 6\nassert func([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert func([1, -2, 3, -2, 5], 5) == 6\nassert func([-1, -2, -3, -4, -5], 5) == -1\n"}
{"task_id": 270, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Can you write a function to find the union of elements of the given tuples?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (2, 3, 4)) == (1, 2, 3, 4)\nassert func(('a', 'b', 'c'), ('c', 'd', 'e')) == ('a', 'b', 'c', 'd', 'e')\nassert func((10, 20, 30), (40, 50, 60)) == (10, 20, 30, 40, 50, 60)\nassert func(('x', 'y'), ('y', 'z')) == ('x', 'y', 'z')\nassert func((), (1, 2, 3)) == (1, 2, 3)\n```", "response_code": "\nassert func((1, 2, 3), (2, 3, 4)) == (1, 2, 3, 4)\nassert func(('a', 'b', 'c'), ('c', 'd', 'e')) == ('a', 'b', 'c', 'd', 'e')\nassert func((10, 20, 30), (40, 50, 60)) == (10, 20, 30, 40, 50, 60)\nassert func(('x', 'y'), ('y', 'z')) == ('x', 'y', 'z')\nassert func((), (1, 2, 3)) == (1, 2, 3)\n"}
{"task_id": 271, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lst):  \n    '''\n    Can you write a python function to find the maximum length of sublist?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 4\nassert func([[1, 2], [3, 4, 5], [6]]) == 3\nassert func([[1], [2], [3], [4]]) == 1\nassert func([[1, 2, 3, 4, 5]]) == 5\nassert func([]) == 0\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 4\nassert func([[1, 2], [3, 4, 5], [6]]) == 3\nassert func([[1], [2], [3], [4]]) == 1\nassert func([[1, 2, 3, 4, 5]]) == 5\nassert func([]) == 0\n"}
{"task_id": 272, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Can you write a function to extract values between quotation marks of a string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func('This is a \"test\" string') == ['test']\nassert func('No quotes here') == []\nassert func('Multiple \"quotes\" \"in\" \"one\" string') == ['quotes', 'in', 'one']\nassert func('Empty quotes \"\" should not be included') == []\nassert func('Single \"quote\"') == ['quote']\n```", "response_code": "\nassert func('This is a \"test\" string') == ['test']\nassert func('No quotes here') == []\nassert func('Multiple \"quotes\" \"in\" \"one\" string') == ['quotes', 'in', 'one']\nassert func('Empty quotes \"\" should not be included') == []\nassert func('Single \"quote\"') == ['quote']\n"}
{"task_id": 273, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr,n): \n    '''\n    Can you write a python function to count unequal element pairs from the given array?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1,2,3,4,5], 5) == 10\nassert func([1,1,1,1,1], 5) == 0\nassert func([1,2,3,4,5,6,7,8,9,10], 10) == 45\nassert func([5,5,5,5,5,5,5,5,5,5], 10) == 0\nassert func([1,3,5,7,9], 5) == 10", "response_code": "assert func([1,2,3,4,5], 5) == 10\nassert func([1,1,1,1,1], 5) == 0\nassert func([1,2,3,4,5,6,7,8,9,10], 10) == 45\nassert func([5,5,5,5,5,5,5,5,5,5], 10) == 0\nassert func([1,3,5,7,9], 5) == 10"}
{"task_id": 274, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(word): \n    '''\n    Can you write a python function to split a string into characters?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\") == ['h', 'e', 'l', 'l', 'o']\nassert func(\"python\") == ['p', 'y', 't', 'h', 'o', 'n']\nassert func(\"12345\") == ['1', '2', '3', '4', '5']\nassert func(\"abc123\") == ['a', 'b', 'c', '1', '2', '3']\nassert func(\"\") == []", "response_code": "assert func(\"hello\") == ['h', 'e', 'l', 'l', 'o']\nassert func(\"python\") == ['p', 'y', 't', 'h', 'o', 'n']\nassert func(\"12345\") == ['1', '2', '3', '4', '5']\nassert func(\"abc123\") == ['a', 'b', 'c', '1', '2', '3']\nassert func(\"\") == []"}
{"task_id": 275, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    Can you write a function to get the sum of a non-negative integer?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(0) == 0\nassert func(123) == 6\nassert func(9876) == 30\nassert func(11111) == 5\nassert func(999999) == 54", "response_code": "assert func(0) == 0\nassert func(123) == 6\nassert func(9876) == 30\nassert func(11111) == 5\nassert func(999999) == 54"}
{"task_id": 276, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Can you write a function to check whether a specified list is sorted or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == True\nassert func([5, 4, 3, 2, 1]) == False\nassert func([1, 3, 2, 4, 5]) == False\nassert func([1, 1, 1, 1, 1]) == True\nassert func([]) == True", "response_code": "assert func([1, 2, 3, 4, 5]) == True\nassert func([5, 4, 3, 2, 1]) == False\nassert func([1, 3, 2, 4, 5]) == False\nassert func([1, 1, 1, 1, 1]) == True\nassert func([]) == True"}
{"task_id": 277, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(length):\n    '''\n    Can you write a function to create a list of empty dictionaries?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(0) == []\nassert func(1) == [{}]\nassert func(5) == [{}, {}, {}, {}, {}]\nassert func(3) == [{}, {}, {}]\nassert func(10) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}]", "response_code": "assert func(0) == []\nassert func(1) == [{}]\nassert func(5) == [{}, {}, {}, {}, {}]\nassert func(3) == [{}, {}, {}]\nassert func(10) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}]"}
{"task_id": 278, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Can you write a function to sort each sublist of strings in a given list of lists?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test Case 1\ninput_list1 = [['banana', 'apple', 'cherry'], ['orange', 'grape', 'kiwi']]\nexpected_output1 = [['apple', 'banana', 'cherry'], ['grape', 'kiwi', 'orange']]\nassert func(input_list1) == expected_output1\n\n# Test Case 2\ninput_list2 = [['zebra', 'lion', 'elephant'], ['tiger', 'giraffe', 'monkey']]\nexpected_output2 = [['elephant', 'lion', 'zebra'], ['giraffe', 'monkey', 'tiger']]\nassert func(input_list2) == expected_output2\n\n# Test Case 3\ninput_list3 = [['pear', 'peach', 'plum'], ['apricot', 'blueberry', 'raspberry']]\nexpected_output3 = [['peach', 'pear', 'plum'], ['apricot', 'blueberry', 'raspberry']]\nassert func(input_list3) == expected_output3\n\n# Test Case 4\ninput_list4 = [['dog', 'cat', 'rabbit'], ['hamster', 'guinea pig', 'parrot']]\nexpected_output4 = [['cat', 'dog', 'rabbit'], ['guinea pig', 'hamster', 'parrot']]\nassert func(input_list4) == expected_output4\n\n# Test Case 5\ninput_list5 = [['sunflower', 'rose', 'tulip'], ['daisy', 'lily', 'orchid']]\nexpected_output5 = [['rose', 'sunflower', 'tulip'], ['daisy', 'lily', 'orchid']]\nassert func(input_list5) == expected_output5\n```", "response_code": "\n# Test Case 1\ninput_list1 = [['banana', 'apple', 'cherry'], ['orange', 'grape', 'kiwi']]\nexpected_output1 = [['apple', 'banana', 'cherry'], ['grape', 'kiwi', 'orange']]\nassert func(input_list1) == expected_output1\n\n# Test Case 2\ninput_list2 = [['zebra', 'lion', 'elephant'], ['tiger', 'giraffe', 'monkey']]\nexpected_output2 = [['elephant', 'lion', 'zebra'], ['giraffe', 'monkey', 'tiger']]\nassert func(input_list2) == expected_output2\n\n# Test Case 3\ninput_list3 = [['pear', 'peach', 'plum'], ['apricot', 'blueberry', 'raspberry']]\nexpected_output3 = [['peach', 'pear', 'plum'], ['apricot', 'blueberry', 'raspberry']]\nassert func(input_list3) == expected_output3\n\n# Test Case 4\ninput_list4 = [['dog', 'cat', 'rabbit'], ['hamster', 'guinea pig', 'parrot']]\nexpected_output4 = [['cat', 'dog', 'rabbit'], ['guinea pig', 'hamster', 'parrot']]\nassert func(input_list4) == expected_output4\n\n# Test Case 5\ninput_list5 = [['sunflower', 'rose', 'tulip'], ['daisy', 'lily', 'orchid']]\nexpected_output5 = [['rose', 'sunflower', 'tulip'], ['daisy', 'lily', 'orchid']]\nassert func(input_list5) == expected_output5\n"}
{"task_id": 279, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Can you write a python function to remove two duplicate numbers from a given number of lists?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5]\nassert func([1, 1, 2, 2, 3, 3]) == []\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1, 1, 1, 1, 1]) == []\nassert func([1, 2, 2, 3, 3, 4, 4, 5, 5]) == [1]", "response_code": "assert func([1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5]\nassert func([1, 1, 2, 2, 3, 3]) == []\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1, 1, 1, 1, 1]) == []\nassert func([1, 2, 2, 3, 3, 4, 4, 5, 5]) == [1]"}
{"task_id": 280, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list_data):\n    '''\n    Can you write a python function to calculate the product of the unique numbers of a given list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 120\nassert func([2, 2, 3, 3, 4, 4]) == 12\nassert func([5, 5, 5, 5, 5]) == 5\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3628800\nassert func([2, 3, 5, 7, 11]) == 2310\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 120\nassert func([2, 2, 3, 3, 4, 4]) == 12\nassert func([5, 5, 5, 5, 5]) == 5\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3628800\nassert func([2, 3, 5, 7, 11]) == 2310\n"}
{"task_id": 281, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(r,h):\n    '''\n    Can you write a function to find the surface area of a cylinder?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1, 1) == 6.283185307179586  # radius=1, height=1\nassert func(2, 3) == 62.83185307179586   # radius=2, height=3\nassert func(0, 5) == 0                   # radius=0, height=5\nassert func(3, 0) == 18.84955592153876   # radius=3, height=0\nassert func(4, 4) == 150.79644737231007  # radius=4, height=4\n```", "response_code": "\nassert func(1, 1) == 6.283185307179586  # radius=1, height=1\nassert func(2, 3) == 62.83185307179586   # radius=2, height=3\nassert func(0, 5) == 0                   # radius=0, height=5\nassert func(3, 0) == 18.84955592153876   # radius=3, height=0\nassert func(4, 4) == 150.79644737231007  # radius=4, height=4\n"}
{"task_id": 282, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(A,B): \n    '''\n    Can you write a python function to check whether an array is a subarray of another or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4], [2, 3]) == True\nassert func([1, 2, 3, 4], [4, 5]) == False\nassert func([5, 6, 7, 8], [5, 6, 7, 8]) == True\nassert func([1, 2, 3, 4], [1, 2, 3, 4, 5]) == False\nassert func([1, 2, 3, 4], [1, 3]) == False", "response_code": "assert func([1, 2, 3, 4], [2, 3]) == True\nassert func([1, 2, 3, 4], [4, 5]) == False\nassert func([5, 6, 7, 8], [5, 6, 7, 8]) == True\nassert func([1, 2, 3, 4], [1, 2, 3, 4, 5]) == False\nassert func([1, 2, 3, 4], [1, 3]) == False"}
{"task_id": 283, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a python function to find the last digit in factorial of a given number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(5) == 2\nassert func(10) == 0\nassert func(15) == 2\nassert func(20) == 4\nassert func(25) == 8", "response_code": "assert func(5) == 2\nassert func(10) == 0\nassert func(15) == 2\nassert func(20) == 4\nassert func(25) == 8"}
{"task_id": 284, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1,list2,list3):\n    '''\n    Can you write a function to interleave lists of the same length?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]\nassert func(['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']) == ['a', 'd', 'g', 'b', 'e', 'h', 'c', 'f', 'i']\nassert func([10, 20, 30], [40, 50, 60], [70, 80, 90]) == [10, 40, 70, 20, 50, 80, 30, 60, 90]\nassert func([], [], []) == []\nassert func([1], [2], [3]) == [1, 2, 3]\n```", "response_code": "\nassert func([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]\nassert func(['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']) == ['a', 'd', 'g', 'b', 'e', 'h', 'c', 'f', 'i']\nassert func([10, 20, 30], [40, 50, 60], [70, 80, 90]) == [10, 40, 70, 20, 50, 80, 30, 60, 90]\nassert func([], [], []) == []\nassert func([1], [2], [3]) == [1, 2, 3]\n"}
{"task_id": 285, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Can you write a function to find the dissimilar elements in the given two tuples?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (2, 3, 4)) == (1, 4)\nassert func(('a', 'b', 'c'), ('b', 'c', 'd')) == ('a', 'd')\nassert func((10, 20, 30), (10, 20, 30)) == ()\nassert func(('apple', 'banana', 'cherry'), ('apple', 'banana', 'date')) == ('cherry', 'date')\nassert func((), ()) == ()\n```", "response_code": "\nassert func((1, 2, 3), (2, 3, 4)) == (1, 4)\nassert func(('a', 'b', 'c'), ('b', 'c', 'd')) == ('a', 'd')\nassert func((10, 20, 30), (10, 20, 30)) == ()\nassert func(('apple', 'banana', 'cherry'), ('apple', 'banana', 'date')) == ('cherry', 'date')\nassert func((), ()) == ()\n"}
{"task_id": 286, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tuple, even_fnc): \n    '''\n    Can you write a function to extract the even elements in the nested mixed tuple?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, (3, 4), 5, (6, 7, 8)), lambda x: x % 2 == 0) == (2, 4, 6, 8)\nassert func((10, (20, 30), 40, (50, 60, 70)), lambda x: x % 2 == 0) == (10, 20, 30, 40, 50, 60, 70)\nassert func((11, (22, 33), 44, (55, 66, 77)), lambda x: x % 2 == 0) == (22, 44, 66)\nassert func((12, (23, 34), 45, (56, 67, 78)), lambda x: x % 2 == 0) == (12, 34, 56, 78)\nassert func((13, (24, 35), 46, (57, 68, 79)), lambda x: x % 2 == 0) == (24, 46, 68)\n```", "response_code": "\nassert func((1, 2, (3, 4), 5, (6, 7, 8)), lambda x: x % 2 == 0) == (2, 4, 6, 8)\nassert func((10, (20, 30), 40, (50, 60, 70)), lambda x: x % 2 == 0) == (10, 20, 30, 40, 50, 60, 70)\nassert func((11, (22, 33), 44, (55, 66, 77)), lambda x: x % 2 == 0) == (22, 44, 66)\nassert func((12, (23, 34), 45, (56, 67, 78)), lambda x: x % 2 == 0) == (12, 34, 56, 78)\nassert func((13, (24, 35), 46, (57, 68, 79)), lambda x: x % 2 == 0) == (24, 46, 68)\n"}
{"task_id": 287, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(b,s): \n    '''\n    Can you write a python function to find the surface area of the square pyramid?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(4, 6) == 52\nassert func(5, 7) == 85\nassert func(3, 3) == 27\nassert func(10, 10) == 300\nassert func(1, 1) == 5", "response_code": "assert func(4, 6) == 52\nassert func(5, 7) == 85\nassert func(3, 3) == 27\nassert func(10, 10) == 300\nassert func(1, 1) == 5"}
{"task_id": 288, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(dict1):\n    '''\n    Can you write a function to check if a dictionary is empty or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func({}) == True\nassert func({1: 'a', 2: 'b'}) == False\nassert func({'key': 'value'}) == False\nassert func({0: 0, 1: 1, 2: 2}) == False\nassert func({None: None}) == False", "response_code": "assert func({}) == True\nassert func({1: 'a', 2: 'b'}) == False\nassert func({'key': 'value'}) == False\nassert func({0: 0, 1: 1, 2: 2}) == False\nassert func({None: None}) == False"}
{"task_id": 289, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(num):\n    '''\n    Can you write a function for the nth Catalan number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 1\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 5\nassert func(4) == 14\n```", "response_code": "\nassert func(0) == 1\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 5\nassert func(4) == 14\n"}
{"task_id": 290, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Can you write a function to find all adverbs and their positions in a given sentence by using regex?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"She sings beautifully\") == [(\"beautifully\", 10)]\nassert func(\"He runs quickly and jumps high\") == [(\"quickly\", 8), (\"high\", 22)]\nassert func(\"They speak softly and walk slowly\") == [(\"softly\", 11), (\"slowly\", 26)]\nassert func(\"The dog barks loudly\") == [(\"loudly\", 14)]\nassert func(\"I eat quickly and sleep soundly\") == [(\"quickly\", 7), (\"soundly\", 23)]\n```", "response_code": "\nassert func(\"She sings beautifully\") == [(\"beautifully\", 10)]\nassert func(\"He runs quickly and jumps high\") == [(\"quickly\", 8), (\"high\", 22)]\nassert func(\"They speak softly and walk slowly\") == [(\"softly\", 11), (\"slowly\", 26)]\nassert func(\"The dog barks loudly\") == [(\"loudly\", 14)]\nassert func(\"I eat quickly and sleep soundly\") == [(\"quickly\", 7), (\"soundly\", 23)]\n"}
{"task_id": 291, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import heapq\ndef func(items,n):\n    '''\n    Can you write a function to find the n - expensive price items from a given dataset using heap queue algorithm?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([10, 20, 30, 40, 50], 2) == [40, 50]\nassert func([5, 10, 15, 20, 25], 3) == [15, 20, 25]\nassert func([100, 200, 300, 400, 500], 1) == [500]\nassert func([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\nassert func([50, 40, 30, 20, 10], 4) == [20, 30, 40, 50]\n```", "response_code": "\nassert func([10, 20, 30, 40, 50], 2) == [40, 50]\nassert func([5, 10, 15, 20, 25], 3) == [15, 20, 25]\nassert func([100, 200, 300, 400, 500], 1) == [500]\nassert func([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\nassert func([50, 40, 30, 20, 10], 4) == [20, 30, 40, 50]\n"}
{"task_id": 292, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l, n):\n    '''\n    Can you write a python function to split the array and add the first part to the end?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2]\nassert func([10, 20, 30, 40, 50, 60], 3) == [40, 50, 60, 10, 20, 30]\nassert func([100, 200, 300, 400], 1) == [200, 300, 400, 100]\nassert func([7, 8, 9, 10, 11, 12, 13], 4) == [11, 12, 13, 7, 8, 9, 10]\nassert func([5, 6, 7, 8, 9], 5) == [6, 7, 8, 9, 5]\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2]\nassert func([10, 20, 30, 40, 50, 60], 3) == [40, 50, 60, 10, 20, 30]\nassert func([100, 200, 300, 400], 1) == [200, 300, 400, 100]\nassert func([7, 8, 9, 10, 11, 12, 13], 4) == [11, 12, 13, 7, 8, 9, 10]\nassert func([5, 6, 7, 8, 9], 5) == [6, 7, 8, 9, 5]\n"}
{"task_id": 293, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(listx):\n    '''\n    Can you write a function to convert a list to a tuple?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3]) == (1, 2, 3)\nassert func(['a', 'b', 'c']) == ('a', 'b', 'c')\nassert func([]) == ()\nassert func([True, False, True]) == (True, False, True)\nassert func([4.5, 6.7, 8.9]) == (4.5, 6.7, 8.9)", "response_code": "assert func([1, 2, 3]) == (1, 2, 3)\nassert func(['a', 'b', 'c']) == ('a', 'b', 'c')\nassert func([]) == ()\nassert func([True, False, True]) == (True, False, True)\nassert func([4.5, 6.7, 8.9]) == (4.5, 6.7, 8.9)"}
{"task_id": 294, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Can you write a python function to find the difference between the largest and smallest value in a given array?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == 4\nassert func([5, 4, 3, 2, 1]) == 4\nassert func([10, 3, 7, 1, 9]) == 9\nassert func([0, 0, 0, 0, 0]) == 0\nassert func([-5, -3, 0, 2, 4]) == 9", "response_code": "assert func([1, 2, 3, 4, 5]) == 4\nassert func([5, 4, 3, 2, 1]) == 4\nassert func([10, 3, 7, 1, 9]) == 9\nassert func([0, 0, 0, 0, 0]) == 0\nassert func([-5, -3, 0, 2, 4]) == 9"}
{"task_id": 295, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a, b):\n    '''\n    Can you write a function to find perfect squares between two given numbers?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1, 10) == [1, 4, 9]\nassert func(10, 20) == [16]\nassert func(25, 36) == [25, 36]\nassert func(50, 60) == []\nassert func(100, 120) == [100, 121]\n```", "response_code": "\nassert func(1, 10) == [1, 4, 9]\nassert func(10, 20) == [16]\nassert func(25, 36) == [25, 36]\nassert func(50, 60) == []\nassert func(100, 120) == [100, 121]\n"}
{"task_id": 296, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import cmath\ndef func(x,y):\n    '''\n    Can you write a function to convert polar coordinates to rectangular coordinates?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1, 0) == (1, 0)\nassert func(2, cmath.pi/2) == (0, 2)\nassert func(3, cmath.pi) == (-3, 0)\nassert func(4, 3*cmath.pi/2) == (0, -4)\nassert func(5, cmath.pi/4) == (5/2**0.5, 5/2**0.5)\n```", "response_code": "\nassert func(1, 0) == (1, 0)\nassert func(2, cmath.pi/2) == (0, 2)\nassert func(3, cmath.pi) == (-3, 0)\nassert func(4, 3*cmath.pi/2) == (0, -4)\nassert func(5, cmath.pi/4) == (5/2**0.5, 5/2**0.5)\n"}
{"task_id": 297, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(newList): \n    '''\n    Can you write a python function to interchange the first and last elements in a list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]\nassert func(['a', 'b', 'c', 'd']) == ['d', 'b', 'c', 'a']\nassert func([10, 20, 30, 40, 50, 60]) == [60, 20, 30, 40, 50, 10]\nassert func([True, False, True]) == [True, False, True]\nassert func([]) == []", "response_code": "assert func([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]\nassert func(['a', 'b', 'c', 'd']) == ['d', 'b', 'c', 'a']\nassert func([10, 20, 30, 40, 50, 60]) == [60, 20, 30, 40, 50, 10]\nassert func([True, False, True]) == [True, False, True]\nassert func([]) == []"}
{"task_id": 298, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n,k): \n    '''\n    Can you write a python function to find the sum of product of binomial co-efficients?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(3,2) == 10\nassert func(4,3) == 35\nassert func(5,2) == 26\nassert func(6,4) == 126\nassert func(7,3) == 161", "response_code": "assert func(3,2) == 10\nassert func(4,3) == 35\nassert func(5,2) == 26\nassert func(6,4) == 126\nassert func(7,3) == 161"}
{"task_id": 299, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(ip):\n    '''\n    Can you write a function to remove leading zeroes from an ip address?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"192.168.001.001\") == \"192.168.1.1\"\nassert func(\"010.010.010.010\") == \"10.10.10.10\"\nassert func(\"001.002.003.004\") == \"1.2.3.4\"\nassert func(\"000.000.000.000\") == \"0.0.0.0\"\nassert func(\"255.255.255.255\") == \"255.255.255.255\"", "response_code": "assert func(\"192.168.001.001\") == \"192.168.1.1\"\nassert func(\"010.010.010.010\") == \"10.10.10.10\"\nassert func(\"001.002.003.004\") == \"1.2.3.4\"\nassert func(\"000.000.000.000\") == \"0.0.0.0\"\nassert func(\"255.255.255.255\") == \"255.255.255.255\""}
{"task_id": 300, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Can you write a function to find the difference of the first even and odd number of a given list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == 1\nassert func([2, 4, 6, 8, 10]) == -2\nassert func([1, 3, 5, 7, 9]) == 2\nassert func([2, 3, 4, 5, 6]) == -1\nassert func([1, 2, 3, 4, 6]) == 1", "response_code": "assert func([1, 2, 3, 4, 5]) == 1\nassert func([2, 4, 6, 8, 10]) == -2\nassert func([1, 3, 5, 7, 9]) == 2\nassert func([2, 3, 4, 5, 6]) == -1\nassert func([1, 2, 3, 4, 6]) == 1"}
{"task_id": 301, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1,str2) : \n    '''\n    Can you write a python function to count the minimum number of swaps required to convert one binary string to another?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func('1101', '1110') == 1\nassert func('1010', '0101') == 2\nassert func('1111', '0000') == 2\nassert func('101010', '010101') == 3\nassert func('111000', '000111') == 3", "response_code": "assert func('1101', '1110') == 1\nassert func('1010', '0101') == 2\nassert func('1111', '0000') == 2\nassert func('101010', '010101') == 3\nassert func('111000', '000111') == 3"}
{"task_id": 302, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import sys \ndef func(tuple_list):\n    '''\n    Can you write a function to find the size of the given tuple?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test Case 1\nassert func((1, 2, 3)) == 3\n\n# Test Case 2\nassert func(('a', 'b', 'c', 'd')) == 4\n\n# Test Case 3\nassert func((1, 'a', 3.14, 'hello')) == 4\n\n# Test Case 4\nassert func(()) == 0\n\n# Test Case 5\nassert func(('only_one_element',)) == 1\n```", "response_code": "\n# Test Case 1\nassert func((1, 2, 3)) == 3\n\n# Test Case 2\nassert func(('a', 'b', 'c', 'd')) == 4\n\n# Test Case 3\nassert func((1, 'a', 3.14, 'hello')) == 4\n\n# Test Case 4\nassert func(()) == 0\n\n# Test Case 5\nassert func(('only_one_element',)) == 1\n"}
{"task_id": 303, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr1, arr2, k):\n    '''\n    Can you write a function to find the kth element from the given two sorted arrays?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 3, 5], [2, 4, 6], 3) == 3\nassert func([1, 3, 5], [2, 4, 6], 4) == 4\nassert func([1, 3, 5], [2, 4, 6], 5) == 5\nassert func([1, 3, 5], [2, 4, 6], 6) == 6\nassert func([1, 3, 5], [2, 4, 6], 7) == None\n```", "response_code": "\nassert func([1, 3, 5], [2, 4, 6], 3) == 3\nassert func([1, 3, 5], [2, 4, 6], 4) == 4\nassert func([1, 3, 5], [2, 4, 6], 5) == 5\nassert func([1, 3, 5], [2, 4, 6], 6) == 6\nassert func([1, 3, 5], [2, 4, 6], 7) == None\n"}
{"task_id": 304, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(number):\n    '''\n    Can you write a function to check whether the given number is armstrong or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(153) == True\nassert func(370) == True\nassert func(9474) == True\nassert func(9475) == False\nassert func(1634) == True", "response_code": "assert func(153) == True\nassert func(370) == True\nassert func(9474) == True\nassert func(9475) == False\nassert func(1634) == True"}
{"task_id": 305, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(number):\n    '''\n    Can you write a function to find the sum and average of the first n natural numbers?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5) == (15, 3.0)\nassert func(10) == (55, 5.5)\nassert func(1) == (1, 1.0)\nassert func(0) == (0, 0.0)\nassert func(100) == (5050, 50.5)\n```", "response_code": "\nassert func(5) == (15, 3.0)\nassert func(10) == (55, 5.5)\nassert func(1) == (1, 1.0)\nassert func(0) == (0, 0.0)\nassert func(100) == (5050, 50.5)\n"}
{"task_id": 306, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n) : \n    '''\n    Can you write a python function to check whether the given number is even or not using bitwise operator?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(2) == True\nassert func(5) == False\nassert func(0) == True\nassert func(100) == True\nassert func(17) == False", "response_code": "assert func(2) == True\nassert func(5) == False\nassert func(0) == True\nassert func(100) == True\nassert func(17) == False"}
{"task_id": 307, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1):\n    '''\n    Can you write a python function to find the first repeated character in a given string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\") == \"l\"\nassert func(\"world\") == None\nassert func(\"programming\") == \"m\"\nassert func(\"test\") == None\nassert func(\"banana\") == \"a\"", "response_code": "assert func(\"hello\") == \"l\"\nassert func(\"world\") == None\nassert func(\"programming\") == \"m\"\nassert func(\"test\") == None\nassert func(\"banana\") == \"a\""}
{"task_id": 308, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    Can you write a function to get a lucid number smaller than or equal to n?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(10) == 8\nassert func(20) == 18\nassert func(30) == 18\nassert func(50) == 48\nassert func(100) == 98\n```", "response_code": "\nassert func(10) == 8\nassert func(20) == 18\nassert func(30) == 18\nassert func(50) == 48\nassert func(100) == 98\n"}
{"task_id": 309, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(s):\n    '''\n    Can you write a function to reverse words in a given string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello World\") == \"olleH dlroW\"\nassert func(\"Python is fun\") == \"nohtyP si nuf\"\nassert func(\"123 456 789\") == \"321 654 987\"\nassert func(\"a b c d e\") == \"a b c d e\"\nassert func(\"Reverse these words\") == \"esreveR eseht sdrow\"\n```", "response_code": "\nassert func(\"Hello World\") == \"olleH dlroW\"\nassert func(\"Python is fun\") == \"nohtyP si nuf\"\nassert func(\"123 456 789\") == \"321 654 987\"\nassert func(\"a b c d e\") == \"a b c d e\"\nassert func(\"Reverse these words\") == \"esreveR eseht sdrow\"\n"}
{"task_id": 310, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(num):\n    '''\n    Can you write a function to check if the given integer is a prime number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(2) == True\nassert func(3) == True\nassert func(7) == True\nassert func(10) == False\nassert func(29) == True", "response_code": "assert func(2) == True\nassert func(3) == True\nassert func(7) == True\nassert func(10) == False\nassert func(29) == True"}
{"task_id": 311, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(degree):\n    '''\n    Can you write a function to convert degrees to radians?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(0) == 0.0\nassert func(90) == math.pi/2\nassert func(180) == math.pi\nassert func(270) == 3*math.pi/2\nassert func(360) == 2*math.pi", "response_code": "assert func(0) == 0.0\nassert func(90) == math.pi/2\nassert func(180) == math.pi\nassert func(270) == 3*math.pi/2\nassert func(360) == 2*math.pi"}
{"task_id": 312, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\n\ndef func(text, pattern):\n    '''\n    Can you write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello world\", \"world\") == (True, 6)\nassert func(\"apple banana cherry\", \"orange\") == (False, None)\nassert func(\"12345\", \"\\d+\") == (True, 0)\nassert func(\"hello123\", \"\\d+\") == (True, 5)\nassert func(\"hello world\", \"Hello\") == (False, None)\n```", "response_code": "\nassert func(\"hello world\", \"world\") == (True, 6)\nassert func(\"apple banana cherry\", \"orange\") == (False, None)\nassert func(\"12345\", \"\\d+\") == (True, 0)\nassert func(\"hello123\", \"\\d+\") == (True, 5)\nassert func(\"hello world\", \"Hello\") == (False, None)\n"}
{"task_id": 313, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a python function to find the nth bell number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 5\nassert func(4) == 15\nassert func(5) == 52\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 5\nassert func(4) == 15\nassert func(5) == 52\n"}
{"task_id": 314, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1, L):\n    '''\n    Can you write a python function to remove the k'th element from a given list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 2) == [1, 3, 4, 5]\nassert func(['a', 'b', 'c', 'd'], 0) == ['b', 'c', 'd']\nassert func([10, 20, 30, 40, 50], 4) == [10, 20, 30, 40]\nassert func([100, 200, 300], 1) == [100, 300]\nassert func(['x', 'y', 'z'], 2) == ['x', 'y']\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 2) == [1, 3, 4, 5]\nassert func(['a', 'b', 'c', 'd'], 0) == ['b', 'c', 'd']\nassert func([10, 20, 30, 40, 50], 4) == [10, 20, 30, 40]\nassert func([100, 200, 300], 1) == [100, 300]\nassert func(['x', 'y', 'z'], 2) == ['x', 'y']\n"}
{"task_id": 315, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list, N):\n    '''\n    Can you write a function to find the maximum of the nth column from the given tuple list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 0) == 7\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == 8\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == 9\nassert func([(10, 20, 30), (40, 50, 60), (70, 80, 90)], 1) == 80\nassert func([(100, 200, 300), (400, 500, 600), (700, 800, 900)], 0) == 700\n```", "response_code": "\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 0) == 7\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == 8\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == 9\nassert func([(10, 20, 30), (40, 50, 60), (70, 80, 90)], 1) == 80\nassert func([(100, 200, 300), (400, 500, 600), (700, 800, 900)], 0) == 700\n"}
{"task_id": 316, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lst):  \n    '''\n    Can you write a python function to merge the first and last elements separately in a list of lists?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 3], [4, 6], [7, 9]]\nassert func([[10, 20], [30, 40], [50, 60]]) == [[10, 20], [30, 40], [50, 60]]\nassert func([[1], [2], [3]]) == [[1, 1], [2, 2], [3, 3]]\nassert func([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\nassert func([[7, 8, 9, 10], [11, 12, 13, 14]]) == [[7, 10], [11, 14]]\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 3], [4, 6], [7, 9]]\nassert func([[10, 20], [30, 40], [50, 60]]) == [[10, 20], [30, 40], [50, 60]]\nassert func([[1], [2], [3]]) == [[1, 1], [2, 2], [3, 3]]\nassert func([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\nassert func([[7, 8, 9, 10], [11, 12, 13, 14]]) == [[7, 10], [11, 14]]\n"}
{"task_id": 317, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Can you write a function to find the cumulative sum of all the values that are present in the given tuple list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (3, 4), (5, 6)]) == [1, 3, 6, 10, 15, 21]\nassert func([(10, 20), (30, 40), (50, 60)]) == [10, 30, 60, 100, 150, 210]\nassert func([(2, 3), (4, 5), (6, 7)]) == [2, 5, 9, 14, 20, 27]\nassert func([(0, 0), (0, 0), (0, 0)]) == [0, 0, 0, 0, 0, 0]\nassert func([(1, 1), (2, 2), (3, 3)]) == [1, 2, 4, 6, 9, 12]\n```", "response_code": "\nassert func([(1, 2), (3, 4), (5, 6)]) == [1, 3, 6, 10, 15, 21]\nassert func([(10, 20), (30, 40), (50, 60)]) == [10, 30, 60, 100, 150, 210]\nassert func([(2, 3), (4, 5), (6, 7)]) == [2, 5, 9, 14, 20, 27]\nassert func([(0, 0), (0, 0), (0, 0)]) == [0, 0, 0, 0, 0, 0]\nassert func([(1, 1), (2, 2), (3, 3)]) == [1, 2, 4, 6, 9, 12]\n"}
{"task_id": 318, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Can you write a function to find the average value of the numbers in a given tuple of tuples?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(((1, 2, 3), (4, 5, 6), (7, 8, 9))) == 5.0\nassert func(((10, 20), (30, 40), (50, 60))) == 30.0\nassert func(((0, 0, 0), (0, 0, 0), (0, 0, 0))) == 0.0\nassert func(((1, 3, 5), (2, 4, 6), (7, 8, 9))) == 5.0\nassert func(((2, 4, 6), (8, 10, 12), (14, 16, 18))) == 10.0\n```", "response_code": "\nassert func(((1, 2, 3), (4, 5, 6), (7, 8, 9))) == 5.0\nassert func(((10, 20), (30, 40), (50, 60))) == 30.0\nassert func(((0, 0, 0), (0, 0, 0), (0, 0, 0))) == 0.0\nassert func(((1, 3, 5), (2, 4, 6), (7, 8, 9))) == 5.0\nassert func(((2, 4, 6), (8, 10, 12), (14, 16, 18))) == 10.0\n"}
{"task_id": 319, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Can you write a function to perform the modulo of tuple elements in the given two tuples?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((10, 20, 30), (3, 4, 5)) == (1, 0, 0)\nassert func((15, 25, 35), (2, 3, 4)) == (1, 1, 3)\nassert func((18, 27, 36), (5, 6, 7)) == (3, 3, 1)\nassert func((12, 22, 32), (7, 8, 9)) == (5, 6, 5)\nassert func((100, 200, 300), (10, 20, 30)) == (0, 0, 0)\n```", "response_code": "\nassert func((10, 20, 30), (3, 4, 5)) == (1, 0, 0)\nassert func((15, 25, 35), (2, 3, 4)) == (1, 1, 3)\nassert func((18, 27, 36), (5, 6, 7)) == (3, 3, 1)\nassert func((12, 22, 32), (7, 8, 9)) == (5, 6, 5)\nassert func((100, 200, 300), (10, 20, 30)) == (0, 0, 0)\n"}
{"task_id": 320, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(steps, d): \n    '''\n    Can you write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 3) == 1\nassert func(5, 10) == 2\nassert func(4, 8) == 2\nassert func(2, 4) == 1\nassert func(6, 12) == 2\n```", "response_code": "\nassert func(3, 3) == 1\nassert func(5, 10) == 2\nassert func(4, 8) == 2\nassert func(2, 4) == 1\nassert func(6, 12) == 2\n"}
{"task_id": 321, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums1,nums2):\n    '''\n    Can you write a function to divide two lists using map and lambda function?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([10, 20, 30], [2, 4, 6]) == [5.0, 5.0, 5.0]\nassert func([1, 2, 3, 4], [1, 2, 1, 2]) == [1.0, 1.0, 3.0, 2.0]\nassert func([5, 10, 15], [1, 2, 3]) == [5.0, 5.0, 5.0]\nassert func([100, 200, 300], [10, 20, 30]) == [10.0, 10.0, 10.0]\nassert func([7, 14, 21], [1, 2, 3]) == [7.0, 7.0, 7.0]", "response_code": "assert func([10, 20, 30], [2, 4, 6]) == [5.0, 5.0, 5.0]\nassert func([1, 2, 3, 4], [1, 2, 1, 2]) == [1.0, 1.0, 3.0, 2.0]\nassert func([5, 10, 15], [1, 2, 3]) == [5.0, 5.0, 5.0]\nassert func([100, 200, 300], [10, 20, 30]) == [10.0, 10.0, 10.0]\nassert func([7, 14, 21], [1, 2, 3]) == [7.0, 7.0, 7.0]"}
{"task_id": 322, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_str):\n    '''\n    Can you write a function to move all the numbers in it to the given string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"abc123\") == \"123abc\"\nassert func(\"1a2b3c\") == \"123abc\"\nassert func(\"hello123world\") == \"123helloworld\"\nassert func(\"123\") == \"123\"\nassert func(\"abc\") == \"abc\"\n```", "response_code": "\nassert func(\"abc123\") == \"123abc\"\nassert func(\"1a2b3c\") == \"123abc\"\nassert func(\"hello123world\") == \"123helloworld\"\nassert func(\"123\") == \"123\"\nassert func(\"abc\") == \"abc\"\n"}
{"task_id": 323, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a):\n    '''\n    Can you write a function to find the largest subset where each pair is divisible?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == [1, 2, 4]\nassert func([10, 20, 30, 40, 50]) == [10, 20, 40]\nassert func([3, 6, 9, 12, 15]) == [3, 6, 12]\nassert func([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\nassert func([5, 10, 15, 20, 25]) == [5, 10, 20]", "response_code": "assert func([1, 2, 3, 4, 5]) == [1, 2, 4]\nassert func([10, 20, 30, 40, 50]) == [10, 20, 40]\nassert func([3, 6, 9, 12, 15]) == [3, 6, 12]\nassert func([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\nassert func([5, 10, 15, 20, 25]) == [5, 10, 20]"}
{"task_id": 324, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr1, arr2, n):\n    '''\n    Can you write a function to find the median of two sorted arrays of the same size?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 3, 5], [2, 4, 6], 3) == 3.5\nassert func([1, 2, 3, 4], [5, 6, 7, 8], 4) == 4.5\nassert func([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5) == 5.5\nassert func([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 5) == 5.5\nassert func([1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], 6) == 6.5\n```", "response_code": "\nassert func([1, 3, 5], [2, 4, 6], 3) == 3.5\nassert func([1, 2, 3, 4], [5, 6, 7, 8], 4) == 4.5\nassert func([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5) == 5.5\nassert func([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 5) == 5.5\nassert func([1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], 6) == 6.5\n"}
{"task_id": 325, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums,n):\n    '''\n    Can you write a function to find the n-th power of individual elements in a list using a lambda function?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3], 2) == [1, 4, 9]\nassert func([0, 5, 10], 3) == [0, 125, 1000]\nassert func([-2, 4, -6], 2) == [4, 16, 36]\nassert func([1, 2, 3, 4], 0) == [1, 1, 1, 1]\nassert func([2, 3, 4, 5], 1) == [2, 3, 4, 5]", "response_code": "assert func([1, 2, 3], 2) == [1, 4, 9]\nassert func([0, 5, 10], 3) == [0, 125, 1000]\nassert func([-2, 4, -6], 2) == [4, 16, 36]\nassert func([1, 2, 3, 4], 0) == [1, 1, 1, 1]\nassert func([2, 3, 4, 5], 1) == [2, 3, 4, 5]"}
{"task_id": 326, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(string):\n    '''\n    Can you write a python function to convert the given string to upper case?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\") == \"HELLO\"\nassert func(\"Python\") == \"PYTHON\"\nassert func(\"123abc\") == \"123ABC\"\nassert func(\"UPPERCASE\") == \"UPPERCASE\"\nassert func(\"\") == \"\"", "response_code": "assert func(\"hello\") == \"HELLO\"\nassert func(\"Python\") == \"PYTHON\"\nassert func(\"123abc\") == \"123ABC\"\nassert func(\"UPPERCASE\") == \"UPPERCASE\"\nassert func(\"\") == \"\""}
{"task_id": 327, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(newList): \n    '''\n    Can you write a python function to interchange first and last elements in a given list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]\nassert func([10, 20, 30, 40, 50, 60]) == [60, 20, 30, 40, 50, 10]\nassert func(['a', 'b', 'c', 'd']) == ['d', 'b', 'c', 'a']\nassert func([True, False, True]) == [True, False, True]\nassert func([]) == []\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]\nassert func([10, 20, 30, 40, 50, 60]) == [60, 20, 30, 40, 50, 10]\nassert func(['a', 'b', 'c', 'd']) == ['d', 'b', 'c', 'a']\nassert func([True, False, True]) == [True, False, True]\nassert func([]) == []\n"}
{"task_id": 328, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(r) :  \n    '''\n    Can you write a python function to find the largest triangle that can be inscribed in the semicircle?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5) == 12.5\nassert func(8) == 20\nassert func(10) == 25\nassert func(15) == 37.5\nassert func(20) == 50\n```", "response_code": "\nassert func(5) == 12.5\nassert func(8) == 20\nassert func(10) == 25\nassert func(15) == 37.5\nassert func(20) == 50\n"}
{"task_id": 329, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(array,start=0,end=None):\n    '''\n    Can you write a python function to find the smallest missing number from the given array?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([0, 1, 2, 3, 5]) == 4\nassert func([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 10\nassert func([1, 2, 3, 4, 5]) == 0\nassert func([0, 1, 2, 3, 4, 5]) == 6\nassert func([0, 2, 3, 4, 5]) == 1", "response_code": "assert func([0, 1, 2, 3, 5]) == 4\nassert func([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 10\nassert func([1, 2, 3, 4, 5]) == 0\nassert func([0, 1, 2, 3, 4, 5]) == 6\nassert func([0, 2, 3, 4, 5]) == 1"}
{"task_id": 330, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(string):\n    '''\n    Can you write a function to replace all spaces in the given string with the character '%20'?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello world\") == \"hello%20world\"\nassert func(\"a b c\") == \"a%20b%20c\"\nassert func(\"  \") == \"%20%20\"\nassert func(\"\") == \"\"\nassert func(\"abc\") == \"abc\"", "response_code": "assert func(\"hello world\") == \"hello%20world\"\nassert func(\"a b c\") == \"a%20b%20c\"\nassert func(\"  \") == \"%20%20\"\nassert func(\"\") == \"\"\nassert func(\"abc\") == \"abc\""}
{"task_id": 331, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list): \n    '''\n    Can you write a python function to find even numbers from a mixed list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == [2, 4]\nassert func([10, 15, 20, 25, 30]) == [10, 20, 30]\nassert func([11, 13, 17, 19, 23]) == []\nassert func([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10]\nassert func([0, 1, 2, 3, 4, 5]) == [0, 2, 4]", "response_code": "assert func([1, 2, 3, 4, 5]) == [2, 4]\nassert func([10, 15, 20, 25, 30]) == [10, 20, 30]\nassert func([11, 13, 17, 19, 23]) == []\nassert func([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10]\nassert func([0, 1, 2, 3, 4, 5]) == [0, 2, 4]"}
{"task_id": 332, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(ele, sub = []): \n    '''\n    Can you write a function to extract all the adjacent coordinates of the given coordinate tuple?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((0, 0)) == [(0, 1), (1, 0)]\nassert func((2, 3)) == [(2, 4), (3, 3), (2, 2), (1, 3)]\nassert func((5, 5)) == [(5, 6), (6, 5), (5, 4), (4, 5)]\nassert func((0, 0), [(0, 1)]) == [(0, 1), (1, 0)]\nassert func((2, 3), [(2, 4), (3, 3)]) == [(2, 4), (3, 3), (2, 2), (1, 3)]\n```", "response_code": "\nassert func((0, 0)) == [(0, 1), (1, 0)]\nassert func((2, 3)) == [(2, 4), (3, 3), (2, 2), (1, 3)]\nassert func((5, 5)) == [(5, 6), (6, 5), (5, 4), (4, 5)]\nassert func((0, 0), [(0, 1)]) == [(0, 1), (1, 0)]\nassert func((2, 3), [(2, 4), (3, 3)]) == [(2, 4), (3, 3), (2, 2), (1, 3)]\n"}
{"task_id": 333, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(text):\n    '''\n    Can you write a function to replace whitespaces with an underscore and vice versa in a given string by using regex?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello world\") == \"hello_world\"\nassert func(\"python_is_fun\") == \"python is fun\"\nassert func(\"a_b_c_d\") == \"a b c d\"\nassert func(\"123_456_789\") == \"123 456 789\"\nassert func(\"   \") == \"___\"\n```", "response_code": "\nassert func(\"hello world\") == \"hello_world\"\nassert func(\"python_is_fun\") == \"python is fun\"\nassert func(\"a_b_c_d\") == \"a b c d\"\nassert func(\"123_456_789\") == \"123 456 789\"\nassert func(\"   \") == \"___\"\n"}
{"task_id": 334, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(num_list):\n    '''\n    Can you write a python function to move all zeroes to the end of the given list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([0, 1, 0, 3, 12]) == [1, 3, 12, 0, 0]\nassert func([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([0, 0, 1, 0, 2]) == [1, 2, 0, 0, 0]\nassert func([0, 5, 0, 0, 3]) == [5, 3, 0, 0, 0]\n```", "response_code": "\nassert func([0, 1, 0, 3, 12]) == [1, 3, 12, 0, 0]\nassert func([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([0, 0, 1, 0, 2]) == [1, 2, 0, 0, 0]\nassert func([0, 5, 0, 0, 3]) == [5, 3, 0, 0, 0]\n"}
{"task_id": 335, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr,n) : \n    '''\n    Can you write a python function to find the sum of xor of all pairs of numbers in the given array?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], 3) == 2\nassert func([4, 5, 6, 7], 4) == 8\nassert func([10, 20, 30, 40, 50], 5) == 80\nassert func([3, 5, 7, 9, 11, 13], 6) == 16\nassert func([2, 4, 6, 8, 10, 12, 14], 7) == 20\n```", "response_code": "\nassert func([1, 2, 3], 3) == 2\nassert func([4, 5, 6, 7], 4) == 8\nassert func([10, 20, 30, 40, 50], 5) == 80\nassert func([3, 5, 7, 9, 11, 13], 6) == 16\nassert func([2, 4, 6, 8, 10, 12, 14], 7) == 20\n"}
{"task_id": 336, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import heapq as hq\ndef func(iterable):\n    '''\n    Can you write a function to push all values into a heap and then pop off the smallest values one at a time?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3]) == [1, 1, 2, 3, 3, 4, 5, 5, 6, 9]\nassert func([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert func([2, 2, 2, 2, 2]) == [2, 2, 2, 2, 2]\n```", "response_code": "\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3]) == [1, 1, 2, 3, 3, 4, 5, 5, 6, 9]\nassert func([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert func([2, 2, 2, 2, 2]) == [2, 2, 2, 2, 2]\n"}
{"task_id": 337, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(actual_cost,sale_amount): \n    '''\n    Can you write a function to check whether the given amount has no profit and no loss?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(100, 100) == True\nassert func(50, 50) == True\nassert func(80, 80) == True\nassert func(120, 120) == True\nassert func(200, 200) == True", "response_code": "assert func(100, 100) == True\nassert func(50, 50) == True\nassert func(80, 80) == True\nassert func(120, 120) == True\nassert func(200, 200) == True"}
{"task_id": 338, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(v,t):\n    '''\n    Can you write a function to calculate wind chill index?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(10, 5) == 6.7\nassert func(20, 10) == 8.4\nassert func(30, 15) == 10.1\nassert func(40, 20) == 11.8\nassert func(50, 25) == 13.5\n```", "response_code": "\nassert func(10, 5) == 6.7\nassert func(20, 10) == 8.4\nassert func(30, 15) == 10.1\nassert func(40, 20) == 11.8\nassert func(50, 25) == 13.5\n"}
{"task_id": 339, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(funces):\n    '''\n    Can you write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['Alice', 'bob', 'Charlie', 'david']) == 12\nassert func(['Eve', 'frank', 'Grace', 'harry', 'Ivy']) == 7\nassert func(['Jack', 'kate', 'Liam', 'Mia', 'Noah']) == 12\nassert func(['Olivia', 'peter', 'Quinn', 'Rose', 'Sam']) == 15\nassert func(['Tom', 'Ursula', 'Victor', 'Wendy', 'Xander', 'Yvonne', 'Zane']) == 21\n```", "response_code": "\nassert func(['Alice', 'bob', 'Charlie', 'david']) == 12\nassert func(['Eve', 'frank', 'Grace', 'harry', 'Ivy']) == 7\nassert func(['Jack', 'kate', 'Liam', 'Mia', 'Noah']) == 12\nassert func(['Olivia', 'peter', 'Quinn', 'Rose', 'Sam']) == 15\nassert func(['Tom', 'Ursula', 'Victor', 'Wendy', 'Xander', 'Yvonne', 'Zane']) == 21\n"}
{"task_id": 340, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(items):\n    '''\n    Can you write a function to remove the parenthesis area in a string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"Hello (World)\") == \"Hello \"\nassert func(\"Python (Programming) is fun\") == \"Python  is fun\"\nassert func(\"I love (coding) in Python\") == \"I love  in Python\"\nassert func(\"This is a (test) string\") == \"This is a  string\"\nassert func(\"(Remove) the parenthesis\") == \" the parenthesis\"", "response_code": "assert func(\"Hello (World)\") == \"Hello \"\nassert func(\"Python (Programming) is fun\") == \"Python  is fun\"\nassert func(\"I love (coding) in Python\") == \"I love  in Python\"\nassert func(\"This is a (test) string\") == \"This is a  string\"\nassert func(\"(Remove) the parenthesis\") == \" the parenthesis\""}
{"task_id": 341, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a function to find the nth nonagonal number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 1\nassert func(2) == 9\nassert func(3) == 19\nassert func(4) == 31\nassert func(5) == 45", "response_code": "assert func(1) == 1\nassert func(2) == 9\nassert func(3) == 19\nassert func(4) == 31\nassert func(5) == 45"}
{"task_id": 342, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Can you write a function that matches a word containing 'z', not at the start or end of the word?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"zebra\") == \"zebra\"\nassert func(\"amazing\") == \"amazing\"\nassert func(\"frozen\") == \"frozen\"\nassert func(\"jazz\") == \"jazz\"\nassert func(\"hazard\") == \"hazard\"\n```", "response_code": "\nassert func(\"zebra\") == \"zebra\"\nassert func(\"amazing\") == \"amazing\"\nassert func(\"frozen\") == \"frozen\"\nassert func(\"jazz\") == \"jazz\"\nassert func(\"hazard\") == \"hazard\"\n"}
{"task_id": 343, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(input, k): \n    '''\n    Can you write a python function to reverse an array up to a given position?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5], 2) == [2, 1, 3, 4, 5]\nassert func([5, 4, 3, 2, 1], 3) == [3, 4, 5, 2, 1]\nassert func([10, 20, 30, 40, 50], 0) == [10, 20, 30, 40, 50]\nassert func([100, 200, 300, 400, 500], 4) == [400, 300, 200, 100, 500]\nassert func([7, 8, 9, 10, 11], 5) == [11, 10, 9, 8, 7]", "response_code": "assert func([1, 2, 3, 4, 5], 2) == [2, 1, 3, 4, 5]\nassert func([5, 4, 3, 2, 1], 3) == [3, 4, 5, 2, 1]\nassert func([10, 20, 30, 40, 50], 0) == [10, 20, 30, 40, 50]\nassert func([100, 200, 300, 400, 500], 4) == [400, 300, 200, 100, 500]\nassert func([7, 8, 9, 10, 11], 5) == [11, 10, 9, 8, 7]"}
{"task_id": 344, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup, test_dict):\n    '''\n    Can you write a function to add a dictionary to the tuple?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\ntest_tup = (1, 2, 3)\ntest_dict = {'a': 1, 'b': 2}\n\nfunc(test_tup, test_dict)\nassert test_tup == (1, 2, 3, {'a': 1, 'b': 2})\n\ntest_tup = ('apple', 'banana')\ntest_dict = {'c': 'cherry', 'd': 'date'}\n\nfunc(test_tup, test_dict)\nassert test_tup == ('apple', 'banana', {'c': 'cherry', 'd': 'date'})\n\ntest_tup = (10,)\ntest_dict = {'x': 100}\n\nfunc(test_tup, test_dict)\nassert test_tup == (10, {'x': 100})\n\ntest_tup = ()\ntest_dict = {'empty': 'dictionary'}\n\nfunc(test_tup, test_dict)\nassert test_tup == ({'empty': 'dictionary'},)\n\ntest_tup = (True, False)\ntest_dict = {'t': True, 'f': False}\n\nfunc(test_tup, test_dict)\nassert test_tup == (True, False, {'t': True, 'f': False})\n```", "response_code": "\ntest_tup = (1, 2, 3)\ntest_dict = {'a': 1, 'b': 2}\n\nfunc(test_tup, test_dict)\nassert test_tup == (1, 2, 3, {'a': 1, 'b': 2})\n\ntest_tup = ('apple', 'banana')\ntest_dict = {'c': 'cherry', 'd': 'date'}\n\nfunc(test_tup, test_dict)\nassert test_tup == ('apple', 'banana', {'c': 'cherry', 'd': 'date'})\n\ntest_tup = (10,)\ntest_dict = {'x': 100}\n\nfunc(test_tup, test_dict)\nassert test_tup == (10, {'x': 100})\n\ntest_tup = ()\ntest_dict = {'empty': 'dictionary'}\n\nfunc(test_tup, test_dict)\nassert test_tup == ({'empty': 'dictionary'},)\n\ntest_tup = (True, False)\ntest_dict = {'t': True, 'f': False}\n\nfunc(test_tup, test_dict)\nassert test_tup == (True, False, {'t': True, 'f': False})\n"}
{"task_id": 345, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(cost):\n    '''\n    Can you write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 8.0\nassert func([[1, 2], [3, 4]]) == 3.5\nassert func([[5]]) == 5.0\nassert func([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) == 1.0\nassert func([[10, 20, 30], [40, 50, 60], [70, 80, 90]]) == 50.0\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 8.0\nassert func([[1, 2], [3, 4]]) == 3.5\nassert func([[5]]) == 5.0\nassert func([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) == 1.0\nassert func([[10, 20, 30], [40, 50, 60], [70, 80, 90]]) == 50.0\n"}
{"task_id": 346, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(students,h,w):\n    '''\n    Can you write a function to filter the height and width of students which are stored in a dictionary?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nstudents = {\n    'Alice': (160, 50),\n    'Bob': (175, 70),\n    'Charlie': (165, 60),\n    'David': (180, 75),\n    'Eve': (155, 45)\n}\n\n# Test Case 1: Filter students with height greater than 170 and width less than 65\nassert func(students, 170, 65) == {'Bob': (175, 70), 'David': (180, 75)}\n\n# Test Case 2: Filter students with height less than 160 and width greater than 55\nassert func(students, 160, 55) == {'David': (180, 75)}\n\n# Test Case 3: Filter students with height equal to 165 and width equal to 60\nassert func(students, 165, 60) == {'Charlie': (165, 60)}\n\n# Test Case 4: Filter students with height less than 150 and width less than 40\nassert func(students, 150, 40) == {}\n\n# Test Case 5: Filter students with height greater than 190 and width greater than 80\nassert func(students, 190, 80) == {}\n```", "response_code": "\nstudents = {\n    'Alice': (160, 50),\n    'Bob': (175, 70),\n    'Charlie': (165, 60),\n    'David': (180, 75),\n    'Eve': (155, 45)\n}\n\n# Test Case 1: Filter students with height greater than 170 and width less than 65\nassert func(students, 170, 65) == {'Bob': (175, 70), 'David': (180, 75)}\n\n# Test Case 2: Filter students with height less than 160 and width greater than 55\nassert func(students, 160, 55) == {'David': (180, 75)}\n\n# Test Case 3: Filter students with height equal to 165 and width equal to 60\nassert func(students, 165, 60) == {'Charlie': (165, 60)}\n\n# Test Case 4: Filter students with height less than 150 and width less than 40\nassert func(students, 150, 40) == {}\n\n# Test Case 5: Filter students with height greater than 190 and width greater than 80\nassert func(students, 190, 80) == {}\n"}
{"task_id": 347, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from operator import eq\ndef func(nums1, nums2):\n    '''\n    Can you write a function to count the same pair in two given lists using the map function?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], [1, 2, 3]) == 3\nassert func([1, 2, 3], [4, 5, 6]) == 0\nassert func([1, 2, 3], [3, 2, 1]) == 3\nassert func([1, 2, 3], [1, 2, 2]) == 2\nassert func([1, 2, 3], [1, 2, 3, 4]) == 3\n```", "response_code": "\nassert func([1, 2, 3], [1, 2, 3]) == 3\nassert func([1, 2, 3], [4, 5, 6]) == 0\nassert func([1, 2, 3], [3, 2, 1]) == 3\nassert func([1, 2, 3], [1, 2, 2]) == 2\nassert func([1, 2, 3], [1, 2, 3, 4]) == 3\n"}
{"task_id": 348, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(base, power):\n    '''\n    Can you write a function to calculate the sum of all digits of the base to the specified power?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(2, 3) == 8\nassert func(5, 2) == 5\nassert func(10, 4) == 1\nassert func(3, 5) == 243\nassert func(7, 0) == 1\n```", "response_code": "\nassert func(2, 3) == 8\nassert func(5, 2) == 5\nassert func(10, 4) == 1\nassert func(3, 5) == 243\nassert func(7, 0) == 1\n"}
{"task_id": 349, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text1):\n    '''\n    Can you write a function to extract values between quotation marks of the given string by using regex?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func('This is a \"test\" string') == ['test']\nassert func('No quotes here') == []\nassert func('Multiple \"quotes\" \"in\" \"one\" string') == ['quotes', 'in', 'one']\nassert func('Empty quotes \"\" should not be included') == []\nassert func('Single \"quote\"') == ['quote']\n```", "response_code": "\nassert func('This is a \"test\" string') == ['test']\nassert func('No quotes here') == []\nassert func('Multiple \"quotes\" \"in\" \"one\" string') == ['quotes', 'in', 'one']\nassert func('Empty quotes \"\" should not be included') == []\nassert func('Single \"quote\"') == ['quote']\n"}
{"task_id": 350, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    Can you write a function to multiply the adjacent elements of the given tuple?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3, 4)) == (2, 6, 12)\nassert func((5, 10, 15)) == (50, 150)\nassert func((2, 3, 5, 7, 11)) == (6, 15, 35, 77)\nassert func((4, 3, 2, 1)) == (12, 2, 1)\nassert func((0, 0, 0, 0)) == (0, 0, 0)\n```", "response_code": "\nassert func((1, 2, 3, 4)) == (2, 6, 12)\nassert func((5, 10, 15)) == (50, 150)\nassert func((2, 3, 5, 7, 11)) == (6, 15, 35, 77)\nassert func((4, 3, 2, 1)) == (12, 2, 1)\nassert func((0, 0, 0, 0)) == (0, 0, 0)\n"}
{"task_id": 351, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lst1,lst2):\n    '''\n    Can you write a function to sum elements in two lists?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3], [4, 5, 6]) == [5, 7, 9]\nassert func([-1, -2, -3], [-4, -5, -6]) == [-5, -7, -9]\nassert func([0, 0, 0], [0, 0, 0]) == [0, 0, 0]\nassert func([1, 2, 3], [-1, -2, -3]) == [0, 0, 0]\nassert func([10, 20, 30], [1, 2, 3]) == [11, 22, 33]", "response_code": "assert func([1, 2, 3], [4, 5, 6]) == [5, 7, 9]\nassert func([-1, -2, -3], [-4, -5, -6]) == [-5, -7, -9]\nassert func([0, 0, 0], [0, 0, 0]) == [0, 0, 0]\nassert func([1, 2, 3], [-1, -2, -3]) == [0, 0, 0]\nassert func([10, 20, 30], [1, 2, 3]) == [11, 22, 33]"}
{"task_id": 352, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from itertools import groupby\ndef func(nums):\n    '''\n    Can you write a function to remove consecutive duplicates of a given list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test case 1: Removing consecutive duplicates\nassert func([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [1, 2, 3, 4]\n\n# Test case 2: No consecutive duplicates\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n\n# Test case 3: All elements are duplicates\nassert func([1, 1, 1, 1, 1]) == [1]\n\n# Test case 4: Empty list\nassert func([]) == []\n\n# Test case 5: Consecutive duplicates at the beginning and end\nassert func([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4]) == [1, 2, 3, 4]\n```", "response_code": "\n# Test case 1: Removing consecutive duplicates\nassert func([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [1, 2, 3, 4]\n\n# Test case 2: No consecutive duplicates\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n\n# Test case 3: All elements are duplicates\nassert func([1, 1, 1, 1, 1]) == [1]\n\n# Test case 4: Empty list\nassert func([]) == []\n\n# Test case 5: Consecutive duplicates at the beginning and end\nassert func([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4]) == [1, 2, 3, 4]\n"}
{"task_id": 353, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(r,h):\n    '''\n    Can you write a function to find the lateral surface area of a cone?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 4) == 37.69911184307752\nassert func(5, 7) == 110.88263477376766\nassert func(1, 10) == 31.41592653589793\nassert func(0, 5) == 0.0\nassert func(8, 2) == 100.53096491487338\n```", "response_code": "\nassert func(3, 4) == 37.69911184307752\nassert func(5, 7) == 110.88263477376766\nassert func(1, 10) == 31.41592653589793\nassert func(0, 5) == 0.0\nassert func(8, 2) == 100.53096491487338\n"}
{"task_id": 354, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Can you write a function to replace all occurrences of spaces, commas, or dots with a colon?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello, world\") == \"Hello:world\"\nassert func(\"Python is fun\") == \"Python:is:fun\"\nassert func(\"1,2,3,4,5\") == \"1:2:3:4:5\"\nassert func(\"Let's try this.\") == \"Let's:try:this:\"\nassert func(\"NoSpacesHere\") == \"NoSpacesHere\"\n```", "response_code": "\nassert func(\"Hello, world\") == \"Hello:world\"\nassert func(\"Python is fun\") == \"Python:is:fun\"\nassert func(\"1,2,3,4,5\") == \"1:2:3:4:5\"\nassert func(\"Let's try this.\") == \"Let's:try:this:\"\nassert func(\"NoSpacesHere\") == \"NoSpacesHere\"\n"}
{"task_id": 355, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(A, x):\n    '''\n    Can you write a function to find the index of the first occurrence of a given number in a sorted array?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5], 3) == 2\nassert func([1, 2, 3, 4, 5], 1) == 0\nassert func([1, 2, 3, 4, 5], 5) == 4\nassert func([1, 2, 3, 4, 5], 6) == -1\nassert func([1, 2, 3, 4, 5], 0) == -1", "response_code": "assert func([1, 2, 3, 4, 5], 3) == 2\nassert func([1, 2, 3, 4, 5], 1) == 0\nassert func([1, 2, 3, 4, 5], 5) == 4\nassert func([1, 2, 3, 4, 5], 6) == -1\nassert func([1, 2, 3, 4, 5], 0) == -1"}
{"task_id": 356, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):\n    '''\n    Can you write a python function to find the sum of products of all possible subarrays?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3]) == 50\nassert func([4, 5, 6]) == 170\nassert func([2, 3, 4, 5]) == 420\nassert func([1, 2, 3, 4, 5]) == 715\nassert func([3, 4, 5, 6]) == 380\n```", "response_code": "\nassert func([1, 2, 3]) == 50\nassert func([4, 5, 6]) == 170\nassert func([2, 3, 4, 5]) == 420\nassert func([1, 2, 3, 4, 5]) == 715\nassert func([3, 4, 5, 6]) == 380\n"}
{"task_id": 357, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):  \n    '''\n    Can you write a python function to toggle bits of the number except the first and the last bit?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0b101010) == 0b101010\nassert func(0b110011) == 0b110000\nassert func(0b111111) == 0b111100\nassert func(0b100001) == 0b100000\nassert func(0b101101) == 0b101100\n```", "response_code": "\nassert func(0b101010) == 0b101010\nassert func(0b110011) == 0b110000\nassert func(0b111111) == 0b111100\nassert func(0b100001) == 0b100000\nassert func(0b101101) == 0b101100\n"}
{"task_id": 358, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import bisect\ndef func(a, x):\n    '''\n    Can you write a function to locate the left insertion point for a specified value in sorted order?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 3, 5, 7, 9], 4) == 2\nassert func([1, 3, 5, 7, 9], 6) == 3\nassert func([1, 3, 5, 7, 9], 0) == 0\nassert func([1, 3, 5, 7, 9], 10) == 5\nassert func([1, 3, 5, 7, 9], 5) == 2\n```", "response_code": "\nassert func([1, 3, 5, 7, 9], 4) == 2\nassert func([1, 3, 5, 7, 9], 6) == 3\nassert func([1, 3, 5, 7, 9], 0) == 0\nassert func([1, 3, 5, 7, 9], 10) == 5\nassert func([1, 3, 5, 7, 9], 5) == 2\n"}
{"task_id": 359, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef func(string): \n    '''\n    Can you write a function to check whether the given string is starting with a vowel or not using regex?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"apple\") == True\nassert func(\"banana\") == True\nassert func(\"123abc\") == False\nassert func(\"Orange\") == True\nassert func(\"123\") == False\n```", "response_code": "\nassert func(\"apple\") == True\nassert func(\"banana\") == True\nassert func(\"123abc\") == False\nassert func(\"Orange\") == True\nassert func(\"123\") == False\n"}
{"task_id": 360, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    Can you write a function to calculate the geometric sum of n-1?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 0\nassert func(2) == 1\nassert func(3) == 1.5\nassert func(4) == 1.75\nassert func(5) == 1.875", "response_code": "assert func(1) == 0\nassert func(2) == 1\nassert func(3) == 1.5\nassert func(4) == 1.75\nassert func(5) == 1.875"}
{"task_id": 361, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math \ndef func(n): \n    '''\n    Can you write a python function to find the index of the smallest triangular number with n digits?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 3\nassert func(2) == 45\nassert func(3) == 780\nassert func(4) == 12375\nassert func(5) == 123750\n```", "response_code": "\nassert func(1) == 3\nassert func(2) == 45\nassert func(3) == 780\nassert func(4) == 12375\nassert func(5) == 123750\n"}
{"task_id": 362, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    Can you write a function to convert the given tuple to a key-value dictionary using adjacent elements?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 'a', 2, 'b')) == {1: 'a', 2: 'b'}\nassert func(('x', 10, 'y', 20, 'z', 30)) == {'x': 10, 'y': 20, 'z': 30}\nassert func((True, 'yes', False, 'no')) == {True: 'yes', False: 'no'}\nassert func(('apple', 'red', 'banana', 'yellow')) == {'apple': 'red', 'banana': 'yellow'}\nassert func((3.14, 'pi', 2.71, 'e')) == {3.14: 'pi', 2.71: 'e'}\n```", "response_code": "\nassert func((1, 'a', 2, 'b')) == {1: 'a', 2: 'b'}\nassert func(('x', 10, 'y', 20, 'z', 30)) == {'x': 10, 'y': 20, 'z': 30}\nassert func((True, 'yes', False, 'no')) == {True: 'yes', False: 'no'}\nassert func(('apple', 'red', 'banana', 'yellow')) == {'apple': 'red', 'banana': 'yellow'}\nassert func((3.14, 'pi', 2.71, 'e')) == {3.14: 'pi', 2.71: 'e'}\n"}
{"task_id": 363, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(s) :\n    '''\n    Can you write a python function to check whether all the characters are same or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"aaaa\") == True\nassert func(\"abbb\") == False\nassert func(\"1111\") == True\nassert func(\"xyz\") == False\nassert func(\"\") == True", "response_code": "assert func(\"aaaa\") == True\nassert func(\"abbb\") == False\nassert func(\"1111\") == True\nassert func(\"xyz\") == False\nassert func(\"\") == True"}
{"task_id": 364, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(side):\n    '''\n    Can you write a function to calculate the area of a tetrahedron?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(3) == 3.18\nassert func(5) == 10.83\nassert func(7) == 29.63\nassert func(10) == 64.95\nassert func(12) == 113.14", "response_code": "assert func(3) == 3.18\nassert func(5) == 10.83\nassert func(7) == 29.63\nassert func(10) == 64.95\nassert func(12) == 113.14"}
{"task_id": 365, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list, m):\n    '''\n    Can you write a function to rotate a given list by a specified number of items to the right direction?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]\nassert func([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5], 1) == [5, 1, 2, 3, 4]\nassert func([1, 2, 3, 4, 5], 3) == [3, 4, 5, 1, 2]\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]\nassert func([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5], 1) == [5, 1, 2, 3, 4]\nassert func([1, 2, 3, 4, 5], 3) == [3, 4, 5, 1, 2]\n"}
{"task_id": 366, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    Can you write a function to check if the given tuple has any none value or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func((1, 2, 3)) == False\nassert func((None, 2, 3)) == True\nassert func((1, None, 3)) == True\nassert func((1, 2, None)) == True\nassert func((None, None, None)) == True", "response_code": "assert func((1, 2, 3)) == False\nassert func((None, 2, 3)) == True\nassert func((1, None, 3)) == True\nassert func((1, 2, None)) == True\nassert func((None, None, None)) == True"}
{"task_id": 367, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(startnum, endnum):\n    '''\n    Can you write a function to find numbers within a given range where every number is divisible by every digit it contains?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(10, 50) == [12, 15, 20, 24, 30, 40, 42, 45, 48]\nassert func(1, 20) == [12, 15]\nassert func(50, 100) == [54, 60, 72, 80, 84]\nassert func(100, 150) == [102, 105, 108, 120, 126, 132, 135, 140, 144, 150]\nassert func(200, 250) == [204, 210, 216, 220, 224, 240, 243]", "response_code": "assert func(10, 50) == [12, 15, 20, 24, 30, 40, 42, 45, 48]\nassert func(1, 20) == [12, 15]\nassert func(50, 100) == [54, 60, 72, 80, 84]\nassert func(100, 150) == [102, 105, 108, 120, 126, 132, 135, 140, 144, 150]\nassert func(200, 250) == [204, 210, 216, 220, 224, 240, 243]"}
{"task_id": 368, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(r,a):\n    '''\n    Can you write a function to find the area of a sector?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(5, 30) == 5.236\nassert func(10, 45) == 15.708\nassert func(8, 60) == 16.755\nassert func(12, 90) == 37.699\nassert func(15, 120) == 58.905", "response_code": "assert func(5, 30) == 5.236\nassert func(10, 45) == 15.708\nassert func(8, 60) == 16.755\nassert func(12, 90) == 37.699\nassert func(15, 120) == 58.905"}
{"task_id": 369, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(X, Y, Z): \n    '''\n    Can you write a function to find the longest common subsequence for the given three string sequence?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"abcde\", \"ace\", \"abc\") == \"ac\"\nassert func(\"AGGTAB\", \"GXTXAYB\", \"GTAB\") == \"GTAB\"\nassert func(\"abcdef\", \"xyz\", \"123\") == \"\"\nassert func(\"ABCD\", \"EFGH\", \"IJKL\") == \"\"\nassert func(\"apple\", \"banana\", \"cherry\") == \"\"\n```", "response_code": "\nassert func(\"abcde\", \"ace\", \"abc\") == \"ac\"\nassert func(\"AGGTAB\", \"GXTXAYB\", \"GTAB\") == \"GTAB\"\nassert func(\"abcdef\", \"xyz\", \"123\") == \"\"\nassert func(\"ABCD\", \"EFGH\", \"IJKL\") == \"\"\nassert func(\"apple\", \"banana\", \"cherry\") == \"\"\n"}
{"task_id": 370, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(str1):\n    '''\n    Can you write a function to put spaces between words starting with capital letters in a given string by using regex?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"HelloWorld\") == \"Hello World\"\nassert func(\"PythonIsGreat\") == \"Python Is Great\"\nassert func(\"RegexIsFun\") == \"Regex Is Fun\"\nassert func(\"SpaceBetweenWords\") == \"Space Between Words\"\nassert func(\"CapitalLettersInString\") == \"Capital Letters In String\"\n```", "response_code": "\nassert func(\"HelloWorld\") == \"Hello World\"\nassert func(\"PythonIsGreat\") == \"Python Is Great\"\nassert func(\"RegexIsFun\") == \"Regex Is Fun\"\nassert func(\"SpaceBetweenWords\") == \"Space Between Words\"\nassert func(\"CapitalLettersInString\") == \"Capital Letters In String\"\n"}
{"task_id": 371, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums_str):\n    '''\n    Can you write a function to sort a given list of strings of numbers numerically?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([\"3\", \"1\", \"2\"]) == [\"1\", \"2\", \"3\"]\nassert func([\"10\", \"2\", \"100\"]) == [\"2\", \"10\", \"100\"]\nassert func([\"-5\", \"0\", \"5\"]) == [\"-5\", \"0\", \"5\"]\nassert func([\"1000\", \"100\", \"10\", \"1\"]) == [\"1\", \"10\", \"100\", \"1000\"]\nassert func([\"-10\", \"-5\", \"0\", \"5\", \"10\"]) == [\"-10\", \"-5\", \"0\", \"5\", \"10\"]\n```", "response_code": "\nassert func([\"3\", \"1\", \"2\"]) == [\"1\", \"2\", \"3\"]\nassert func([\"10\", \"2\", \"100\"]) == [\"2\", \"10\", \"100\"]\nassert func([\"-5\", \"0\", \"5\"]) == [\"-5\", \"0\", \"5\"]\nassert func([\"1000\", \"100\", \"10\", \"1\"]) == [\"1\", \"10\", \"100\", \"1000\"]\nassert func([\"-10\", \"-5\", \"0\", \"5\", \"10\"]) == [\"-10\", \"-5\", \"0\", \"5\", \"10\"]\n"}
{"task_id": 372, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list, test_tup):\n    '''\n    Can you write a function to add the given tuple to the given list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], (4, 5)) == [1, 2, 3, (4, 5)]\nassert func([], (1, 2, 3)) == [(1, 2, 3)]\nassert func(['a', 'b'], ('c',)) == ['a', 'b', ('c',)]\nassert func([1, 2, 3], ()) == [1, 2, 3, ()]\nassert func([], ()) == [()]\n```", "response_code": "\nassert func([1, 2, 3], (4, 5)) == [1, 2, 3, (4, 5)]\nassert func([], (1, 2, 3)) == [(1, 2, 3)]\nassert func(['a', 'b'], ('c',)) == ['a', 'b', ('c',)]\nassert func([1, 2, 3], ()) == [1, 2, 3, ()]\nassert func([], ()) == [()]\n"}
{"task_id": 373, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr, i):\n    '''\n    Can you write a function to check if the given array represents a min heap or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 3, 5, 7, 9, 11], 0) == True\nassert func([1, 2, 3, 4, 5, 6], 0) == False\nassert func([10, 8, 5, 3, 2, 1], 0) == True\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9], 0) == False\nassert func([1], 0) == True\n```", "response_code": "\nassert func([1, 3, 5, 7, 9, 11], 0) == True\nassert func([1, 2, 3, 4, 5, 6], 0) == False\nassert func([10, 8, 5, 3, 2, 1], 0) == True\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9], 0) == False\nassert func([1], 0) == True\n"}
{"task_id": 374, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a function to find the nth Jacobsthal number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(0) == 0\nassert func(1) == 1\nassert func(2) == 1\nassert func(5) == 11\nassert func(10) == 341", "response_code": "assert func(0) == 0\nassert func(1) == 1\nassert func(2) == 1\nassert func(5) == 11\nassert func(10) == 341"}
{"task_id": 375, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list, K):\n    '''\n    Can you write a function to find minimum k records from a tuple list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')], 2) == [(1, 'a'), (2, 'b')]\nassert func([(5, 'e'), (6, 'f'), (7, 'g'), (8, 'h')], 3) == [(5, 'e'), (6, 'f'), (7, 'g')]\nassert func([(10, 'j'), (9, 'i'), (8, 'h'), (7, 'g'), (6, 'f')], 4) == [(10, 'j'), (9, 'i'), (8, 'h'), (7, 'g')]\nassert func([(100, 'z'), (50, 'y'), (75, 'x'), (25, 'w')], 1) == [(25, 'w')]\nassert func([(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')], 0) == []\n```", "response_code": "\nassert func([(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')], 2) == [(1, 'a'), (2, 'b')]\nassert func([(5, 'e'), (6, 'f'), (7, 'g'), (8, 'h')], 3) == [(5, 'e'), (6, 'f'), (7, 'g')]\nassert func([(10, 'j'), (9, 'i'), (8, 'h'), (7, 'g'), (6, 'f')], 4) == [(10, 'j'), (9, 'i'), (8, 'h'), (7, 'g')]\nassert func([(100, 'z'), (50, 'y'), (75, 'x'), (25, 'w')], 1) == [(25, 'w')]\nassert func([(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')], 0) == []\n"}
{"task_id": 376, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l1, l2, l3):\n    '''\n    Can you write a function to find common index elements from three lists?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], [2, 3, 4], [3, 4, 5]) == [3]\nassert func([1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]) == [3, 4]\nassert func([1, 2, 3], [4, 5, 6], [7, 8, 9]) == []\nassert func([1, 2, 3], [1, 2, 3], [1, 2, 3]) == [1, 2, 3]\nassert func([1, 2, 3], [4, 5, 6], [1, 2, 3]) == []\n```", "response_code": "\nassert func([1, 2, 3], [2, 3, 4], [3, 4, 5]) == [3]\nassert func([1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]) == [3, 4]\nassert func([1, 2, 3], [4, 5, 6], [7, 8, 9]) == []\nassert func([1, 2, 3], [1, 2, 3], [1, 2, 3]) == [1, 2, 3]\nassert func([1, 2, 3], [4, 5, 6], [1, 2, 3]) == []\n"}
{"task_id": 377, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(numbers):\n    '''\n    Can you write a function to find the second smallest number in a list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([3, 1, 4, 1, 5]) == 3\nassert func([5, 5, 5, 5, 5]) == 5\nassert func([9, 8, 7, 6, 5]) == 6\nassert func([2, 2, 2, 2, 2]) == 2\nassert func([10, 20, 30, 40, 50]) == 20", "response_code": "assert func([3, 1, 4, 1, 5]) == 3\nassert func([5, 5, 5, 5, 5]) == 5\nassert func([9, 8, 7, 6, 5]) == 6\nassert func([2, 2, 2, 2, 2]) == 2\nassert func([10, 20, 30, 40, 50]) == 20"}
{"task_id": 378, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Can you write a function that matches a string that has an a followed by zero or one 'b'?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"ac\") == True\nassert func(\"abc\") == True\nassert func(\"abbc\") == False\nassert func(\"a\") == True\nassert func(\"az\") == False\n```", "response_code": "\nassert func(\"ac\") == True\nassert func(\"abc\") == True\nassert func(\"abbc\") == False\nassert func(\"a\") == True\nassert func(\"az\") == False\n"}
{"task_id": 379, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Can you write a function to count the pairs of reverse strings in the given string list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['ab', 'ba', 'cd', 'dc', 'ef', 'fe']) == 3\nassert func(['abc', 'cba', 'def', 'fed', 'ghi', 'ihg']) == 3\nassert func(['racecar', 'car', 'level', 'level', 'hello', 'olleh']) == 4\nassert func(['python', 'nohtyp', 'java', 'avaj', 'ruby', 'ybur']) == 2\nassert func(['123', '321', '456', '654', '789', '987']) == 3\n```", "response_code": "\nassert func(['ab', 'ba', 'cd', 'dc', 'ef', 'fe']) == 3\nassert func(['abc', 'cba', 'def', 'fed', 'ghi', 'ihg']) == 3\nassert func(['racecar', 'car', 'level', 'level', 'hello', 'olleh']) == 4\nassert func(['python', 'nohtyp', 'java', 'avaj', 'ruby', 'ybur']) == 2\nassert func(['123', '321', '456', '654', '789', '987']) == 3\n"}
{"task_id": 380, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Can you write a function to count the number of unique lists within a list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([[1, 2], [3, 4], [1, 2]]) == 2\nassert func([[1, 2], [3, 4], [5, 6]]) == 3\nassert func([[1, 2], [1, 2], [1, 2]]) == 1\nassert func([[1, 2, 3], [4, 5], [6, 7]]) == 3\nassert func([[1, 2], [3, 4], [5, 6], [1, 2]]) == 3", "response_code": "assert func([[1, 2], [3, 4], [1, 2]]) == 2\nassert func([[1, 2], [3, 4], [5, 6]]) == 3\nassert func([[1, 2], [1, 2], [1, 2]]) == 1\nassert func([[1, 2, 3], [4, 5], [6, 7]]) == 3\nassert func([[1, 2], [3, 4], [5, 6], [1, 2]]) == 3"}
{"task_id": 381, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(num):\n    '''\n    Can you write a function to check a decimal with a precision of 2?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(3.14159) == 3.14\nassert func(2.71828) == 2.72\nassert func(1.23456) == 1.23\nassert func(0.99999) == 1.00\nassert func(123.456) == 123.46", "response_code": "assert func(3.14159) == 3.14\nassert func(2.71828) == 2.72\nassert func(1.23456) == 1.23\nassert func(0.99999) == 1.00\nassert func(123.456) == 123.46"}
{"task_id": 382, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):\n    '''\n    Can you write a python function to check whether an array contains only one distinct element or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 1, 1, 1]) == True\nassert func([1, 2, 3, 4]) == False\nassert func([5, 5, 5, 5, 5]) == True\nassert func([0, 0, 0, 0, 1]) == False\nassert func([2]) == True", "response_code": "assert func([1, 1, 1, 1]) == True\nassert func([1, 2, 3, 4]) == False\nassert func([5, 5, 5, 5, 5]) == True\nassert func([0, 0, 0, 0, 1]) == False\nassert func([2]) == True"}
{"task_id": 383, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(monthnum3):\n    '''\n    Can you write a function to check whether the given month number contains 30 days or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(4) == True\nassert func(6) == True\nassert func(9) == True\nassert func(11) == True\nassert func(2) == False", "response_code": "assert func(4) == True\nassert func(6) == True\nassert func(9) == True\nassert func(11) == True\nassert func(2) == False"}
{"task_id": 384, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr,n): \n    '''\n    Can you write a python function to find the minimum difference between any two elements in a given array?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5], 5) == 1\nassert func([5, 10, 15, 20], 4) == 5\nassert func([3, 8, 12, 17, 25], 5) == 4\nassert func([10, 20, 30, 40, 50], 5) == 10\nassert func([7, 13, 19, 25, 31], 5) == 6", "response_code": "assert func([1, 2, 3, 4, 5], 5) == 1\nassert func([5, 10, 15, 20], 4) == 5\nassert func([3, 8, 12, 17, 25], 5) == 4\nassert func([10, 20, 30, 40, 50], 5) == 10\nassert func([7, 13, 19, 25, 31], 5) == 6"}
{"task_id": 385, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str):\n    '''\n    Can you write a python function to count numeric values in a given string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"abc123\") == 3\nassert func(\"1a2b3c\") == 3\nassert func(\"12345\") == 5\nassert func(\"abc\") == 0\nassert func(\"\") == 0", "response_code": "assert func(\"abc123\") == 3\nassert func(\"1a2b3c\") == 3\nassert func(\"12345\") == 5\nassert func(\"abc\") == 0\nassert func(\"\") == 0"}
{"task_id": 386, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math \ndef func(n): \n    '''\n    Can you write a function to find the nth polite number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 4\nassert func(4) == 6\nassert func(5) == 8\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 4\nassert func(4) == 6\nassert func(5) == 8\n"}
{"task_id": 387, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l1):\n    '''\n    Can you write a function to iterate over all pairs of consecutive items in a given list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test Case 1\nl1 = [1, 2, 3, 4]\nassert list(func(l1)) == [(1, 2), (2, 3), (3, 4)]\n\n# Test Case 2\nl1 = [5, 10, 15, 20, 25]\nassert list(func(l1)) == [(5, 10), (10, 15), (15, 20), (20, 25)]\n\n# Test Case 3\nl1 = [100]\nassert list(func(l1)) == []\n\n# Test Case 4\nl1 = [0, 0, 0, 0]\nassert list(func(l1)) == [(0, 0), (0, 0), (0, 0)]\n\n# Test Case 5\nl1 = [1, 3, 5, 7, 9]\nassert list(func(l1)) == [(1, 3), (3, 5), (5, 7), (7, 9)]\n```", "response_code": "\n# Test Case 1\nl1 = [1, 2, 3, 4]\nassert list(func(l1)) == [(1, 2), (2, 3), (3, 4)]\n\n# Test Case 2\nl1 = [5, 10, 15, 20, 25]\nassert list(func(l1)) == [(5, 10), (10, 15), (15, 20), (20, 25)]\n\n# Test Case 3\nl1 = [100]\nassert list(func(l1)) == []\n\n# Test Case 4\nl1 = [0, 0, 0, 0]\nassert list(func(l1)) == [(0, 0), (0, 0), (0, 0)]\n\n# Test Case 5\nl1 = [1, 3, 5, 7, 9]\nassert list(func(l1)) == [(1, 3), (3, 5), (5, 7), (7, 9)]\n"}
{"task_id": 388, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr, sum):\n    '''\n    Can you write a python function to count the number of pairs whose sum is equal to 'sum'?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5], 5) == 2\nassert func([1, 2, 3, 4, 5], 10) == 2\nassert func([1, 2, 3, 4, 5], 8) == 2\nassert func([1, 2, 3, 4, 5], 7) == 2\nassert func([1, 2, 3, 4, 5], 6) == 2", "response_code": "assert func([1, 2, 3, 4, 5], 5) == 2\nassert func([1, 2, 3, 4, 5], 10) == 2\nassert func([1, 2, 3, 4, 5], 8) == 2\nassert func([1, 2, 3, 4, 5], 7) == 2\nassert func([1, 2, 3, 4, 5], 6) == 2"}
{"task_id": 389, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(li1,li2):\n    '''\n    Can you write a python function to get the difference between two lists?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5], [1, 3, 5]) == [2, 4]\nassert func([10, 20, 30, 40], [10, 20, 30, 40]) == []\nassert func([1, 2, 3], [4, 5, 6]) == [1, 2, 3]\nassert func([], [1, 2, 3]) == []\nassert func([1, 2, 3], []) == []", "response_code": "assert func([1, 2, 3, 4, 5], [1, 3, 5]) == [2, 4]\nassert func([10, 20, 30, 40], [10, 20, 30, 40]) == []\nassert func([1, 2, 3], [4, 5, 6]) == [1, 2, 3]\nassert func([], [1, 2, 3]) == []\nassert func([1, 2, 3], []) == []"}
{"task_id": 390, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n) : \n    '''\n    Can you write a python function to find the sum of fourth power of first n odd natural numbers?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 1\nassert func(2) == 17\nassert func(3) == 98\nassert func(4) == 354\nassert func(5) == 979", "response_code": "assert func(1) == 1\nassert func(2) == 17\nassert func(3) == 98\nassert func(4) == 354\nassert func(5) == 979"}
{"task_id": 391, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from collections import deque\ndef func(exp):\n    '''\n    Can you write a function to check if the given expression is balanced or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"()\") == True\nassert func(\"()[]{}\") == True\nassert func(\"(]\") == False\nassert func(\"([)]\") == False\nassert func(\"{[]}\") == True\n```", "response_code": "\nassert func(\"()\") == True\nassert func(\"()[]{}\") == True\nassert func(\"(]\") == False\nassert func(\"([)]\") == False\nassert func(\"{[]}\") == True\n"}
{"task_id": 392, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_str, K):\n    '''\n    Can you write a function to remove all the words with k length in the given string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello world\", 5) == \"Hello\"\nassert func(\"Python is awesome\", 3) == \"Python is\"\nassert func(\"Keep calm and code on\", 4) == \"Keep calm code\"\nassert func(\"Testing the function\", 7) == \"Testing function\"\nassert func(\"This is a test\", 2) == \"This is test\"\n```", "response_code": "\nassert func(\"Hello world\", 5) == \"Hello\"\nassert func(\"Python is awesome\", 3) == \"Python is\"\nassert func(\"Keep calm and code on\", 4) == \"Keep calm code\"\nassert func(\"Testing the function\", 7) == \"Testing function\"\nassert func(\"This is a test\", 2) == \"This is test\"\n"}
{"task_id": 393, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text,pattern):\n    '''\n    Can you write a function to find the occurrence and position of the substrings within a string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello world\", \"l\") == [(2, 3), (3, 4), (9, 10)]\nassert func(\"apple banana apple\", \"apple\") == [(0, 5), (13, 18)]\nassert func(\"1234567890\", \"\\d\") == [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]\nassert func(\"hello\", \"z\") == []\nassert func(\"hello world\", \"world\") == [(6, 11)]\n```", "response_code": "\nassert func(\"hello world\", \"l\") == [(2, 3), (3, 4), (9, 10)]\nassert func(\"apple banana apple\", \"apple\") == [(0, 5), (13, 18)]\nassert func(\"1234567890\", \"\\d\") == [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]\nassert func(\"hello\", \"z\") == []\nassert func(\"hello world\", \"world\") == [(6, 11)]\n"}
{"task_id": 394, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Can you write a python function to check whether every odd index contains odd numbers of a given list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == True\nassert func([2, 3, 4, 5, 6]) == False\nassert func([1, 3, 5, 7, 9]) == True\nassert func([2, 4, 6, 8, 10]) == False\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True", "response_code": "assert func([1, 2, 3, 4, 5]) == True\nassert func([2, 3, 4, 5, 6]) == False\nassert func([1, 3, 5, 7, 9]) == True\nassert func([2, 4, 6, 8, 10]) == False\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True"}
{"task_id": 395, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_str):\n    '''\n    Can you write a function to count those characters which have vowels as their neighbors in the given string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\") == 2\nassert func(\"apple\") == 2\nassert func(\"banana\") == 3\nassert func(\"python\") == 1\nassert func(\"programming\") == 3", "response_code": "assert func(\"hello\") == 2\nassert func(\"apple\") == 2\nassert func(\"banana\") == 3\nassert func(\"python\") == 1\nassert func(\"programming\") == 3"}
{"task_id": 396, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr): \n    '''\n    Can you write a python function to find the sum of non-repeated elements in a given array?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == 15\nassert func([1, 1, 2, 2, 3, 3, 4, 4]) == 10\nassert func([5, 5, 5, 5, 5]) == 5\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55\nassert func([2, 4, 6, 8, 10]) == 30", "response_code": "assert func([1, 2, 3, 4, 5]) == 15\nassert func([1, 1, 2, 2, 3, 3, 4, 4]) == 10\nassert func([5, 5, 5, 5, 5]) == 5\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55\nassert func([2, 4, 6, 8, 10]) == 30"}
{"task_id": 397, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from itertools import groupby\ndef func(list1):\n    '''\n    Can you write a function to pack consecutive duplicates of a given list elements into sublists?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 1, 2, 3, 3, 4, 4, 4]) == [[1, 1], [2], [3, 3], [4, 4, 4]]\nassert func([1, 1, 1, 1, 1]) == [[1, 1, 1, 1, 1]]\nassert func([1, 2, 3, 4, 5]) == [[1], [2], [3], [4], [5]]\nassert func([]) == []\nassert func([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]\n```", "response_code": "\nassert func([1, 1, 2, 3, 3, 4, 4, 4]) == [[1, 1], [2], [3, 3], [4, 4, 4]]\nassert func([1, 1, 1, 1, 1]) == [[1, 1, 1, 1, 1]]\nassert func([1, 2, 3, 4, 5]) == [[1], [2], [3], [4], [5]]\nassert func([]) == []\nassert func([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]\n"}
{"task_id": 398, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Can you write a function to count the number of unique lists within a list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([[1, 2], [3, 4], [1, 2]]) == 2\nassert func([[1, 2], [3, 4], [5, 6]]) == 3\nassert func([[1, 2], [1, 2], [1, 2]]) == 1\nassert func([[1, 2, 3], [4, 5], [6, 7]]) == 3\nassert func([[1, 2], [3, 4], [5, 6], [1, 2]]) == 3", "response_code": "assert func([[1, 2], [3, 4], [1, 2]]) == 2\nassert func([[1, 2], [3, 4], [5, 6]]) == 3\nassert func([[1, 2], [1, 2], [1, 2]]) == 1\nassert func([[1, 2, 3], [4, 5], [6, 7]]) == 3\nassert func([[1, 2], [3, 4], [5, 6], [1, 2]]) == 3"}
{"task_id": 399, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from itertools import combinations \ndef func(test_list):\n    '''\n    Can you write a function to find the combinations of sums with tuples in the given tuple list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\ntest_list = [(1, 2), (3, 4), (5, 6)]\nassert func(test_list) == [(1, 2), (3, 4), (5, 6), (1, 3), (1, 4), (2, 3), (2, 4), (3, 5), (3, 6), (4, 5), (4, 6), (5, 6), (1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6), (3, 5, 6), (4, 5, 6), (1, 3, 5, 6), (1, 4, 5, 6), (2, 3, 5, 6), (1, 3, 4, 5), (1, 3, 4, 6), (1, 4, 5, 6), (2, 3, 4, 5), (2, 3, 4, 6), (2, 4, 5, 6), (1, 3, 4, 5, 6)]\ntest_list = [(7, 8), (9, 10)]\nassert func(test_list) == [(7, 8), (9, 10), (7, 9), (7, 10), (8, 9), (8, 10), (7, 9, 10), (8, 9, 10), (7, 8, 9, 10)]\ntest_list = [(1, 2, 3), (4, 5)]\nassert func(test_list) == [(1, 2, 3), (4, 5), (1, 4), (1, 5), (2, 4), (2, 5), (3, 4), (3, 5), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (2, 3, 4), (2, 3, 5), (1, 2, 3, 4), (1, 2, 3, 5)]\ntest_list = [(6, 7, 8), (9, 10, 11)]\nassert func(test_list) == [(6, 7, 8), (9, 10, 11), (6, 9), (6, 10), (6, 11), (7, 9), (7, 10), (7, 11), (8, 9), (8, 10), (8, 11), (6, 7, 9), (6, 7, 10), (6, 7, 11), (6, 8, 9), (6, 8, 10), (6, 8, 11), (7, 8, 9), (7, 8, 10), (7, 8, 11), (9, 10, 11), (6, 7, 9, 10), (6, 7, 9, 11), (6, 7, 10, 11), (6, 8, 9, 10), (6, 8, 9, 11), (6, 8, 10, 11), (7, 8, 9, 10), (7, 8, 9, 11), (7, 8, 10, 11), (6, 7, 8, 9, 10), (6, 7, 8, 9, 11), (6, 7, 8, 10, 11), (6, 8, 9, 10, 11), (7, 8, 9, 10, 11), (6, 7, 8, 9, 10, 11)]\ntest_list = [(12, 13, 14, 15), (16, 17, 18)]\nassert func(test_list) == [(12, 13, 14, 15), (16, 17, 18), (12, 16), (12, 17), (12, 18), (13, 16), (13, 17), (13, 18), (14, 16), (14, 17), (14, 18), (15, 16), (15, 17), (15, 18), (12, 13, 16), (12, 13, 17), (12, 13, 18), (12, 14, 16), (12, 14, 17), (12, 14, 18), (12, 15, 16), (12, 15, 17), (12, 15, 18), (13, 14, 16), (13, 14, 17), (13, 14, 18), (13, 15, 16), (13, 15, 17), (13, 15, 18), (14, 15, 16), (14, 15, 17), (14, 15, 18), (16, 17, 18), (12, 13, 14, 16), (12, 13, 14, 17), (12, 13, 14, 18), (12, 13, 15, 16), (12, 13, 15, 17), (12, 13, 15, 18), (12, 14, 15, 16), (12, 14, 15, 17), (12, 14, 15, 18), (13, 14, 15, 16), (13, 14, 15, 17), (13, 14, 15, 18), (16, 17, 18), (12, 13, 14, 15, 16), (12, 13, 14, 15, 17), (12, 13, 14, 15, 18), (12, 13, 14, 16, 17), (12, 13, 14, 16, 18), (12, 13, 14, 17, 18), (12, 13, 15, 16, 17), (12, 13, 15, 16, 18), (12, 13, 15, 17, 18), (12, 14, 15, 16, 17), (12, 14, 15, 16, 18), (12, 14, 15, 17, 18), (13, 14, 15, 16, 17), (13, 14, 15, 16, 18), (13, 14, 15, 17, 18), (12, 13, 14, 15, 16, 17), (12, 13, 14, 15, 16, 18), (12, 13, 14, 15, 17, 18), (12, 13, 14, 16, 17, 18), (12, 13, 15, 16, 17, 18), (12, 14, 15, 16, 17, 18), (13, 14, 15, 16, 17, 18), (12, 13, 14, 15, 16, 17, 18)]\n```", "response_code": "\ntest_list = [(1, 2), (3, 4), (5, 6)]\nassert func(test_list) == [(1, 2), (3, 4), (5, 6), (1, 3), (1, 4), (2, 3), (2, 4), (3, 5), (3, 6), (4, 5), (4, 6), (5, 6), (1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6), (3, 5, 6), (4, 5, 6), (1, 3, 5, 6), (1, 4, 5, 6), (2, 3, 5, 6), (1, 3, 4, 5), (1, 3, 4, 6), (1, 4, 5, 6), (2, 3, 4, 5), (2, 3, 4, 6), (2, 4, 5, 6), (1, 3, 4, 5, 6)]\ntest_list = [(7, 8), (9, 10)]\nassert func(test_list) == [(7, 8), (9, 10), (7, 9), (7, 10), (8, 9), (8, 10), (7, 9, 10), (8, 9, 10), (7, 8, 9, 10)]\ntest_list = [(1, 2, 3), (4, 5)]\nassert func(test_list) == [(1, 2, 3), (4, 5), (1, 4), (1, 5), (2, 4), (2, 5), (3, 4), (3, 5), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (2, 3, 4), (2, 3, 5), (1, 2, 3, 4), (1, 2, 3, 5)]\ntest_list = [(6, 7, 8), (9, 10, 11)]\nassert func(test_list) == [(6, 7, 8), (9, 10, 11), (6, 9), (6, 10), (6, 11), (7, 9), (7, 10), (7, 11), (8, 9), (8, 10), (8, 11), (6, 7, 9), (6, 7, 10), (6, 7, 11), (6, 8, 9), (6, 8, 10), (6, 8, 11), (7, 8, 9), (7, 8, 10), (7, 8, 11), (9, 10, 11), (6, 7, 9, 10), (6, 7, 9, 11), (6, 7, 10, 11), (6, 8, 9, 10), (6, 8, 9, 11), (6, 8, 10, 11), (7, 8, 9, 10), (7, 8, 9, 11), (7, 8, 10, 11), (6, 7, 8, 9, 10), (6, 7, 8, 9, 11), (6, 7, 8, 10, 11), (6, 8, 9, 10, 11), (7, 8, 9, 10, 11), (6, 7, 8, 9, 10, 11)]\ntest_list = [(12, 13, 14, 15), (16, 17, 18)]\nassert func(test_list) == [(12, 13, 14, 15), (16, 17, 18), (12, 16), (12, 17), (12, 18), (13, 16), (13, 17), (13, 18), (14, 16), (14, 17), (14, 18), (15, 16), (15, 17), (15, 18), (12, 13, 16), (12, 13, 17), (12, 13, 18), (12, 14, 16), (12, 14, 17), (12, 14, 18), (12, 15, 16), (12, 15, 17), (12, 15, 18), (13, 14, 16), (13, 14, 17), (13, 14, 18), (13, 15, 16), (13, 15, 17), (13, 15, 18), (14, 15, 16), (14, 15, 17), (14, 15, 18), (16, 17, 18), (12, 13, 14, 16), (12, 13, 14, 17), (12, 13, 14, 18), (12, 13, 15, 16), (12, 13, 15, 17), (12, 13, 15, 18), (12, 14, 15, 16), (12, 14, 15, 17), (12, 14, 15, 18), (13, 14, 15, 16), (13, 14, 15, 17), (13, 14, 15, 18), (16, 17, 18), (12, 13, 14, 15, 16), (12, 13, 14, 15, 17), (12, 13, 14, 15, 18), (12, 13, 14, 16, 17), (12, 13, 14, 16, 18), (12, 13, 14, 17, 18), (12, 13, 15, 16, 17), (12, 13, 15, 16, 18), (12, 13, 15, 17, 18), (12, 14, 15, 16, 17), (12, 14, 15, 16, 18), (12, 14, 15, 17, 18), (13, 14, 15, 16, 17), (13, 14, 15, 16, 18), (13, 14, 15, 17, 18), (12, 13, 14, 15, 16, 17), (12, 13, 14, 15, 16, 18), (12, 13, 14, 15, 17, 18), (12, 13, 14, 16, 17, 18), (12, 13, 15, 16, 17, 18), (12, 14, 15, 16, 17, 18), (13, 14, 15, 16, 17, 18), (12, 13, 14, 15, 16, 17, 18)]\n"}
{"task_id": 400, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math \ndef func(n) : \n    '''\n    Can you write a python function to check whether the count of divisors is even or odd?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(6) == 'even'\nassert func(7) == 'odd'\nassert func(12) == 'even'\nassert func(25) == 'odd'\nassert func(28) == 'even'\n```", "response_code": "\nassert func(6) == 'even'\nassert func(7) == 'odd'\nassert func(12) == 'even'\nassert func(25) == 'odd'\nassert func(28) == 'even'\n"}
{"task_id": 401, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):\n    '''\n    Can you write a python function to find the sum of all odd length subarrays?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 4, 2, 5, 3]) == 31\nassert func([1, 2, 3, 4, 5]) == 50\nassert func([2, 4, 6, 8, 10]) == 0\nassert func([3, 7, 1, 4, 9]) == 55\nassert func([5, 5, 5, 5, 5]) == 75", "response_code": "assert func([1, 4, 2, 5, 3]) == 31\nassert func([1, 2, 3, 4, 5]) == 50\nassert func([2, 4, 6, 8, 10]) == 0\nassert func([3, 7, 1, 4, 9]) == 55\nassert func([5, 5, 5, 5, 5]) == 75"}
{"task_id": 402, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(r, g, b):\n    '''\n    Can you write a function to convert rgb color to hsv color?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(255, 0, 0) == (0, 1, 1)\nassert func(0, 255, 0) == (120, 1, 1)\nassert func(0, 0, 255) == (240, 1, 1)\nassert func(128, 128, 128) == (0, 0, 0.5)\nassert func(255, 255, 0) == (60, 1, 1)", "response_code": "assert func(255, 0, 0) == (0, 1, 1)\nassert func(0, 255, 0) == (120, 1, 1)\nassert func(0, 0, 255) == (240, 1, 1)\nassert func(128, 128, 128) == (0, 0, 0.5)\nassert func(255, 255, 0) == (60, 1, 1)"}
{"task_id": 403, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Can you write a function to find the product of the first even and odd numbers in a given list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([2, 3, 4, 5]) == 6\nassert func([1, 2, 3, 4, 5]) == 2\nassert func([1, 3, 5]) == 3\nassert func([2, 4, 6]) == 8\nassert func([1, 2, 3, 4, 5, 6]) == 2", "response_code": "assert func([2, 3, 4, 5]) == 6\nassert func([1, 2, 3, 4, 5]) == 2\nassert func([1, 3, 5]) == 3\nassert func([2, 4, 6]) == 8\nassert func([1, 2, 3, 4, 5, 6]) == 2"}
{"task_id": 404, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_str):\n    '''\n    Can you write a function to convert tuple string to integer tuple?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"(1, 2, 3)\") == (1, 2, 3)\nassert func(\"(10, 20, 30)\") == (10, 20, 30)\nassert func(\"(100, 200, 300)\") == (100, 200, 300)\nassert func(\"(5, 10, 15)\") == (5, 10, 15)\nassert func(\"(0, 0, 0)\") == (0, 0, 0)", "response_code": "assert func(\"(1, 2, 3)\") == (1, 2, 3)\nassert func(\"(10, 20, 30)\") == (10, 20, 30)\nassert func(\"(100, 200, 300)\") == (100, 200, 300)\nassert func(\"(5, 10, 15)\") == (5, 10, 15)\nassert func(\"(0, 0, 0)\") == (0, 0, 0)"}
{"task_id": 405, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import bisect\ndef func(a, x):\n    '''\n    Can you write a function to locate the right insertion point for a specified value in sorted order?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 3, 5, 7, 9], 4) == 2\nassert func([1, 3, 5, 7, 9], 10) == 5\nassert func([1, 3, 5, 7, 9], 0) == 0\nassert func([1, 3, 5, 7, 9], 6) == 3\nassert func([1, 3, 5, 7, 9], 8) == 4\n```", "response_code": "\nassert func([1, 3, 5, 7, 9], 4) == 2\nassert func([1, 3, 5, 7, 9], 10) == 5\nassert func([1, 3, 5, 7, 9], 0) == 0\nassert func([1, 3, 5, 7, 9], 6) == 3\nassert func([1, 3, 5, 7, 9], 8) == 4\n"}
{"task_id": 406, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Can you write a function that matches a string that has an a followed by three 'b'?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"abbb\") == True\nassert func(\"aabbb\") == True\nassert func(\"abbbb\") == False\nassert func(\"abb\") == False\nassert func(\"acbbb\") == False\n```", "response_code": "\nassert func(\"abbb\") == True\nassert func(\"aabbb\") == True\nassert func(\"abbbb\") == False\nassert func(\"abb\") == False\nassert func(\"acbbb\") == False\n"}
{"task_id": 407, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list, test_str):\n    '''\n    Can you write a function to create a new tuple from the given string and list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], 'abc') == ([1, 2, 3], 'abc')\nassert func(['a', 'b', 'c'], '123') == (['a', 'b', 'c'], '123')\nassert func([], 'xyz') == ([], 'xyz')\nassert func([4, 5], 'def') == ([4, 5], 'def')\nassert func(['x', 'y', 'z'], '456') == (['x', 'y', 'z'], '456')\n```", "response_code": "\nassert func([1, 2, 3], 'abc') == ([1, 2, 3], 'abc')\nassert func(['a', 'b', 'c'], '123') == (['a', 'b', 'c'], '123')\nassert func([], 'xyz') == ([], 'xyz')\nassert func([4, 5], 'def') == ([4, 5], 'def')\nassert func(['x', 'y', 'z'], '456') == (['x', 'y', 'z'], '456')\n"}
{"task_id": 408, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Can you write a python function to check whether every even index contains even numbers of a given list?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([2, 3, 6, 8]) == True\nassert func([1, 4, 7, 10]) == False\nassert func([0, 2, 4, 6, 8]) == True\nassert func([1, 3, 5, 7, 9]) == True\nassert func([2, 4, 6, 8, 10]) == True", "response_code": "assert func([2, 3, 6, 8]) == True\nassert func([1, 4, 7, 10]) == False\nassert func([0, 2, 4, 6, 8]) == True\nassert func([1, 3, 5, 7, 9]) == True\nassert func([2, 4, 6, 8, 10]) == True"}
{"task_id": 409, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    Can you write a function to remove the nested record from the given tuple?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, (2, 3), 4)) == (1, 2, 3, 4)\nassert func((5, (6, (7, 8), 9), 10)) == (5, 6, 7, 8, 9, 10)\nassert func((11, (12, 13, 14), 15)) == (11, 12, 13, 14, 15)\nassert func((16, (17, 18), 19)) == (16, 17, 18, 19)\nassert func((20, (21, 22, 23), 24)) == (20, 21, 22, 23, 24)\n```", "response_code": "\nassert func((1, (2, 3), 4)) == (1, 2, 3, 4)\nassert func((5, (6, (7, 8), 9), 10)) == (5, 6, 7, 8, 9, 10)\nassert func((11, (12, 13, 14), 15)) == (11, 12, 13, 14, 15)\nassert func((16, (17, 18), 19)) == (16, 17, 18, 19)\nassert func((20, (21, 22, 23), 24)) == (20, 21, 22, 23, 24)\n"}
{"task_id": 410, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(input_list): \n    '''\n    Can you write a python function to count the number of lists in a given number of lists?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([[1, 2, 3], [4, 5], [6]]) == 3\nassert func([[1], [2], [3], [4], [5]]) == 5\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == 4\nassert func([[1, 2, 3, 4], [5, 6, 7], [8, 9]]) == 3\nassert func([[1, 2], [3], [4, 5, 6], [7, 8, 9]]) == 4", "response_code": "assert func([[1, 2, 3], [4, 5], [6]]) == 3\nassert func([[1], [2], [3], [4], [5]]) == 5\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == 4\nassert func([[1, 2, 3, 4], [5, 6, 7], [8, 9]]) == 3\nassert func([[1, 2], [3], [4, 5, 6], [7, 8, 9]]) == 4"}
{"task_id": 411, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr,x):\n    '''\n    Can you write a python function to find the last position of an element in a sorted array?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 3, 4, 5], 3) == 3\nassert func([1, 2, 3, 3, 4, 5], 5) == 5\nassert func([1, 2, 3, 3, 4, 5], 1) == 1\nassert func([1, 2, 3, 3, 4, 5], 6) == -1\nassert func([1, 2, 3, 3, 4, 5], 0) == -1", "response_code": "assert func([1, 2, 3, 3, 4, 5], 3) == 3\nassert func([1, 2, 3, 3, 4, 5], 5) == 5\nassert func([1, 2, 3, 3, 4, 5], 1) == 1\nassert func([1, 2, 3, 3, 4, 5], 6) == -1\nassert func([1, 2, 3, 3, 4, 5], 0) == -1"}
{"task_id": 412, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Can you write a function that matches a string that has an 'a' followed by anything, ending in 'b'?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"acb\") == True\nassert func(\"azb\") == True\nassert func(\"a123b\") == True\nassert func(\"a!b\") == True\nassert func(\"a b\") == True\n```", "response_code": "\nassert func(\"acb\") == True\nassert func(\"azb\") == True\nassert func(\"a123b\") == True\nassert func(\"a!b\") == True\nassert func(\"a b\") == True\n"}
{"task_id": 413, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(dict):\n    '''\n    Can you write a function to find the sum of all items in the given dictionary?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func({'a': 1, 'b': 2, 'c': 3}) == 6\nassert func({'x': 10, 'y': 20, 'z': 30}) == 60\nassert func({'p': 5, 'q': 5, 'r': 5}) == 15\nassert func({'m': -1, 'n': -2, 'o': -3}) == -6\nassert func({'apple': 2, 'banana': 3, 'cherry': 4}) == 9", "response_code": "assert func({'a': 1, 'b': 2, 'c': 3}) == 6\nassert func({'x': 10, 'y': 20, 'z': 30}) == 60\nassert func({'p': 5, 'q': 5, 'r': 5}) == 15\nassert func({'m': -1, 'n': -2, 'o': -3}) == -6\nassert func({'apple': 2, 'banana': 3, 'cherry': 4}) == 9"}
{"task_id": 414, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Can you write a python function to find the sum of all odd natural numbers within the range l and r?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1, 10) == 25\nassert func(5, 15) == 55\nassert func(10, 20) == 75\nassert func(20, 30) == 125\nassert func(1, 100) == 2500\n```", "response_code": "\nassert func(1, 10) == 25\nassert func(5, 15) == 55\nassert func(10, 20) == 75\nassert func(20, 30) == 125\nassert func(1, 100) == 2500\n"}
{"task_id": 415, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):  \n    '''\n    Can you write a python function to find the sum of an array?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == 15\nassert func([5, 10, 15, 20]) == 50\nassert func([0, 0, 0, 0, 0]) == 0\nassert func([-1, 1, -1, 1]) == 0\nassert func([2, 4, 6, 8, 10]) == 30", "response_code": "assert func([1, 2, 3, 4, 5]) == 15\nassert func([5, 10, 15, 20]) == 50\nassert func([0, 0, 0, 0, 0]) == 0\nassert func([-1, 1, -1, 1]) == 0\nassert func([2, 4, 6, 8, 10]) == 30"}
{"task_id": 416, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n,d):   \n    '''\n    Can you write a python function to left rotate the bits of a given number?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5, 1) == 10\nassert func(8, 2) == 32\nassert func(16, 3) == 128\nassert func(7, 4) == 112\nassert func(3, 5) == 96\n```", "response_code": "\nassert func(5, 1) == 10\nassert func(8, 2) == 32\nassert func(16, 3) == 128\nassert func(7, 4) == 112\nassert func(3, 5) == 96\n"}
{"task_id": 417, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Can you write a function to remove all whitespaces from a string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello World\") == \"HelloWorld\"\nassert func(\"  Python  \") == \"Python\"\nassert func(\"  Spaces  between  words  \") == \"Spacesbetweenwords\"\nassert func(\"123 456 789\") == \"123456789\"\nassert func(\"  Special  characters  !@#$%  \") == \"Specialcharacters!@#$%\"\n```", "response_code": "\nassert func(\"Hello World\") == \"HelloWorld\"\nassert func(\"  Python  \") == \"Python\"\nassert func(\"  Spaces  between  words  \") == \"Spacesbetweenwords\"\nassert func(\"123 456 789\") == \"123456789\"\nassert func(\"  Special  characters  !@#$%  \") == \"Specialcharacters!@#$%\"\n"}
{"task_id": 418, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x,y,z):\n    '''\n    Can you write a python function to count the number of equal numbers from three given integers?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1, 2, 3) == 0\nassert func(2, 2, 2) == 3\nassert func(5, 5, 5) == 3\nassert func(0, 0, 0) == 3\nassert func(10, 20, 30) == 0", "response_code": "assert func(1, 2, 3) == 0\nassert func(2, 2, 2) == 3\nassert func(5, 5, 5) == 3\nassert func(0, 0, 0) == 3\nassert func(10, 20, 30) == 0"}
{"task_id": 419, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):   \n    '''\n    Can you write a python function to count the number of rotations required to generate a sorted array?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([3, 4, 5, 1, 2]) == 3\nassert func([7, 8, 9, 1, 2, 3, 4, 5, 6]) == 3\nassert func([4, 5, 6, 7, 1, 2, 3]) == 4\nassert func([2, 3, 4, 5, 6, 7, 1]) == 1\nassert func([1, 2, 3, 4, 5, 6, 7]) == 0", "response_code": "assert func([3, 4, 5, 1, 2]) == 3\nassert func([7, 8, 9, 1, 2, 3, 4, 5, 6]) == 3\nassert func([4, 5, 6, 7, 1, 2, 3]) == 4\nassert func([2, 3, 4, 5, 6, 7, 1]) == 1\nassert func([1, 2, 3, 4, 5, 6, 7]) == 0"}
{"task_id": 420, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n) :\n    '''\n    Can you write a python function to check whether the given number is a perfect square or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(16) == True\nassert func(25) == True\nassert func(10) == False\nassert func(0) == True\nassert func(1) == True", "response_code": "assert func(16) == True\nassert func(25) == True\nassert func(10) == False\nassert func(0) == True\nassert func(1) == True"}
{"task_id": 421, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr): \n    '''\n    Can you write a python function to check whether the product of numbers is even or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([2, 4, 6]) == True\nassert func([1, 3, 5]) == False\nassert func([0, 2, 4]) == True\nassert func([1, 2, 3, 4, 5]) == True\nassert func([1, 3, 5, 7]) == False", "response_code": "assert func([2, 4, 6]) == True\nassert func([1, 3, 5]) == False\nassert func([0, 2, 4]) == True\nassert func([1, 2, 3, 4, 5]) == True\nassert func([1, 3, 5, 7]) == False"}
{"task_id": 422, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lists):\n    '''\n    Can you write a function to find the list in a list of lists whose sum of elements is the highest?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9]\nassert func([[10, 20, 30], [40, 50, 60], [70, 80, 90]]) == [70, 80, 90]\nassert func([[5, 10, 15], [20, 25, 30], [35, 40, 45]]) == [35, 40, 45]\nassert func([[2, 4, 6], [8, 10, 12], [14, 16, 18]]) == [14, 16, 18]\nassert func([[3, 6, 9], [12, 15, 18], [21, 24, 27]]) == [21, 24, 27]\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9]\nassert func([[10, 20, 30], [40, 50, 60], [70, 80, 90]]) == [70, 80, 90]\nassert func([[5, 10, 15], [20, 25, 30], [35, 40, 45]]) == [35, 40, 45]\nassert func([[2, 4, 6], [8, 10, 12], [14, 16, 18]]) == [14, 16, 18]\nassert func([[3, 6, 9], [12, 15, 18], [21, 24, 27]]) == [21, 24, 27]\n"}
{"task_id": 423, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_str):\n    '''\n    Can you write a function to find the maximum run of uppercase characters in the given string?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello World\") == 1\nassert func(\"HELLO WORLD\") == 5\nassert func(\"AbCdEfG\") == 1\nassert func(\"UPPERCASE\") == 8\nassert func(\"lowercase\") == 0\n```", "response_code": "\nassert func(\"Hello World\") == 1\nassert func(\"HELLO WORLD\") == 5\nassert func(\"AbCdEfG\") == 1\nassert func(\"UPPERCASE\") == 8\nassert func(\"lowercase\") == 0\n"}
{"task_id": 424, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Can you write a python function to find the first odd number in a given list of numbers?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([2, 4, 6, 8, 10]) == None\nassert func([1, 2, 3, 4, 5]) == 1\nassert func([0, 2, 4, 6, 8]) == None\nassert func([11, 22, 33, 44, 55]) == 11\nassert func([2, 4, 6, 7, 8]) == 7", "response_code": "assert func([2, 4, 6, 8, 10]) == None\nassert func([1, 2, 3, 4, 5]) == 1\nassert func([0, 2, 4, 6, 8]) == None\nassert func([11, 22, 33, 44, 55]) == 11\nassert func([2, 4, 6, 7, 8]) == 7"}
{"task_id": 425, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup, K):\n    '''\n    Can you write a function to check if the given tuples contain the k or not?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), 2) == True\nassert func((4, 5, 6), 3) == False\nassert func((7, 8, 9), 7) == True\nassert func((10, 11, 12), 15) == False\nassert func((13, 14, 15), 14) == True\n```", "response_code": "\nassert func((1, 2, 3), 2) == True\nassert func((4, 5, 6), 3) == False\nassert func((7, 8, 9), 7) == True\nassert func((10, 11, 12), 15) == False\nassert func((13, 14, 15), 14) == True\n"}
{"task_id": 426, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Can you write a function to check if each element of the second tuple is smaller than its corresponding index in the first tuple?\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (0, 1, 2)) == True\nassert func((5, 10, 15), (4, 9, 14)) == True\nassert func((100, 200, 300), (101, 199, 301)) == False\nassert func((0, 0, 0), (-1, -2, -3)) == True\nassert func((1, 2, 3), (3, 2, 1)) == False\n```", "response_code": "\nassert func((1, 2, 3), (0, 1, 2)) == True\nassert func((5, 10, 15), (4, 9, 14)) == True\nassert func((100, 200, 300), (101, 199, 301)) == False\nassert func((0, 0, 0), (-1, -2, -3)) == True\nassert func((1, 2, 3), (3, 2, 1)) == False\n"}
