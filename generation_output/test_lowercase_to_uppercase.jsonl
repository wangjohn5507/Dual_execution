{"task_id": 0, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    WRITE A FUNCTION TO FIND THE SIMILAR ELEMENTS FROM THE GIVEN TWO TUPLE LISTS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (2, 3, 4)) == (2, 3)\nassert func(('a', 'b', 'c'), ('b', 'c', 'd')) == ('b', 'c')\nassert func((1, 2, 3), (4, 5, 6)) == ()\nassert func(('apple', 'banana', 'cherry'), ('banana', 'cherry', 'date')) == ('banana', 'cherry')\nassert func((1, 2, 3), (1, 2, 3)) == (1, 2, 3)\n```", "response_code": "\nassert func((1, 2, 3), (2, 3, 4)) == (2, 3)\nassert func(('a', 'b', 'c'), ('b', 'c', 'd')) == ('b', 'c')\nassert func((1, 2, 3), (4, 5, 6)) == ()\nassert func(('apple', 'banana', 'cherry'), ('banana', 'cherry', 'date')) == ('banana', 'cherry')\nassert func((1, 2, 3), (1, 2, 3)) == (1, 2, 3)\n"}
{"task_id": 1, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(n):\n    '''\n    WRITE A PYTHON FUNCTION TO IDENTIFY NON-PRIME NUMBERS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == False\nassert func(2) == False\nassert func(3) == False\nassert func(4) == True\nassert func(17) == False\n```", "response_code": "\nassert func(1) == False\nassert func(2) == False\nassert func(3) == False\nassert func(4) == True\nassert func(17) == False\n"}
{"task_id": 2, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import heapq as hq\ndef func(nums,n):\n    '''\n    WRITE A FUNCTION TO FIND THE LARGEST INTEGERS FROM A GIVEN LIST OF NUMBERS USING HEAP QUEUE ALGORITHM.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([3, 7, 2, 9, 5], 3) == [9, 7, 5]\nassert func([10, 20, 30, 40, 50], 2) == [50, 40]\nassert func([5, 5, 5, 5, 5], 1) == [5]\nassert func([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\nassert func([100, 200, 300, 400, 500], 4) == [500, 400, 300, 200]\n```", "response_code": "\nassert func([3, 7, 2, 9, 5], 3) == [9, 7, 5]\nassert func([10, 20, 30, 40, 50], 2) == [50, 40]\nassert func([5, 5, 5, 5, 5], 1) == [5]\nassert func([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\nassert func([100, 200, 300, 400, 500], 4) == [500, 400, 300, 200]\n"}
{"task_id": 3, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x): \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER THE TWO NUMBERS DIFFER AT ONE BIT POSITION ONLY OR NOT.\n    '''\n    pass\n\n# check the correctness of func \nassert "}], "response": "assert func(2, 3) == True\nassert func(5, 7) == True\nassert func(1, 2) == False\nassert func(0, 15) == False\nassert func(8, 9) == True", "response_code": "assert func(2, 3) == True\nassert func(5, 7) == True\nassert func(1, 2) == False\nassert func(0, 15) == False\nassert func(8, 9) == True"}
{"task_id": 4, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    WRITE A FUNCTION TO FIND ALL WORDS WHICH ARE AT LEAST 4 CHARACTERS LONG IN A STRING BY USING REGEX.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello, this is a test\") == ['Hello', 'this', 'test']\nassert func(\"Python is a great programming language\") == ['Python', 'great', 'programming', 'language']\nassert func(\"1234 abcd efgh 5678\") == ['1234', 'abcd', 'efgh', '5678']\nassert func(\"Short words\") == ['Short', 'words']\nassert func(\"A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\") == ['abcd', 'efgh']\n```", "response_code": "\nassert func(\"Hello, this is a test\") == ['Hello', 'this', 'test']\nassert func(\"Python is a great programming language\") == ['Python', 'great', 'programming', 'language']\nassert func(\"1234 abcd efgh 5678\") == ['1234', 'abcd', 'efgh', '5678']\nassert func(\"Short words\") == ['Short', 'words']\nassert func(\"A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\") == ['abcd', 'efgh']\n"}
{"task_id": 5, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    WRITE A FUNCTION TO FIND SQUARES OF INDIVIDUAL ELEMENTS IN A LIST USING LAMBDA FUNCTION.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\nassert func([-1, -2, -3, -4, -5]) == [1, 4, 9, 16, 25]\nassert func([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]\nassert func([2, 3, 5, 7, 11]) == [4, 9, 25, 49, 121]\nassert func([-2, -3, -5, -7, -11]) == [4, 9, 25, 49, 121]\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\nassert func([-1, -2, -3, -4, -5]) == [1, 4, 9, 16, 25]\nassert func([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]\nassert func([2, 3, 5, 7, 11]) == [4, 9, 25, 49, 121]\nassert func([-2, -3, -5, -7, -11]) == [4, 9, 25, 49, 121]\n"}
{"task_id": 6, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE MINIMUM NUMBER OF ROTATIONS REQUIRED TO GET THE SAME STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\") == 5\nassert func(\"racecar\") == 7\nassert func(\"12345\") == 5\nassert func(\"aaaaa\") == 1\nassert func(\"ababab\") == 6", "response_code": "assert func(\"hello\") == 5\nassert func(\"racecar\") == 7\nassert func(\"12345\") == 5\nassert func(\"aaaaa\") == 1\nassert func(\"ababab\") == 6"}
{"task_id": 7, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(s,ch): \n    '''\n    WRITE A PYTHON FUNCTION TO REMOVE FIRST AND LAST OCCURRENCE OF A GIVEN CHARACTER FROM THE STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello world\", \"o\") == \"hell world\"\nassert func(\"programming\", \"m\") == \"prograing\"\nassert func(\"banana\", \"a\") == \"bnn\"\nassert func(\"racecar\", \"r\") == \"aceca\"\nassert func(\"apple\", \"p\") == \"ale\"\n```", "response_code": "\nassert func(\"hello world\", \"o\") == \"hell world\"\nassert func(\"programming\", \"m\") == \"prograing\"\nassert func(\"banana\", \"a\") == \"bnn\"\nassert func(\"racecar\", \"r\") == \"aceca\"\nassert func(\"apple\", \"p\") == \"ale\"\n"}
{"task_id": 8, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(M):\n    '''\n    WRITE A FUNCTION TO SORT A GIVEN MATRIX IN ASCENDING ORDER ACCORDING TO THE SUM OF ITS ROWS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert func([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\nassert func([[5, 2, 3], [4, 8, 6], [7, 1, 9]]) == [[5, 2, 3], [4, 8, 6], [7, 1, 9]]\nassert func([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == [[1, 1, 1], [2, 2, 2], [3, 3, 3]]\nassert func([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert func([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\nassert func([[5, 2, 3], [4, 8, 6], [7, 1, 9]]) == [[5, 2, 3], [4, 8, 6], [7, 1, 9]]\nassert func([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == [[1, 1, 1], [2, 2, 2], [3, 3, 3]]\nassert func([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\n"}
{"task_id": 9, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l,b,h) : \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE VOLUME OF A TRIANGULAR PRISM.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 4, 5) == 30\nassert func(6, 8, 10) == 240\nassert func(2, 2, 2) == 4.0\nassert func(0, 5, 7) == 0\nassert func(1, 1, 1) == 0.5\n```", "response_code": "\nassert func(3, 4, 5) == 30\nassert func(6, 8, 10) == 240\nassert func(2, 2, 2) == 4.0\nassert func(0, 5, 7) == 0\nassert func(1, 1, 1) == 0.5\n"}
{"task_id": 10, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    WRITE A FUNCTION TO FIND SEQUENCES OF LOWERCASE LETTERS JOINED WITH AN UNDERSCORE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello_world\") == [\"hello_world\"]\nassert func(\"python_is_cool\") == [\"python_is_cool\"]\nassert func(\"abc_def_ghi\") == [\"abc_def_ghi\"]\nassert func(\"this_is_a_test\") == [\"this_is_a_test\"]\nassert func(\"one_two_three\") == [\"one_two_three\"]\n```", "response_code": "\nassert func(\"hello_world\") == [\"hello_world\"]\nassert func(\"python_is_cool\") == [\"python_is_cool\"]\nassert func(\"abc_def_ghi\") == [\"abc_def_ghi\"]\nassert func(\"this_is_a_test\") == [\"this_is_a_test\"]\nassert func(\"one_two_three\") == [\"one_two_three\"]\n"}
{"task_id": 11, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a):\n    '''\n    WRITE A FUNCTION TO FIND THE PERIMETER OF A SQUARE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(0) == 0\nassert func(1) == 4\nassert func(5) == 20\nassert func(10) == 40\nassert func(15) == 60", "response_code": "assert func(0) == 0\nassert func(1) == 4\nassert func(5) == 20\nassert func(10) == 40\nassert func(15) == 60"}
{"task_id": 12, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "NO_OF_CHARS = 256\ndef func(string): \n    '''\n    WRITE A FUNCTION TO REMOVE CHARACTERS FROM THE FIRST STRING WHICH ARE PRESENT IN THE SECOND STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\", \"world\") == \"he\"\nassert func(\"apple\", \"banana\") == \"apple\"\nassert func(\"python\", \"java\") == \"python\"\nassert func(\"hello\", \"h\") == \"ello\"\nassert func(\"goodbye\", \"good\") == \"bye\"", "response_code": "assert func(\"hello\", \"world\") == \"he\"\nassert func(\"apple\", \"banana\") == \"apple\"\nassert func(\"python\", \"java\") == \"python\"\nassert func(\"hello\", \"h\") == \"ello\"\nassert func(\"goodbye\", \"good\") == \"bye\""}
{"task_id": 13, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arraynums):\n    '''\n    WRITE A FUNCTION TO FIND WHETHER A GIVEN ARRAY OF INTEGERS CONTAINS ANY DUPLICATE ELEMENT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == False\nassert func([1, 2, 3, 4, 1]) == True\nassert func([5, 5, 5, 5, 5]) == True\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\nassert func([1, 2, 3, 4, 5, 1]) == True\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == False\nassert func([1, 2, 3, 4, 1]) == True\nassert func([5, 5, 5, 5, 5]) == True\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\nassert func([1, 2, 3, 4, 5, 1]) == True\n"}
{"task_id": 14, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x): \n    '''\n    WRITE A FUNCTION TO CHECK IF THE GIVEN NUMBER IS WOODBALL OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == False\nassert func(7) == True\nassert func(10) == False\nassert func(27) == True\nassert func(100) == False\n```", "response_code": "\nassert func(1) == False\nassert func(7) == True\nassert func(10) == False\nassert func(27) == True\nassert func(100) == False\n"}
{"task_id": 15, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(num):    \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK IF A GIVEN NUMBER IS ONE LESS THAN TWICE ITS REVERSE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(12) == True\nassert func(25) == False\nassert func(36) == True\nassert func(47) == False\nassert func(99) == True\n```", "response_code": "\nassert func(12) == True\nassert func(25) == False\nassert func(36) == True\nassert func(47) == False\nassert func(99) == True\n"}
{"task_id": 16, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr) : \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE LARGEST NUMBER THAT CAN BE FORMED WITH THE GIVEN DIGITS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([3, 1, 4, 2]) == 4321\nassert func([5, 5, 5, 5]) == 5555\nassert func([9, 8, 7, 6, 5]) == 98765\nassert func([0, 1, 2, 3, 4, 5]) == 543210\nassert func([2, 0, 4, 6, 8]) == 86420\n```", "response_code": "\nassert func([3, 1, 4, 2]) == 4321\nassert func([5, 5, 5, 5]) == 5555\nassert func([9, 8, 7, 6, 5]) == 98765\nassert func([0, 1, 2, 3, 4, 5]) == 543210\nassert func([2, 0, 4, 6, 8]) == 86420\n"}
{"task_id": 17, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x,y): \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER THE GIVEN TWO INTEGERS HAVE OPPOSITE SIGN OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5, -3) == True\nassert func(-2, 8) == True\nassert func(0, 0) == False\nassert func(-10, -5) == False\nassert func(7, 3) == False\n```", "response_code": "\nassert func(5, -3) == True\nassert func(-2, 8) == True\nassert func(0, 0) == False\nassert func(-10, -5) == False\nassert func(7, 3) == False\n"}
{"task_id": 18, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A FUNCTION TO FIND THE NTH OCTAGONAL NUMBER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 1\nassert func(2) == 8\nassert func(5) == 40\nassert func(10) == 160\nassert func(15) == 360", "response_code": "assert func(1) == 1\nassert func(2) == 8\nassert func(5) == 40\nassert func(10) == 160\nassert func(15) == 360"}
{"task_id": 19, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from collections import defaultdict\ndef func(s):\n    '''\n    WRITE A PYTHON FUNCTION TO COUNT NUMBER OF SUBSTRINGS WITH THE SUM OF DIGITS EQUAL TO THEIR LENGTH.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"123\") == 1\nassert func(\"1234\") == 3\nassert func(\"111\") == 3\nassert func(\"12345\") == 6\nassert func(\"999\") == 3\n```", "response_code": "\nassert func(\"123\") == 1\nassert func(\"1234\") == 3\nassert func(\"111\") == 3\nassert func(\"12345\") == 6\nassert func(\"999\") == 3\n"}
{"task_id": 20, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(xs):\n    '''\n    WRITE A PYTHON FUNCTION TO FIND SMALLEST NUMBER IN A LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([3, 5, 1, 7, 2]) == 1\nassert func([10, 20, 30, 40, 50]) == 10\nassert func([5, 4, 3, 2, 1]) == 1\nassert func([100, 200, 300, 400, 500]) == 100\nassert func([7, 7, 7, 7, 7]) == 7\n```", "response_code": "\nassert func([3, 5, 1, 7, 2]) == 1\nassert func([10, 20, 30, 40, 50]) == 10\nassert func([5, 4, 3, 2, 1]) == 1\nassert func([100, 200, 300, 400, 500]) == 100\nassert func([7, 7, 7, 7, 7]) == 7\n"}
{"task_id": 21, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    WRITE A FUNCTION TO FIND THE MAXIMUM DIFFERENCE BETWEEN AVAILABLE PAIRS IN THE GIVEN TUPLE LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (3, 4), (5, 6)]) == 5\nassert func([(10, 20), (30, 40), (50, 60)]) == 50\nassert func([(100, 200), (300, 400), (500, 600)]) == 500\nassert func([(5, 10), (15, 20), (25, 30)]) == 25\nassert func([(2, 8), (12, 18), (22, 28)]) == 20\n```", "response_code": "\nassert func([(1, 2), (3, 4), (5, 6)]) == 5\nassert func([(10, 20), (30, 40), (50, 60)]) == 50\nassert func([(100, 200), (300, 400), (500, 600)]) == 500\nassert func([(5, 10), (15, 20), (25, 30)]) == 25\nassert func([(2, 8), (12, 18), (22, 28)]) == 20\n"}
{"task_id": 22, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(subjectmarks):\n    '''\n    WRITE A FUNCTION TO SORT A LIST OF TUPLES USING LAMBDA.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test Case 1\nassert func([(80, 'Math'), (70, 'Science'), (90, 'English')]) == [(70, 'Science'), (80, 'Math'), (90, 'English')]\n\n# Test Case 2\nassert func([(60, 'History'), (75, 'Geography'), (65, 'Civics')]) == [(60, 'History'), (65, 'Civics'), (75, 'Geography')]\n\n# Test Case 3\nassert func([(95, 'Physics'), (85, 'Chemistry'), (90, 'Biology')]) == [(85, 'Chemistry'), (90, 'Biology'), (95, 'Physics')]\n\n# Test Case 4\nassert func([(50, 'Art'), (40, 'Music'), (45, 'Dance')]) == [(40, 'Music'), (45, 'Dance'), (50, 'Art')]\n\n# Test Case 5\nassert func([(100, 'Computer Science'), (95, 'Programming'), (90, 'Algorithms')]) == [(90, 'Algorithms'), (95, 'Programming'), (100, 'Computer Science')]\n```", "response_code": "\n# Test Case 1\nassert func([(80, 'Math'), (70, 'Science'), (90, 'English')]) == [(70, 'Science'), (80, 'Math'), (90, 'English')]\n\n# Test Case 2\nassert func([(60, 'History'), (75, 'Geography'), (65, 'Civics')]) == [(60, 'History'), (65, 'Civics'), (75, 'Geography')]\n\n# Test Case 3\nassert func([(95, 'Physics'), (85, 'Chemistry'), (90, 'Biology')]) == [(85, 'Chemistry'), (90, 'Biology'), (95, 'Physics')]\n\n# Test Case 4\nassert func([(50, 'Art'), (40, 'Music'), (45, 'Dance')]) == [(40, 'Music'), (45, 'Dance'), (50, 'Art')]\n\n# Test Case 5\nassert func([(100, 'Computer Science'), (95, 'Programming'), (90, 'Algorithms')]) == [(90, 'Algorithms'), (95, 'Programming'), (100, 'Computer Science')]\n"}
{"task_id": 23, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(data_list):\n    '''\n    WRITE A FUNCTION OF RECURSION LIST SUM.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 15\nassert func([10, 20, 30]) == 60\nassert func([5, 10, 15, 20]) == 50\nassert func([2, 4, 6, 8, 10]) == 30\nassert func([3, 6, 9, 12, 15, 18]) == 63\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 15\nassert func([10, 20, 30]) == 60\nassert func([5, 10, 15, 20]) == 50\nassert func([2, 4, 6, 8, 10]) == 30\nassert func([3, 6, 9, 12, 15, 18]) == 63\n"}
{"task_id": 24, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list):\n    '''\n    WRITE A PYTHON FUNCTION TO COUNT POSITIVE NUMBERS IN A LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, -4, 7, -2, 0, 9]) == 3\nassert func([-1, -2, -3, -4]) == 0\nassert func([0, 0, 0, 0]) == 0\nassert func([5, 10, 15, 20]) == 4\nassert func([-5, -10, 5, 10]) == 2", "response_code": "assert func([1, -4, 7, -2, 0, 9]) == 3\nassert func([-1, -2, -3, -4]) == 0\nassert func([0, 0, 0, 0]) == 0\nassert func([5, 10, 15, 20]) == 4\nassert func([-5, -10, 5, 10]) == 2"}
{"task_id": 25, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):   \n    '''\n    WRITE A FUNCTION TO FIND THE NUMBER OF WAYS TO PARTITION A SET OF BELL NUMBERS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 1\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 5\nassert func(4) == 15\n```", "response_code": "\nassert func(0) == 1\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 5\nassert func(4) == 15\n"}
{"task_id": 26, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(A): \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER THE GIVEN ARRAY IS MONOTONIC OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == True\nassert func([5, 4, 3, 2, 1]) == True\nassert func([1, 3, 2, 4, 5]) == False\nassert func([5, 5, 5, 5, 5]) == True\nassert func([1]) == True\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == True\nassert func([5, 4, 3, 2, 1]) == True\nassert func([1, 3, 2, 4, 5]) == False\nassert func([5, 5, 5, 5, 5]) == True\nassert func([1]) == True\n"}
{"task_id": 27, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l, s):\n    '''\n    WRITE A FUNCTION TO CHECK WHETHER A LIST CONTAINS THE GIVEN SUBLIST OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], [2, 3]) == True\nassert func([1, 2, 3, 4, 5], [4, 6]) == False\nassert func([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\nassert func([1, 2, 3, 4, 5], [5, 4, 3]) == False\nassert func([1, 2, 3, 4, 5], [6]) == False\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], [2, 3]) == True\nassert func([1, 2, 3, 4, 5], [4, 6]) == False\nassert func([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\nassert func([1, 2, 3, 4, 5], [5, 4, 3]) == False\nassert func([1, 2, 3, 4, 5], [6]) == False\n"}
{"task_id": 28, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(Input):\n    '''\n    WRITE A FUNCTION TO FIND WHETHER ALL THE GIVEN TUPLES HAVE EQUAL LENGTH OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([(1, 2), (3, 4), (5, 6)]) == True\nassert func([(1, 2, 3), (4, 5), (6, 7, 8)]) == False\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == True\nassert func([(1,), (2,), (3,)]) == True\nassert func([(1, 2, 3, 4), (5, 6, 7), (8, 9)]) == False", "response_code": "assert func([(1, 2), (3, 4), (5, 6)]) == True\nassert func([(1, 2, 3), (4, 5), (6, 7, 8)]) == False\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == True\nassert func([(1,), (2,), (3,)]) == True\nassert func([(1, 2, 3, 4), (5, 6, 7), (8, 9)]) == False"}
{"task_id": 29, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    WRITE A FUNCTION TO SORT A LIST OF ELEMENTS USING COMB SORT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([4, 2, 7, 1, 5]) == [1, 2, 4, 5, 7]\nassert func([9, 3, 6, 2, 8, 1, 5, 7, 4]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert func([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1]) == [1]\n```", "response_code": "\nassert func([4, 2, 7, 1, 5]) == [1, 2, 4, 5, 7]\nassert func([9, 3, 6, 2, 8, 1, 5, 7, 4]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert func([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1]) == [1]\n"}
{"task_id": 30, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER THE GIVEN NUMBER CAN BE REPRESENTED AS DIFFERENCE OF TWO SQUARES OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(10) == True\nassert func(25) == True\nassert func(7) == False\nassert func(15) == False\nassert func(36) == True\n```", "response_code": "\nassert func(10) == True\nassert func(25) == True\nassert func(7) == False\nassert func(15) == False\nassert func(36) == True\n"}
{"task_id": 31, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(colors, patterns):    \n    '''\n    WRITE A FUNCTION TO CHECK WHETHER IT FOLLOWS THE SEQUENCE GIVEN IN THE PATTERNS ARRAY.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['red', 'blue', 'green', 'red', 'blue'], [0, 1, 2, 0, 1]) == True\nassert func(['red', 'blue', 'green', 'red', 'blue'], [0, 1, 2, 1, 0]) == False\nassert func(['red', 'blue', 'green', 'red', 'blue'], [0, 1, 2, 0, 2]) == False\nassert func(['red', 'blue', 'green', 'red', 'blue'], [0, 1, 2, 0, 1, 2]) == False\nassert func(['red', 'blue', 'green', 'red', 'blue'], [0, 1, 2]) == False\n```", "response_code": "\nassert func(['red', 'blue', 'green', 'red', 'blue'], [0, 1, 2, 0, 1]) == True\nassert func(['red', 'blue', 'green', 'red', 'blue'], [0, 1, 2, 1, 0]) == False\nassert func(['red', 'blue', 'green', 'red', 'blue'], [0, 1, 2, 0, 2]) == False\nassert func(['red', 'blue', 'green', 'red', 'blue'], [0, 1, 2, 0, 1, 2]) == False\nassert func(['red', 'blue', 'green', 'red', 'blue'], [0, 1, 2]) == False\n"}
{"task_id": 32, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list, K):\n    '''\n    WRITE A FUNCTION TO FIND TUPLES WHICH HAVE ALL ELEMENTS DIVISIBLE BY K FROM THE GIVEN LIST OF TUPLES.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == [(4, 5, 6)]\nassert func([(10, 20, 30), (40, 50, 60), (70, 80, 90)], 10) == [(10, 20, 30), (40, 50, 60), (70, 80, 90)]\nassert func([(3, 6, 9), (12, 15, 18), (21, 24, 27)], 3) == [(3, 6, 9), (12, 15, 18), (21, 24, 27)]\nassert func([(2, 4, 6), (8, 10, 12), (14, 16, 18)], 2) == [(2, 4, 6), (8, 10, 12), (14, 16, 18)]\nassert func([(5, 10, 15), (20, 25, 30), (35, 40, 45)], 5) == [(5, 10, 15), (20, 25, 30), (35, 40, 45)]\n```", "response_code": "\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == [(4, 5, 6)]\nassert func([(10, 20, 30), (40, 50, 60), (70, 80, 90)], 10) == [(10, 20, 30), (40, 50, 60), (70, 80, 90)]\nassert func([(3, 6, 9), (12, 15, 18), (21, 24, 27)], 3) == [(3, 6, 9), (12, 15, 18), (21, 24, 27)]\nassert func([(2, 4, 6), (8, 10, 12), (14, 16, 18)], 2) == [(2, 4, 6), (8, 10, 12), (14, 16, 18)]\nassert func([(5, 10, 15), (20, 25, 30), (35, 40, 45)], 5) == [(5, 10, 15), (20, 25, 30), (35, 40, 45)]\n"}
{"task_id": 33, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE DIFFERENCE BETWEEN SUM OF EVEN AND ODD DIGITS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1234) == -2\nassert func(2468) == 0\nassert func(13579) == -16\nassert func(1111) == 0\nassert func(24681357) == 0\n```", "response_code": "\nassert func(1234) == -2\nassert func(2468) == 0\nassert func(13579) == -16\nassert func(1111) == 0\nassert func(24681357) == 0\n"}
{"task_id": 34, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(s): \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER THE LENGTH OF THE WORD IS ODD OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\") == True\nassert func(\"world\") == True\nassert func(\"python\") == False\nassert func(\"programming\") == False\nassert func(\"test\") == True", "response_code": "assert func(\"hello\") == True\nassert func(\"world\") == True\nassert func(\"python\") == False\nassert func(\"programming\") == False\nassert func(\"test\") == True"}
{"task_id": 35, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A FUNCTION TO FIND THE NTH TETRAHEDRAL NUMBER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 1\nassert func(2) == 4\nassert func(3) == 10\nassert func(4) == 20\nassert func(5) == 35", "response_code": "assert func(1) == 1\nassert func(2) == 4\nassert func(3) == 10\nassert func(4) == 20\nassert func(5) == 35"}
{"task_id": 36, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(r):\n    '''\n    WRITE A FUNCTION TO FIND THE VOLUME OF A SPHERE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == (4/3) * math.pi\nassert func(2) == (4/3) * math.pi * 2**3\nassert func(0) == 0\nassert func(5) == (4/3) * math.pi * 5**3\nassert func(10) == (4/3) * math.pi * 10**3\n```", "response_code": "\nassert func(1) == (4/3) * math.pi\nassert func(2) == (4/3) * math.pi * 2**3\nassert func(0) == 0\nassert func(5) == (4/3) * math.pi * 5**3\nassert func(10) == (4/3) * math.pi * 10**3\n"}
{"task_id": 37, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(strr):  \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE CHARACTER MADE BY ADDING ALL THE CHARACTERS OF THE GIVEN STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"abc\") == 'a'\nassert func(\"hello\") == 'h'\nassert func(\"12345\") == '1'\nassert func(\"python\") == 'p'\nassert func(\"coding\") == 'c'\n```", "response_code": "\nassert func(\"abc\") == 'a'\nassert func(\"hello\") == 'h'\nassert func(\"12345\") == '1'\nassert func(\"python\") == 'p'\nassert func(\"coding\") == 'c'\n"}
{"task_id": 38, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A FUNCTION TO FIND THE N-TH NUMBER IN NEWMAN CONWAY SEQUENCE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 1\nassert func(5) == 3\nassert func(8) == 4\nassert func(10) == 5\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 1\nassert func(5) == 3\nassert func(8) == 4\nassert func(10) == 5\n"}
{"task_id": 39, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(r):\n    '''\n    WRITE A FUNCTION TO FIND THE SURFACE AREA OF A SPHERE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 4 * math.pi\nassert func(2) == 4 * math.pi * 2**2\nassert func(0) == 0\nassert func(5) == 4 * math.pi * 5**2\nassert func(10) == 4 * math.pi * 10**2\n```", "response_code": "\nassert func(1) == 4 * math.pi\nassert func(2) == 4 * math.pi * 2**2\nassert func(0) == 0\nassert func(5) == 4 * math.pi * 5**2\nassert func(10) == 4 * math.pi * 10**2\n"}
{"task_id": 40, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    WRITE A FUNCTION TO FIND NTH CENTERED HEXAGONAL NUMBER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 7\nassert func(3) == 19\nassert func(4) == 37\nassert func(5) == 61\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 7\nassert func(3) == 19\nassert func(4) == 37\nassert func(5) == 61\n"}
{"task_id": 41, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import collections as ct\ndef func(dict1,dict2, dict3):\n    '''\n    WRITE A FUNCTION TO MERGE THREE DICTIONARIES INTO A SINGLE EXPRESSION.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}\ndict3 = {'e': 5, 'f': 6}\n\nassert func(dict1, dict2, dict3) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n\ndict1 = {'x': 10, 'y': 20}\ndict2 = {'z': 30, 'w': 40}\ndict3 = {'u': 50, 'v': 60}\n\nassert func(dict1, dict2, dict3) == {'x': 10, 'y': 20, 'z': 30, 'w': 40, 'u': 50, 'v': 60}\n\ndict1 = {'apple': 'red', 'banana': 'yellow'}\ndict2 = {'orange': 'orange', 'grape': 'purple'}\ndict3 = {'watermelon': 'green', 'kiwi': 'brown'}\n\nassert func(dict1, dict2, dict3) == {'apple': 'red', 'banana': 'yellow', 'orange': 'orange', 'grape': 'purple', 'watermelon': 'green', 'kiwi': 'brown'}\n\ndict1 = {'a': [1, 2], 'b': [3, 4]}\ndict2 = {'c': [5, 6], 'd': [7, 8]}\ndict3 = {'e': [9, 10], 'f': [11, 12]}\n\nassert func(dict1, dict2, dict3) == {'a': [1, 2], 'b': [3, 4], 'c': [5, 6], 'd': [7, 8], 'e': [9, 10], 'f': [11, 12]}\n\ndict1 = ct.defaultdict(int, {'a': 1, 'b': 2})\ndict2 = ct.defaultdict(int, {'c': 3, 'd': 4})\ndict3 = ct.defaultdict(int, {'e': 5, 'f': 6})\n\nassert func(dict1, dict2, dict3) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n```", "response_code": "\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}\ndict3 = {'e': 5, 'f': 6}\n\nassert func(dict1, dict2, dict3) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n\ndict1 = {'x': 10, 'y': 20}\ndict2 = {'z': 30, 'w': 40}\ndict3 = {'u': 50, 'v': 60}\n\nassert func(dict1, dict2, dict3) == {'x': 10, 'y': 20, 'z': 30, 'w': 40, 'u': 50, 'v': 60}\n\ndict1 = {'apple': 'red', 'banana': 'yellow'}\ndict2 = {'orange': 'orange', 'grape': 'purple'}\ndict3 = {'watermelon': 'green', 'kiwi': 'brown'}\n\nassert func(dict1, dict2, dict3) == {'apple': 'red', 'banana': 'yellow', 'orange': 'orange', 'grape': 'purple', 'watermelon': 'green', 'kiwi': 'brown'}\n\ndict1 = {'a': [1, 2], 'b': [3, 4]}\ndict2 = {'c': [5, 6], 'd': [7, 8]}\ndict3 = {'e': [9, 10], 'f': [11, 12]}\n\nassert func(dict1, dict2, dict3) == {'a': [1, 2], 'b': [3, 4], 'c': [5, 6], 'd': [7, 8], 'e': [9, 10], 'f': [11, 12]}\n\ndict1 = ct.defaultdict(int, {'a': 1, 'b': 2})\ndict2 = ct.defaultdict(int, {'c': 3, 'd': 4})\ndict3 = ct.defaultdict(int, {'e': 5, 'f': 6})\n\nassert func(dict1, dict2, dict3) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n"}
{"task_id": 42, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import collections\ndef func(list1):\n    '''\n    WRITE A FUNCTION TO GET THE FREQUENCY OF THE ELEMENTS IN A LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([1, 2, 2, 3, 3, 3]) == {1: 1, 2: 2, 3: 3}\nassert func([4, 4, 4, 4, 4]) == {4: 5}\nassert func([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}\nassert func([1, 1, 1, 2, 2, 3, 3, 3, 3]) == {1: 3, 2: 2, 3: 4}\nassert func([]) == {}\n```", "response_code": "\n# Test cases\nassert func([1, 2, 2, 3, 3, 3]) == {1: 1, 2: 2, 3: 3}\nassert func([4, 4, 4, 4, 4]) == {4: 5}\nassert func([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}\nassert func([1, 1, 1, 2, 2, 3, 3, 3, 3]) == {1: 3, 2: 2, 3: 4}\nassert func([]) == {}\n"}
{"task_id": 43, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(N):\n    '''\n    WRITE A FUNCTION TO FIND THE CLOSEST SMALLER NUMBER THAN N.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5) == 4\nassert func(10) == 9\nassert func(20) == 19\nassert func(50) == 49\nassert func(100) == 99\n```", "response_code": "\nassert func(5) == 4\nassert func(10) == 9\nassert func(20) == 19\nassert func(50) == 49\nassert func(100) == 99\n"}
{"task_id": 44, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE LENGTH OF THE LONGEST WORD.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([\"apple\", \"banana\", \"cherry\"]) == 6\nassert func([\"hello\", \"world\"]) == 5\nassert func([\"python\", \"programming\", \"language\"]) == 11\nassert func([\"data\", \"science\", \"machine\", \"learning\"]) == 8\nassert func([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"]) == 5\n```", "response_code": "\nassert func([\"apple\", \"banana\", \"cherry\"]) == 6\nassert func([\"hello\", \"world\"]) == 5\nassert func([\"python\", \"programming\", \"language\"]) == 11\nassert func([\"data\", \"science\", \"machine\", \"learning\"]) == 8\nassert func([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"]) == 5\n"}
{"task_id": 45, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1, sub_str):\n    '''\n    WRITE A FUNCTION TO CHECK IF A SUBSTRING IS PRESENT IN A GIVEN LIST OF STRING VALUES.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['apple', 'banana', 'cherry'], 'ban') == True\nassert func(['apple', 'banana', 'cherry'], 'berry') == False\nassert func(['apple', 'banana', 'cherry'], 'apple') == True\nassert func(['apple', 'banana', 'cherry'], 'peach') == False\nassert func(['apple', 'banana', 'cherry'], 'ch') == True\n```", "response_code": "\nassert func(['apple', 'banana', 'cherry'], 'ban') == True\nassert func(['apple', 'banana', 'cherry'], 'berry') == False\nassert func(['apple', 'banana', 'cherry'], 'apple') == True\nassert func(['apple', 'banana', 'cherry'], 'peach') == False\nassert func(['apple', 'banana', 'cherry'], 'ch') == True\n"}
{"task_id": 46, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A FUNCTION TO CHECK WHETHER THE GIVEN NUMBER IS UNDULATING OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(121) == True\nassert func(131) == False\nassert func(12321) == True\nassert func(12345) == False\nassert func(1010101) == True", "response_code": "assert func(121) == True\nassert func(131) == False\nassert func(12321) == True\nassert func(12345) == False\nassert func(1010101) == True"}
{"task_id": 47, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a,b):\n    '''\n    WRITE A FUNCTION TO CALCULATE THE VALUE OF 'A' TO THE POWER 'B'.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(2, 3) == 8\nassert func(5, 0) == 1\nassert func(3, 4) == 81\nassert func(10, 2) == 100\nassert func(7, 1) == 7\n```", "response_code": "\nassert func(2, 3) == 8\nassert func(5, 0) == 1\nassert func(3, 4) == 81\nassert func(10, 2) == 100\nassert func(7, 1) == 7\n"}
{"task_id": 48, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from operator import itemgetter \ndef func(test_list):\n    '''\n    WRITE A FUNCTION TO EXTRACT THE INDEX MINIMUM VALUE RECORD FROM THE GIVEN TUPLES.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (3, 4), (0, 5)]) == 2\nassert func([(10, 20), (30, 40), (5, 50)]) == 0\nassert func([(100, 200), (300, 400), (50, 500)]) == 2\nassert func([(5, 10), (15, 20), (3, 30)]) == 0\nassert func([(2, 5), (1, 3), (4, 2)]) == 1\n```", "response_code": "\nassert func([(1, 2), (3, 4), (0, 5)]) == 2\nassert func([(10, 20), (30, 40), (5, 50)]) == 0\nassert func([(100, 200), (300, 400), (50, 500)]) == 2\nassert func([(5, 10), (15, 20), (3, 30)]) == 0\nassert func([(2, 5), (1, 3), (4, 2)]) == 1\n"}
{"task_id": 49, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lst):  \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE MINIMUM LENGTH OF SUBLIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 1\nassert func([5, 4, 3, 2, 1]) == 1\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\nassert func([9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5]) == 2\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 1\nassert func([5, 4, 3, 2, 1]) == 1\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\nassert func([9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5]) == 2\n"}
{"task_id": 50, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE NUMBER OF DIVISORS OF A GIVEN INTEGER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(10) == 4\nassert func(15) == 4\nassert func(20) == 6\nassert func(25) == 3\nassert func(30) == 8", "response_code": "assert func(10) == 4\nassert func(15) == 4\nassert func(20) == 6\nassert func(25) == 3\nassert func(30) == 8"}
{"task_id": 51, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A FUNCTION TO FIND FREQUENCY COUNT OF LIST OF LISTS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2], [2, 3], [1, 2], [4, 5]]) == {[1, 2]: 2, [2, 3]: 1, [4, 5]: 1}\nassert func([[1, 1, 1], [2, 2], [3, 3, 3], [1, 1, 1]]) == {[1, 1, 1]: 2, [2, 2]: 1, [3, 3, 3]: 1}\nassert func([[1], [2], [3], [4]]) == {[1]: 1, [2]: 1, [3]: 1, [4]: 1}\nassert func([[1, 2, 3], [4, 5], [6, 7, 8], [1, 2, 3]]) == {[1, 2, 3]: 2, [4, 5]: 1, [6, 7, 8]: 1}\nassert func([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == {[1, 2, 3]: 4}\n```", "response_code": "\nassert func([[1, 2], [2, 3], [1, 2], [4, 5]]) == {[1, 2]: 2, [2, 3]: 1, [4, 5]: 1}\nassert func([[1, 1, 1], [2, 2], [3, 3, 3], [1, 1, 1]]) == {[1, 1, 1]: 2, [2, 2]: 1, [3, 3, 3]: 1}\nassert func([[1], [2], [3], [4]]) == {[1]: 1, [2]: 1, [3]: 1, [4]: 1}\nassert func([[1, 2, 3], [4, 5], [6, 7, 8], [1, 2, 3]]) == {[1, 2, 3]: 2, [4, 5]: 1, [6, 7, 8]: 1}\nassert func([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == {[1, 2, 3]: 4}\n"}
{"task_id": 52, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(numbers):  \n    '''\n    WRITE A FUNCTION TO MULTIPLY ALL THE NUMBERS IN A LIST AND DIVIDE WITH THE LENGTH OF THE LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 15.0\nassert func([10, 20, 30]) == 200.0\nassert func([2, 4, 6, 8]) == 10.0\nassert func([5, 5, 5, 5, 5]) == 5.0\nassert func([1, 3, 5, 7, 9]) == 15.0\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 15.0\nassert func([10, 20, 30]) == 200.0\nassert func([2, 4, 6, 8]) == 10.0\nassert func([5, 5, 5, 5, 5]) == 5.0\nassert func([1, 3, 5, 7, 9]) == 15.0\n"}
{"task_id": 53, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A FUNCTION TO CONVERT THE GIVEN DECIMAL NUMBER TO ITS BINARY EQUIVALENT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(5) == '101'\nassert func(10) == '1010'\nassert func(16) == '10000'\nassert func(25) == '11001'\nassert func(37) == '100101'", "response_code": "assert func(5) == '101'\nassert func(10) == '1010'\nassert func(16) == '10000'\nassert func(25) == '11001'\nassert func(37) == '100101'"}
{"task_id": 54, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import sys\ndef func(num):\n    '''\n    WRITE A FUNCTION TO FIND THE NEXT SMALLEST PALINDROME OF A SPECIFIED NUMBER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(123) == 131\nassert func(999) == 1001\nassert func(45678) == 45754\nassert func(123456) == 123321\nassert func(987654) == 988889\n```", "response_code": "\nassert func(123) == 131\nassert func(999) == 1001\nassert func(45678) == 45754\nassert func(123456) == 123321\nassert func(987654) == 988889\n"}
{"task_id": 55, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr, k):\n    '''\n    WRITE A FUNCTION TO FIND THE KTH ELEMENT IN THE GIVEN ARRAY.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3], 3) == 4\nassert func([10, 20, 30, 40, 50], 1) == 10\nassert func([5, 8, 2, 7, 1], 5) == 1\nassert func([100, 200, 300, 400, 500], 4) == 400\nassert func([2, 4, 6, 8, 10], 2) == 4\n```", "response_code": "\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3], 3) == 4\nassert func([10, 20, 30, 40, 50], 1) == 10\nassert func([5, 8, 2, 7, 1], 5) == 1\nassert func([100, 200, 300, 400, 500], 4) == 400\nassert func([2, 4, 6, 8, 10], 2) == 4\n"}
{"task_id": 56, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(word):\n    '''\n    WRITE A FUNCTION TO CONVERT SNAKE CASE STRING TO CAMEL CASE STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello_world\") == \"HelloWorld\"\nassert func(\"snake_case_example\") == \"SnakeCaseExample\"\nassert func(\"this_is_a_test\") == \"ThisIsATest\"\nassert func(\"camel_case_string\") == \"CamelCaseString\"\nassert func(\"another_example\") == \"AnotherExample\"", "response_code": "assert func(\"hello_world\") == \"HelloWorld\"\nassert func(\"snake_case_example\") == \"SnakeCaseExample\"\nassert func(\"this_is_a_test\") == \"ThisIsATest\"\nassert func(\"camel_case_string\") == \"CamelCaseString\"\nassert func(\"another_example\") == \"AnotherExample\""}
{"task_id": 57, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n, m): \n    '''\n    WRITE A FUNCTION TO FIND EULERIAN NUMBER A(N, M).\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 1) == 2\nassert func(4, 2) == 11\nassert func(5, 3) == 66\nassert func(6, 4) == 571\nassert func(7, 5) == 6786\n```", "response_code": "\nassert func(3, 1) == 2\nassert func(4, 2) == 11\nassert func(5, 3) == 66\nassert func(6, 4) == 571\nassert func(7, 5) == 6786\n"}
{"task_id": 58, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(input_list):\n    '''\n    WRITE A FUNCTION TO SORT EACH SUBLIST OF STRINGS IN A GIVEN LIST OF LISTS USING LAMBDA FUNCTION.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\ninput_list = [['banana', 'apple', 'cherry'], ['orange', 'grape', 'kiwi'], ['pear', 'strawberry', 'blueberry']]\nfunc(input_list)\nassert input_list == [['apple', 'banana', 'cherry'], ['grape', 'kiwi', 'orange'], ['blueberry', 'pear', 'strawberry']]\n\ninput_list = [['dog', 'cat', 'bird'], ['elephant', 'zebra', 'lion'], ['turtle', 'fish', 'rabbit']]\nfunc(input_list)\nassert input_list == [['bird', 'cat', 'dog'], ['elephant', 'lion', 'zebra'], ['fish', 'rabbit', 'turtle']]\n\ninput_list = [['January', 'February', 'March'], ['April', 'May', 'June'], ['July', 'August', 'September']]\nfunc(input_list)\nassert input_list == [['February', 'January', 'March'], ['April', 'June', 'May'], ['August', 'July', 'September']]\n\ninput_list = [['red', 'green', 'blue'], ['yellow', 'purple', 'orange'], ['black', 'white', 'gray']]\nfunc(input_list)\nassert input_list == [['blue', 'green', 'red'], ['orange', 'purple', 'yellow'], ['black', 'gray', 'white']]\n\ninput_list = [['one', 'two', 'three'], ['four', 'five', 'six'], ['seven', 'eight', 'nine']]\nfunc(input_list)\nassert input_list == [['one', 'three', 'two'], ['five', 'four', 'six'], ['eight', 'nine', 'seven']]\n```", "response_code": "\ninput_list = [['banana', 'apple', 'cherry'], ['orange', 'grape', 'kiwi'], ['pear', 'strawberry', 'blueberry']]\nfunc(input_list)\nassert input_list == [['apple', 'banana', 'cherry'], ['grape', 'kiwi', 'orange'], ['blueberry', 'pear', 'strawberry']]\n\ninput_list = [['dog', 'cat', 'bird'], ['elephant', 'zebra', 'lion'], ['turtle', 'fish', 'rabbit']]\nfunc(input_list)\nassert input_list == [['bird', 'cat', 'dog'], ['elephant', 'lion', 'zebra'], ['fish', 'rabbit', 'turtle']]\n\ninput_list = [['January', 'February', 'March'], ['April', 'May', 'June'], ['July', 'August', 'September']]\nfunc(input_list)\nassert input_list == [['February', 'January', 'March'], ['April', 'June', 'May'], ['August', 'July', 'September']]\n\ninput_list = [['red', 'green', 'blue'], ['yellow', 'purple', 'orange'], ['black', 'white', 'gray']]\nfunc(input_list)\nassert input_list == [['blue', 'green', 'red'], ['orange', 'purple', 'yellow'], ['black', 'gray', 'white']]\n\ninput_list = [['one', 'two', 'three'], ['four', 'five', 'six'], ['seven', 'eight', 'nine']]\nfunc(input_list)\nassert input_list == [['one', 'three', 'two'], ['five', 'four', 'six'], ['eight', 'nine', 'seven']]\n"}
{"task_id": 59, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lst):   \n    '''\n    WRITE A PYTHON FUNCTION TO COUNT TRUE BOOLEANS IN THE GIVEN LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([True, False, True, False, True]) == 3\nassert func([True, True, True, True, True]) == 5\nassert func([False, False, False, False, False]) == 0\nassert func([True, False, False, True, False]) == 2\nassert func([]) == 0\n```", "response_code": "\nassert func([True, False, True, False, True]) == 3\nassert func([True, True, True, True, True]) == 5\nassert func([False, False, False, False, False]) == 0\nassert func([True, False, False, True, False]) == 2\nassert func([]) == 0\n"}
{"task_id": 60, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list, test_tup):\n    '''\n    WRITE A FUNCTION TO ADD THE GIVEN LIST TO THE GIVEN TUPLES.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3], (4, 5)) == [(1, 2, 3, 4, 5)]\nassert func(['a', 'b'], ('c', 'd')) == [('a', 'b', 'c', 'd')]\nassert func([10, 20], (30,)) == [(10, 20, 30)]\nassert func([], (1, 2, 3)) == [(1, 2, 3)]\nassert func(['x'], ('y', 'z')) == [('x', 'y', 'z')]", "response_code": "assert func([1, 2, 3], (4, 5)) == [(1, 2, 3, 4, 5)]\nassert func(['a', 'b'], ('c', 'd')) == [('a', 'b', 'c', 'd')]\nassert func([10, 20], (30,)) == [(10, 20, 30)]\nassert func([], (1, 2, 3)) == [(1, 2, 3)]\nassert func(['x'], ('y', 'z')) == [('x', 'y', 'z')]"}
{"task_id": 61, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import heapq\ndef func(num1,num2,num3):\n    '''\n    WRITE A FUNCTION TO MERGE MULTIPLE SORTED INPUTS INTO A SINGLE SORTED ITERATOR USING HEAP QUEUE ALGORITHM.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert list(func([1, 3, 5], [2, 4, 6], [0, 7, 8])) == [0, 1, 2, 3, 4, 5, 6, 7, 8]\nassert list(func([1, 2, 3], [4, 5, 6], [7, 8, 9])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert list(func([1, 4, 7], [2, 5, 8], [3, 6, 9])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert list(func([5, 10, 15], [3, 6, 9], [2, 4, 8])) == [2, 3, 4, 5, 6, 8, 9, 10, 15]\nassert list(func([1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12])) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n```", "response_code": "\nassert list(func([1, 3, 5], [2, 4, 6], [0, 7, 8])) == [0, 1, 2, 3, 4, 5, 6, 7, 8]\nassert list(func([1, 2, 3], [4, 5, 6], [7, 8, 9])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert list(func([1, 4, 7], [2, 5, 8], [3, 6, 9])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert list(func([5, 10, 15], [3, 6, 9], [2, 4, 8])) == [2, 3, 4, 5, 6, 8, 9, 10, 15]\nassert list(func([1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12])) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n"}
{"task_id": 62, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(s,n): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE COUNT OF ROTATIONS OF A BINARY STRING WITH ODD VALUE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func('10101', 5) == 2\nassert func('111000', 6) == 3\nassert func('11011', 5) == 1\nassert func('1001', 4) == 2\nassert func('1111', 4) == 0\n```", "response_code": "\nassert func('10101', 5) == 2\nassert func('111000', 6) == 3\nassert func('11011', 5) == 1\nassert func('1001', 4) == 2\nassert func('1111', 4) == 0\n"}
{"task_id": 63, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nestedlist):\n    '''\n    WRITE A FUNCTION TO FIND COMMON ELEMENTS IN GIVEN NESTED LISTS. * LIST ITEM * LIST ITEM * LIST ITEM * LIST ITEM\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == []\nassert func([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]\nassert func([[1, 2, 3], [4, 5, 6], [1, 2, 3]]) == [1, 2, 3]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == []\n```", "response_code": "\nassert func([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == []\nassert func([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]\nassert func([[1, 2, 3], [4, 5, 6], [1, 2, 3]]) == [1, 2, 3]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == []\n"}
{"task_id": 64, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(text):\n    '''\n    WRITE A FUNCTION TO CHECK IF A STRING REPRESENTS AN INTEGER OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"123\") == True\nassert func(\"-456\") == True\nassert func(\"0\") == True\nassert func(\"12.34\") == False\nassert func(\"abc\") == False", "response_code": "assert func(\"123\") == True\nassert func(\"-456\") == True\nassert func(\"0\") == True\nassert func(\"12.34\") == False\nassert func(\"abc\") == False"}
{"task_id": 65, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A FUNCTION TO CHECK WHETHER ALL DICTIONARIES IN A LIST ARE EMPTY OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([{}, {}, {}]) == True\nassert func([{'a': 1}, {'b': 2}, {}]) == False\nassert func([]) == True\nassert func([{'key': 'value'}]) == False\nassert func([{1: 'a'}, {2: 'b'}, {3: 'c'}]) == False", "response_code": "assert func([{}, {}, {}]) == True\nassert func([{'a': 1}, {'b': 2}, {}]) == False\nassert func([]) == True\nassert func([{'key': 'value'}]) == False\nassert func([{1: 'a'}, {2: 'b'}, {3: 'c'}]) == False"}
{"task_id": 66, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    WRITE A FUNCTION TO CONVERT A GIVEN TUPLE OF POSITIVE INTEGERS INTO AN INTEGER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3)) == 123\nassert func((9, 8, 7, 6)) == 9876\nassert func((0, 5, 2, 1)) == 52\nassert func((3, 0, 4, 9)) == 3049\nassert func((1, 0, 0, 0, 0)) == 10000\n```", "response_code": "\nassert func((1, 2, 3)) == 123\nassert func((9, 8, 7, 6)) == 9876\nassert func((0, 5, 2, 1)) == 52\nassert func((3, 0, 4, 9)) == 3049\nassert func((1, 0, 0, 0, 0)) == 10000\n"}
{"task_id": 67, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    WRITE A FUNCTION TO CONVERT ALL POSSIBLE CONVERTIBLE ELEMENTS IN THE LIST TO FLOAT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3]) == [1.0, 2.0, 3.0]\nassert func([4, '5', 6.7]) == [4.0, 5.0, 6.7]\nassert func(['7.8', '9.1', '10']) == [7.8, 9.1, 10.0]\nassert func(['11', '12.3', '13.5']) == [11.0, 12.3, 13.5]\nassert func(['14.6', 15, '16']) == [14.6, 15.0, 16.0]\n```", "response_code": "\nassert func([1, 2, 3]) == [1.0, 2.0, 3.0]\nassert func([4, '5', 6.7]) == [4.0, 5.0, 6.7]\nassert func(['7.8', '9.1', '10']) == [7.8, 9.1, 10.0]\nassert func(['11', '12.3', '13.5']) == [11.0, 12.3, 13.5]\nassert func(['14.6', 15, '16']) == [14.6, 15.0, 16.0]\n"}
{"task_id": 68, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(string): \n    '''\n    WRITE A FUNCTION TO CONVERT A STRING TO A LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\") == ['h', 'e', 'l', 'l', 'o']\nassert func(\"12345\") == ['1', '2', '3', '4', '5']\nassert func(\"abcde\") == ['a', 'b', 'c', 'd', 'e']\nassert func(\"\") == []\nassert func(\"testing 123\") == ['t', 'e', 's', 't', 'i', 'n', 'g', ' ', '1', '2', '3']", "response_code": "assert func(\"hello\") == ['h', 'e', 'l', 'l', 'o']\nassert func(\"12345\") == ['1', '2', '3', '4', '5']\nassert func(\"abcde\") == ['a', 'b', 'c', 'd', 'e']\nassert func(\"\") == []\nassert func(\"testing 123\") == ['t', 'e', 's', 't', 'i', 'n', 'g', ' ', '1', '2', '3']"}
{"task_id": 69, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):\n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE ELEMENT THAT APPEARS ONLY ONCE IN A SORTED ARRAY.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 1, 2, 2, 3, 4, 4, 5, 5]) == 3\nassert func([1, 1, 2, 2, 3, 3, 4, 4, 5]) == 5\nassert func([1, 1, 2, 2, 3, 3, 4, 5, 5]) == 4\nassert func([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]) == 6\nassert func([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7]) == 7", "response_code": "assert func([1, 1, 2, 2, 3, 4, 4, 5, 5]) == 3\nassert func([1, 1, 2, 2, 3, 3, 4, 4, 5]) == 5\nassert func([1, 1, 2, 2, 3, 3, 4, 5, 5]) == 4\nassert func([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]) == 6\nassert func([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7]) == 7"}
{"task_id": 70, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A FUNCTION TO FIND THE MAXIMUM PRODUCT FROM THE PAIRS OF TUPLES WITHIN A GIVEN LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (3, 4), (5, 6)]) == 30\nassert func([(2, 3), (4, 5), (6, 7)]) == 42\nassert func([(0, 1), (2, 3), (4, 5)]) == 20\nassert func([(-1, 2), (-3, 4), (-5, 6)]) == 30\nassert func([(1, 1), (2, 2), (3, 3)]) == 9\n```", "response_code": "\nassert func([(1, 2), (3, 4), (5, 6)]) == 30\nassert func([(2, 3), (4, 5), (6, 7)]) == 42\nassert func([(0, 1), (2, 3), (4, 5)]) == 20\nassert func([(-1, 2), (-3, 4), (-5, 6)]) == 30\nassert func([(1, 1), (2, 2), (3, 3)]) == 9\n"}
{"task_id": 71, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(limit):\n    '''\n    WRITE A FUNCTION TO SUM ALL AMICABLE NUMBERS FROM 1 TO A SPECIFIED NUMBER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(100) == 0\nassert func(200) == 504\nassert func(500) == 2898\nassert func(1000) == 5040\nassert func(2000) == 15990", "response_code": "assert func(100) == 0\nassert func(200) == 504\nassert func(500) == 2898\nassert func(1000) == 5040\nassert func(2000) == 15990"}
{"task_id": 72, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import cmath\ndef func(a,b):\n    '''\n    WRITE A FUNCTION TO GET THE ANGLE OF A COMPLEX NUMBER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1, 0) == 0\nassert func(0, 1) == 1.5707963267948966\nassert func(-1, 0) == 3.141592653589793\nassert func(0, -1) == -1.5707963267948966\nassert func(1, 1) == 0.7853981633974483\n```", "response_code": "\nassert func(1, 0) == 0\nassert func(0, 1) == 1.5707963267948966\nassert func(-1, 0) == 3.141592653589793\nassert func(0, -1) == -1.5707963267948966\nassert func(1, 1) == 0.7853981633974483\n"}
{"task_id": 73, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(string): \n    '''\n    WRITE A FUNCTION TO FIND THE MAXIMUM DIFFERENCE BETWEEN THE NUMBER OF 0S AND NUMBER OF 1S IN ANY SUB-STRING OF THE GIVEN BINARY STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"110101\") == 2\nassert func(\"1010101\") == 4\nassert func(\"1111\") == 0\nassert func(\"0000\") == 0\nassert func(\"101010101\") == 6\n```", "response_code": "\nassert func(\"110101\") == 2\nassert func(\"1010101\") == 4\nassert func(\"1111\") == 0\nassert func(\"0000\") == 0\nassert func(\"101010101\") == 6\n"}
{"task_id": 74, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a,b): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SUM OF COMMON DIVISORS OF TWO GIVEN NUMBERS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(12, 18) == 6\nassert func(15, 25) == 5\nassert func(24, 36) == 18\nassert func(7, 11) == 1\nassert func(8, 12) == 4\n```", "response_code": "\nassert func(12, 18) == 6\nassert func(15, 25) == 5\nassert func(24, 36) == 18\nassert func(7, 11) == 1\nassert func(8, 12) == 4\n"}
{"task_id": 75, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x, y):\n    '''\n    WRITE A FUNCTION TO MULTIPLY TWO INTEGERS WITHOUT USING THE * OPERATOR IN PYTHON.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 4) == 12\nassert func(0, 5) == 0\nassert func(-2, 6) == -12\nassert func(7, -3) == -21\nassert func(-4, -2) == 8\n```", "response_code": "\nassert func(3, 4) == 12\nassert func(0, 5) == 0\nassert func(-2, 6) == -12\nassert func(7, -3) == -21\nassert func(-4, -2) == 8\n"}
{"task_id": 76, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n, str):\n    '''\n    WRITE A FUNCTION TO SHORTLIST WORDS THAT ARE LONGER THAN N FROM A GIVEN LIST OF WORDS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5, ['apple', 'banana', 'orange', 'kiwi', 'grape']) == ['banana', 'orange']\nassert func(4, ['hello', 'world', 'python', 'programming']) == ['hello', 'world', 'python', 'programming']\nassert func(3, ['cat', 'dog', 'elephant', 'lion', 'tiger']) == ['elephant', 'lion', 'tiger']\nassert func(6, ['carrot', 'potato', 'tomato', 'cucumber']) == ['potato', 'tomato', 'cucumber']\nassert func(2, ['a', 'bb', 'ccc', 'dddd', 'eeeee']) == ['bb', 'ccc', 'dddd', 'eeeee']\n```", "response_code": "\nassert func(5, ['apple', 'banana', 'orange', 'kiwi', 'grape']) == ['banana', 'orange']\nassert func(4, ['hello', 'world', 'python', 'programming']) == ['hello', 'world', 'python', 'programming']\nassert func(3, ['cat', 'dog', 'elephant', 'lion', 'tiger']) == ['elephant', 'lion', 'tiger']\nassert func(6, ['carrot', 'potato', 'tomato', 'cucumber']) == ['potato', 'tomato', 'cucumber']\nassert func(2, ['a', 'bb', 'ccc', 'dddd', 'eeeee']) == ['bb', 'ccc', 'dddd', 'eeeee']\n"}
{"task_id": 77, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(my_matrix):\n    '''\n    WRITE A FUNCTION TO CALCULATE MAGIC SQUARE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([[2,7,6],[9,5,1],[4,3,8]]) == True\nassert func([[1,2,3],[4,5,6],[7,8,9]]) == False\nassert func([[16,3,2,13],[5,10,11,8],[9,6,7,12],[4,15,14,1]]) == True\nassert func([[17,24,1,8,15],[23,5,7,14,16],[4,6,13,20,22],[10,12,19,21,3],[11,18,25,2,9]]) == True\nassert func([[1,1,1],[1,1,1],[1,1,1]]) == False", "response_code": "assert func([[2,7,6],[9,5,1],[4,3,8]]) == True\nassert func([[1,2,3],[4,5,6],[7,8,9]]) == False\nassert func([[16,3,2,13],[5,10,11,8],[9,6,7,12],[4,15,14,1]]) == True\nassert func([[17,24,1,8,15],[23,5,7,14,16],[4,6,13,20,22],[10,12,19,21,3],[11,18,25,2,9]]) == True\nassert func([[1,1,1],[1,1,1],[1,1,1]]) == False"}
{"task_id": 78, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from collections import defaultdict\ndef func(nums):\n    '''\n    WRITE A FUNCTION TO FIND THE ITEM WITH MAXIMUM FREQUENCY IN A GIVEN LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 2, 3, 3, 3, 4]) == 3\nassert func([1, 1, 2, 2, 2, 3, 3, 3, 3]) == 3\nassert func([1, 2, 3, 4, 5]) == 1\nassert func([1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3]) == 1\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9]) == 9\n```", "response_code": "\nassert func([1, 2, 2, 3, 3, 3, 4]) == 3\nassert func([1, 1, 2, 2, 2, 3, 3, 3, 3]) == 3\nassert func([1, 2, 3, 4, 5]) == 1\nassert func([1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3]) == 1\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9]) == 9\n"}
{"task_id": 79, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1):\n    '''\n    WRITE A PYTHON FUNCTION TO REVERSE ONLY THE VOWELS OF A GIVEN STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == \"holle\"\nassert func(\"world\") == \"werld\"\nassert func(\"apple\") == \"eppla\"\nassert func(\"python\") == \"pythan\"\nassert func(\"algorithm\") == \"ilgorthm\"\n```", "response_code": "\nassert func(\"hello\") == \"holle\"\nassert func(\"world\") == \"werld\"\nassert func(\"apple\") == \"eppla\"\nassert func(\"python\") == \"pythan\"\nassert func(\"algorithm\") == \"ilgorthm\"\n"}
{"task_id": 80, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(tup1):\n    '''\n    WRITE A FUNCTION TO CONVERT TUPLE TO A STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(('a', 'b', 'c')) == 'abc'\nassert func(('hello', 'world')) == 'helloworld'\nassert func(('1', '2', '3')) == '123'\nassert func(('apple', 'banana', 'cherry')) == 'applebananacherry'\nassert func(('python', 'is', 'fun')) == 'pythonisfun'", "response_code": "assert func(('a', 'b', 'c')) == 'abc'\nassert func(('hello', 'world')) == 'helloworld'\nassert func(('1', '2', '3')) == '123'\nassert func(('apple', 'banana', 'cherry')) == 'applebananacherry'\nassert func(('python', 'is', 'fun')) == 'pythonisfun'"}
{"task_id": 81, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    WRITE A FUNCTION TO CALCULATE THE SUM OF THE NEGATIVE NUMBERS OF A GIVEN LIST OF NUMBERS USING LAMBDA FUNCTION.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, -2, 3, -4, 5]) == -6\nassert func([-1, -2, -3, -4, -5]) == -15\nassert func([0, 1, 2, 3, 4]) == 0\nassert func([-1, 2, -3, 4, -5]) == -9\nassert func([]) == 0\n```", "response_code": "\nassert func([1, -2, 3, -4, 5]) == -6\nassert func([-1, -2, -3, -4, -5]) == -15\nassert func([0, 1, 2, 3, 4]) == 0\nassert func([-1, 2, -3, 4, -5]) == -9\nassert func([]) == 0\n"}
{"task_id": 82, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A FUNCTION TO FIND THE NTH HEXAGONAL NUMBER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 6\nassert func(3) == 15\nassert func(4) == 28\nassert func(5) == 45\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 6\nassert func(3) == 15\nassert func(4) == 28\nassert func(5) == 45\n"}
{"task_id": 83, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from array import array\ndef func(nums):\n    '''\n    WRITE A FUNCTION TO FIND THE RATIO OF ZEROES IN AN ARRAY OF INTEGERS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(array('i', [0, 1, 0, 3, 0, 5])) == 0.5\nassert func(array('i', [1, 2, 3, 4, 5])) == 0.0\nassert func(array('i', [0, 0, 0, 0, 0])) == 1.0\nassert func(array('i', [1, 0, 1, 0, 1])) == 0.4\nassert func(array('i', [0, 0, 1, 1, 1])) == 0.4\n```", "response_code": "\nassert func(array('i', [0, 1, 0, 3, 0, 5])) == 0.5\nassert func(array('i', [1, 2, 3, 4, 5])) == 0.0\nassert func(array('i', [0, 0, 0, 0, 0])) == 1.0\nassert func(array('i', [1, 0, 1, 0, 1])) == 0.4\nassert func(array('i', [0, 0, 1, 1, 1])) == 0.4\n"}
{"task_id": 84, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER THE GIVEN NUMBER CAN BE REPRESENTED AS SUM OF NON-ZERO POWERS OF 2 OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(10) == True\nassert func(7) == False\nassert func(16) == True\nassert func(20) == False\nassert func(31) == False\n```", "response_code": "\nassert func(10) == True\nassert func(7) == False\nassert func(16) == True\nassert func(20) == False\nassert func(31) == False\n"}
{"task_id": 85, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(r):\n    '''\n    WRITE A FUNCTION TO FIND THE CIRCUMFERENCE OF A CIRCLE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 6.283185307179586\nassert func(2) == 12.566370614359172\nassert func(5) == 31.41592653589793\nassert func(10) == 62.83185307179586\nassert func(0) == 0", "response_code": "assert func(1) == 6.283185307179586\nassert func(2) == 12.566370614359172\nassert func(5) == 31.41592653589793\nassert func(10) == 62.83185307179586\nassert func(0) == 0"}
{"task_id": 86, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    WRITE A FUNCTION TO EXTRACT ELEMENTS THAT OCCUR SINGLY IN THE GIVEN TUPLE LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (2, 3), (3, 4), (4, 5)]) == [(1, 2), (3, 4), (4, 5)]\nassert func([(1, 2), (2, 3), (2, 3), (4, 5)]) == [(1, 2), (4, 5)]\nassert func([(1, 2), (1, 2), (3, 4), (4, 5)]) == [(3, 4), (4, 5)]\nassert func([(1, 2), (2, 3), (3, 4), (3, 4)]) == [(1, 2), (2, 3)]\nassert func([(1, 2), (1, 2), (2, 3), (2, 3)]) == []\n```", "response_code": "\nassert func([(1, 2), (2, 3), (3, 4), (4, 5)]) == [(1, 2), (3, 4), (4, 5)]\nassert func([(1, 2), (2, 3), (2, 3), (4, 5)]) == [(1, 2), (4, 5)]\nassert func([(1, 2), (1, 2), (3, 4), (4, 5)]) == [(3, 4), (4, 5)]\nassert func([(1, 2), (2, 3), (3, 4), (3, 4)]) == [(1, 2), (2, 3)]\nassert func([(1, 2), (1, 2), (2, 3), (2, 3)]) == []\n"}
{"task_id": 87, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    WRITE A FUNCTION TO SORT A LIST OF ELEMENTS USING PANCAKE SORT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([3, 2, 4, 1]) == [1, 2, 3, 4]\nassert func([5, 2, 9, 1, 5]) == [1, 2, 5, 5, 9]\nassert func([10, 5, 3, 8, 6, 2]) == [2, 3, 5, 6, 8, 10]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n```", "response_code": "\nassert func([3, 2, 4, 1]) == [1, 2, 3, 4]\nassert func([5, 2, 9, 1, 5]) == [1, 2, 5, 5, 9]\nassert func([10, 5, 3, 8, 6, 2]) == [2, 3, 5, 6, 8, 10]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n"}
{"task_id": 88, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1,list2,list3):\n    '''\n    WRITE A FUNCTION TO COUNT THE SAME PAIR IN THREE GIVEN LISTS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], [2, 3, 4], [3, 4, 5]) == 1\nassert func([1, 2, 3], [4, 5, 6], [7, 8, 9]) == 0\nassert func([1, 2, 3], [1, 2, 3], [1, 2, 3]) == 3\nassert func([1, 2, 3], [1, 2, 3], [4, 5, 6]) == 2\nassert func([1, 2, 3], [4, 5, 6], [1, 2, 3]) == 2\n```", "response_code": "\nassert func([1, 2, 3], [2, 3, 4], [3, 4, 5]) == 1\nassert func([1, 2, 3], [4, 5, 6], [7, 8, 9]) == 0\nassert func([1, 2, 3], [1, 2, 3], [1, 2, 3]) == 3\nassert func([1, 2, 3], [1, 2, 3], [4, 5, 6]) == 2\nassert func([1, 2, 3], [4, 5, 6], [1, 2, 3]) == 2\n"}
{"task_id": 89, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(Input): \n    '''\n    WRITE A FUNCTION TO FIND NUMBER OF LISTS PRESENT IN THE GIVEN TUPLE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func((1, 2, [3, 4], [5, 6])) == 2\nassert func((1, [2, 3], [4, 5], [6, 7], [8, 9])) == 4\nassert func(([1, 2], [3, 4], [5, 6])) == 3\nassert func((1, 2, 3, 4, 5)) == 0\nassert func(()) == 0", "response_code": "assert func((1, 2, [3, 4], [5, 6])) == 2\nassert func((1, [2, 3], [4, 5], [6, 7], [8, 9])) == 4\nassert func(([1, 2], [3, 4], [5, 6])) == 3\nassert func((1, 2, 3, 4, 5)) == 0\nassert func(()) == 0"}
{"task_id": 90, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE MAXIMUM DIFFERENCE BETWEEN ANY TWO ELEMENTS IN A GIVEN ARRAY.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 4\nassert func([5, 3, 1, 7, 9]) == 8\nassert func([10, 3, 8, 6, 12]) == 9\nassert func([5, 5, 5, 5, 5]) == 0\nassert func([-1, -5, -3, -7, -2]) == 6\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 4\nassert func([5, 3, 1, 7, 9]) == 8\nassert func([10, 3, 8, 6, 12]) == 9\nassert func([5, 5, 5, 5, 5]) == 0\nassert func([-1, -5, -3, -7, -2]) == 6\n"}
{"task_id": 91, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a, b, n):\n    '''\n    WRITE A FUNCTION TO FIND X AND Y THAT SATISFIES AX + BY = N.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(2, 3, 7) == (7, 1)\nassert func(4, 5, 18) == (18, -6)\nassert func(6, 8, 10) == (10, 0)\nassert func(3, 7, 15) == (15, 0)\nassert func(5, 5, 25) == (25, 0)\n```", "response_code": "\nassert func(2, 3, 7) == (7, 1)\nassert func(4, 5, 18) == (18, -6)\nassert func(6, 8, 10) == (10, 0)\nassert func(3, 7, 15) == (15, 0)\nassert func(5, 5, 25) == (25, 0)\n"}
{"task_id": 92, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1, list2):\n    '''\n    WRITE A FUNCTION TO REMOVE ALL ELEMENTS FROM A GIVEN LIST PRESENT IN ANOTHER LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]\nassert func([10, 20, 30, 40, 50], [60, 70]) == [10, 20, 30, 40, 50]\nassert func([5, 10, 15, 20], [5, 10, 15, 20]) == []\nassert func([], [1, 2, 3]) == []\nassert func([1, 2, 3], []) == [1, 2, 3]\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]\nassert func([10, 20, 30, 40, 50], [60, 70]) == [10, 20, 30, 40, 50]\nassert func([5, 10, 15, 20], [5, 10, 15, 20]) == []\nassert func([], [1, 2, 3]) == []\nassert func([1, 2, 3], []) == [1, 2, 3]\n"}
{"task_id": 93, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    WRITE A FUNCTION TO CALCULATE THE SUM OF THE POSITIVE INTEGERS OF N+(N-2)+(N-4)... (UNTIL N-X =< 0).\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5) == 9\nassert func(10) == 30\nassert func(3) == 4\nassert func(7) == 16\nassert func(1) == 1\n```", "response_code": "\nassert func(5) == 9\nassert func(10) == 30\nassert func(3) == 4\nassert func(7) == 16\nassert func(1) == 1\n"}
{"task_id": 94, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from math import tan, pi\ndef func(s, l):\n    '''\n    WRITE A FUNCTION TO CALCULATE THE AREA OF A REGULAR POLYGON.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 5) == 10.825317547305485\nassert func(4, 7) == 24.727296937689\nassert func(5, 10) == 43.01193501472417\nassert func(6, 4) == 6.928203230275509\nassert func(8, 6) == 24.000000000000004\n```", "response_code": "\nassert func(3, 5) == 10.825317547305485\nassert func(4, 7) == 24.727296937689\nassert func(5, 10) == 43.01193501472417\nassert func(6, 4) == 6.928203230275509\nassert func(8, 6) == 24.000000000000004\n"}
{"task_id": 95, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math \ndef func(n): \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER THE SUM OF DIVISORS ARE SAME OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(6) == True\nassert func(28) == True\nassert func(12) == False\nassert func(496) == True\nassert func(10) == False\n```", "response_code": "\nassert func(6) == True\nassert func(28) == True\nassert func(12) == False\nassert func(496) == True\nassert func(10) == False\n"}
{"task_id": 96, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1): \n    '''\n    WRITE A PYTHON FUNCTION TO COUNT CHARACTERS AT SAME POSITION IN A GIVEN STRING (LOWER AND UPPERCASE CHARACTERS) AS IN ENGLISH ALPHABET.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"aBcDeF\") == 3\nassert func(\"Hello\") == 1\nassert func(\"aabbcc\") == 0\nassert func(\"AbCdEf\") == 3\nassert func(\"aAaAaA\") == 3\n```", "response_code": "\nassert func(\"aBcDeF\") == 3\nassert func(\"Hello\") == 1\nassert func(\"aabbcc\") == 0\nassert func(\"AbCdEf\") == 3\nassert func(\"aAaAaA\") == 3\n"}
{"task_id": 97, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(A): \n    '''\n    WRITE A PYTHON FUNCTION TO COUNT THE PAIRS WITH XOR AS AN EVEN NUMBER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 4\nassert func([2, 4, 6, 8, 10]) == 10\nassert func([3, 5, 7, 9, 11]) == 0\nassert func([0, 1, 2, 3, 4]) == 6\nassert func([10, 15, 20, 25, 30]) == 10\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 4\nassert func([2, 4, 6, 8, 10]) == 10\nassert func([3, 5, 7, 9, 11]) == 0\nassert func([0, 1, 2, 3, 4]) == 6\nassert func([10, 15, 20, 25, 30]) == 10\n"}
{"task_id": 98, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND SMALLEST POWER OF 2 GREATER THAN OR EQUAL TO N.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5) == 8\nassert func(10) == 16\nassert func(20) == 32\nassert func(50) == 64\nassert func(100) == 128\n```", "response_code": "\nassert func(5) == 8\nassert func(10) == 16\nassert func(20) == 32\nassert func(50) == 64\nassert func(100) == 128\n"}
{"task_id": 99, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a,x): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE FREQUENCY OF A NUMBER IN A GIVEN ARRAY.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 2, 2, 3, 1], 2) == 3\nassert func([5, 5, 5, 5, 5], 5) == 5\nassert func([1, 2, 3, 4, 5], 6) == 0\nassert func([1, 1, 1, 1, 1], 1) == 5\nassert func([], 10) == 0", "response_code": "assert func([1, 2, 3, 4, 2, 2, 3, 1], 2) == 3\nassert func([5, 5, 5, 5, 5], 5) == 5\nassert func([1, 2, 3, 4, 5], 6) == 0\nassert func([1, 1, 1, 1, 1], 1) == 5\nassert func([], 10) == 0"}
{"task_id": 100, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1, m, n):                                                                                                                                                                                                \n    '''\n    WRITE A FUNCTION TO FIND SUM OF THE NUMBERS IN A LIST BETWEEN THE INDICES OF A SPECIFIED RANGE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 1, 3) == 9\nassert func([10, 20, 30, 40, 50], 0, 2) == 60\nassert func([5, 10, 15, 20, 25], 2, 4) == 55\nassert func([2, 4, 6, 8, 10], 1, 4) == 28\nassert func([3, 6, 9, 12, 15], 0, 4) == 45\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 1, 3) == 9\nassert func([10, 20, 30, 40, 50], 0, 2) == 60\nassert func([5, 10, 15, 20, 25], 2, 4) == 55\nassert func([2, 4, 6, 8, 10], 1, 4) == 28\nassert func([3, 6, 9, 12, 15], 0, 4) == 45\n"}
{"task_id": 101, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(a):\n    '''\n    WRITE A FUNCTION TO FIND THE PERIMETER OF A PENTAGON.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5) == 25\nassert func(7) == 35\nassert func(10) == 50\nassert func(3) == 15\nassert func(12) == 60\n```", "response_code": "\nassert func(5) == 25\nassert func(7) == 35\nassert func(10) == 50\nassert func(3) == 15\nassert func(12) == 60\n"}
{"task_id": 102, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(s):\n    '''\n    WRITE A FUNCTION TO FIND THE OCCURENCE OF CHARACTERS 'STD' IN THE GIVEN STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"STUDENT\") == 1\nassert func(\"STUDY\") == 1\nassert func(\"STAND\") == 1\nassert func(\"STUDENTS\") == 1\nassert func(\"STUDYING\") == 1\n```", "response_code": "\nassert func(\"STUDENT\") == 1\nassert func(\"STUDY\") == 1\nassert func(\"STAND\") == 1\nassert func(\"STUDENTS\") == 1\nassert func(\"STUDYING\") == 1\n"}
{"task_id": 103, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tuple):\n    '''\n    WRITE A FUNCTION TO CHECK IF ALL THE ELEMENTS IN TUPLE HAVE SAME DATA TYPE OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func((1, 2, 3)) == True\nassert func(('a', 'b', 'c')) == True\nassert func((1, 'a', 3.5)) == False\nassert func((True, False, True)) == True\nassert func((1, 2, '3')) == False", "response_code": "assert func((1, 2, 3)) == True\nassert func(('a', 'b', 'c')) == True\nassert func((1, 'a', 3.5)) == False\nassert func((True, False, True)) == True\nassert func((1, 2, '3')) == False"}
{"task_id": 104, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr, n, x):\n    '''\n    WRITE A FUNCTION TO CHECK FOR MAJORITY ELEMENT IN THE GIVEN SORTED ARRAY.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert func([1, 2, 3, 3, 3, 3, 10], 7, 2) == False\nassert func([1, 2, 3, 3, 3, 3, 10], 7, 10) == False\nassert func([1, 2, 3, 3, 3, 3, 10], 7, 1) == False\nassert func([1, 2, 3, 3, 3, 3, 10], 7, 4) == False\n```", "response_code": "\nassert func([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert func([1, 2, 3, 3, 3, 3, 10], 7, 2) == False\nassert func([1, 2, 3, 3, 3, 3, 10], 7, 10) == False\nassert func([1, 2, 3, 3, 3, 3, 10], 7, 1) == False\nassert func([1, 2, 3, 3, 3, 3, 10], 7, 4) == False\n"}
{"task_id": 105, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A PYTHON FUNCTION TO COUNT SET BITS OF A GIVEN NUMBER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(0) == 0\nassert func(1) == 1\nassert func(5) == 2\nassert func(15) == 4\nassert func(255) == 8", "response_code": "assert func(0) == 0\nassert func(1) == 1\nassert func(5) == 2\nassert func(15) == 4\nassert func(255) == 8"}
{"task_id": 106, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str):\n    '''\n    WRITE A PYTHON FUNCTION TO REMOVE THE CHARACTERS WHICH HAVE ODD INDEX VALUES OF A GIVEN STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == \"hlo\"\nassert func(\"python\") == \"pto\"\nassert func(\"abcdefg\") == \"aceg\"\nassert func(\"12345\") == \"135\"\nassert func(\"a\") == \"a\"\n```", "response_code": "\nassert func(\"hello\") == \"hlo\"\nassert func(\"python\") == \"pto\"\nassert func(\"abcdefg\") == \"aceg\"\nassert func(\"12345\") == \"135\"\nassert func(\"a\") == \"a\"\n"}
{"task_id": 107, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a,b,c): \n    '''\n    WRITE A FUNCTION TO FIND MINIMUM OF THREE NUMBERS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1, 2, 3) == 1\nassert func(5, 5, 5) == 5\nassert func(-10, -5, -3) == -10\nassert func(100, 50, 75) == 50\nassert func(0, 0, 0) == 0\n```", "response_code": "\nassert func(1, 2, 3) == 1\nassert func(5, 5, 5) == 5\nassert func(-10, -5, -3) == -10\nassert func(100, 50, 75) == 50\nassert func(0, 0, 0) == 0\n"}
{"task_id": 108, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n,l,r):  \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER ALL THE BITS ARE UNSET IN THE GIVEN RANGE OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5, 1, 3) == False\nassert func(8, 2, 4) == True\nassert func(15, 0, 3) == False\nassert func(10, 2, 2) == True\nassert func(0, 0, 3) == True\n```", "response_code": "\nassert func(5, 1, 3) == False\nassert func(8, 2, 4) == True\nassert func(15, 0, 3) == False\nassert func(10, 2, 2) == True\nassert func(0, 0, 3) == True\n"}
{"task_id": 109, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr, n):\n    '''\n    WRITE A FUNCTION TO RE-ARRANGE THE ELEMENTS OF THE GIVEN ARRAY SO THAT ALL NEGATIVE ELEMENTS APPEAR BEFORE POSITIVE ONES.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([-1, 2, -3, 4, 5], 5) == [-1, -3, 2, 4, 5]\nassert func([1, -2, 3, -4, 5], 5) == [-2, -4, 1, 3, 5]\nassert func([5, 4, 3, 2, 1], 5) == [5, 4, 3, 2, 1]\nassert func([-1, -2, -3, -4, -5], 5) == [-1, -2, -3, -4, -5]\nassert func([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\n```", "response_code": "\nassert func([-1, 2, -3, 4, 5], 5) == [-1, -3, 2, 4, 5]\nassert func([1, -2, 3, -4, 5], 5) == [-2, -4, 1, 3, 5]\nassert func([5, 4, 3, 2, 1], 5) == [5, 4, 3, 2, 1]\nassert func([-1, -2, -3, -4, -5], 5) == [-1, -2, -3, -4, -5]\nassert func([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\n"}
{"task_id": 110, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1,char):\n    '''\n    WRITE A FUNCTION TO REPLACE BLANK SPACES WITH ANY CHARACTER IN A STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello world\", \"-\") == \"hello-world\"\nassert func(\"python is fun\", \"*\") == \"python*is*fun\"\nassert func(\"a b c d e\", \"+\") == \"a+b+c+d+e\"\nassert func(\"123 456 789\", \"#\") == \"123#456#789\"\nassert func(\"apple banana cherry\", \"&\") == \"apple&banana&cherry\"", "response_code": "assert func(\"hello world\", \"-\") == \"hello-world\"\nassert func(\"python is fun\", \"*\") == \"python*is*fun\"\nassert func(\"a b c d e\", \"+\") == \"a+b+c+d+e\"\nassert func(\"123 456 789\", \"#\") == \"123#456#789\"\nassert func(\"apple banana cherry\", \"&\") == \"apple&banana&cherry\""}
{"task_id": 111, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import heapq\ndef func(list1,n):\n    '''\n    WRITE A FUNCTION TO GET THE N LARGEST ITEMS FROM A DATASET.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([4, 2, 7, 1, 5], 2) == [7, 5]\nassert func([10, 20, 30, 40, 50], 3) == [50, 40, 30]\nassert func([1, 3, 5, 7, 9], 1) == [9]\nassert func([100, 200, 300, 400, 500], 5) == [500, 400, 300, 200, 100]\nassert func([8, 6, 4, 2, 0], 4) == [8, 6, 4, 2]\n```", "response_code": "\nassert func([4, 2, 7, 1, 5], 2) == [7, 5]\nassert func([10, 20, 30, 40, 50], 3) == [50, 40, 30]\nassert func([1, 3, 5, 7, 9], 1) == [9]\nassert func([100, 200, 300, 400, 500], 5) == [500, 400, 300, 200, 100]\nassert func([8, 6, 4, 2, 0], 4) == [8, 6, 4, 2]\n"}
{"task_id": 112, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(r,h):\n    '''\n    WRITE A FUNCTION TO FIND THE LATERAL SURFACE AREA OF A CYLINDER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 4) == 75.39822368615503\nassert func(5, 2) == 94.24777960769379\nassert func(7, 3) == 197.9203379427476\nassert func(2, 6) == 75.39822368615503\nassert func(4, 5) == 125.66370614359172\n```", "response_code": "\nassert func(3, 4) == 75.39822368615503\nassert func(5, 2) == 94.24777960769379\nassert func(7, 3) == 197.9203379427476\nassert func(2, 6) == 75.39822368615503\nassert func(4, 5) == 125.66370614359172\n"}
{"task_id": 113, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l):\n    '''\n    WRITE A FUNCTION TO FIND THE VOLUME OF A CUBE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3) == 27\nassert func(5) == 125\nassert func(0) == 0\nassert func(10) == 1000\nassert func(2.5) == 15.625\n```", "response_code": "\nassert func(3) == 27\nassert func(5) == 125\nassert func(0) == 0\nassert func(10) == 1000\nassert func(2.5) == 15.625\n"}
{"task_id": 114, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A PYTHON FUNCTION TO SET ALL EVEN BITS OF A GIVEN NUMBER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(10) == 10  # 10 in binary is 1010, all even bits are already set\nassert func(5) == 10   # 5 in binary is 0101, setting all even bits results in 1010\nassert func(0) == 0    # 0 in binary is 0, all even bits are already set\nassert func(15) == 170 # 15 in binary is 1111, setting all even bits results in 10101010\nassert func(255) == 170 # 255 in binary is 11111111, setting all even bits results in 10101010\n```", "response_code": "\nassert func(10) == 10  # 10 in binary is 1010, all even bits are already set\nassert func(5) == 10   # 5 in binary is 0101, setting all even bits results in 1010\nassert func(0) == 0    # 0 in binary is 0, all even bits are already set\nassert func(15) == 170 # 15 in binary is 1111, setting all even bits results in 10101010\nassert func(255) == 170 # 255 in binary is 11111111, setting all even bits results in 10101010\n"}
{"task_id": 115, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from collections import Counter \ndef func(test_list):\n    '''\n    WRITE A FUNCTION TO CHECK THE OCCURRENCES OF RECORDS WHICH OCCUR SIMILAR TIMES IN THE GIVEN TUPLES.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\ntest_list = [(1, 2), (3, 4), (1, 2), (3, 4), (5, 6)]\nassert func(test_list) == {(1, 2): 2, (3, 4): 2}\n\ntest_list = [(1, 2), (3, 4), (5, 6)]\nassert func(test_list) == {(1, 2): 1, (3, 4): 1, (5, 6): 1}\n\ntest_list = [(1, 2), (1, 2), (1, 2)]\nassert func(test_list) == {(1, 2): 3}\n\ntest_list = [(1, 2), (3, 4), (5, 6), (1, 2), (3, 4), (5, 6)]\nassert func(test_list) == {(1, 2): 2, (3, 4): 2, (5, 6): 2}\n\ntest_list = [(1, 2), (3, 4), (5, 6), (1, 2), (3, 4), (5, 6), (1, 2), (3, 4), (5, 6)]\nassert func(test_list) == {(1, 2): 3, (3, 4): 3, (5, 6): 3}\n```", "response_code": "\ntest_list = [(1, 2), (3, 4), (1, 2), (3, 4), (5, 6)]\nassert func(test_list) == {(1, 2): 2, (3, 4): 2}\n\ntest_list = [(1, 2), (3, 4), (5, 6)]\nassert func(test_list) == {(1, 2): 1, (3, 4): 1, (5, 6): 1}\n\ntest_list = [(1, 2), (1, 2), (1, 2)]\nassert func(test_list) == {(1, 2): 3}\n\ntest_list = [(1, 2), (3, 4), (5, 6), (1, 2), (3, 4), (5, 6)]\nassert func(test_list) == {(1, 2): 2, (3, 4): 2, (5, 6): 2}\n\ntest_list = [(1, 2), (3, 4), (5, 6), (1, 2), (3, 4), (5, 6), (1, 2), (3, 4), (5, 6)]\nassert func(test_list) == {(1, 2): 3, (3, 4): 3, (5, 6): 3}\n"}
{"task_id": 116, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str): \n    '''\n    WRITE A PYTHON FUNCTION TO COUNT NUMBER OF NON-EMPTY SUBSTRINGS OF A GIVEN STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"abc\") == 6\nassert func(\"hello\") == 15\nassert func(\"12345\") == 15\nassert func(\"a\") == 1\nassert func(\"\") == 0\n```", "response_code": "\nassert func(\"abc\") == 6\nassert func(\"hello\") == 15\nassert func(\"12345\") == 15\nassert func(\"a\") == 1\nassert func(\"\") == 0\n"}
{"task_id": 117, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(m,n): \n    '''\n    WRITE A FUNCTION TO FIND THE NUMBER OF POSSIBLE SEQUENCES OF LENGTH N SUCH THAT EACH OF THE NEXT ELEMENT IS GREATER THAN OR EQUAL TO TWICE OF THE PREVIOUS ELEMENT BUT LESS THAN OR EQUAL TO M.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 2) == 3\nassert func(4, 3) == 6\nassert func(5, 4) == 10\nassert func(6, 5) == 15\nassert func(7, 6) == 21\n```", "response_code": "\nassert func(3, 2) == 3\nassert func(4, 3) == 6\nassert func(5, 4) == 10\nassert func(6, 5) == 15\nassert func(7, 6) == 21\n"}
{"task_id": 118, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1,list2):\n    '''\n    WRITE A FUNCTION TO REPLACE THE LAST ELEMENT OF THE LIST WITH ANOTHER LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], [4, 5]) == [1, 2, 4, 5]\nassert func([5, 6, 7, 8], [9, 10, 11]) == [5, 6, 7, 9, 10, 11]\nassert func(['a', 'b', 'c'], ['d']) == ['a', 'b', 'd']\nassert func([], [1, 2, 3]) == [1, 2, 3]\nassert func([10], [20, 30, 40]) == [10, 20, 30, 40]\n```", "response_code": "\nassert func([1, 2, 3], [4, 5]) == [1, 2, 4, 5]\nassert func([5, 6, 7, 8], [9, 10, 11]) == [5, 6, 7, 9, 10, 11]\nassert func(['a', 'b', 'c'], ['d']) == ['a', 'b', 'd']\nassert func([], [1, 2, 3]) == [1, 2, 3]\nassert func([10], [20, 30, 40]) == [10, 20, 30, 40]\n"}
{"task_id": 119, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1):\n    '''\n    WRITE A FUNCTION TO COUNT TOTAL CHARACTERS IN A STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\") == 5\nassert func(\"12345\") == 5\nassert func(\"\") == 0\nassert func(\"a b c d e\") == 9\nassert func(\"special characters: !@#$%^&*()\") == 26", "response_code": "assert func(\"hello\") == 5\nassert func(\"12345\") == 5\nassert func(\"\") == 0\nassert func(\"a b c d e\") == 9\nassert func(\"special characters: !@#$%^&*()\") == 26"}
{"task_id": 120, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math  \ndef func(N): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE NEXT PERFECT SQUARE GREATER THAN A GIVEN NUMBER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(10) == 16\nassert func(25) == 36\nassert func(50) == 64\nassert func(100) == 121\nassert func(200) == 225\n```", "response_code": "\nassert func(10) == 16\nassert func(25) == 36\nassert func(50) == 64\nassert func(100) == 121\nassert func(200) == 225\n"}
{"task_id": 121, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr): \n    '''\n    WRITE A FUNCTION TO FIND THE MAXIMUM SUM OF BI-TONIC SUB-SEQUENCE FOR THE GIVEN ARRAY.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 15\nassert func([5, 4, 3, 2, 1]) == 15\nassert func([1, 2, 3, 2, 1]) == 9\nassert func([1, 2, 3, 4, 5, 4, 3, 2, 1]) == 20\nassert func([5, 4, 3, 2, 1, 2, 3, 4, 5]) == 20\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 15\nassert func([5, 4, 3, 2, 1]) == 15\nassert func([1, 2, 3, 2, 1]) == 9\nassert func([1, 2, 3, 4, 5, 4, 3, 2, 1]) == 20\nassert func([5, 4, 3, 2, 1, 2, 3, 4, 5]) == 20\n"}
{"task_id": 122, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(number):\n    '''\n    WRITE A FUNCTION FOR COMPUTING SQUARE ROOTS USING THE BABYLONIAN METHOD.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(16) == 4\nassert func(25) == 5\nassert func(144) == 12\nassert func(81) == 9\nassert func(100) == 10\n```", "response_code": "\nassert func(16) == 4\nassert func(25) == 5\nassert func(144) == 12\nassert func(81) == 9\nassert func(100) == 10\n"}
{"task_id": 123, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str): \n    '''\n    WRITE A FUNCTION TO FIND THE LONGEST PALINDROMIC SUBSEQUENCE IN THE GIVEN STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"abdbca\") == \"bdb\"\nassert func(\"cbbd\") == \"bb\"\nassert func(\"pwwkew\") == \"ww\"\nassert func(\"racecar\") == \"racecar\"\nassert func(\"abcde\") == \"a\"\n```", "response_code": "\nassert func(\"abdbca\") == \"bdb\"\nassert func(\"cbbd\") == \"bb\"\nassert func(\"pwwkew\") == \"ww\"\nassert func(\"racecar\") == \"racecar\"\nassert func(\"abcde\") == \"a\"\n"}
{"task_id": 124, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    WRITE A FUNCTION TO CALCULATE THE HARMONIC SUM OF N-1.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 0\nassert func(2) == 1\nassert func(5) == 2.283333333333333\nassert func(10) == 2.9289682539682538\nassert func(20) == 3.597739657143682\n```", "response_code": "\nassert func(1) == 0\nassert func(2) == 1\nassert func(5) == 2.283333333333333\nassert func(10) == 2.9289682539682538\nassert func(20) == 3.597739657143682\n"}
{"task_id": 125, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(array_nums1,array_nums2):\n    '''\n    WRITE A FUNCTION TO FIND THE INTERSECTION OF TWO ARRAYS USING LAMBDA FUNCTION.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]) == [4, 5]\nassert func([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == []\nassert func([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3], [4, 5, 6]) == []\nassert func([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]) == [4, 5]\nassert func([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == []\nassert func([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3], [4, 5, 6]) == []\nassert func([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n"}
{"task_id": 126, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(tup, x): \n    '''\n    WRITE A PYTHON FUNCTION TO COUNT THE OCCCURENCES OF AN ELEMENT IN A TUPLE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3, 4, 1, 2, 1), 1) == 3\nassert func(('a', 'b', 'c', 'a', 'a', 'd'), 'a') == 3\nassert func((1, 2, 3, 4, 5), 6) == 0\nassert func(('apple', 'banana', 'apple', 'cherry'), 'apple') == 2\nassert func((), 1) == 0\n```", "response_code": "\nassert func((1, 2, 3, 4, 1, 2, 1), 1) == 3\nassert func(('a', 'b', 'c', 'a', 'a', 'd'), 'a') == 3\nassert func((1, 2, 3, 4, 5), 6) == 0\nassert func(('apple', 'banana', 'apple', 'cherry'), 'apple') == 2\nassert func((), 1) == 0\n"}
{"task_id": 127, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list,element):\n    '''\n    WRITE A FUNCTION TO INSERT AN ELEMENT BEFORE EACH ELEMENT OF A LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3], 0) == [0, 1, 0, 2, 0, 3]\nassert func(['a', 'b', 'c'], 'z') == ['z', 'a', 'z', 'b', 'z', 'c']\nassert func([], 5) == []\nassert func([10], 100) == [100, 10]\nassert func([True, False], False) == [False, True, False, False]", "response_code": "assert func([1, 2, 3], 0) == [0, 1, 0, 2, 0, 3]\nassert func(['a', 'b', 'c'], 'z') == ['z', 'a', 'z', 'b', 'z', 'c']\nassert func([], 5) == []\nassert func([10], 100) == [100, 10]\nassert func([True, False], False) == [False, True, False, False]"}
{"task_id": 128, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import cmath  \ndef func(numbers):    \n    '''\n    WRITE A PYTHON FUNCTION TO CONVERT COMPLEX NUMBERS TO POLAR COORDINATES.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1+1j, 2-3j]) == [(1.4142135623730951, 0.7853981633974483), (3.605551275463989, -0.982793723247329)]\nassert func([3+4j, -2+2j, 5-12j]) == [(5.0, 0.9272952180016122), (2.8284271247461903, 2.356194490192345), (13.0, -1.176005207095135)]\nassert func([0+1j, 1+0j, -1-1j]) == [(1.0, 1.5707963267948966), (1.0, 0.0), (1.4142135623730951, -2.356194490192345)]\nassert func([2+2j, -3-4j, 0+5j]) == [(2.8284271247461903, 0.7853981633974483), (5.0, -2.214297435588181), (5.0, 1.5707963267948966)]\nassert func([1+0j, 0+1j, -1+0j, 0-1j]) == [(1.0, 0.0), (1.0, 1.5707963267948966), (1.0, 3.141592653589793), (1.0, -1.5707963267948966)]\n```", "response_code": "\nassert func([1+1j, 2-3j]) == [(1.4142135623730951, 0.7853981633974483), (3.605551275463989, -0.982793723247329)]\nassert func([3+4j, -2+2j, 5-12j]) == [(5.0, 0.9272952180016122), (2.8284271247461903, 2.356194490192345), (13.0, -1.176005207095135)]\nassert func([0+1j, 1+0j, -1-1j]) == [(1.0, 1.5707963267948966), (1.0, 0.0), (1.4142135623730951, -2.356194490192345)]\nassert func([2+2j, -3-4j, 0+5j]) == [(2.8284271247461903, 0.7853981633974483), (5.0, -2.214297435588181), (5.0, 1.5707963267948966)]\nassert func([1+0j, 0+1j, -1+0j, 0-1j]) == [(1.0, 0.0), (1.0, 1.5707963267948966), (1.0, 3.141592653589793), (1.0, -1.5707963267948966)]\n"}
{"task_id": 129, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A PYTHON FUNCTION TO COUNT INTEGERS FROM A GIVEN LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 5\nassert func([0, 1, 2, 3, 4, 5]) == 6\nassert func([-1, -2, -3, -4, -5]) == 5\nassert func([1.5, 2.7, 3.9, 4.2, 5.6]) == 0\nassert func([]) == 0\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 5\nassert func([0, 1, 2, 3, 4, 5]) == 6\nassert func([-1, -2, -3, -4, -5]) == 5\nassert func([1.5, 2.7, 3.9, 4.2, 5.6]) == 0\nassert func([]) == 0\n"}
{"task_id": 130, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from itertools import combinations_with_replacement \ndef func(l, n):\n    '''\n    WRITE A FUNCTION TO CHOOSE SPECIFIED NUMBER OF COLOURS FROM THREE DIFFERENT COLOURS AND GENERATE ALL THE COMBINATIONS WITH REPETITIONS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['red', 'green', 'blue'], 2) == [('red', 'red'), ('red', 'green'), ('red', 'blue'), ('green', 'green'), ('green', 'blue'), ('blue', 'blue')]\nassert func(['yellow', 'purple', 'orange'], 3) == [('yellow', 'yellow', 'yellow'), ('yellow', 'yellow', 'purple'), ('yellow', 'yellow', 'orange'), ('yellow', 'purple', 'purple'), ('yellow', 'purple', 'orange'), ('yellow', 'orange', 'orange'), ('purple', 'purple', 'purple'), ('purple', 'purple', 'orange'), ('purple', 'orange', 'orange'), ('orange', 'orange', 'orange')]\nassert func(['white', 'black', 'gray'], 1) == [('white',), ('black',), ('gray',)]\nassert func(['pink', 'brown', 'beige'], 2) == [('pink', 'pink'), ('pink', 'brown'), ('pink', 'beige'), ('brown', 'brown'), ('brown', 'beige'), ('beige', 'beige')]\nassert func(['cyan', 'magenta', 'lime'], 3) == [('cyan', 'cyan', 'cyan'), ('cyan', 'cyan', 'magenta'), ('cyan', 'cyan', 'lime'), ('cyan', 'magenta', 'magenta'), ('cyan', 'magenta', 'lime'), ('cyan', 'lime', 'lime'), ('magenta', 'magenta', 'magenta'), ('magenta', 'magenta', 'lime'), ('magenta', 'lime', 'lime'), ('lime', 'lime', 'lime')]\n```", "response_code": "\nassert func(['red', 'green', 'blue'], 2) == [('red', 'red'), ('red', 'green'), ('red', 'blue'), ('green', 'green'), ('green', 'blue'), ('blue', 'blue')]\nassert func(['yellow', 'purple', 'orange'], 3) == [('yellow', 'yellow', 'yellow'), ('yellow', 'yellow', 'purple'), ('yellow', 'yellow', 'orange'), ('yellow', 'purple', 'purple'), ('yellow', 'purple', 'orange'), ('yellow', 'orange', 'orange'), ('purple', 'purple', 'purple'), ('purple', 'purple', 'orange'), ('purple', 'orange', 'orange'), ('orange', 'orange', 'orange')]\nassert func(['white', 'black', 'gray'], 1) == [('white',), ('black',), ('gray',)]\nassert func(['pink', 'brown', 'beige'], 2) == [('pink', 'pink'), ('pink', 'brown'), ('pink', 'beige'), ('brown', 'brown'), ('brown', 'beige'), ('beige', 'beige')]\nassert func(['cyan', 'magenta', 'lime'], 3) == [('cyan', 'cyan', 'cyan'), ('cyan', 'cyan', 'magenta'), ('cyan', 'cyan', 'lime'), ('cyan', 'magenta', 'magenta'), ('cyan', 'magenta', 'lime'), ('cyan', 'lime', 'lime'), ('magenta', 'magenta', 'magenta'), ('magenta', 'magenta', 'lime'), ('magenta', 'lime', 'lime'), ('lime', 'lime', 'lime')]\n"}
{"task_id": 131, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    WRITE A PYTHON FUNCTION TO COUNT THE NUMBER OF PRIME NUMBERS LESS THAN A GIVEN NON-NEGATIVE NUMBER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(10) == 4\nassert func(20) == 8\nassert func(30) == 10\nassert func(50) == 15\nassert func(100) == 25\n```", "response_code": "\nassert func(10) == 4\nassert func(20) == 8\nassert func(30) == 10\nassert func(50) == 15\nassert func(100) == 25\n"}
{"task_id": 132, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a,b):\n    '''\n    WRITE A FUNCTION TO SWAP TWO NUMBERS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(2, 3) == (3, 2)\nassert func(-5, 10) == (10, -5)\nassert func(0, 7) == (7, 0)\nassert func(100, 200) == (200, 100)\nassert func(-3, -8) == (-8, -3)\n```", "response_code": "\nassert func(2, 3) == (3, 2)\nassert func(-5, 10) == (10, -5)\nassert func(0, 7) == (7, 0)\nassert func(100, 200) == (200, 100)\nassert func(-3, -8) == (-8, -3)\n"}
{"task_id": 133, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    WRITE A FUNCTION TO MAXIMIZE THE GIVEN TWO TUPLES.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (4, 5, 6)) == (4, 5, 6)\nassert func((10, 20, 30), (4, 5, 6)) == (10, 20, 30)\nassert func((1, 2, 3), (1, 2, 3)) == (1, 2, 3)\nassert func((100, 200, 300), (50, 60, 70)) == (100, 200, 300)\nassert func((5, 10, 15), (5, 10, 15)) == (5, 10, 15)\n```", "response_code": "\nassert func((1, 2, 3), (4, 5, 6)) == (4, 5, 6)\nassert func((10, 20, 30), (4, 5, 6)) == (10, 20, 30)\nassert func((1, 2, 3), (1, 2, 3)) == (1, 2, 3)\nassert func((100, 200, 300), (50, 60, 70)) == (100, 200, 300)\nassert func((5, 10, 15), (5, 10, 15)) == (5, 10, 15)\n"}
{"task_id": 134, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A FUNCTION TO FIND THE NTH NEWMAN\u2013SHANKS\u2013WILLIAMS PRIME NUMBER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 17\nassert func(2) == 41\nassert func(3) == 59\nassert func(4) == 89\nassert func(5) == 139", "response_code": "assert func(1) == 17\nassert func(2) == 41\nassert func(3) == 59\nassert func(4) == 89\nassert func(5) == 139"}
{"task_id": 135, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    WRITE A FUNCTION TO PERFORM MATHEMATICAL DIVISION OPERATION ACROSS THE GIVEN TUPLES.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((10, 20), (2, 5)) == (5.0, 4.0)\nassert func((15, 30), (3, 6)) == (5.0, 5.0)\nassert func((25, 50), (5, 10)) == (5.0, 5.0)\nassert func((8, 16), (2, 4)) == (4.0, 4.0)\nassert func((18, 36), (3, 6)) == (6.0, 6.0)\n```", "response_code": "\nassert func((10, 20), (2, 5)) == (5.0, 4.0)\nassert func((15, 30), (3, 6)) == (5.0, 5.0)\nassert func((25, 50), (5, 10)) == (5.0, 5.0)\nassert func((8, 16), (2, 4)) == (4.0, 4.0)\nassert func((18, 36), (3, 6)) == (6.0, 6.0)\n"}
{"task_id": 136, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1, L):\n    '''\n    WRITE A FUNCTION TO SPLIT A GIVEN LIST INTO TWO PARTS WHERE THE LENGTH OF THE FIRST PART OF THE LIST IS GIVEN.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])\nassert func([10, 20, 30, 40, 50, 60], 4) == ([10, 20, 30, 40], [50, 60])\nassert func([100, 200, 300, 400], 0) == ([], [100, 200, 300, 400])\nassert func([7, 8, 9], 3) == ([7, 8, 9], [])\nassert func([11, 22, 33, 44, 55, 66, 77], 5) == ([11, 22, 33, 44, 55], [66, 77])\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])\nassert func([10, 20, 30, 40, 50, 60], 4) == ([10, 20, 30, 40], [50, 60])\nassert func([100, 200, 300, 400], 0) == ([], [100, 200, 300, 400])\nassert func([7, 8, 9], 3) == ([7, 8, 9], [])\nassert func([11, 22, 33, 44, 55, 66, 77], 5) == ([11, 22, 33, 44, 55], [66, 77])\n"}
{"task_id": 137, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(h_age):\n    '''\n    WRITE A FUNCTION TO CALCULATE A DOG'S AGE IN DOG'S YEARS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 15\nassert func(2) == 24\nassert func(5) == 39\nassert func(10) == 64\nassert func(15) == 84\n```", "response_code": "\nassert func(1) == 15\nassert func(2) == 24\nassert func(5) == 39\nassert func(10) == 64\nassert func(15) == 84\n"}
{"task_id": 138, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(S, step):\n    '''\n    WRITE A FUNCTION TO SPLIT A LIST FOR EVERY NTH ELEMENT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == [[1, 2], [3, 4], [5, 6], [7, 8], [9]]\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == [[1], [2], [3], [4], [5], [6], [7], [8], [9]]\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == [[1, 2, 3, 4, 5], [6, 7, 8, 9]]\n```", "response_code": "\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == [[1, 2], [3, 4], [5, 6], [7, 8], [9]]\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == [[1], [2], [3], [4], [5], [6], [7], [8], [9]]\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == [[1, 2, 3, 4, 5], [6, 7, 8, 9]]\n"}
{"task_id": 139, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l):\n    '''\n    WRITE A FUNCTION TO FIND THE LATERAL SURFACE AREA OF A CUBE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3) == 54\nassert func(5) == 100\nassert func(0) == 0\nassert func(10) == 600\nassert func(2.5) == 30\n```", "response_code": "\nassert func(3) == 54\nassert func(5) == 100\nassert func(0) == 0\nassert func(10) == 600\nassert func(2.5) == 30\n"}
{"task_id": 140, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):  \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SUM OF SQUARES OF FIRST N ODD NATURAL NUMBERS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1  # 1^2 = 1\nassert func(2) == 10  # 1^2 + 3^2 = 1 + 9 = 10\nassert func(3) == 35  # 1^2 + 3^2 + 5^2 = 1 + 9 + 25 = 35\nassert func(4) == 84  # 1^2 + 3^2 + 5^2 + 7^2 = 1 + 9 + 25 + 49 = 84\nassert func(5) == 165  # 1^2 + 3^2 + 5^2 + 7^2 + 9^2 = 1 + 9 + 25 + 49 + 81 = 165\n```", "response_code": "\nassert func(1) == 1  # 1^2 = 1\nassert func(2) == 10  # 1^2 + 3^2 = 1 + 9 = 10\nassert func(3) == 35  # 1^2 + 3^2 + 5^2 = 1 + 9 + 25 = 35\nassert func(4) == 84  # 1^2 + 3^2 + 5^2 + 7^2 = 1 + 9 + 25 + 49 = 84\nassert func(5) == 165  # 1^2 + 3^2 + 5^2 + 7^2 + 9^2 = 1 + 9 + 25 + 49 + 81 = 165\n"}
{"task_id": 141, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A FUNCTION TO FIND THE N'TH STAR NUMBER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 6\nassert func(2) == 28\nassert func(3) == 120\nassert func(4) == 496\nassert func(5) == 2016\n```", "response_code": "\nassert func(1) == 6\nassert func(2) == 28\nassert func(3) == 120\nassert func(4) == 496\nassert func(5) == 2016\n"}
{"task_id": 142, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(k):\n    '''\n    WRITE A FUNCTION TO FIND THE ASCII VALUE OF A CHARACTER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func('A') == 65\nassert func('a') == 97\nassert func('1') == 49\nassert func('!') == 33\nassert func(' ') == 32", "response_code": "assert func('A') == 65\nassert func('a') == 97\nassert func('1') == 49\nassert func('!') == 33\nassert func(' ') == 32"}
{"task_id": 143, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):  \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SUM OF EVEN NUMBERS AT EVEN POSITIONS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5, 6]) == 6\nassert func([2, 4, 6, 8, 10]) == 18\nassert func([1, 3, 5, 7, 9]) == 0\nassert func([2, 3, 4, 5, 6, 7, 8, 9]) == 18\nassert func([10, 20, 30, 40, 50, 60]) == 120\n```", "response_code": "\nassert func([1, 2, 3, 4, 5, 6]) == 6\nassert func([2, 4, 6, 8, 10]) == 18\nassert func([1, 3, 5, 7, 9]) == 0\nassert func([2, 3, 4, 5, 6, 7, 8, 9]) == 18\nassert func([10, 20, 30, 40, 50, 60]) == 120\n"}
{"task_id": 144, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SUM OF FIFTH POWER OF FIRST N EVEN NATURAL NUMBERS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 32\nassert func(2) == 288\nassert func(3) == 1452\nassert func(4) == 5000\nassert func(5) == 13032", "response_code": "assert func(1) == 32\nassert func(2) == 288\nassert func(3) == 1452\nassert func(4) == 5000\nassert func(5) == 13032"}
{"task_id": 145, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    WRITE A FUNCTION TO PERFOM THE REAR ELEMENT EXTRACTION FROM LIST OF TUPLES RECORDS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [3, 6, 9]\nassert func([(10, 20, 30), (40, 50, 60)]) == [30, 60]\nassert func([(100, 200, 300)]) == [300]\nassert func([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]\nassert func([(7,), (8,), (9,)]) == [7, 8, 9]\n```", "response_code": "\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [3, 6, 9]\nassert func([(10, 20, 30), (40, 50, 60)]) == [30, 60]\nassert func([(100, 200, 300)]) == [300]\nassert func([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]\nassert func([(7,), (8,), (9,)]) == [7, 8, 9]\n"}
{"task_id": 146, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    WRITE A FUNCTION TO SUBSTRACT THE CONTENTS OF ONE TUPLE WITH CORRESPONDING INDEX OF OTHER TUPLE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (1, 1, 1)) == (0, 1, 2)\nassert func((5, 10, 15), (2, 4, 6)) == (3, 6, 9)\nassert func((0, 0, 0), (1, 2, 3)) == (-1, -2, -3)\nassert func((100, 200, 300), (10, 20, 30)) == (90, 180, 270)\nassert func((2, 4, 6), (2, 4, 6)) == (0, 0, 0)\n```", "response_code": "\nassert func((1, 2, 3), (1, 1, 1)) == (0, 1, 2)\nassert func((5, 10, 15), (2, 4, 6)) == (3, 6, 9)\nassert func((0, 0, 0), (1, 2, 3)) == (-1, -2, -3)\nassert func((100, 200, 300), (10, 20, 30)) == (90, 180, 270)\nassert func((2, 4, 6), (2, 4, 6)) == (0, 0, 0)\n"}
{"task_id": 147, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math  \ndef func( n): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND SUM OF EVEN INDEX BINOMIAL COEFFICIENTS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 1\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 3\nassert func(4) == 5\n```", "response_code": "\nassert func(0) == 1\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 3\nassert func(4) == 5\n"}
{"task_id": 148, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(r,h):\n    '''\n    WRITE A FUNCTION TO FIND THE VOLUME OF A CYLINDER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1, 1) == 3.141592653589793\nassert func(2, 3) == 37.69911184307752\nassert func(0, 5) == 0\nassert func(4, 2) == 100.53096491487338\nassert func(3, 4) == 113.09733552923255\n```", "response_code": "\nassert func(1, 1) == 3.141592653589793\nassert func(2, 3) == 37.69911184307752\nassert func(0, 5) == 0\nassert func(4, 2) == 100.53096491487338\nassert func(3, 4) == 113.09733552923255\n"}
{"task_id": 149, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(dict,n):\n    '''\n    WRITE A FUNCTION TO FILTER A DICTIONARY BASED ON VALUES.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test case 1\nassert func({'a': 1, 'b': 2, 'c': 3, 'd': 4}, 2) == {'b': 2, 'c': 3, 'd': 4}\n\n# Test case 2\nassert func({'apple': 5, 'banana': 3, 'cherry': 7, 'date': 2}, 4) == {'apple': 5, 'cherry': 7}\n\n# Test case 3\nassert func({'x': 10, 'y': 20, 'z': 30}, 15) == {'y': 20, 'z': 30}\n\n# Test case 4\nassert func({'red': 100, 'green': 50, 'blue': 75}, 60) == {'red': 100, 'blue': 75}\n\n# Test case 5\nassert func({'one': 1, 'two': 2, 'three': 3, 'four': 4}, 0) == {'one': 1, 'two': 2, 'three': 3, 'four': 4}\n```", "response_code": "\n# Test case 1\nassert func({'a': 1, 'b': 2, 'c': 3, 'd': 4}, 2) == {'b': 2, 'c': 3, 'd': 4}\n\n# Test case 2\nassert func({'apple': 5, 'banana': 3, 'cherry': 7, 'date': 2}, 4) == {'apple': 5, 'cherry': 7}\n\n# Test case 3\nassert func({'x': 10, 'y': 20, 'z': 30}, 15) == {'y': 20, 'z': 30}\n\n# Test case 4\nassert func({'red': 100, 'green': 50, 'blue': 75}, 60) == {'red': 100, 'blue': 75}\n\n# Test case 5\nassert func({'one': 1, 'two': 2, 'three': 3, 'four': 4}, 0) == {'one': 1, 'two': 2, 'three': 3, 'four': 4}\n"}
{"task_id": 150, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    WRITE A FUNCTION TO FIND THE ELEMENT COUNT THAT OCCURS BEFORE THE RECORD IN THE GIVEN TUPLE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3, 4, 5)) == [0, 1, 2, 3, 4]\nassert func((3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5)) == [0, 0, 1, 1, 2, 3, 0, 2, 3, 4, 4]\nassert func((1, 1, 1, 1, 1)) == [0, 0, 0, 0, 0]\nassert func((5, 4, 3, 2, 1)) == [0, 1, 2, 3, 4]\nassert func((1, 2, 3, 2, 1)) == [0, 0, 0, 1, 2]\n```", "response_code": "\nassert func((1, 2, 3, 4, 5)) == [0, 1, 2, 3, 4]\nassert func((3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5)) == [0, 0, 1, 1, 2, 3, 0, 2, 3, 4, 4]\nassert func((1, 1, 1, 1, 1)) == [0, 0, 0, 0, 0]\nassert func((5, 4, 3, 2, 1)) == [0, 1, 2, 3, 4]\nassert func((1, 2, 3, 2, 1)) == [0, 0, 0, 1, 2]\n"}
{"task_id": 151, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A FUNCTION TO FIND THE NTH DECAGONAL NUMBER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 10\nassert func(5) == 65\nassert func(10) == 190\nassert func(15) == 325\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 10\nassert func(5) == 65\nassert func(10) == 190\nassert func(15) == 325\n"}
{"task_id": 152, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(dlist, item):\n    '''\n    WRITE A FUNCTION TO SEARCH AN ELEMENT IN THE GIVEN ARRAY BY USING SEQUENTIAL SEARCH.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 3) == True\nassert func([10, 20, 30, 40, 50], 25) == False\nassert func(['a', 'b', 'c', 'd', 'e'], 'c') == True\nassert func([True, False, True, False], False) == True\nassert func([], 10) == False\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 3) == True\nassert func([10, 20, 30, 40, 50], 25) == False\nassert func(['a', 'b', 'c', 'd', 'e'], 'c') == True\nassert func([True, False, True, False], False) == True\nassert func([], 10) == False\n"}
{"task_id": 153, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    WRITE A PYTHON FUNCTION TO CHECK IF THE ELEMENTS OF A GIVEN LIST ARE UNIQUE OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == True\nassert func([1, 2, 3, 4, 4]) == False\nassert func(['a', 'b', 'c', 'd']) == True\nassert func(['a', 'b', 'c', 'c']) == False\nassert func([]) == True", "response_code": "assert func([1, 2, 3, 4, 5]) == True\nassert func([1, 2, 3, 4, 4]) == False\nassert func(['a', 'b', 'c', 'd']) == True\nassert func(['a', 'b', 'c', 'c']) == False\nassert func([]) == True"}
{"task_id": 154, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums1,nums2):\n    '''\n    WRITE A FUNCTION TO SUBSTRACT TWO LISTS USING MAP AND LAMBDA FUNCTION.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], [1, 1, 1]) == [0, 1, 2]\nassert func([5, 10, 15], [2, 4, 6]) == [3, 6, 9]\nassert func([0, 0, 0], [1, 2, 3]) == [-1, -2, -3]\nassert func([100, 200, 300], [10, 20, 30]) == [90, 180, 270]\nassert func([2, 4, 6], [1, 3, 5]) == [1, 1, 1]\n```", "response_code": "\nassert func([1, 2, 3], [1, 1, 1]) == [0, 1, 2]\nassert func([5, 10, 15], [2, 4, 6]) == [3, 6, 9]\nassert func([0, 0, 0], [1, 2, 3]) == [-1, -2, -3]\nassert func([100, 200, 300], [10, 20, 30]) == [90, 180, 270]\nassert func([2, 4, 6], [1, 3, 5]) == [1, 1, 1]\n"}
{"task_id": 155, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER THE FREQUENCY OF EACH DIGIT IS LESS THAN OR EQUAL TO THE DIGIT ITSELF.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(123) == True\nassert func(112233) == True\nassert func(444) == True\nassert func(987654321) == False\nassert func(111222333) == False", "response_code": "assert func(123) == True\nassert func(112233) == True\nassert func(444) == True\nassert func(987654321) == False\nassert func(111222333) == False"}
{"task_id": 156, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list,element):\n    '''\n    WRITE A FUNCTION TO CHECK WHETHER ALL ITEMS OF A LIST ARE EQUAL TO A GIVEN STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(['apple', 'apple', 'apple'], 'apple') == True\nassert func(['apple', 'banana', 'apple'], 'apple') == False\nassert func(['apple', 'apple', 'apple'], 'banana') == False\nassert func([], 'apple') == False\nassert func(['apple', 'apple', 'apple'], '') == False", "response_code": "assert func(['apple', 'apple', 'apple'], 'apple') == True\nassert func(['apple', 'banana', 'apple'], 'apple') == False\nassert func(['apple', 'apple', 'apple'], 'banana') == False\nassert func([], 'apple') == False\nassert func(['apple', 'apple', 'apple'], '') == False"}
{"task_id": 157, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    WRITE A FUNCTION THAT MATCHES A STRING THAT HAS AN A FOLLOWED BY TWO TO THREE 'B'.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"ab\") == True\nassert func(\"abb\") == True\nassert func(\"abbb\") == True\nassert func(\"abbbb\") == True\nassert func(\"aabbb\") == False\n```", "response_code": "\nassert func(\"ab\") == True\nassert func(\"abb\") == True\nassert func(\"abbb\") == True\nassert func(\"abbbb\") == True\nassert func(\"aabbb\") == False\n"}
{"task_id": 158, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a, n, k): \n    '''\n    WRITE A FUNCTION TO FIND THE LARGEST SUM OF CONTIGUOUS ARRAY IN THE MODIFIED ARRAY WHICH IS FORMED BY REPEATING THE GIVEN ARRAY K TIMES.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, -2, 3, 4], 4, 2) == 25\nassert func([-2, 1, -3, 4, -1, 2, 1, -5, 4], 3, 3) == 18\nassert func([1, 2, 3, 4, 5], 2, 1) == 15\nassert func([-1, -2, -3, -4, -5], 2, 2) == -5\nassert func([5, -2, 3, 4, -1], 3, 1) == 15\n```", "response_code": "\nassert func([1, -2, 3, 4], 4, 2) == 25\nassert func([-2, 1, -3, 4, -1, 2, 1, -5, 4], 3, 3) == 18\nassert func([1, 2, 3, 4, 5], 2, 1) == 15\nassert func([-1, -2, -3, -4, -5], 2, 2) == -5\nassert func([5, -2, 3, 4, -1], 3, 1) == 15\n"}
{"task_id": 159, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):  \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SUM OF SQUARES OF FIRST N EVEN NATURAL NUMBERS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 4\nassert func(2) == 20\nassert func(3) == 56\nassert func(4) == 120\nassert func(5) == 220", "response_code": "assert func(1) == 4\nassert func(2) == 20\nassert func(3) == 56\nassert func(4) == 120\nassert func(5) == 220"}
{"task_id": 160, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A FUNCTION TO FIND THE LIST OF LISTS WITH MAXIMUM LENGTH.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [[6, 7, 8, 9]]\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[5, 6], [7, 8]]\nassert func([[1], [2], [3], [4]]) == [[1], [2], [3], [4]]\nassert func([[1, 2, 3, 4], [5, 6, 7], [8, 9]]) == [[1, 2, 3, 4]]\nassert func([[1, 2], [3, 4, 5], [6, 7], [8]]) == [[3, 4, 5]]\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [[6, 7, 8, 9]]\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[5, 6], [7, 8]]\nassert func([[1], [2], [3], [4]]) == [[1], [2], [3], [4]]\nassert func([[1, 2, 3, 4], [5, 6, 7], [8, 9]]) == [[1, 2, 3, 4]]\nassert func([[1, 2], [3, 4, 5], [6, 7], [8]]) == [[3, 4, 5]]\n"}
{"task_id": 161, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n, k): \n    '''\n    WRITE A FUNCTION TO FIND OUT THE NUMBER OF WAYS OF PAINTING THE FENCE SUCH THAT AT MOST 2 ADJACENT POSTS HAVE THE SAME COLOR FOR THE GIVEN FENCE WITH N POSTS AND K COLORS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 2) == 6\nassert func(4, 3) == 66\nassert func(5, 4) == 246\nassert func(6, 2) == 30\nassert func(7, 3) == 390\n```", "response_code": "\nassert func(3, 2) == 6\nassert func(4, 3) == 66\nassert func(5, 4) == 246\nassert func(6, 2) == 30\nassert func(7, 3) == 390\n"}
{"task_id": 162, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n,m):  \n    '''\n    WRITE A PYTHON FUNCTION TO FIND QUOTIENT OF TWO NUMBERS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(10, 2) == 5\nassert func(15, 3) == 5\nassert func(20, 4) == 5\nassert func(25, 5) == 5\nassert func(30, 6) == 5\n```", "response_code": "\nassert func(10, 2) == 5\nassert func(15, 3) == 5\nassert func(20, 4) == 5\nassert func(25, 5) == 5\nassert func(30, 6) == 5\n"}
{"task_id": 163, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(w,h):\n    '''\n    WRITE A FUNCTION TO FIND THE THIRD SIDE OF A RIGHT ANGLED TRIANGLE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 4) == 5\nassert func(5, 12) == 13\nassert func(7, 24) == 25\nassert func(8, 15) == 17\nassert func(9, 40) == 41\n```", "response_code": "\nassert func(3, 4) == 5\nassert func(5, 12) == 13\nassert func(7, 24) == 25\nassert func(8, 15) == 17\nassert func(9, 40) == 41\n"}
{"task_id": 164, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(listval):\n    '''\n    WRITE A FUNCTION TO FIND THE MAXIMUM VALUE IN A GIVEN HETEROGENEOUS LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 5\nassert func([-10, 0, 10, 20, 30]) == 30\nassert func(['a', 'b', 'c', 'd', 'e']) == 'e'\nassert func([True, False, True, False]) == True\nassert func([1, 'a', True, 5.5]) == 5.5\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 5\nassert func([-10, 0, 10, 20, 30]) == 30\nassert func(['a', 'b', 'c', 'd', 'e']) == 'e'\nassert func([True, False, True, False]) == True\nassert func([1, 'a', True, 5.5]) == 5.5\n"}
{"task_id": 165, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(number):\n    '''\n    WRITE A FUNCTION TO RETURN THE SUM OF ALL DIVISORS OF A NUMBER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(6) == 12\nassert func(10) == 18\nassert func(15) == 24\nassert func(28) == 56\nassert func(36) == 91", "response_code": "assert func(6) == 12\nassert func(10) == 18\nassert func(15) == 24\nassert func(28) == 56\nassert func(36) == 91"}
{"task_id": 166, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr): \n    '''\n    WRITE A PYTHON FUNCTION TO COUNT INVERSIONS IN AN ARRAY.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == 0\nassert func([5, 4, 3, 2, 1]) == 10\nassert func([2, 4, 1, 3, 5]) == 3\nassert func([1, 1, 1, 1, 1]) == 0\nassert func([5, 3, 2, 4, 1]) == 8", "response_code": "assert func([1, 2, 3, 4, 5]) == 0\nassert func([5, 4, 3, 2, 1]) == 10\nassert func([2, 4, 1, 3, 5]) == 3\nassert func([1, 1, 1, 1, 1]) == 0\nassert func([5, 3, 2, 4, 1]) == 8"}
{"task_id": 167, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A FUNCTION TO FLATTEN A GIVEN NESTED LIST STRUCTURE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, [3]], 4]) == [1, 2, 3, 4]\nassert func([[1, [2, 3]], [4, [5, 6]]]) == [1, 2, 3, 4, 5, 6]\nassert func([1, [2, [3, [4, [5]]]]]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([[1], [2], [3], [4], [5]]) == [1, 2, 3, 4, 5]\n```", "response_code": "\nassert func([[1, 2, [3]], 4]) == [1, 2, 3, 4]\nassert func([[1, [2, 3]], [4, [5, 6]]]) == [1, 2, 3, 4, 5, 6]\nassert func([1, [2, [3, [4, [5]]]]]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([[1], [2], [3], [4], [5]]) == [1, 2, 3, 4, 5]\n"}
{"task_id": 168, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from collections import defaultdict\ndef func(stdata):\n    '''\n    WRITE A FUNCTION TO CALCULATE THE MAXIMUM AGGREGATE FROM THE LIST OF TUPLES.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nstdata = [(1, 2), (3, 4), (5, 6)]\nassert func(stdata) == 15\n\nstdata = [(10, 20), (30, 40), (50, 60)]\nassert func(stdata) == 150\n\nstdata = [(5, 10), (15, 20), (25, 30)]\nassert func(stdata) == 75\n\nstdata = [(2, 8), (4, 6), (10, 12)]\nassert func(stdata) == 30\n\nstdata = [(7, 9), (11, 13), (15, 17)]\nassert func(stdata) == 42\n```", "response_code": "\nstdata = [(1, 2), (3, 4), (5, 6)]\nassert func(stdata) == 15\n\nstdata = [(10, 20), (30, 40), (50, 60)]\nassert func(stdata) == 150\n\nstdata = [(5, 10), (15, 20), (25, 30)]\nassert func(stdata) == 75\n\nstdata = [(2, 8), (4, 6), (10, 12)]\nassert func(stdata) == 30\n\nstdata = [(7, 9), (11, 13), (15, 17)]\nassert func(stdata) == 42\n"}
{"task_id": 169, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A FUNCTION TO FIND THE COUNT OF ALL BINARY SEQUENCES OF LENGTH 2N SUCH THAT SUM OF FIRST N BITS IS SAME AS SUM OF LAST N BITS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 2\nassert func(2) == 6\nassert func(3) == 20\nassert func(4) == 70\nassert func(5) == 252\n```", "response_code": "\nassert func(1) == 2\nassert func(2) == 6\nassert func(3) == 20\nassert func(4) == 70\nassert func(5) == 252\n"}
{"task_id": 170, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(d):\n    '''\n    WRITE A FUNCTION TO FIND THE DEPTH OF A DICTIONARY.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func({}) == 1\nassert func({'a': 1}) == 2\nassert func({'a': {'b': 2}}) == 3\nassert func({'a': {'b': {'c': 3}}}) == 4\nassert func({'a': {'b': {'c': {'d': 4}}}}) == 5", "response_code": "assert func({}) == 1\nassert func({'a': 1}) == 2\nassert func({'a': {'b': 2}}) == 3\nassert func({'a': {'b': {'c': 3}}}) == 4\nassert func({'a': {'b': {'c': {'d': 4}}}}) == 5"}
{"task_id": 171, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr,ranges,rotations,index) :  \n    '''\n    WRITE A PYTHON FUNCTION TO FIND ELEMENT AT A GIVEN INDEX AFTER NUMBER OF ROTATIONS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], [(0, 2), (1, 3)], 2, 3) == 4\nassert func([10, 20, 30, 40, 50], [(1, 4), (0, 3)], 1, 2) == 30\nassert func([5, 10, 15, 20, 25], [(0, 3), (2, 4)], 3, 1) == 15\nassert func([100, 200, 300, 400, 500], [(2, 3), (0, 2)], 4, 0) == 300\nassert func([2, 4, 6, 8, 10], [(1, 2), (3, 4)], 1, 4) == 8\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], [(0, 2), (1, 3)], 2, 3) == 4\nassert func([10, 20, 30, 40, 50], [(1, 4), (0, 3)], 1, 2) == 30\nassert func([5, 10, 15, 20, 25], [(0, 3), (2, 4)], 3, 1) == 15\nassert func([100, 200, 300, 400, 500], [(2, 3), (0, 2)], 4, 0) == 300\nassert func([2, 4, 6, 8, 10], [(1, 2), (3, 4)], 1, 4) == 8\n"}
{"task_id": 172, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(words):\n    '''\n    WRITE A FUNCTION TO MATCH TWO WORDS FROM A LIST OF WORDS STARTING WITH LETTER 'P'.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['apple', 'banana', 'pear', 'peach']) == ['pear', 'peach']\nassert func(['potato', 'pineapple', 'pear', 'peach']) == ['pear', 'peach']\nassert func(['plum', 'peanut', 'pear', 'peach']) == ['pear', 'peach']\nassert func(['pepper', 'pumpkin', 'pear', 'peach']) == ['pear', 'peach']\nassert func(['pear', 'peach']) == ['pear', 'peach']\n```", "response_code": "\nassert func(['apple', 'banana', 'pear', 'peach']) == ['pear', 'peach']\nassert func(['potato', 'pineapple', 'pear', 'peach']) == ['pear', 'peach']\nassert func(['plum', 'peanut', 'pear', 'peach']) == ['pear', 'peach']\nassert func(['pepper', 'pumpkin', 'pear', 'peach']) == ['pear', 'peach']\nassert func(['pear', 'peach']) == ['pear', 'peach']\n"}
{"task_id": 173, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a, n, index, k):\n    '''\n    WRITE A FUNCTION TO FIND THE MAXIMUM SUM OF INCREASING SUBSEQUENCE FROM PREFIX TILL ITH INDEX AND ALSO INCLUDING A GIVEN KTH ELEMENT WHICH IS AFTER I, I.E., K > I.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 5, 2, 4) == 10\nassert func([3, 2, 5, 1, 7, 6], 6, 3, 5) == 12\nassert func([10, 20, 30, 40, 50], 5, 1, 3) == 50\nassert func([5, 4, 3, 2, 1], 5, 0, 4) == 5\nassert func([2, 4, 6, 8, 10], 5, 2, 4) == 18\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 5, 2, 4) == 10\nassert func([3, 2, 5, 1, 7, 6], 6, 3, 5) == 12\nassert func([10, 20, 30, 40, 50], 5, 1, 3) == 50\nassert func([5, 4, 3, 2, 1], 5, 0, 4) == 5\nassert func([2, 4, 6, 8, 10], 5, 2, 4) == 18\n"}
{"task_id": 174, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from copy import deepcopy\ndef func(tuplex,m,n):\n    '''\n    WRITE A FUNCTION TO GET A COLON OF A TUPLE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\ntuplex = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nm = 1\nn = 2\nassert func(tuplex, m, n) == (3, 6, 9)\n\ntuplex = ((10, 20, 30), (40, 50, 60), (70, 80, 90))\nm = 0\nn = 1\nassert func(tuplex, m, n) == (10, 40, 70)\n\ntuplex = ((11, 22, 33), (44, 55, 66), (77, 88, 99))\nm = 2\nn = 0\nassert func(tuplex, m, n) == (77, 44, 11)\n\ntuplex = ((111, 222, 333), (444, 555, 666), (777, 888, 999))\nm = 1\nn = 1\nassert func(tuplex, m, n) == (222, 555, 888)\n\ntuplex = ((1111, 2222, 3333), (4444, 5555, 6666), (7777, 8888, 9999))\nm = 0\nn = 0\nassert func(tuplex, m, n) == (1111, 4444, 7777)\n```", "response_code": "\ntuplex = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nm = 1\nn = 2\nassert func(tuplex, m, n) == (3, 6, 9)\n\ntuplex = ((10, 20, 30), (40, 50, 60), (70, 80, 90))\nm = 0\nn = 1\nassert func(tuplex, m, n) == (10, 40, 70)\n\ntuplex = ((11, 22, 33), (44, 55, 66), (77, 88, 99))\nm = 2\nn = 0\nassert func(tuplex, m, n) == (77, 44, 11)\n\ntuplex = ((111, 222, 333), (444, 555, 666), (777, 888, 999))\nm = 1\nn = 1\nassert func(tuplex, m, n) == (222, 555, 888)\n\ntuplex = ((1111, 2222, 3333), (4444, 5555, 6666), (7777, 8888, 9999))\nm = 0\nn = 0\nassert func(tuplex, m, n) == (1111, 4444, 7777)\n"}
{"task_id": 175, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums1, nums2, N):\n    '''\n    WRITE A FUNCTION TO FIND THE SPECIFIED NUMBER OF LARGEST PRODUCTS FROM TWO GIVEN LISTS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], [4, 5, 6], 1) == [18]\nassert func([1, 2, 3], [4, 5, 6], 2) == [18, 15]\nassert func([1, 2, 3], [4, 5, 6], 3) == [18, 15, 12]\nassert func([1, 2, 3], [4, 5, 6], 4) == [18, 15, 12, 10]\nassert func([1, 2, 3], [4, 5, 6], 5) == [18, 15, 12, 10, 9]\n```", "response_code": "\nassert func([1, 2, 3], [4, 5, 6], 1) == [18]\nassert func([1, 2, 3], [4, 5, 6], 2) == [18, 15]\nassert func([1, 2, 3], [4, 5, 6], 3) == [18, 15, 12]\nassert func([1, 2, 3], [4, 5, 6], 4) == [18, 15, 12, 10]\nassert func([1, 2, 3], [4, 5, 6], 5) == [18, 15, 12, 10, 9]\n"}
{"task_id": 176, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a,b):   \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE MAXIMUM OF TWO NUMBERS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 5) == 5\nassert func(10, 1) == 10\nassert func(-2, -5) == -2\nassert func(7, 7) == 7\nassert func(0, 0) == 0\n```", "response_code": "\nassert func(3, 5) == 5\nassert func(10, 1) == 10\nassert func(-2, -5) == -2\nassert func(7, 7) == 7\nassert func(0, 0) == 0\n"}
{"task_id": 177, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1):\n    '''\n    WRITE A FUNCTION TO CONVERT A GIVEN STRING TO A TUPLE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == ('h', 'e', 'l', 'l', 'o')\nassert func(\"12345\") == ('1', '2', '3', '4', '5')\nassert func(\"abcde\") == ('a', 'b', 'c', 'd', 'e')\nassert func(\"\") == ()\nassert func(\"testing 123\") == ('t', 'e', 's', 't', 'i', 'n', 'g', ' ', '1', '2', '3')\n```", "response_code": "\nassert func(\"hello\") == ('h', 'e', 'l', 'l', 'o')\nassert func(\"12345\") == ('1', '2', '3', '4', '5')\nassert func(\"abcde\") == ('a', 'b', 'c', 'd', 'e')\nassert func(\"\") == ()\nassert func(\"testing 123\") == ('t', 'e', 's', 't', 'i', 'n', 'g', ' ', '1', '2', '3')\n"}
{"task_id": 178, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A PYTHON FUNCTION TO SET THE LEFT MOST UNSET BIT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5) == 6\nassert func(10) == 12\nassert func(0) == 1\nassert func(15) == 16\nassert func(3) == 4\n```", "response_code": "\nassert func(5) == 6\nassert func(10) == 12\nassert func(0) == 1\nassert func(15) == 16\nassert func(3) == 4\n"}
{"task_id": 179, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(r,h):\n    '''\n    WRITE A FUNCTION TO FIND THE VOLUME OF A CONE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 4) == math.pi * 3**2 * 4 / 3\nassert func(5, 7) == math.pi * 5**2 * 7 / 3\nassert func(1, 10) == math.pi * 1**2 * 10 / 3\nassert func(8, 2) == math.pi * 8**2 * 2 / 3\nassert func(6, 9) == math.pi * 6**2 * 9 / 3\n```", "response_code": "\nassert func(3, 4) == math.pi * 3**2 * 4 / 3\nassert func(5, 7) == math.pi * 5**2 * 7 / 3\nassert func(1, 10) == math.pi * 1**2 * 10 / 3\nassert func(8, 2) == math.pi * 8**2 * 2 / 3\nassert func(6, 9) == math.pi * 6**2 * 9 / 3\n"}
{"task_id": 180, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE HIGHEST POWER OF 2 THAT IS LESS THAN OR EQUAL TO N.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(10) == 8\nassert func(16) == 16\nassert func(25) == 16\nassert func(32) == 32\nassert func(100) == 64\n```", "response_code": "\nassert func(10) == 8\nassert func(16) == 16\nassert func(25) == 16\nassert func(32) == 32\nassert func(100) == 64\n"}
{"task_id": 181, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A FUNCTION TO FIND THE N'TH LUCAS NUMBER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(0) == 2\nassert func(1) == 1\nassert func(5) == 11\nassert func(10) == 123\nassert func(15) == 1364", "response_code": "assert func(0) == 2\nassert func(1) == 1\nassert func(5) == 11\nassert func(10) == 123\nassert func(15) == 1364"}
{"task_id": 182, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list_, string):\n    '''\n    WRITE A FUNCTION TO INSERT A GIVEN STRING AT THE BEGINNING OF ALL ITEMS IN A LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], 'a') == ['a1', 'a2', 'a3']\nassert func(['apple', 'banana', 'cherry'], 'fruit_') == ['fruit_apple', 'fruit_banana', 'fruit_cherry']\nassert func([], 'hello') == []\nassert func([True, False], 'is_') == ['is_True', 'is_False']\nassert func(['cat', 'dog', 'rabbit'], '') == ['cat', 'dog', 'rabbit']\n```", "response_code": "\nassert func([1, 2, 3], 'a') == ['a1', 'a2', 'a3']\nassert func(['apple', 'banana', 'cherry'], 'fruit_') == ['fruit_apple', 'fruit_banana', 'fruit_cherry']\nassert func([], 'hello') == []\nassert func([True, False], 'is_') == ['is_True', 'is_False']\nassert func(['cat', 'dog', 'rabbit'], '') == ['cat', 'dog', 'rabbit']\n"}
{"task_id": 183, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l1, l2, l3):\n    '''\n    WRITE A FUNCTION TO CONVERT MORE THAN ONE LIST TO NESTED DICTIONARY.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['a', 'b', 'c'], [1, 2, 3], ['x', 'y', 'z']) == {'a': 1, 'b': 2, 'c': 3, 'x': 'y', 'z': 'z'}\nassert func(['apple', 'banana'], [3, 5], ['red', 'yellow']) == {'apple': 3, 'banana': 5, 'red': 'yellow'}\nassert func([1, 2, 3], ['a', 'b', 'c'], ['x', 'y', 'z']) == {1: 'a', 2: 'b', 3: 'c', 'x': 'y', 'z': 'z'}\nassert func(['dog', 'cat'], ['brown', 'black'], [4, 2]) == {'dog': 'brown', 'cat': 'black', 4: 2}\nassert func([], [], []) == {}\n```", "response_code": "\nassert func(['a', 'b', 'c'], [1, 2, 3], ['x', 'y', 'z']) == {'a': 1, 'b': 2, 'c': 3, 'x': 'y', 'z': 'z'}\nassert func(['apple', 'banana'], [3, 5], ['red', 'yellow']) == {'apple': 3, 'banana': 5, 'red': 'yellow'}\nassert func([1, 2, 3], ['a', 'b', 'c'], ['x', 'y', 'z']) == {1: 'a', 2: 'b', 3: 'c', 'x': 'y', 'z': 'z'}\nassert func(['dog', 'cat'], ['brown', 'black'], [4, 2]) == {'dog': 'brown', 'cat': 'black', 4: 2}\nassert func([], [], []) == {}\n"}
{"task_id": 184, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    WRITE A FUNCTION TO FIND THE MAXIMUM SUM POSSIBLE BY USING THE GIVEN EQUATION F(N) = MAX( (F(N/2) + F(N/3) + F(N/4) + F(N/5)), N).\n    '''\n    pass\n\n# check the correctness of func \nassert "}], "response": "```python\nassert func(10) == 10\nassert func(20) == 20\nassert func(30) == 30\nassert func(40) == 40\nassert func(50) == 50\n```", "response_code": "\nassert func(10) == 10\nassert func(20) == 20\nassert func(30) == 30\nassert func(40) == 40\nassert func(50) == 50\n"}
{"task_id": 185, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(input_list):\n    '''\n    WRITE A FUNCTION TO FIND THE LIST WITH MAXIMUM LENGTH USING LAMBDA FUNCTION.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]\nassert func([[1, 2], [3, 4, 5], [6, 7]]) == [3, 4, 5]\nassert func([[1], [2], [3], [4]]) == [1]\nassert func([[1, 2, 3, 4], [5, 6, 7], [8, 9]]) == [1, 2, 3, 4]\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == [1, 2]\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]\nassert func([[1, 2], [3, 4, 5], [6, 7]]) == [3, 4, 5]\nassert func([[1], [2], [3], [4]]) == [1]\nassert func([[1, 2, 3, 4], [5, 6, 7], [8, 9]]) == [1, 2, 3, 4]\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == [1, 2]\n"}
{"task_id": 186, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    WRITE A FUNCTION TO CHECK IF GIVEN TUPLE IS DISTINCT OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func((1, 2, 3, 4)) == True\nassert func((1, 2, 2, 4)) == False\nassert func(('a', 'b', 'c')) == True\nassert func(('a', 'b', 'b')) == False\nassert func(()) == True", "response_code": "assert func((1, 2, 3, 4)) == True\nassert func((1, 2, 2, 4)) == False\nassert func(('a', 'b', 'c')) == True\nassert func(('a', 'b', 'b')) == False\nassert func(()) == True"}
{"task_id": 187, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1):\n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE FIRST NON-REPEATED CHARACTER IN A GIVEN STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == 'h'\nassert func(\"programming\") == 'p'\nassert func(\"racecar\") == 'e'\nassert func(\"aabbcdd\") == 'c'\nassert func(\"abcabc\") == 'a'\n```", "response_code": "\nassert func(\"hello\") == 'h'\nassert func(\"programming\") == 'p'\nassert func(\"racecar\") == 'e'\nassert func(\"aabbcdd\") == 'c'\nassert func(\"abcabc\") == 'a'\n"}
{"task_id": 188, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef func(string): \n    '''\n    WRITE A FUNCTION TO CHECK WHETHER THE GIVEN STRING STARTS AND ENDS WITH THE SAME CHARACTER OR NOT USING REGEX.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == False\nassert func(\"level\") == True\nassert func(\"racecar\") == True\nassert func(\"python\") == False\nassert func(\"madam\") == True\n```", "response_code": "\nassert func(\"hello\") == False\nassert func(\"level\") == True\nassert func(\"racecar\") == True\nassert func(\"python\") == False\nassert func(\"madam\") == True\n"}
{"task_id": 189, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a,b,c):\n    '''\n    WRITE A FUNCTION TO FIND THE MEDIAN OF THREE SPECIFIC NUMBERS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1, 2, 3) == 2\nassert func(10, 5, 8) == 8\nassert func(7, 7, 7) == 7\nassert func(-1, -5, -3) == -3\nassert func(100, 200, 150) == 150\n```", "response_code": "\nassert func(1, 2, 3) == 2\nassert func(10, 5, 8) == 8\nassert func(7, 7, 7) == 7\nassert func(-1, -5, -3) == -3\nassert func(100, 200, 150) == 150\n"}
{"task_id": 190, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    WRITE A FUNCTION TO COMPUTE THE SUM OF DIGITS OF EACH NUMBER OF A GIVEN LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([123, 456, 789]) == [6, 15, 24]\nassert func([111, 222, 333]) == [3, 6, 9]\nassert func([9876, 5432, 1098]) == [30, 14, 18]\nassert func([100, 200, 300]) == [1, 2, 3]\nassert func([999, 888, 777]) == [27, 24, 21]", "response_code": "assert func([123, 456, 789]) == [6, 15, 24]\nassert func([111, 222, 333]) == [3, 6, 9]\nassert func([9876, 5432, 1098]) == [30, 14, 18]\nassert func([100, 200, 300]) == [1, 2, 3]\nassert func([999, 888, 777]) == [27, 24, 21]"}
{"task_id": 191, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    WRITE A FUNCTION TO PERFORM THE MATHEMATICAL BITWISE XOR OPERATION ACROSS THE GIVEN TUPLES.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (2, 3, 4)) == (3, 1, 7)\nassert func((5, 6, 7), (2, 2, 2)) == (7, 4, 5)\nassert func((10, 20, 30), (5, 10, 15)) == (15, 30, 17)\nassert func((0, 0, 0), (1, 1, 1)) == (1, 1, 1)\nassert func((255, 255, 255), (0, 0, 0)) == (255, 255, 255)\n```", "response_code": "\nassert func((1, 2, 3), (2, 3, 4)) == (3, 1, 7)\nassert func((5, 6, 7), (2, 2, 2)) == (7, 4, 5)\nassert func((10, 20, 30), (5, 10, 15)) == (15, 30, 17)\nassert func((0, 0, 0), (1, 1, 1)) == (1, 1, 1)\nassert func((255, 255, 255), (0, 0, 0)) == (255, 255, 255)\n"}
{"task_id": 192, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    WRITE A FUNCTION TO EXTRACT THE FREQUENCY OF UNIQUE TUPLES IN THE GIVEN LIST ORDER IRRESPECTIVE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (2, 1), (1, 2), (3, 4)]) == {(1, 2): 2, (2, 1): 1, (3, 4): 1}\nassert func([(1, 2), (1, 2), (1, 2), (1, 2)]) == {(1, 2): 4}\nassert func([(1, 2), (2, 1), (1, 2), (2, 1)]) == {(1, 2): 2, (2, 1): 2}\nassert func([(1, 2), (2, 1), (3, 4), (5, 6)]) == {(1, 2): 1, (2, 1): 1, (3, 4): 1, (5, 6): 1}\nassert func([(1, 2), (2, 1), (1, 2), (1, 2), (3, 4)]) == {(1, 2): 3, (2, 1): 1, (3, 4): 1}\n```", "response_code": "\nassert func([(1, 2), (2, 1), (1, 2), (3, 4)]) == {(1, 2): 2, (2, 1): 1, (3, 4): 1}\nassert func([(1, 2), (1, 2), (1, 2), (1, 2)]) == {(1, 2): 4}\nassert func([(1, 2), (2, 1), (1, 2), (2, 1)]) == {(1, 2): 2, (2, 1): 2}\nassert func([(1, 2), (2, 1), (3, 4), (5, 6)]) == {(1, 2): 1, (2, 1): 1, (3, 4): 1, (5, 6): 1}\nassert func([(1, 2), (2, 1), (1, 2), (1, 2), (3, 4)]) == {(1, 2): 3, (2, 1): 1, (3, 4): 1}\n"}
{"task_id": 193, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    WRITE A FUNCTION TO PERFORM INDEX WISE ADDITION OF TUPLE ELEMENTS IN THE GIVEN TWO NESTED TUPLES.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(((1, 2), (3, 4)), ((5, 6), (7, 8))) == ((6, 8), (10, 12))\nassert func(((10, 20), (30, 40)), ((50, 60), (70, 80))) == ((60, 80), (100, 120))\nassert func(((0, 0), (0, 0)), ((0, 0), (0, 0))) == ((0, 0), (0, 0))\nassert func(((1, 2, 3), (4, 5, 6)), ((7, 8, 9), (10, 11, 12))) == ((8, 10, 12), (14, 16, 18))\nassert func(((1,), (2,)), ((3,), (4,))) == ((4,), (6,))\n```", "response_code": "\nassert func(((1, 2), (3, 4)), ((5, 6), (7, 8))) == ((6, 8), (10, 12))\nassert func(((10, 20), (30, 40)), ((50, 60), (70, 80))) == ((60, 80), (100, 120))\nassert func(((0, 0), (0, 0)), ((0, 0), (0, 0))) == ((0, 0), (0, 0))\nassert func(((1, 2, 3), (4, 5, 6)), ((7, 8, 9), (10, 11, 12))) == ((8, 10, 12), (14, 16, 18))\nassert func(((1,), (2,)), ((3,), (4,))) == ((4,), (6,))\n"}
{"task_id": 194, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a,b):   \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE MINIMUM OF TWO NUMBERS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 5) == 3\nassert func(-2, 7) == -2\nassert func(10, 10) == 10\nassert func(0, 0) == 0\nassert func(-5, -3) == -5\n```", "response_code": "\nassert func(3, 5) == 3\nassert func(-2, 7) == -2\nassert func(10, 10) == 10\nassert func(0, 0) == 0\nassert func(-5, -3) == -5\n"}
{"task_id": 195, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(tuplex,tuple1): \n    '''\n    WRITE A FUNCTION TO CHECK WHETHER AN ELEMENT EXISTS WITHIN A TUPLE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func((1, 2, 3), 2) == True\nassert func(('a', 'b', 'c'), 'd') == False\nassert func((True, False, True), False) == True\nassert func(('apple', 'banana', 'cherry'), 'apple') == True\nassert func((4.5, 6.7, 8.9), 5.5) == False", "response_code": "assert func((1, 2, 3), 2) == True\nassert func(('a', 'b', 'c'), 'd') == False\nassert func((True, False, True), False) == True\nassert func(('apple', 'banana', 'cherry'), 'apple') == True\nassert func((4.5, 6.7, 8.9), 5.5) == False"}
{"task_id": 196, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE PARITY OF A GIVEN NUMBER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 'even'\nassert func(1) == 'odd'\nassert func(2) == 'even'\nassert func(7) == 'odd'\nassert func(10) == 'even'\n```", "response_code": "\nassert func(0) == 'even'\nassert func(1) == 'odd'\nassert func(2) == 'even'\nassert func(7) == 'odd'\nassert func(10) == 'even'\n"}
{"task_id": 197, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    WRITE A FUNCTION TO CREATE THE NEXT BIGGER NUMBER BY REARRANGING THE DIGITS OF A GIVEN NUMBER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(123) == 132\nassert func(9876543210) == 9876543201\nassert func(111) == 111\nassert func(54321) == 54321\nassert func(8765432109) == 8765432091\n```", "response_code": "\nassert func(123) == 132\nassert func(9876543210) == 9876543201\nassert func(111) == 111\nassert func(54321) == 54321\nassert func(8765432109) == 8765432091\n"}
{"task_id": 198, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import heapq\ndef func(nums1, nums2, k):\n    '''\n    WRITE A FUNCTION TO FIND K NUMBER OF PAIRS WHICH CONSIST OF ONE ELEMENT FROM THE FIRST ARRAY AND ONE ELEMENT FROM THE SECOND ARRAY.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 7, 11], [2, 4, 6], 3) == [(1, 2), (1, 4), (1, 6)]\nassert func([3, 9, 12], [5, 8, 10], 2) == [(3, 5), (3, 8)]\nassert func([2, 4, 6], [1, 7, 11], 4) == [(2, 1), (2, 7), (2, 11), (4, 1)]\nassert func([5, 8, 10], [3, 9, 12], 1) == [(5, 3)]\nassert func([1, 2, 3], [4, 5, 6], 0) == []\n```", "response_code": "\nassert func([1, 7, 11], [2, 4, 6], 3) == [(1, 2), (1, 4), (1, 6)]\nassert func([3, 9, 12], [5, 8, 10], 2) == [(3, 5), (3, 8)]\nassert func([2, 4, 6], [1, 7, 11], 4) == [(2, 1), (2, 7), (2, 11), (4, 1)]\nassert func([5, 8, 10], [3, 9, 12], 1) == [(5, 3)]\nassert func([1, 2, 3], [4, 5, 6], 0) == []\n"}
{"task_id": 199, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A FUNCTION TO FIND THE MINIMUM PRODUCT FROM THE PAIRS OF TUPLES WITHIN A GIVEN LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (3, 4), (5, 6)]) == 6\nassert func([(-1, 2), (3, -4), (5, 6)]) == -24\nassert func([(0, 2), (3, 0), (5, 6)]) == 0\nassert func([(1, 1), (2, 2), (3, 3)]) == 1\nassert func([(10, 2), (3, 4), (5, 6)]) == 6\n```", "response_code": "\nassert func([(1, 2), (3, 4), (5, 6)]) == 6\nassert func([(-1, 2), (3, -4), (5, 6)]) == -24\nassert func([(0, 2), (3, 0), (5, 6)]) == 0\nassert func([(1, 1), (2, 2), (3, 3)]) == 1\nassert func([(10, 2), (3, 4), (5, 6)]) == 6\n"}
{"task_id": 200, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(listval):\n    '''\n    WRITE A FUNCTION TO FIND THE MINIMUM VALUE IN A GIVEN HETEROGENEOUS LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == 1\nassert func([-10, 0, 10, 20, 30]) == -10\nassert func([100, 200, 300, 400, 500]) == 100\nassert func([-5, -4, -3, -2, -1]) == -5\nassert func([0.1, 0.2, 0.3, 0.4, 0.5]) == 0.1", "response_code": "assert func([1, 2, 3, 4, 5]) == 1\nassert func([-10, 0, 10, 20, 30]) == -10\nassert func([100, 200, 300, 400, 500]) == 100\nassert func([-5, -4, -3, -2, -1]) == -5\nassert func([0.1, 0.2, 0.3, 0.4, 0.5]) == 0.1"}
{"task_id": 201, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(word):\n    '''\n    WRITE A FUNCTION TO CONVERT THE GIVEN SNAKE CASE STRING TO CAMEL CASE STRING BY USING REGEX.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello_world\") == \"HelloWorld\"\nassert func(\"snake_case_example\") == \"SnakeCaseExample\"\nassert func(\"this_is_a_test\") == \"ThisIsATest\"\nassert func(\"camelCase\") == \"CamelCase\"\nassert func(\"another_example\") == \"AnotherExample\"\n```", "response_code": "\nassert func(\"hello_world\") == \"HelloWorld\"\nassert func(\"snake_case_example\") == \"SnakeCaseExample\"\nassert func(\"this_is_a_test\") == \"ThisIsATest\"\nassert func(\"camelCase\") == \"CamelCase\"\nassert func(\"another_example\") == \"AnotherExample\"\n"}
{"task_id": 202, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l):\n    '''\n    WRITE A PYTHON FUNCTION TO REMOVE ODD NUMBERS FROM A GIVEN LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == [2, 4]\nassert func([10, 15, 20, 25, 30]) == [10, 20, 30]\nassert func([11, 22, 33, 44, 55]) == [22, 44]\nassert func([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10]\nassert func([1, 3, 5, 7, 9]) == []", "response_code": "assert func([1, 2, 3, 4, 5]) == [2, 4]\nassert func([10, 15, 20, 25, 30]) == [10, 20, 30]\nassert func([11, 22, 33, 44, 55]) == [22, 44]\nassert func([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10]\nassert func([1, 3, 5, 7, 9]) == []"}
{"task_id": 203, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1, n):\n    '''\n    WRITE A FUNCTION TO EXTRACT THE NTH ELEMENT FROM A GIVEN LIST OF TUPLES.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (3, 4), (5, 6)], 0) == [1, 3, 5]\nassert func([(1, 2), (3, 4), (5, 6)], 1) == [2, 4, 6]\nassert func([(10, 20, 30), (40, 50, 60), (70, 80, 90)], 2) == [30, 60, 90]\nassert func([(1,), (2,), (3,)], 0) == [1, 2, 3]\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == [3, 6, 9]\n```", "response_code": "\nassert func([(1, 2), (3, 4), (5, 6)], 0) == [1, 3, 5]\nassert func([(1, 2), (3, 4), (5, 6)], 1) == [2, 4, 6]\nassert func([(10, 20, 30), (40, 50, 60), (70, 80, 90)], 2) == [30, 60, 90]\nassert func([(1,), (2,), (3,)], 0) == [1, 2, 3]\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == [3, 6, 9]\n"}
{"task_id": 204, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1,list2):  \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER THE VALUE EXISTS IN A SEQUENCE OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 3) == True\nassert func([1, 2, 3, 4, 5], 6) == False\nassert func(['a', 'b', 'c', 'd'], 'c') == True\nassert func(['a', 'b', 'c', 'd'], 'e') == False\nassert func((10, 20, 30, 40), 20) == True\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 3) == True\nassert func([1, 2, 3, 4, 5], 6) == False\nassert func(['a', 'b', 'c', 'd'], 'c') == True\nassert func(['a', 'b', 'c', 'd'], 'e') == False\nassert func((10, 20, 30, 40), 20) == True\n"}
{"task_id": 205, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND A PAIR WITH HIGHEST PRODUCT FROM A GIVEN ARRAY OF INTEGERS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == (4, 5)  # Output: (4, 5) with product 20\nassert func([-10, -3, 5, 2, -7]) == (-10, -7)  # Output: (-10, -7) with product 70\nassert func([0, 1, 2, 3, 4]) == (3, 4)  # Output: (3, 4) with product 12\nassert func([-5, -4, -3, -2, -1]) == (-1, -2)  # Output: (-1, -2) with product 2\nassert func([2, 2, 2, 2, 2]) == (2, 2)  # Output: (2, 2) with product 4\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == (4, 5)  # Output: (4, 5) with product 20\nassert func([-10, -3, 5, 2, -7]) == (-10, -7)  # Output: (-10, -7) with product 70\nassert func([0, 1, 2, 3, 4]) == (3, 4)  # Output: (3, 4) with product 12\nassert func([-5, -4, -3, -2, -1]) == (-1, -2)  # Output: (-1, -2) with product 2\nassert func([2, 2, 2, 2, 2]) == (2, 2)  # Output: (2, 2) with product 4\n"}
{"task_id": 206, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(Input): \n    '''\n    WRITE A FUNCTION TO FIND COMMON FIRST ELEMENT IN GIVEN LIST OF TUPLE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([(1, 2), (1, 3), (1, 4)]) == 1\nassert func([(5, 2), (3, 5), (5, 4)]) == 5\nassert func([(1, 2), (3, 4), (5, 6)]) == None\nassert func([(1, 2), (1, 3), (1, 4), (1, 5)]) == 1\nassert func([(1, 2), (2, 3), (3, 4)]) == None", "response_code": "assert func([(1, 2), (1, 3), (1, 4)]) == 1\nassert func([(5, 2), (3, 5), (5, 4)]) == 5\nassert func([(1, 2), (3, 4), (5, 6)]) == None\nassert func([(1, 2), (1, 3), (1, 4), (1, 5)]) == 1\nassert func([(1, 2), (2, 3), (3, 4)]) == None"}
{"task_id": 207, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lst): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SUBLIST HAVING MAXIMUM LENGTH.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]\nassert func([[1, 2], [3, 4, 5], [6, 7]]) == [3, 4, 5]\nassert func([[1], [2], [3], [4]]) == [1]\nassert func([[1, 2, 3, 4, 5]]) == [1, 2, 3, 4, 5]\nassert func([[1, 2], [3], [4, 5, 6]]) == [4, 5, 6]", "response_code": "assert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]\nassert func([[1, 2], [3, 4, 5], [6, 7]]) == [3, 4, 5]\nassert func([[1], [2], [3], [4]]) == [1]\nassert func([[1, 2, 3, 4, 5]]) == [1, 2, 3, 4, 5]\nassert func([[1, 2], [3], [4, 5, 6]]) == [4, 5, 6]"}
{"task_id": 208, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A FUNCTION TO ROUND EVERY NUMBER OF A GIVEN LIST OF NUMBERS AND PRINT THE TOTAL SUM MULTIPLIED BY THE LENGTH OF THE LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1.2, 2.7, 3.5]) == 21\nassert func([4.9, 5.1, 6.3, 7.8]) == 54\nassert func([0.5, 1.4, 2.6, 3.9, 4.2]) == 45\nassert func([2.3, 3.8, 4.1, 5.6, 6.9, 7.4]) == 66\nassert func([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7]) == 77\n```", "response_code": "\nassert func([1.2, 2.7, 3.5]) == 21\nassert func([4.9, 5.1, 6.3, 7.8]) == 54\nassert func([0.5, 1.4, 2.6, 3.9, 4.2]) == 45\nassert func([2.3, 3.8, 4.1, 5.6, 6.9, 7.4]) == 66\nassert func([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7]) == 77\n"}
{"task_id": 209, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE CUBE SUM OF FIRST N EVEN NATURAL NUMBERS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 2**3  # 2^3 = 8\nassert func(2) == 2**3 + 4**3  # 8 + 64 = 72\nassert func(3) == 2**3 + 4**3 + 6**3  # 8 + 64 + 216 = 288\nassert func(4) == 2**3 + 4**3 + 6**3 + 8**3  # 8 + 64 + 216 + 512 = 800\nassert func(5) == 2**3 + 4**3 + 6**3 + 8**3 + 10**3  # 8 + 64 + 216 + 512 + 1000 = 1800\n```", "response_code": "\nassert func(1) == 2**3  # 2^3 = 8\nassert func(2) == 2**3 + 4**3  # 8 + 64 = 72\nassert func(3) == 2**3 + 4**3 + 6**3  # 8 + 64 + 216 = 288\nassert func(4) == 2**3 + 4**3 + 6**3 + 8**3  # 8 + 64 + 216 + 512 = 800\nassert func(5) == 2**3 + 4**3 + 6**3 + 8**3 + 10**3  # 8 + 64 + 216 + 512 + 1000 = 1800\n"}
{"task_id": 210, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    WRITE A FUNCTION TO CONCATENATE EACH ELEMENT OF TUPLE BY THE DELIMITER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(('a', 'b', 'c'), '-') == 'a-b-c'\nassert func(('hello', 'world'), ' ') == 'hello world'\nassert func(('123', '456', '789'), ',') == '123,456,789'\nassert func(('apple', 'banana', 'cherry'), '') == 'applebananacherry'\nassert func(('cat', 'dog', 'fish'), '-') == 'cat-dog-fish'\n```", "response_code": "\nassert func(('a', 'b', 'c'), '-') == 'a-b-c'\nassert func(('hello', 'world'), ' ') == 'hello world'\nassert func(('123', '456', '789'), ',') == '123,456,789'\nassert func(('apple', 'banana', 'cherry'), '') == 'applebananacherry'\nassert func(('cat', 'dog', 'fish'), '-') == 'cat-dog-fish'\n"}
{"task_id": 211, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):  \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE AVERAGE OF CUBES OF FIRST N NATURAL NUMBERS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 4.5\nassert func(3) == 14.67\nassert func(5) == 55\nassert func(10) == 385\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 4.5\nassert func(3) == 14.67\nassert func(5) == 55\nassert func(10) == 385\n"}
{"task_id": 212, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tuple):\n    '''\n    WRITE A FUNCTION TO EXTRACT ONLY THE REAR INDEX ELEMENT OF EACH STRING IN THE GIVEN TUPLE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(('apple', 'banana', 'cherry')) == ('e', 'a', 'y')\nassert func(('hello', 'world', 'python')) == ('o', 'd', 'n')\nassert func(('12345', '67890', '54321')) == ('5', '0', '1')\nassert func(('cat', 'dog', 'rabbit')) == ('t', 'g', 't')\nassert func(('sun', 'moon', 'star')) == ('n', 'n', 'r')\n```", "response_code": "\nassert func(('apple', 'banana', 'cherry')) == ('e', 'a', 'y')\nassert func(('hello', 'world', 'python')) == ('o', 'd', 'n')\nassert func(('12345', '67890', '54321')) == ('5', '0', '1')\nassert func(('cat', 'dog', 'rabbit')) == ('t', 'g', 't')\nassert func(('sun', 'moon', 'star')) == ('n', 'n', 'r')\n"}
{"task_id": 213, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1, x): \n    '''\n    WRITE A FUNCTION TO COUNT THE NUMBER OF SUBLISTS CONTAINING A PARTICULAR ELEMENT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([[1, 2, 3], [4, 5], [6, 7, 8, 9], [1, 2, 3]], 1) == 2\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9], [1, 2, 3]], 4) == 1\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9], [1, 2, 3]], 9) == 1\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9], [1, 2, 3]], 10) == 0\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9], [1, 2, 3]], 3) == 2", "response_code": "assert func([[1, 2, 3], [4, 5], [6, 7, 8, 9], [1, 2, 3]], 1) == 2\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9], [1, 2, 3]], 4) == 1\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9], [1, 2, 3]], 9) == 1\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9], [1, 2, 3]], 10) == 0\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9], [1, 2, 3]], 3) == 2"}
{"task_id": 214, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    WRITE A FUNCTION TO FILTER ODD NUMBERS USING LAMBDA FUNCTION.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == [1, 3, 5]\nassert func([10, 21, 36, 47, 50]) == [21, 47]\nassert func([2, 4, 6, 8, 10]) == []\nassert func([15, 25, 35, 45, 55]) == [15, 25, 35, 45, 55]\nassert func([11, 22, 33, 44, 55]) == [11, 33, 55]\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == [1, 3, 5]\nassert func([10, 21, 36, 47, 50]) == [21, 47]\nassert func([2, 4, 6, 8, 10]) == []\nassert func([15, 25, 35, 45, 55]) == [15, 25, 35, 45, 55]\nassert func([11, 22, 33, 44, 55]) == [11, 33, 55]\n"}
{"task_id": 215, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(dt):\n    '''\n    WRITE A FUNCTION TO CONVERT A DATE OF YYYY-MM-DD FORMAT TO DD-MM-YYYY FORMAT BY USING REGEX.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"2022-12-31\") == \"31-12-2022\"\nassert func(\"1999-01-15\") == \"15-01-1999\"\nassert func(\"2023-05-20\") == \"20-05-2023\"\nassert func(\"2000-10-05\") == \"05-10-2000\"\nassert func(\"1987-03-08\") == \"08-03-1987\"\n```", "response_code": "\nassert func(\"2022-12-31\") == \"31-12-2022\"\nassert func(\"1999-01-15\") == \"15-01-1999\"\nassert func(\"2023-05-20\") == \"20-05-2023\"\nassert func(\"2000-10-05\") == \"05-10-2000\"\nassert func(\"1987-03-08\") == \"08-03-1987\"\n"}
{"task_id": 216, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(my_list):\n    '''\n    WRITE A FUNCTION TO SORT THE GIVEN ARRAY BY USING SHELL SORT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([4, 2, 7, 1, 5]) == [1, 2, 4, 5, 7]\nassert func([9, 3, 6, 2, 8, 1, 5, 7, 4]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert func([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1]) == [1]\n```", "response_code": "\nassert func([4, 2, 7, 1, 5]) == [1, 2, 4, 5, 7]\nassert func([9, 3, 6, 2, 8, 1, 5, 7, 4]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert func([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1]) == [1]\n"}
{"task_id": 217, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    WRITE A FUNCTION TO EXTRACT THE ELEMENTWISE AND TUPLES FROM THE GIVEN TWO TUPLES.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (4, 5, 6)) == [(1, 4), (2, 5), (3, 6)]\nassert func(('a', 'b', 'c'), ('x', 'y', 'z')) == [('a', 'x'), ('b', 'y'), ('c', 'z')]\nassert func((10, 20, 30), (40, 50, 60)) == [(10, 40), (20, 50), (30, 60)]\nassert func(('apple', 'banana', 'cherry'), ('orange', 'pear', 'grape')) == [('apple', 'orange'), ('banana', 'pear'), ('cherry', 'grape')]\nassert func((), ()) == []\n```", "response_code": "\nassert func((1, 2, 3), (4, 5, 6)) == [(1, 4), (2, 5), (3, 6)]\nassert func(('a', 'b', 'c'), ('x', 'y', 'z')) == [('a', 'x'), ('b', 'y'), ('c', 'z')]\nassert func((10, 20, 30), (40, 50, 60)) == [(10, 40), (20, 50), (30, 60)]\nassert func(('apple', 'banana', 'cherry'), ('orange', 'pear', 'grape')) == [('apple', 'orange'), ('banana', 'pear'), ('cherry', 'grape')]\nassert func((), ()) == []\n"}
{"task_id": 218, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a, b, c): \n    '''\n    WRITE A FUNCTION TO FIND THE DIRECTRIX OF A PARABOLA.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1, 2, 3) == -1  # a=1, b=2, c=3 -> directrix = -1\nassert func(2, -3, 4) == 1  # a=2, b=-3, c=4 -> directrix = 1\nassert func(-1, 0, 5) == 5  # a=-1, b=0, c=5 -> directrix = 5\nassert func(3, 3, 3) == -1  # a=3, b=3, c=3 -> directrix = -1\nassert func(1, -5, 2) == 2  # a=1, b=-5, c=2 -> directrix = 2\n```", "response_code": "\nassert func(1, 2, 3) == -1  # a=1, b=2, c=3 -> directrix = -1\nassert func(2, -3, 4) == 1  # a=2, b=-3, c=4 -> directrix = 1\nassert func(-1, 0, 5) == 5  # a=-1, b=0, c=5 -> directrix = 5\nassert func(3, 3, 3) == -1  # a=3, b=3, c=3 -> directrix = -1\nassert func(1, -5, 2) == 2  # a=1, b=-5, c=2 -> directrix = 2\n"}
{"task_id": 219, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1, list2):\n    '''\n    WRITE A FUNCTION THAT TAKES TWO LISTS AND RETURNS TRUE IF THEY HAVE AT LEAST ONE COMMON ELEMENT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], [4, 5, 6]) == False\nassert func([1, 2, 3], [3, 4, 5]) == True\nassert func([1, 2, 3], [4, 5, 6, 3]) == True\nassert func([], [4, 5, 6]) == False\nassert func([1, 2, 3], []) == False\n```", "response_code": "\nassert func([1, 2, 3], [4, 5, 6]) == False\nassert func([1, 2, 3], [3, 4, 5]) == True\nassert func([1, 2, 3], [4, 5, 6, 3]) == True\nassert func([], [4, 5, 6]) == False\nassert func([1, 2, 3], []) == False\n"}
{"task_id": 220, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(base1,base2,height):\n    '''\n    WRITE A FUNCTION TO FIND THE MEDIAN OF A TRAPEZIUM.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 5, 4) == 4.0\nassert func(2, 4, 3) == 2.5\nassert func(6, 8, 5) == 6.0\nassert func(10, 12, 8) == 10.0\nassert func(7, 9, 6) == 7.0\n```", "response_code": "\nassert func(3, 5, 4) == 4.0\nassert func(2, 4, 3) == 2.5\nassert func(6, 8, 5) == 6.0\nassert func(10, 12, 8) == 10.0\nassert func(7, 9, 6) == 7.0\n"}
{"task_id": 221, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr, number):\n    '''\n    WRITE A FUNCTION TO CHECK WHETHER THE ENTERED NUMBER IS GREATER THAN THE ELEMENTS OF THE GIVEN ARRAY.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 6) == True\nassert func([10, 20, 30, 40, 50], 25) == False\nassert func([5, 10, 15, 20, 25], 10) == True\nassert func([100, 200, 300, 400, 500], 500) == False\nassert func([2, 4, 6, 8, 10], 1) == True\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 6) == True\nassert func([10, 20, 30, 40, 50], 25) == False\nassert func([5, 10, 15, 20, 25], 10) == True\nassert func([100, 200, 300, 400, 500], 500) == False\nassert func([2, 4, 6, 8, 10], 1) == True\n"}
{"task_id": 222, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    WRITE A FUNCTION THAT MATCHES A STRING THAT HAS AN A FOLLOWED BY ONE OR MORE B'S.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"ab\") == True\nassert func(\"abb\") == True\nassert func(\"aabb\") == True\nassert func(\"ac\") == False\nassert func(\"bb\") == False\n```", "response_code": "\nassert func(\"ab\") == True\nassert func(\"abb\") == True\nassert func(\"aabb\") == True\nassert func(\"ac\") == False\nassert func(\"bb\") == False\n"}
{"task_id": 223, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n) :\n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE LAST DIGIT OF A GIVEN NUMBER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(123) == 3\nassert func(456) == 6\nassert func(789) == 9\nassert func(100) == 0\nassert func(9999) == 9", "response_code": "assert func(123) == 3\nassert func(456) == 6\nassert func(789) == 9\nassert func(100) == 0\nassert func(9999) == 9"}
{"task_id": 224, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A PYTHON FUNCTION TO PRINT NEGATIVE NUMBERS IN A LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, -2, 3, -4, 5]) == [-2, -4]\nassert func([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]\nassert func([0, 1, 2, 3, 4]) == []\nassert func([-1, 0, 1]) == [-1]\nassert func([]) == []\n```", "response_code": "\nassert func([1, -2, 3, -4, 5]) == [-2, -4]\nassert func([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]\nassert func([0, 1, 2, 3, 4]) == []\nassert func([-1, 0, 1]) == [-1]\nassert func([]) == []\n"}
{"task_id": 225, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1):\n    '''\n    WRITE A FUNCTION TO REMOVE ODD CHARACTERS IN A STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == \"el\"\nassert func(\"python\") == \"yhn\"\nassert func(\"abcdefg\") == \"bdf\"\nassert func(\"123456789\") == \"2468\"\nassert func(\"a1b2c3d4e5f6g7\") == \"1234567\"\n```", "response_code": "\nassert func(\"hello\") == \"el\"\nassert func(\"python\") == \"yhn\"\nassert func(\"abcdefg\") == \"bdf\"\nassert func(\"123456789\") == \"2468\"\nassert func(\"a1b2c3d4e5f6g7\") == \"1234567\"\n"}
{"task_id": 226, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    WRITE A FUNCTION TO COUNT BIDIRECTIONAL TUPLE PAIRS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (2, 1), (3, 4), (4, 3)]) == 2\nassert func([(1, 2), (2, 1), (3, 4), (4, 3), (5, 5)]) == 2\nassert func([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6)]) == 2\nassert func([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6), (6, 5)]) == 3\nassert func([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6), (6, 5), (7, 8)]) == 3\n```", "response_code": "\nassert func([(1, 2), (2, 1), (3, 4), (4, 3)]) == 2\nassert func([(1, 2), (2, 1), (3, 4), (4, 3), (5, 5)]) == 2\nassert func([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6)]) == 2\nassert func([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6), (6, 5)]) == 3\nassert func([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6), (6, 5), (7, 8)]) == 3\n"}
{"task_id": 227, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(L):\n    '''\n    WRITE A FUNCTION TO CONVERT A LIST OF MULTIPLE INTEGERS INTO A SINGLE INTEGER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3]) == 123\nassert func([9, 8, 7, 6]) == 9876\nassert func([0, 0, 0, 0]) == 0\nassert func([5, 0, 2, 1]) == 5021\nassert func([3, 5, 0, 9, 2]) == 35092\n```", "response_code": "\nassert func([1, 2, 3]) == 123\nassert func([9, 8, 7, 6]) == 9876\nassert func([0, 0, 0, 0]) == 0\nassert func([5, 0, 2, 1]) == 5021\nassert func([3, 5, 0, 9, 2]) == 35092\n"}
{"task_id": 228, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    WRITE A FUNCTION TO FIND ALL ADVERBS AND THEIR POSITIONS IN A GIVEN SENTENCE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"She sings beautifully\") == [(\"beautifully\", 10)]\nassert func(\"He runs very fast\") == [(\"very\", 7), (\"fast\", 12)]\nassert func(\"They spoke quite loudly\") == [(\"quite\", 11), (\"loudly\", 18)]\nassert func(\"The dog barks loudly and continuously\") == [(\"loudly\", 16), (\"continuously\", 27)]\nassert func(\"She dances gracefully and elegantly\") == [(\"gracefully\", 13), (\"elegantly\", 26)]\n```", "response_code": "\nassert func(\"She sings beautifully\") == [(\"beautifully\", 10)]\nassert func(\"He runs very fast\") == [(\"very\", 7), (\"fast\", 12)]\nassert func(\"They spoke quite loudly\") == [(\"quite\", 11), (\"loudly\", 18)]\nassert func(\"The dog barks loudly and continuously\") == [(\"loudly\", 16), (\"continuously\", 27)]\nassert func(\"She dances gracefully and elegantly\") == [(\"gracefully\", 13), (\"elegantly\", 26)]\n"}
{"task_id": 229, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l):\n    '''\n    WRITE A FUNCTION TO FIND THE SURFACE AREA OF A CUBE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 6\nassert func(2) == 24\nassert func(3) == 54\nassert func(4) == 96\nassert func(5) == 150\n```", "response_code": "\nassert func(1) == 6\nassert func(2) == 24\nassert func(3) == 54\nassert func(4) == 96\nassert func(5) == 150\n"}
{"task_id": 230, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from array import array\ndef func(nums):\n    '''\n    WRITE A FUNCTION TO FIND THE RATIO OF POSITIVE NUMBERS IN AN ARRAY OF INTEGERS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(array('i', [1, 2, 3, 4, 5])) == 1.0\nassert func(array('i', [-1, -2, -3, -4, -5])) == 0.0\nassert func(array('i', [0, 0, 0, 0, 0])) == 0.0\nassert func(array('i', [1, -2, 3, -4, 5])) == 0.6\nassert func(array('i', [-1, 2, -3, 4, -5])) == 0.4\n```", "response_code": "\nassert func(array('i', [1, 2, 3, 4, 5])) == 1.0\nassert func(array('i', [-1, -2, -3, -4, -5])) == 0.0\nassert func(array('i', [0, 0, 0, 0, 0])) == 0.0\nassert func(array('i', [1, -2, 3, -4, 5])) == 0.6\nassert func(array('i', [-1, 2, -3, 4, -5])) == 0.4\n"}
{"task_id": 231, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE LARGEST NEGATIVE NUMBER FROM THE GIVEN LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([-1, -2, -3, -4, -5]) == -1\nassert func([-5, -4, -3, -2, -1]) == -1\nassert func([-10, -20, -30, -40, -50]) == -10\nassert func([-5, -10, -15, -20, -25]) == -5\nassert func([-2, -4, -6, -8, -10]) == -2\n```", "response_code": "\nassert func([-1, -2, -3, -4, -5]) == -1\nassert func([-5, -4, -3, -2, -1]) == -1\nassert func([-10, -20, -30, -40, -50]) == -10\nassert func([-5, -10, -15, -20, -25]) == -5\nassert func([-2, -4, -6, -8, -10]) == -2\n"}
{"task_id": 232, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list, K):\n    '''\n    WRITE A FUNCTION TO TRIM EACH TUPLE BY K IN THE GIVEN TUPLE LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == [(2, 3), (5, 6), (8, 9)]\nassert func([(10, 20, 30), (40, 50, 60), (70, 80, 90)], 2) == [(30,), (60,), (90,)]\nassert func([(100, 200, 300), (400, 500, 600), (700, 800, 900)], 0) == [(100, 200, 300), (400, 500, 600), (700, 800, 900)]\nassert func([(1, 2), (3, 4), (5, 6)], 1) == [(2,), (4,), (6,)]\nassert func([(1,), (2,), (3,)], 0) == [(), (), ()]\n```", "response_code": "\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == [(2, 3), (5, 6), (8, 9)]\nassert func([(10, 20, 30), (40, 50, 60), (70, 80, 90)], 2) == [(30,), (60,), (90,)]\nassert func([(100, 200, 300), (400, 500, 600), (700, 800, 900)], 0) == [(100, 200, 300), (400, 500, 600), (700, 800, 900)]\nassert func([(1, 2), (3, 4), (5, 6)], 1) == [(2,), (4,), (6,)]\nassert func([(1,), (2,), (3,)], 0) == [(), (), ()]\n"}
{"task_id": 233, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    WRITE A FUNCTION TO PERFORM INDEX WISE MULTIPLICATION OF TUPLE ELEMENTS IN THE GIVEN TWO TUPLES.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (4, 5, 6)) == (4, 10, 18)\nassert func((0, 0, 0), (1, 2, 3)) == (0, 0, 0)\nassert func((-1, -2, -3), (1, 2, 3)) == (-1, -4, -9)\nassert func((5, 10, 15), (2, 4, 6)) == (10, 40, 90)\nassert func((2, 3, 4), (0, 0, 0)) == (0, 0, 0)\n```", "response_code": "\nassert func((1, 2, 3), (4, 5, 6)) == (4, 10, 18)\nassert func((0, 0, 0), (1, 2, 3)) == (0, 0, 0)\nassert func((-1, -2, -3), (1, 2, 3)) == (-1, -4, -9)\nassert func((5, 10, 15), (2, 4, 6)) == (10, 40, 90)\nassert func((2, 3, 4), (0, 0, 0)) == (0, 0, 0)\n"}
{"task_id": 234, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from collections import Counter \ndef func(tup, lst): \n    '''\n    WRITE A PYTHON FUNCTION TO COUNT THE OCCURENCE OF ALL ELEMENTS OF LIST IN A TUPLE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3, 4, 5, 1, 2, 3), [1, 2, 6]) == {1: 2, 2: 2, 6: 0}\nassert func(('a', 'b', 'c', 'a', 'b', 'd'), ['a', 'b', 'e']) == {'a': 2, 'b': 2, 'e': 0}\nassert func((1, 2, 3, 4, 5), [1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}\nassert func(('apple', 'banana', 'apple', 'cherry'), ['apple', 'banana', 'kiwi']) == {'apple': 2, 'banana': 1, 'kiwi': 0}\nassert func((), [1, 2, 3]) == {1: 0, 2: 0, 3: 0}\n```", "response_code": "\nassert func((1, 2, 3, 4, 5, 1, 2, 3), [1, 2, 6]) == {1: 2, 2: 2, 6: 0}\nassert func(('a', 'b', 'c', 'a', 'b', 'd'), ['a', 'b', 'e']) == {'a': 2, 'b': 2, 'e': 0}\nassert func((1, 2, 3, 4, 5), [1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}\nassert func(('apple', 'banana', 'apple', 'cherry'), ['apple', 'banana', 'kiwi']) == {'apple': 2, 'banana': 1, 'kiwi': 0}\nassert func((), [1, 2, 3]) == {1: 0, 2: 0, 3: 0}\n"}
{"task_id": 235, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    WRITE A FUNCTION TO FIND CUBES OF INDIVIDUAL ELEMENTS IN A LIST USING LAMBDA FUNCTION.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]\nassert func([0, -1, 2, -3, 4]) == [0, -1, 8, -27, 64]\nassert func([10, 20, 30, 40, 50]) == [1000, 8000, 27000, 64000, 125000]\nassert func([-2, -4, -6, -8, -10]) == [-8, -64, -216, -512, -1000]\nassert func([1.5, 2.5, 3.5, 4.5, 5.5]) == [3.375, 15.625, 42.875, 91.125, 166.375]\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]\nassert func([0, -1, 2, -3, 4]) == [0, -1, 8, -27, 64]\nassert func([10, 20, 30, 40, 50]) == [1000, 8000, 27000, 64000, 125000]\nassert func([-2, -4, -6, -8, -10]) == [-8, -64, -216, -512, -1000]\nassert func([1.5, 2.5, 3.5, 4.5, 5.5]) == [3.375, 15.625, 42.875, 91.125, 166.375]\n"}
{"task_id": 236, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A FUNCTION TO CALCULATE THE SUM OF PERRIN NUMBERS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(0) == 3\nassert func(1) == 0\nassert func(5) == 10\nassert func(10) == 57\nassert func(15) == 165", "response_code": "assert func(0) == 3\nassert func(1) == 0\nassert func(5) == 10\nassert func(10) == 57\nassert func(15) == 165"}
{"task_id": 237, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str, l):\n    '''\n    WRITE A FUNCTION TO EXTRACT SPECIFIED SIZE OF STRINGS FROM A GIVE LIST OF STRING VALUES.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([\"apple\", \"banana\", \"cherry\", \"date\"], 5) == [\"apple\", \"banan\", \"cherr\", \"date\"]\nassert func([\"hello\", \"world\", \"python\", \"programming\"], 3) == [\"hel\", \"wor\", \"pyt\", \"pro\"]\nassert func([\"cat\", \"dog\", \"fish\", \"bird\"], 2) == [\"ca\", \"do\", \"fi\", \"bi\"]\nassert func([\"red\", \"green\", \"blue\", \"yellow\"], 4) == [\"red\", \"gree\", \"blue\", \"yell\"]\nassert func([\"one\", \"two\", \"three\", \"four\"], 6) == [\"one\", \"two\", \"three\", \"four\"]", "response_code": "assert func([\"apple\", \"banana\", \"cherry\", \"date\"], 5) == [\"apple\", \"banan\", \"cherr\", \"date\"]\nassert func([\"hello\", \"world\", \"python\", \"programming\"], 3) == [\"hel\", \"wor\", \"pyt\", \"pro\"]\nassert func([\"cat\", \"dog\", \"fish\", \"bird\"], 2) == [\"ca\", \"do\", \"fi\", \"bi\"]\nassert func([\"red\", \"green\", \"blue\", \"yellow\"], 4) == [\"red\", \"gree\", \"blue\", \"yell\"]\nassert func([\"one\", \"two\", \"three\", \"four\"], 6) == [\"one\", \"two\", \"three\", \"four\"]"}
{"task_id": 238, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text1):\n    '''\n    WRITE A FUNCTION TO REMOVE ALL WHITESPACES FROM THE GIVEN STRING USING REGEX.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello World\") == \"HelloWorld\"\nassert func(\"  Python  \") == \"Python\"\nassert func(\"  Regex  is  fun  \") == \"Regexisfun\"\nassert func(\"123 456 789\") == \"123456789\"\nassert func(\"  Special  Characters  !@#$%  \") == \"SpecialCharacters!@#$%\"\n```", "response_code": "\nassert func(\"Hello World\") == \"HelloWorld\"\nassert func(\"  Python  \") == \"Python\"\nassert func(\"  Regex  is  fun  \") == \"Regexisfun\"\nassert func(\"123 456 789\") == \"123456789\"\nassert func(\"  Special  Characters  !@#$%  \") == \"SpecialCharacters!@#$%\"\n"}
{"task_id": 239, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(actual_cost,sale_amount): \n    '''\n    WRITE A FUNCTION THAT GIVES LOSS AMOUNT IF THE GIVEN AMOUNT HAS LOSS ELSE RETURN NONE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(100, 80) == 20\nassert func(50, 50) == None\nassert func(200, 150) == 50\nassert func(75, 100) == None\nassert func(120, 90) == 30", "response_code": "assert func(100, 80) == 20\nassert func(50, 50) == None\nassert func(200, 150) == 50\nassert func(75, 100) == None\nassert func(120, 90) == 30"}
{"task_id": 240, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math \ndef func(n) : \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SUM OF EVEN FACTORS OF A NUMBER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(6) == 12\nassert func(10) == 18\nassert func(15) == 24\nassert func(20) == 42\nassert func(30) == 72\n```", "response_code": "\nassert func(6) == 12\nassert func(10) == 18\nassert func(15) == 24\nassert func(20) == 42\nassert func(30) == 72\n"}
{"task_id": 241, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    WRITE A FUNCTION THAT MATCHES A WORD CONTAINING 'Z'.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"This is a test\") == None\nassert func(\"I like pizza with extra cheese\") == None\nassert func(\"The lazy dog jumps over the quick brown fox\") == None\nassert func(\"Zoom meeting at 3pm\") == \"Zoom\"\nassert func(\"The wizard cast a spell\") == None\n```", "response_code": "\nassert func(\"This is a test\") == None\nassert func(\"I like pizza with extra cheese\") == None\nassert func(\"The lazy dog jumps over the quick brown fox\") == None\nassert func(\"Zoom meeting at 3pm\") == \"Zoom\"\nassert func(\"The wizard cast a spell\") == None\n"}
{"task_id": 242, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(monthnum2):\n    '''\n    WRITE A FUNCTION TO CHECK WHETHER THE GIVEN MONTH NUMBER CONTAINS 31 DAYS OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == True\nassert func(4) == True\nassert func(7) == True\nassert func(9) == True\nassert func(11) == True", "response_code": "assert func(1) == True\nassert func(4) == True\nassert func(7) == True\nassert func(9) == True\nassert func(11) == True"}
{"task_id": 243, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(stringlist):\n    '''\n    WRITE A FUNCTION TO REVERSE STRINGS IN A GIVEN LIST OF STRING VALUES.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['hello', 'world']) == ['olleh', 'dlrow']\nassert func(['python', 'is', 'awesome']) == ['nohtyp', 'si', 'emosewa']\nassert func(['racecar', 'level', 'radar']) == ['racecar', 'level', 'radar']\nassert func(['12345', '67890']) == ['54321', '09876']\nassert func(['abc', 'def', 'ghi']) == ['cba', 'fed', 'ihg']\n```", "response_code": "\nassert func(['hello', 'world']) == ['olleh', 'dlrow']\nassert func(['python', 'is', 'awesome']) == ['nohtyp', 'si', 'emosewa']\nassert func(['racecar', 'level', 'radar']) == ['racecar', 'level', 'radar']\nassert func(['12345', '67890']) == ['54321', '09876']\nassert func(['abc', 'def', 'ghi']) == ['cba', 'fed', 'ihg']\n"}
{"task_id": 244, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lst): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SUBLIST HAVING MINIMUM LENGTH.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [4, 5]\nassert func([[1, 2], [3, 4, 5], [6, 7]]) == [1, 2]\nassert func([[1], [2], [3], [4]]) == [1]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9]\nassert func([[1, 2, 3, 4], [5, 6], [7, 8, 9]]) == [5, 6]", "response_code": "assert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [4, 5]\nassert func([[1, 2], [3, 4, 5], [6, 7]]) == [1, 2]\nassert func([[1], [2], [3], [4]]) == [1]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9]\nassert func([[1, 2, 3, 4], [5, 6], [7, 8, 9]]) == [5, 6]"}
{"task_id": 245, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l,b):\n    '''\n    WRITE A FUNCTION TO FIND THE AREA OF A RECTANGLE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(3, 4) == 12\nassert func(5, 7) == 35\nassert func(10, 2) == 20\nassert func(6, 9) == 54\nassert func(8, 8) == 64", "response_code": "assert func(3, 4) == 12\nassert func(5, 7) == 35\nassert func(10, 2) == 20\nassert func(6, 9) == 54\nassert func(8, 8) == 64"}
{"task_id": 246, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(str1):\n    '''\n    WRITE A FUNCTION TO REMOVE UPPERCASE SUBSTRINGS FROM A GIVEN STRING BY USING REGEX.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello World\") == \"ello \"\nassert func(\"PythonIsFun\") == \"ython\"\nassert func(\"ALLCAPS\") == \"\"\nassert func(\"123ABC456\") == \"123456\"\nassert func(\"UPPERCASElowercase\") == \"lowercase\"\n```", "response_code": "\nassert func(\"Hello World\") == \"ello \"\nassert func(\"PythonIsFun\") == \"ython\"\nassert func(\"ALLCAPS\") == \"\"\nassert func(\"123ABC456\") == \"123456\"\nassert func(\"UPPERCASElowercase\") == \"lowercase\"\n"}
{"task_id": 247, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lst): \n    '''\n    WRITE A PYTHON FUNCTION TO GET THE FIRST ELEMENT OF EACH SUBLIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]\nassert func([[10, 20], [30, 40], [50, 60]]) == [10, 30, 50]\nassert func([[100], [200], [300]]) == [100, 200, 300]\nassert func([[1, 2], [3, 4], [5, 6]]) == [1, 3, 5]\nassert func([[0], [0], [0]]) == [0, 0, 0]", "response_code": "assert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]\nassert func([[10, 20], [30, 40], [50, 60]]) == [10, 30, 50]\nassert func([[100], [200], [300]]) == [100, 200, 300]\nassert func([[1, 2], [3, 4], [5, 6]]) == [1, 3, 5]\nassert func([[0], [0], [0]]) == [0, 0, 0]"}
{"task_id": 248, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str):\n    '''\n    WRITE A PYTHON FUNCTION TO COUNT THE UPPER CASE CHARACTERS IN A GIVEN STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello World\") == 2\nassert func(\"Python Programming\") == 2\nassert func(\"UPPERCASE\") == 8\nassert func(\"lowercase\") == 0\nassert func(\"12345\") == 0\n```", "response_code": "\nassert func(\"Hello World\") == 2\nassert func(\"Python Programming\") == 2\nassert func(\"UPPERCASE\") == 8\nassert func(\"lowercase\") == 0\nassert func(\"12345\") == 0\n"}
{"task_id": 249, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A FUNCTION TO FIND ALL POSSIBLE COMBINATIONS OF THE ELEMENTS OF A GIVEN LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2]) == [[1], [2], [1, 2], [2, 1]]\nassert func([1, 2, 3]) == [[1], [2], [3], [1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2], [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\nassert func(['a', 'b', 'c']) == [['a'], ['b'], ['c'], ['a', 'b'], ['a', 'c'], ['b', 'a'], ['b', 'c'], ['c', 'a'], ['c', 'b'], ['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]\nassert func([4, 5, 6, 7]) == [[4], [5], [6], [7], [4, 5], [4, 6], [4, 7], [5, 4], [5, 6], [5, 7], [6, 4], [6, 5], [6, 7], [7, 4], [7, 5], [7, 6], [4, 5, 6], [4, 5, 7], [4, 6, 5], [4, 6, 7], [4, 7, 5], [4, 7, 6], [5, 4, 6], [5, 4, 7], [5, 6, 4], [5, 6, 7], [5, 7, 4], [5, 7, 6], [6, 4, 5], [6, 4, 7], [6, 5, 4], [6, 5, 7], [6, 7, 4], [6, 7, 5], [7, 4, 5], [7, 4, 6], [7, 5, 4], [7, 5, 6], [7, 6, 4], [7, 6, 5]]\nassert func(['x', 'y', 'z', 'w']) == [['x'], ['y'], ['z'], ['w'], ['x', 'y'], ['x', 'z'], ['x', 'w'], ['y', 'x'], ['y', 'z'], ['y', 'w'], ['z', 'x'], ['z', 'y'], ['z', 'w'], ['w', 'x'], ['w', 'y'], ['w', 'z'], ['x', 'y', 'z'], ['x', 'y', 'w'], ['x', 'z', 'y'], ['x', 'z', 'w'], ['x', 'w', 'y'], ['x', 'w', 'z'], ['y', 'x', 'z'], ['y', 'x', 'w'], ['y', 'z', 'x'], ['y', 'z', 'w'], ['y', 'w', 'x'], ['y', 'w', 'z'], ['z', 'x', 'y'], ['z', 'x', 'w'], ['z', 'y', 'x'], ['z', 'y', 'w'], ['z', 'w', 'x'], ['z', 'w', 'y'], ['w', 'x', 'y'], ['w', 'x', 'z'], ['w', 'y', 'x'], ['w', 'y', 'z'], ['w', 'z', 'x'], ['w', 'z', 'y']]\n```", "response_code": "\nassert func([1, 2]) == [[1], [2], [1, 2], [2, 1]]\nassert func([1, 2, 3]) == [[1], [2], [3], [1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2], [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\nassert func(['a', 'b', 'c']) == [['a'], ['b'], ['c'], ['a', 'b'], ['a', 'c'], ['b', 'a'], ['b', 'c'], ['c', 'a'], ['c', 'b'], ['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]\nassert func([4, 5, 6, 7]) == [[4], [5], [6], [7], [4, 5], [4, 6], [4, 7], [5, 4], [5, 6], [5, 7], [6, 4], [6, 5], [6, 7], [7, 4], [7, 5], [7, 6], [4, 5, 6], [4, 5, 7], [4, 6, 5], [4, 6, 7], [4, 7, 5], [4, 7, 6], [5, 4, 6], [5, 4, 7], [5, 6, 4], [5, 6, 7], [5, 7, 4], [5, 7, 6], [6, 4, 5], [6, 4, 7], [6, 5, 4], [6, 5, 7], [6, 7, 4], [6, 7, 5], [7, 4, 5], [7, 4, 6], [7, 5, 4], [7, 5, 6], [7, 6, 4], [7, 6, 5]]\nassert func(['x', 'y', 'z', 'w']) == [['x'], ['y'], ['z'], ['w'], ['x', 'y'], ['x', 'z'], ['x', 'w'], ['y', 'x'], ['y', 'z'], ['y', 'w'], ['z', 'x'], ['z', 'y'], ['z', 'w'], ['w', 'x'], ['w', 'y'], ['w', 'z'], ['x', 'y', 'z'], ['x', 'y', 'w'], ['x', 'z', 'y'], ['x', 'z', 'w'], ['x', 'w', 'y'], ['x', 'w', 'z'], ['y', 'x', 'z'], ['y', 'x', 'w'], ['y', 'z', 'x'], ['y', 'z', 'w'], ['y', 'w', 'x'], ['y', 'w', 'z'], ['z', 'x', 'y'], ['z', 'x', 'w'], ['z', 'y', 'x'], ['z', 'y', 'w'], ['z', 'w', 'x'], ['z', 'w', 'y'], ['w', 'x', 'y'], ['w', 'x', 'z'], ['w', 'y', 'x'], ['w', 'y', 'z'], ['w', 'z', 'x'], ['w', 'z', 'y']]\n"}
{"task_id": 250, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):\n    '''\n    WRITE A FUNCTION TO FIND THE MAXIMUM PRODUCT SUBARRAY OF THE GIVEN ARRAY.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([2, 3, -2, 4]) == 6\nassert func([-2, 0, -1]) == 0\nassert func([1, 2, 3, 4]) == 24\nassert func([-2, -3, 0, -2, -40]) == 80\nassert func([0, 0, 0, 0]) == 0\n```", "response_code": "\nassert func([2, 3, -2, 4]) == 6\nassert func([-2, 0, -1]) == 0\nassert func([1, 2, 3, 4]) == 24\nassert func([-2, -3, 0, -2, -40]) == 80\nassert func([0, 0, 0, 0]) == 0\n"}
{"task_id": 251, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(dict, n):\n    '''\n    WRITE A FUNCTION TO CHECK IF ALL VALUES ARE SAME IN A DICTIONARY.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func({'a': 1, 'b': 1, 'c': 1}, 1) == True\nassert func({'x': 5, 'y': 5, 'z': 6}, 2) == False\nassert func({'p': 3, 'q': 3, 'r': 3}, 3) == True\nassert func({'m': 0, 'n': 0, 'o': 0}, 0) == True\nassert func({'d': 2, 'e': 2, 'f': 1}, 1) == False", "response_code": "assert func({'a': 1, 'b': 1, 'c': 1}, 1) == True\nassert func({'x': 5, 'y': 5, 'z': 6}, 2) == False\nassert func({'p': 3, 'q': 3, 'r': 3}, 3) == True\nassert func({'m': 0, 'n': 0, 'o': 0}, 0) == True\nassert func({'d': 2, 'e': 2, 'f': 1}, 1) == False"}
{"task_id": 252, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(dict1):\n    '''\n    WRITE A FUNCTION TO DROP EMPTY ITEMS FROM A GIVEN DICTIONARY.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func({'a': 1, 'b': 2, 'c': None, 'd': ''}) == {'a': 1, 'b': 2}\nassert func({'x': 10, 'y': None, 'z': 0}) == {'x': 10, 'z': 0}\nassert func({'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}) == {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}\nassert func({'a': 1, 'b': '', 'c': None, 'd': 0}) == {'a': 1}\nassert func({'empty': '', 'none': None, 'zero': 0}) == {}", "response_code": "assert func({'a': 1, 'b': 2, 'c': None, 'd': ''}) == {'a': 1, 'b': 2}\nassert func({'x': 10, 'y': None, 'z': 0}) == {'x': 10, 'z': 0}\nassert func({'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}) == {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}\nassert func({'a': 1, 'b': '', 'c': None, 'd': 0}) == {'a': 1}\nassert func({'empty': '', 'none': None, 'zero': 0}) == {}"}
{"task_id": 253, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):   \n    '''\n    WRITE A FUNCTION TO FIND THE MAXIMUM PRODUCT FORMED BY MULTIPLYING NUMBERS OF AN INCREASING SUBSEQUENCE OF THAT ARRAY.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 120\nassert func([5, 4, 3, 2, 1]) == 20\nassert func([3, 1, 4, 2, 5]) == 60\nassert func([2, 3, 1, 4, 5]) == 60\nassert func([1, 2, 3, 4, 5, 6]) == 180\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 120\nassert func([5, 4, 3, 2, 1]) == 20\nassert func([3, 1, 4, 2, 5]) == 60\nassert func([2, 3, 1, 4, 5]) == 60\nassert func([1, 2, 3, 4, 5, 6]) == 180\n"}
{"task_id": 254, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    WRITE A FUNCTION TO FIND THE PAIRWISE ADDITION OF THE ELEMENTS OF THE GIVEN TUPLES.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func((1, 2, 3, 4)) == (3, 7)\nassert func((-1, 5, 10, -3)) == (4, 7)\nassert func((0, 0, 0, 0)) == (0, 0)\nassert func((2, 3, 5, 7)) == (5, 12)\nassert func((-2, -3, -5, -7)) == (-5, -12)", "response_code": "assert func((1, 2, 3, 4)) == (3, 7)\nassert func((-1, 5, 10, -3)) == (4, 7)\nassert func((0, 0, 0, 0)) == (0, 0)\nassert func((2, 3, 5, 7)) == (5, 12)\nassert func((-2, -3, -5, -7)) == (-5, -12)"}
{"task_id": 255, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr, n): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND REMAINDER OF ARRAY MULTIPLICATION DIVIDED BY N.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([3, 4, 5], 7) == 1\nassert func([1, 2, 3, 4], 5) == 4\nassert func([2, 3, 4, 5], 10) == 0\nassert func([5, 6, 7, 8], 3) == 2\nassert func([10, 20, 30], 4) == 0\n```", "response_code": "\nassert func([3, 4, 5], 7) == 1\nassert func([1, 2, 3, 4], 5) == 4\nassert func([2, 3, 4, 5], 10) == 0\nassert func([5, 6, 7, 8], 3) == 2\nassert func([10, 20, 30], 4) == 0\n"}
{"task_id": 256, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l): \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER THE GIVEN LIST CONTAINS CONSECUTIVE NUMBERS OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == True\nassert func([5, 4, 3, 2, 1]) == True\nassert func([1, 3, 5, 7, 9]) == False\nassert func([1, 2, 4, 5, 6]) == False\nassert func([10, 11, 12, 13, 14]) == True\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == True\nassert func([5, 4, 3, 2, 1]) == True\nassert func([1, 3, 5, 7, 9]) == False\nassert func([1, 2, 4, 5, 6]) == False\nassert func([10, 11, 12, 13, 14]) == True\n"}
{"task_id": 257, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list1, test_list2):\n    '''\n    WRITE A FUNCTION TO FIND THE TUPLE INTERSECTION OF ELEMENTS IN THE GIVEN TUPLE LIST IRRESPECTIVE OF THEIR ORDER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (2, 3), (3, 4)], [(2, 1), (3, 2), (4, 3)]) == [(1, 2), (2, 3), (3, 4)]\nassert func([(1, 2), (2, 3), (3, 4)], [(4, 3), (3, 2), (2, 1)]) == [(1, 2), (2, 3), (3, 4)]\nassert func([(1, 2), (2, 3), (3, 4)], [(5, 6), (6, 7), (7, 8)]) == []\nassert func([(1, 2), (2, 3), (3, 4)], [(1, 2), (2, 3), (3, 4)]) == [(1, 2), (2, 3), (3, 4)]\nassert func([(1, 2), (2, 3), (3, 4)], [(3, 4), (4, 5), (5, 6)]) == [(3, 4)]\n```", "response_code": "\nassert func([(1, 2), (2, 3), (3, 4)], [(2, 1), (3, 2), (4, 3)]) == [(1, 2), (2, 3), (3, 4)]\nassert func([(1, 2), (2, 3), (3, 4)], [(4, 3), (3, 2), (2, 1)]) == [(1, 2), (2, 3), (3, 4)]\nassert func([(1, 2), (2, 3), (3, 4)], [(5, 6), (6, 7), (7, 8)]) == []\nassert func([(1, 2), (2, 3), (3, 4)], [(1, 2), (2, 3), (3, 4)]) == [(1, 2), (2, 3), (3, 4)]\nassert func([(1, 2), (2, 3), (3, 4)], [(3, 4), (4, 5), (5, 6)]) == [(3, 4)]\n"}
{"task_id": 258, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1,ch,newch):\n    '''\n    WRITE A FUNCTION TO REPLACE CHARACTERS IN A STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\", \"l\", \"x\") == \"hexxo\"\nassert func(\"world\", \"o\", \"a\") == \"warld\"\nassert func(\"banana\", \"a\", \"o\") == \"bonono\"\nassert func(\"apple\", \"p\", \"b\") == \"abble\"\nassert func(\"python\", \"t\", \"z\") == \"pyzhon\"\n```", "response_code": "\nassert func(\"hello\", \"l\", \"x\") == \"hexxo\"\nassert func(\"world\", \"o\", \"a\") == \"warld\"\nassert func(\"banana\", \"a\", \"o\") == \"bonono\"\nassert func(\"apple\", \"p\", \"b\") == \"abble\"\nassert func(\"python\", \"t\", \"z\") == \"pyzhon\"\n"}
{"task_id": 259, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from collections import Counter\ndef func(dict1):\n    '''\n    WRITE A FUNCTION TO SORT COUNTER BY VALUE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test Case 1\ndict1 = {'a': 3, 'b': 1, 'c': 2}\nassert func(dict1) == [('b', 1), ('c', 2), ('a', 3)]\n\n# Test Case 2\ndict2 = {'x': 5, 'y': 5, 'z': 5}\nassert func(dict2) == [('x', 5), ('y', 5), ('z', 5)]\n\n# Test Case 3\ndict3 = {'apple': 10, 'banana': 5, 'cherry': 8}\nassert func(dict3) == [('banana', 5), ('cherry', 8), ('apple', 10)]\n\n# Test Case 4\ndict4 = {'red': 0, 'green': 0, 'blue': 0}\nassert func(dict4) == [('red', 0), ('green', 0), ('blue', 0)]\n\n# Test Case 5\ndict5 = {'one': 100, 'two': 200, 'three': 300}\nassert func(dict5) == [('one', 100), ('two', 200), ('three', 300)]\n```", "response_code": "\n# Test Case 1\ndict1 = {'a': 3, 'b': 1, 'c': 2}\nassert func(dict1) == [('b', 1), ('c', 2), ('a', 3)]\n\n# Test Case 2\ndict2 = {'x': 5, 'y': 5, 'z': 5}\nassert func(dict2) == [('x', 5), ('y', 5), ('z', 5)]\n\n# Test Case 3\ndict3 = {'apple': 10, 'banana': 5, 'cherry': 8}\nassert func(dict3) == [('banana', 5), ('cherry', 8), ('apple', 10)]\n\n# Test Case 4\ndict4 = {'red': 0, 'green': 0, 'blue': 0}\nassert func(dict4) == [('red', 0), ('green', 0), ('blue', 0)]\n\n# Test Case 5\ndict5 = {'one': 100, 'two': 200, 'three': 300}\nassert func(dict5) == [('one', 100), ('two', 200), ('three', 300)]\n"}
{"task_id": 260, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SUM OF THE LARGEST AND SMALLEST VALUE IN A GIVEN ARRAY.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 6\nassert func([10, 20, 30, 40, 50]) == 60\nassert func([-5, 0, 5, 10, 15]) == 10\nassert func([100, 200, 300, 400, 500]) == 600\nassert func([-10, -20, -30, -40, -50]) == -60\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 6\nassert func([10, 20, 30, 40, 50]) == 60\nassert func([-5, 0, 5, 10, 15]) == 10\nassert func([100, 200, 300, 400, 500]) == 600\nassert func([-10, -20, -30, -40, -50]) == -60\n"}
{"task_id": 261, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(string):\n    '''\n    WRITE A PYTHON FUNCTION TO CONVERT THE GIVEN STRING TO LOWER CASE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello World\") == \"hello world\"\nassert func(\"Python Programming\") == \"python programming\"\nassert func(\"UPPERCASE\") == \"uppercase\"\nassert func(\"12345\") == \"12345\"\nassert func(\"\") == \"\"\n```", "response_code": "\nassert func(\"Hello World\") == \"hello world\"\nassert func(\"Python Programming\") == \"python programming\"\nassert func(\"UPPERCASE\") == \"uppercase\"\nassert func(\"12345\") == \"12345\"\nassert func(\"\") == \"\"\n"}
{"task_id": 262, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(str1):\n    '''\n    WRITE A FUNCTION TO REMOVE LOWERCASE SUBSTRINGS FROM A GIVEN STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"HelloWorld\") == \"HW\"\nassert func(\"abc123def456\") == \"123456\"\nassert func(\"PythonIsFun\") == \"PIF\"\nassert func(\"12345\") == \"12345\"\nassert func(\"aBcDeF\") == \"BDF\"\n```", "response_code": "\nassert func(\"HelloWorld\") == \"HW\"\nassert func(\"abc123def456\") == \"123456\"\nassert func(\"PythonIsFun\") == \"PIF\"\nassert func(\"12345\") == \"12345\"\nassert func(\"aBcDeF\") == \"BDF\"\n"}
{"task_id": 263, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n) :  \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE FIRST DIGIT OF A GIVEN NUMBER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(123) == 1\nassert func(4567) == 4\nassert func(987654321) == 9\nassert func(555) == 5\nassert func(0) == 0", "response_code": "assert func(123) == 1\nassert func(4567) == 4\nassert func(987654321) == 9\nassert func(555) == 5\nassert func(0) == 0"}
{"task_id": 264, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND ODD NUMBERS FROM A MIXED LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == [1, 3, 5]\nassert func([2, 4, 6, 8, 10]) == []\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\nassert func([11, 22, 33, 44, 55]) == [11, 33, 55]\nassert func([2, 3, 5, 7, 11]) == [3, 5, 7, 11]\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == [1, 3, 5]\nassert func([2, 4, 6, 8, 10]) == []\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\nassert func([11, 22, 33, 44, 55]) == [11, 33, 55]\nassert func([2, 3, 5, 7, 11]) == [3, 5, 7, 11]\n"}
{"task_id": 265, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n) :  \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE DIFFERENCE BETWEEN SUM OF CUBES OF FIRST N NATURAL NUMBERS AND THE SUM OF FIRST N NATURAL NUMBERS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 0\nassert func(2) == 7\nassert func(3) == 36\nassert func(4) == 99\nassert func(5) == 220\n```", "response_code": "\nassert func(1) == 0\nassert func(2) == 7\nassert func(3) == 36\nassert func(4) == 99\nassert func(5) == 220\n"}
{"task_id": 266, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(A,N) : \n    '''\n    WRITE A PYTHON FUNCTION TO COUNT THE PAIRS WITH XOR AS AN ODD NUMBER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([2, 3, 4, 5, 6], 5) == 4\nassert func([1, 2, 3, 4, 5], 5) == 6\nassert func([10, 15, 20, 25], 4) == 4\nassert func([7, 8, 9, 10, 11], 5) == 6\nassert func([3, 5, 7, 9], 4) == 4\n```", "response_code": "\nassert func([2, 3, 4, 5, 6], 5) == 4\nassert func([1, 2, 3, 4, 5], 5) == 6\nassert func([10, 15, 20, 25], 4) == 4\nassert func([7, 8, 9, 10, 11], 5) == 6\nassert func([3, 5, 7, 9], 4) == 4\n"}
{"task_id": 267, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(string):\n    '''\n    WRITE A FUNCTION TO TOGGLE CHARACTERS CASE IN A STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello World\") == \"hELLO wORLD\"\nassert func(\"123abc\") == \"123ABC\"\nassert func(\"Python is Fun\") == \"pYTHON IS fUN\"\nassert func(\"eXaMpLe\") == \"ExAmPlE\"\nassert func(\"\") == \"\"\n```", "response_code": "\nassert func(\"Hello World\") == \"hELLO wORLD\"\nassert func(\"123abc\") == \"123ABC\"\nassert func(\"Python is Fun\") == \"pYTHON IS fUN\"\nassert func(\"eXaMpLe\") == \"ExAmPlE\"\nassert func(\"\") == \"\"\n"}
{"task_id": 268, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n1, n2):\n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE DIGIT DISTANCE BETWEEN TWO INTEGERS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(123, 456) == 3\nassert func(100, 1000) == 1\nassert func(555, 555) == 0\nassert func(9876, 1234) == 4\nassert func(0, 999) == 3\n```", "response_code": "\nassert func(123, 456) == 3\nassert func(100, 1000) == 1\nassert func(555, 555) == 0\nassert func(9876, 1234) == 4\nassert func(0, 999) == 3\n"}
{"task_id": 269, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a, size):\n    '''\n    WRITE A FUNCTION TO FIND THE LARGEST SUM OF CONTIGUOUS SUBARRAY IN THE GIVEN ARRAY.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 5) == 15\nassert func([-2, 1, -3, 4, -1, 2, 1, -5, 4], 9) == 6\nassert func([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert func([1, -2, 3, -2, 5], 5) == 6\nassert func([-1, -2, -3, -4, -5], 5) == -1\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 5) == 15\nassert func([-2, 1, -3, 4, -1, 2, 1, -5, 4], 9) == 6\nassert func([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert func([1, -2, 3, -2, 5], 5) == 6\nassert func([-1, -2, -3, -4, -5], 5) == -1\n"}
{"task_id": 270, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    WRITE A FUNCTION TO FIND THE UNION OF ELEMENTS OF THE GIVEN TUPLES.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (2, 3, 4)) == (1, 2, 3, 4)\nassert func(('a', 'b', 'c'), ('c', 'd', 'e')) == ('a', 'b', 'c', 'd', 'e')\nassert func((10, 20, 30), (30, 40, 50)) == (10, 20, 30, 40, 50)\nassert func(('x', 'y'), ('z', 'x')) == ('x', 'y', 'z')\nassert func((), (1, 2, 3)) == (1, 2, 3)\n```", "response_code": "\nassert func((1, 2, 3), (2, 3, 4)) == (1, 2, 3, 4)\nassert func(('a', 'b', 'c'), ('c', 'd', 'e')) == ('a', 'b', 'c', 'd', 'e')\nassert func((10, 20, 30), (30, 40, 50)) == (10, 20, 30, 40, 50)\nassert func(('x', 'y'), ('z', 'x')) == ('x', 'y', 'z')\nassert func((), (1, 2, 3)) == (1, 2, 3)\n"}
{"task_id": 271, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lst):  \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE MAXIMUM LENGTH OF SUBLIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5], [6]]) == 3\nassert func([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == 4\nassert func([[1], [2], [3], [4]]) == 1\nassert func([[1, 2, 3, 4, 5]]) == 5\nassert func([]) == 0\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5], [6]]) == 3\nassert func([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == 4\nassert func([[1], [2], [3], [4]]) == 1\nassert func([[1, 2, 3, 4, 5]]) == 5\nassert func([]) == 0\n"}
{"task_id": 272, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    WRITE A FUNCTION TO EXTRACT VALUES BETWEEN QUOTATION MARKS OF A STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func('This is a \"test\" string') == ['test']\nassert func('No quotes here') == []\nassert func('Multiple \"quotes\" \"in\" \"one\" \"string\"') == ['quotes', 'in', 'one', 'string']\nassert func('\"Only one quote\"') == ['Only one quote']\nassert func('\"\"') == ['']\n```", "response_code": "\nassert func('This is a \"test\" string') == ['test']\nassert func('No quotes here') == []\nassert func('Multiple \"quotes\" \"in\" \"one\" \"string\"') == ['quotes', 'in', 'one', 'string']\nassert func('\"Only one quote\"') == ['Only one quote']\nassert func('\"\"') == ['']\n"}
{"task_id": 273, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr,n): \n    '''\n    WRITE A PYTHON FUNCTION TO COUNT UNEQUAL ELEMENT PAIRS FROM THE GIVEN ARRAY.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 5) == 10\nassert func([1, 1, 1, 1, 1], 5) == 0\nassert func([1, 2, 3, 4, 5, 6], 6) == 15\nassert func([5, 5, 5, 5, 5], 5) == 0\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == 36\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 5) == 10\nassert func([1, 1, 1, 1, 1], 5) == 0\nassert func([1, 2, 3, 4, 5, 6], 6) == 15\nassert func([5, 5, 5, 5, 5], 5) == 0\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == 36\n"}
{"task_id": 274, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(word): \n    '''\n    WRITE A PYTHON FUNCTION TO SPLIT A STRING INTO CHARACTERS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\") == ['h', 'e', 'l', 'l', 'o']\nassert func(\"python\") == ['p', 'y', 't', 'h', 'o', 'n']\nassert func(\"12345\") == ['1', '2', '3', '4', '5']\nassert func(\"abcde\") == ['a', 'b', 'c', 'd', 'e']\nassert func(\" \") == [' ']", "response_code": "assert func(\"hello\") == ['h', 'e', 'l', 'l', 'o']\nassert func(\"python\") == ['p', 'y', 't', 'h', 'o', 'n']\nassert func(\"12345\") == ['1', '2', '3', '4', '5']\nassert func(\"abcde\") == ['a', 'b', 'c', 'd', 'e']\nassert func(\" \") == [' ']"}
{"task_id": 275, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    WRITE A FUNCTION TO GET THE SUM OF A NON-NEGATIVE INTEGER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 0\nassert func(1) == 1\nassert func(5) == 5\nassert func(10) == 10\nassert func(123) == 6\n```", "response_code": "\nassert func(0) == 0\nassert func(1) == 1\nassert func(5) == 5\nassert func(10) == 10\nassert func(123) == 6\n"}
{"task_id": 276, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A FUNCTION TO CHECK WHETHER A SPECIFIED LIST IS SORTED OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == True\nassert func([5, 4, 3, 2, 1]) == False\nassert func([1, 3, 2, 4, 5]) == False\nassert func([1, 1, 1, 1, 1]) == True\nassert func([]) == True\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == True\nassert func([5, 4, 3, 2, 1]) == False\nassert func([1, 3, 2, 4, 5]) == False\nassert func([1, 1, 1, 1, 1]) == True\nassert func([]) == True\n"}
{"task_id": 277, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(length):\n    '''\n    WRITE A FUNCTION TO CREATE A LIST OF EMPTY DICTIONARIES.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == []\nassert func(1) == [{}]\nassert func(5) == [{}, {}, {}, {}, {}]\nassert func(3) == [{}, {}, {}]\nassert func(10) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n```", "response_code": "\nassert func(0) == []\nassert func(1) == [{}]\nassert func(5) == [{}, {}, {}, {}, {}]\nassert func(3) == [{}, {}, {}]\nassert func(10) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n"}
{"task_id": 278, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A FUNCTION TO SORT EACH SUBLIST OF STRINGS IN A GIVEN LIST OF LISTS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([['banana', 'apple', 'cherry'], ['orange', 'grape', 'kiwi']]) == [['apple', 'banana', 'cherry'], ['grape', 'kiwi', 'orange']]\nassert func([['dog', 'cat', 'bird'], ['elephant', 'zebra', 'lion']]) == [['bird', 'cat', 'dog'], ['elephant', 'lion', 'zebra']]\nassert func([['carrot', 'potato', 'tomato'], ['broccoli', 'cabbage', 'lettuce']]) == [['carrot', 'potato', 'tomato'], ['broccoli', 'cabbage', 'lettuce']]\nassert func([['one', 'two', 'three'], ['four', 'five', 'six']]) == [['one', 'three', 'two'], ['five', 'four', 'six']]\nassert func([['red', 'blue', 'green'], ['yellow', 'purple', 'orange']]) == [['blue', 'green', 'red'], ['orange', 'purple', 'yellow']]", "response_code": "assert func([['banana', 'apple', 'cherry'], ['orange', 'grape', 'kiwi']]) == [['apple', 'banana', 'cherry'], ['grape', 'kiwi', 'orange']]\nassert func([['dog', 'cat', 'bird'], ['elephant', 'zebra', 'lion']]) == [['bird', 'cat', 'dog'], ['elephant', 'lion', 'zebra']]\nassert func([['carrot', 'potato', 'tomato'], ['broccoli', 'cabbage', 'lettuce']]) == [['carrot', 'potato', 'tomato'], ['broccoli', 'cabbage', 'lettuce']]\nassert func([['one', 'two', 'three'], ['four', 'five', 'six']]) == [['one', 'three', 'two'], ['five', 'four', 'six']]\nassert func([['red', 'blue', 'green'], ['yellow', 'purple', 'orange']]) == [['blue', 'green', 'red'], ['orange', 'purple', 'yellow']]"}
{"task_id": 279, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    WRITE A PYTHON FUNCTION TO REMOVE TWO DUPLICATE NUMBERS FROM A GIVEN NUMBER OF LISTS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5, 1, 2]) == [3, 4, 5]\nassert func([1, 1, 1, 1, 1, 1]) == []\nassert func([5, 5, 5, 5, 5, 6, 6, 6, 6, 6]) == []\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) == []\n```", "response_code": "\nassert func([1, 2, 3, 4, 5, 1, 2]) == [3, 4, 5]\nassert func([1, 1, 1, 1, 1, 1]) == []\nassert func([5, 5, 5, 5, 5, 6, 6, 6, 6, 6]) == []\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) == []\n"}
{"task_id": 280, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list_data):\n    '''\n    WRITE A PYTHON FUNCTION TO CALCULATE THE PRODUCT OF THE UNIQUE NUMBERS OF A GIVEN LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 120  # Unique numbers are 1, 2, 3, 4, 5\nassert func([2, 2, 3, 3, 4, 4]) == 24  # Unique numbers are 2, 3, 4\nassert func([5, 5, 5, 5, 5]) == 5  # Unique number is 5\nassert func([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 120  # Unique numbers are 1, 2, 3, 4, 5\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 362880  # All numbers are unique\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 120  # Unique numbers are 1, 2, 3, 4, 5\nassert func([2, 2, 3, 3, 4, 4]) == 24  # Unique numbers are 2, 3, 4\nassert func([5, 5, 5, 5, 5]) == 5  # Unique number is 5\nassert func([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 120  # Unique numbers are 1, 2, 3, 4, 5\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 362880  # All numbers are unique\n"}
{"task_id": 281, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(r,h):\n    '''\n    WRITE A FUNCTION TO FIND THE SURFACE AREA OF A CYLINDER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1, 1) == 6.283185307179586  # radius=1, height=1\nassert func(2, 3) == 62.83185307179586   # radius=2, height=3\nassert func(0, 5) == 0                   # radius=0, height=5\nassert func(4, 0) == 100.53096491487338  # radius=4, height=0\nassert func(3, 4) == 131.94689145077132  # radius=3, height=4\n```", "response_code": "\nassert func(1, 1) == 6.283185307179586  # radius=1, height=1\nassert func(2, 3) == 62.83185307179586   # radius=2, height=3\nassert func(0, 5) == 0                   # radius=0, height=5\nassert func(4, 0) == 100.53096491487338  # radius=4, height=0\nassert func(3, 4) == 131.94689145077132  # radius=3, height=4\n"}
{"task_id": 282, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(A,B): \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER AN ARRAY IS SUBARRAY OF ANOTHER OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4], [1, 2]) == True\nassert func([1, 2, 3, 4], [2, 3]) == True\nassert func([1, 2, 3, 4], [4, 5]) == False\nassert func([5, 6, 7, 8], [5, 6, 7]) == True\nassert func([5, 6, 7, 8], [8, 9]) == False", "response_code": "assert func([1, 2, 3, 4], [1, 2]) == True\nassert func([1, 2, 3, 4], [2, 3]) == True\nassert func([1, 2, 3, 4], [4, 5]) == False\nassert func([5, 6, 7, 8], [5, 6, 7]) == True\nassert func([5, 6, 7, 8], [8, 9]) == False"}
{"task_id": 283, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE LAST DIGIT IN FACTORIAL OF A GIVEN NUMBER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5) == 2\nassert func(10) == 0\nassert func(15) == 2\nassert func(20) == 4\nassert func(25) == 8\n```", "response_code": "\nassert func(5) == 2\nassert func(10) == 0\nassert func(15) == 2\nassert func(20) == 4\nassert func(25) == 8\n"}
{"task_id": 284, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1,list2,list3):\n    '''\n    WRITE A FUNCTION TO INTERLEAVE LISTS OF THE SAME LENGTH.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]\nassert func(['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']) == ['a', 'd', 'g', 'b', 'e', 'h', 'c', 'f', 'i']\nassert func([10, 20, 30], [40, 50, 60], [70, 80, 90]) == [10, 40, 70, 20, 50, 80, 30, 60, 90]\nassert func(['x', 'y', 'z'], ['p', 'q', 'r'], ['m', 'n', 'o']) == ['x', 'p', 'm', 'y', 'q', 'n', 'z', 'r', 'o']\nassert func([True, False, True], [False, True, False], [True, True, False]) == [True, False, True, False, True, True, True, False, False]\n```", "response_code": "\nassert func([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]\nassert func(['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']) == ['a', 'd', 'g', 'b', 'e', 'h', 'c', 'f', 'i']\nassert func([10, 20, 30], [40, 50, 60], [70, 80, 90]) == [10, 40, 70, 20, 50, 80, 30, 60, 90]\nassert func(['x', 'y', 'z'], ['p', 'q', 'r'], ['m', 'n', 'o']) == ['x', 'p', 'm', 'y', 'q', 'n', 'z', 'r', 'o']\nassert func([True, False, True], [False, True, False], [True, True, False]) == [True, False, True, False, True, True, True, False, False]\n"}
{"task_id": 285, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    WRITE A FUNCTION TO FIND THE DISSIMILAR ELEMENTS IN THE GIVEN TWO TUPLES.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (2, 3, 4)) == (1, 4)\nassert func(('a', 'b', 'c'), ('b', 'c', 'd')) == ('a', 'd')\nassert func((10, 20, 30), (20, 30, 40)) == (10, 40)\nassert func(('x', 'y', 'z'), ('y', 'z', 'w')) == ('x', 'w')\nassert func((True, False), (False, True)) == (True, True)\n```", "response_code": "\nassert func((1, 2, 3), (2, 3, 4)) == (1, 4)\nassert func(('a', 'b', 'c'), ('b', 'c', 'd')) == ('a', 'd')\nassert func((10, 20, 30), (20, 30, 40)) == (10, 40)\nassert func(('x', 'y', 'z'), ('y', 'z', 'w')) == ('x', 'w')\nassert func((True, False), (False, True)) == (True, True)\n"}
{"task_id": 286, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tuple, even_fnc): \n    '''\n    WRITE A FUNCTION TO EXTRACT THE EVEN ELEMENTS IN THE NESTED MIXED TUPLE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, (2, 3), 4, (5, 6, 7), 8), lambda x: x % 2 == 0) == (2, 4, 6, 8)\nassert func((10, (21, 32), 43, (54, 65, 76), 87), lambda x: x % 2 == 0) == (10, 32, 54, 76)\nassert func((11, (22, 33), 44, (55, 66, 77), 88), lambda x: x % 2 == 0) == (22, 44, 66, 88)\nassert func((15, (26, 37), 48, (59, 60, 71), 82), lambda x: x % 2 == 0) == (26, 48, 60, 82)\nassert func((19, (28, 39), 40, (51, 62, 73), 84), lambda x: x % 2 == 0) == (28, 40, 62, 84)\n```", "response_code": "\nassert func((1, (2, 3), 4, (5, 6, 7), 8), lambda x: x % 2 == 0) == (2, 4, 6, 8)\nassert func((10, (21, 32), 43, (54, 65, 76), 87), lambda x: x % 2 == 0) == (10, 32, 54, 76)\nassert func((11, (22, 33), 44, (55, 66, 77), 88), lambda x: x % 2 == 0) == (22, 44, 66, 88)\nassert func((15, (26, 37), 48, (59, 60, 71), 82), lambda x: x % 2 == 0) == (26, 48, 60, 82)\nassert func((19, (28, 39), 40, (51, 62, 73), 84), lambda x: x % 2 == 0) == (28, 40, 62, 84)\n"}
{"task_id": 287, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(b,s): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SURFACE AREA OF THE SQUARE PYRAMID.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(4, 6) == 52\nassert func(5, 8) == 85\nassert func(3, 4) == 37\nassert func(10, 12) == 340\nassert func(7, 9) == 127\n```", "response_code": "\nassert func(4, 6) == 52\nassert func(5, 8) == 85\nassert func(3, 4) == 37\nassert func(10, 12) == 340\nassert func(7, 9) == 127\n"}
{"task_id": 288, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(dict1):\n    '''\n    WRITE A FUNCTION TO CHECK IF A DICTIONARY IS EMPTY OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func({}) == True\nassert func({'a': 1}) == False\nassert func({1: 'a', 2: 'b'}) == False\nassert func({'key': 'value'}) == False\nassert func({1: 2, 3: 4, 5: 6}) == False", "response_code": "assert func({}) == True\nassert func({'a': 1}) == False\nassert func({1: 'a', 2: 'b'}) == False\nassert func({'key': 'value'}) == False\nassert func({1: 2, 3: 4, 5: 6}) == False"}
{"task_id": 289, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(num):\n    '''\n    WRITE A FUNCTION FOR NTH CATALAN NUMBER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 1\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 5\nassert func(4) == 14\n```", "response_code": "\nassert func(0) == 1\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 5\nassert func(4) == 14\n"}
{"task_id": 290, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    WRITE A FUNCTION TO FIND ALL ADVERBS AND THEIR POSITIONS IN A GIVEN SENTENCE BY USING REGEX.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"She sings beautifully\") == [(\"beautifully\", 10)]\nassert func(\"He runs very fast\") == [(\"very\", 7), (\"fast\", 12)]\nassert func(\"They spoke quite loudly\") == [(\"quite\", 11), (\"loudly\", 18)]\nassert func(\"The dog barks loudly and continuously\") == [(\"loudly\", 15), (\"continuously\", 26)]\nassert func(\"She dances gracefully and elegantly\") == [(\"gracefully\", 13), (\"elegantly\", 26)]\n```", "response_code": "\nassert func(\"She sings beautifully\") == [(\"beautifully\", 10)]\nassert func(\"He runs very fast\") == [(\"very\", 7), (\"fast\", 12)]\nassert func(\"They spoke quite loudly\") == [(\"quite\", 11), (\"loudly\", 18)]\nassert func(\"The dog barks loudly and continuously\") == [(\"loudly\", 15), (\"continuously\", 26)]\nassert func(\"She dances gracefully and elegantly\") == [(\"gracefully\", 13), (\"elegantly\", 26)]\n"}
{"task_id": 291, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import heapq\ndef func(items,n):\n    '''\n    WRITE A FUNCTION TO FIND THE N - EXPENSIVE PRICE ITEMS FROM A GIVEN DATASET USING HEAP QUEUE ALGORITHM.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([10, 20, 30, 40, 50], 2) == [40, 50]\nassert func([5, 10, 15, 20, 25], 3) == [15, 20, 25]\nassert func([100, 200, 300, 400, 500], 1) == [500]\nassert func([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\nassert func([50, 40, 30, 20, 10], 4) == [20, 30, 40, 50]\n```", "response_code": "\nassert func([10, 20, 30, 40, 50], 2) == [40, 50]\nassert func([5, 10, 15, 20, 25], 3) == [15, 20, 25]\nassert func([100, 200, 300, 400, 500], 1) == [500]\nassert func([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\nassert func([50, 40, 30, 20, 10], 4) == [20, 30, 40, 50]\n"}
{"task_id": 292, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l, n):\n    '''\n    WRITE A PYTHON FUNCTION TO SPLIT THE ARRAY AND ADD THE FIRST PART TO THE END.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2]\nassert func([5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 5, 6, 7]\nassert func([10, 20, 30, 40, 50, 60, 70], 4) == [50, 60, 70, 10, 20, 30, 40]\nassert func([100, 200, 300, 400], 1) == [200, 300, 400, 100]\nassert func([1, 3, 5, 7, 9, 11, 13], 5) == [9, 11, 13, 1, 3, 5, 7]\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2]\nassert func([5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 5, 6, 7]\nassert func([10, 20, 30, 40, 50, 60, 70], 4) == [50, 60, 70, 10, 20, 30, 40]\nassert func([100, 200, 300, 400], 1) == [200, 300, 400, 100]\nassert func([1, 3, 5, 7, 9, 11, 13], 5) == [9, 11, 13, 1, 3, 5, 7]\n"}
{"task_id": 293, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(listx):\n    '''\n    WRITE A FUNCTION TO CONVERT A LIST TO A TUPLE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3]) == (1, 2, 3)\nassert func(['a', 'b', 'c']) == ('a', 'b', 'c')\nassert func([]) == ()\nassert func([True, False, True]) == (True, False, True)\nassert func([4.5, 3.2, 1.0]) == (4.5, 3.2, 1.0)\n```", "response_code": "\nassert func([1, 2, 3]) == (1, 2, 3)\nassert func(['a', 'b', 'c']) == ('a', 'b', 'c')\nassert func([]) == ()\nassert func([True, False, True]) == (True, False, True)\nassert func([4.5, 3.2, 1.0]) == (4.5, 3.2, 1.0)\n"}
{"task_id": 294, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE DIFFERENCE BETWEEN LARGEST AND SMALLEST VALUE IN A GIVEN ARRAY.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 4\nassert func([10, 5, 20, 15, 25]) == 20\nassert func([7, 3, 9, 12, 1]) == 11\nassert func([100, 50, 75, 125, 150]) == 100\nassert func([5, 5, 5, 5, 5]) == 0\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 4\nassert func([10, 5, 20, 15, 25]) == 20\nassert func([7, 3, 9, 12, 1]) == 11\nassert func([100, 50, 75, 125, 150]) == 100\nassert func([5, 5, 5, 5, 5]) == 0\n"}
{"task_id": 295, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a, b):\n    '''\n    WRITE A FUNCTION TO FIND PERFECT SQUARES BETWEEN TWO GIVEN NUMBERS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1, 10) == [1, 4, 9]\nassert func(10, 20) == [16]\nassert func(25, 36) == [25, 36]\nassert func(50, 60) == []\nassert func(100, 120) == [100, 121]\n```", "response_code": "\nassert func(1, 10) == [1, 4, 9]\nassert func(10, 20) == [16]\nassert func(25, 36) == [25, 36]\nassert func(50, 60) == []\nassert func(100, 120) == [100, 121]\n"}
{"task_id": 296, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import cmath\ndef func(x,y):\n    '''\n    WRITE A FUNCTION TO CONVERT POLAR COORDINATES TO RECTANGULAR COORDINATES.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1, 0) == (1, 0)\nassert func(2, cmath.pi/2) == (0, 2)\nassert func(3, cmath.pi) == (-3, 0)\nassert func(4, 3*cmath.pi/2) == (0, -4)\nassert func(5, cmath.pi/4) == (3.5355339059327378, 3.5355339059327378)\n```", "response_code": "\nassert func(1, 0) == (1, 0)\nassert func(2, cmath.pi/2) == (0, 2)\nassert func(3, cmath.pi) == (-3, 0)\nassert func(4, 3*cmath.pi/2) == (0, -4)\nassert func(5, cmath.pi/4) == (3.5355339059327378, 3.5355339059327378)\n"}
{"task_id": 297, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(newList): \n    '''\n    WRITE A PYTHON FUNCTION TO INTERCHANGE THE FIRST AND LAST ELEMENTS IN A LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]\nassert func(['a', 'b', 'c', 'd']) == ['d', 'b', 'c', 'a']\nassert func([10, 20, 30, 40, 50, 60]) == [60, 20, 30, 40, 50, 10]\nassert func([True, False, True]) == [True, False, True]\nassert func([]) == []\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]\nassert func(['a', 'b', 'c', 'd']) == ['d', 'b', 'c', 'a']\nassert func([10, 20, 30, 40, 50, 60]) == [60, 20, 30, 40, 50, 10]\nassert func([True, False, True]) == [True, False, True]\nassert func([]) == []\n"}
{"task_id": 298, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n,k): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND SUM OF PRODUCT OF BINOMIAL CO-EFFICIENTS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 2) == 10\nassert func(4, 1) == 10\nassert func(5, 3) == 70\nassert func(6, 4) == 210\nassert func(7, 2) == 84\n```", "response_code": "\nassert func(3, 2) == 10\nassert func(4, 1) == 10\nassert func(5, 3) == 70\nassert func(6, 4) == 210\nassert func(7, 2) == 84\n"}
{"task_id": 299, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(ip):\n    '''\n    WRITE A FUNCTION TO REMOVE LEADING ZEROES FROM AN IP ADDRESS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"192.168.001.001\") == \"192.168.1.1\"\nassert func(\"010.010.010.010\") == \"10.10.10.10\"\nassert func(\"000.000.000.000\") == \"0.0.0.0\"\nassert func(\"255.255.255.255\") == \"255.255.255.255\"\nassert func(\"001.002.003.004\") == \"1.2.3.4\"\n```", "response_code": "\nassert func(\"192.168.001.001\") == \"192.168.1.1\"\nassert func(\"010.010.010.010\") == \"10.10.10.10\"\nassert func(\"000.000.000.000\") == \"0.0.0.0\"\nassert func(\"255.255.255.255\") == \"255.255.255.255\"\nassert func(\"001.002.003.004\") == \"1.2.3.4\"\n"}
{"task_id": 300, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A FUNCTION TO FIND THE DIFFERENCE OF FIRST EVEN AND ODD NUMBER OF A GIVEN LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 1\nassert func([2, 4, 6, 8, 10]) == -2\nassert func([5, 7, 9, 11, 13]) == 2\nassert func([2, 3, 4, 5, 6]) == -1\nassert func([10, 20, 30, 40, 50]) == -20\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 1\nassert func([2, 4, 6, 8, 10]) == -2\nassert func([5, 7, 9, 11, 13]) == 2\nassert func([2, 3, 4, 5, 6]) == -1\nassert func([10, 20, 30, 40, 50]) == -20\n"}
{"task_id": 301, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1,str2) : \n    '''\n    WRITE A PYTHON FUNCTION TO COUNT MINIMUM NUMBER OF SWAPS REQUIRED TO CONVERT ONE BINARY STRING TO ANOTHER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func('1101', '1110') == 1\nassert func('10101', '11010') == 2\nassert func('11111', '00000') == 5\nassert func('1010101', '0101010') == 4\nassert func('111000', '000111') == 3\n```", "response_code": "\nassert func('1101', '1110') == 1\nassert func('10101', '11010') == 2\nassert func('11111', '00000') == 5\nassert func('1010101', '0101010') == 4\nassert func('111000', '000111') == 3\n"}
{"task_id": 302, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import sys \ndef func(tuple_list):\n    '''\n    WRITE A FUNCTION TO FIND THE SIZE OF THE GIVEN TUPLE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2, 3)]) == 3\nassert func([(1, 2, 3), (4, 5)]) == 2\nassert func([(1, 2), (3, 4), (5, 6, 7, 8)]) == 4\nassert func([(1,), (2,), (3,), (4,)]) == 1\nassert func([]) == 0\n```", "response_code": "\nassert func([(1, 2, 3)]) == 3\nassert func([(1, 2, 3), (4, 5)]) == 2\nassert func([(1, 2), (3, 4), (5, 6, 7, 8)]) == 4\nassert func([(1,), (2,), (3,), (4,)]) == 1\nassert func([]) == 0\n"}
{"task_id": 303, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr1, arr2, k):\n    '''\n    WRITE A FUNCTION TO FIND KTH ELEMENT FROM THE GIVEN TWO SORTED ARRAYS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 3, 5], [2, 4, 6], 3) == 3\nassert func([1, 3, 5], [2, 4, 6], 4) == 4\nassert func([1, 3, 5], [2, 4, 6], 5) == 5\nassert func([1, 3, 5], [2, 4, 6], 6) == 6\nassert func([1, 3, 5], [2, 4, 6], 7) == None\n```", "response_code": "\nassert func([1, 3, 5], [2, 4, 6], 3) == 3\nassert func([1, 3, 5], [2, 4, 6], 4) == 4\nassert func([1, 3, 5], [2, 4, 6], 5) == 5\nassert func([1, 3, 5], [2, 4, 6], 6) == 6\nassert func([1, 3, 5], [2, 4, 6], 7) == None\n"}
{"task_id": 304, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(number):\n    '''\n    WRITE A FUNCTION TO CHECK WHETHER THE GIVEN NUMBER IS ARMSTRONG OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(153) == True\nassert func(370) == True\nassert func(9474) == True\nassert func(9475) == False\nassert func(1634) == True\n```", "response_code": "\nassert func(153) == True\nassert func(370) == True\nassert func(9474) == True\nassert func(9475) == False\nassert func(1634) == True\n"}
{"task_id": 305, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(number):\n    '''\n    WRITE A FUNCTION TO FIND SUM AND AVERAGE OF FIRST N NATURAL NUMBERS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(5) == (15, 3.0)\nassert func(10) == (55, 5.5)\nassert func(1) == (1, 1.0)\nassert func(0) == (0, 0.0)\nassert func(100) == (5050, 50.5)", "response_code": "assert func(5) == (15, 3.0)\nassert func(10) == (55, 5.5)\nassert func(1) == (1, 1.0)\nassert func(0) == (0, 0.0)\nassert func(100) == (5050, 50.5)"}
{"task_id": 306, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n) : \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER THE GIVEN NUMBER IS EVEN OR NOT USING BITWISE OPERATOR.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(2) == True\nassert func(5) == False\nassert func(10) == True\nassert func(17) == False\nassert func(0) == True\n```", "response_code": "\nassert func(2) == True\nassert func(5) == False\nassert func(10) == True\nassert func(17) == False\nassert func(0) == True\n"}
{"task_id": 307, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1):\n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE FIRST REPEATED CHARACTER IN A GIVEN STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == 'l'\nassert func(\"world\") == None\nassert func(\"apple\") == 'p'\nassert func(\"banana\") == 'a'\nassert func(\"racecar\") == 'r'\n```", "response_code": "\nassert func(\"hello\") == 'l'\nassert func(\"world\") == None\nassert func(\"apple\") == 'p'\nassert func(\"banana\") == 'a'\nassert func(\"racecar\") == 'r'\n"}
{"task_id": 308, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    WRITE A FUNCTION TO GET A LUCID NUMBER SMALLER THAN OR EQUAL TO N.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(10) == 8\nassert func(20) == 18\nassert func(30) == 28\nassert func(50) == 48\nassert func(100) == 98", "response_code": "assert func(10) == 8\nassert func(20) == 18\nassert func(30) == 28\nassert func(50) == 48\nassert func(100) == 98"}
{"task_id": 309, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(s):\n    '''\n    WRITE A FUNCTION TO REVERSE WORDS IN A GIVEN STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello World\") == \"olleH dlroW\"\nassert func(\"Python is fun\") == \"nohtyP si nuf\"\nassert func(\"12345\") == \"54321\"\nassert func(\"a b c d e\") == \"a b c d e\"\nassert func(\"racecar\") == \"racecar\"\n```", "response_code": "\nassert func(\"Hello World\") == \"olleH dlroW\"\nassert func(\"Python is fun\") == \"nohtyP si nuf\"\nassert func(\"12345\") == \"54321\"\nassert func(\"a b c d e\") == \"a b c d e\"\nassert func(\"racecar\") == \"racecar\"\n"}
{"task_id": 310, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(num):\n    '''\n    WRITE A FUNCTION TO CHECK IF THE GIVEN INTEGER IS A PRIME NUMBER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(2) == True\nassert func(3) == True\nassert func(5) == True\nassert func(7) == True\nassert func(11) == True", "response_code": "assert func(2) == True\nassert func(3) == True\nassert func(5) == True\nassert func(7) == True\nassert func(11) == True"}
{"task_id": 311, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(degree):\n    '''\n    WRITE A FUNCTION TO CONVERT DEGREES TO RADIANS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 0\nassert func(90) == math.pi / 2\nassert func(180) == math.pi\nassert func(270) == 3 * math.pi / 2\nassert func(360) == 2 * math.pi\n```", "response_code": "\nassert func(0) == 0\nassert func(90) == math.pi / 2\nassert func(180) == math.pi\nassert func(270) == 3 * math.pi / 2\nassert func(360) == 2 * math.pi\n"}
{"task_id": 312, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\n\ndef func(text, pattern):\n    '''\n    WRITE A FUNCTION TO SEARCH A LITERALS STRING IN A STRING AND ALSO FIND THE LOCATION WITHIN THE ORIGINAL STRING WHERE THE PATTERN OCCURS BY USING REGEX.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello world\", \"world\") == (True, [(6, 11)])\nassert func(\"apple banana cherry\", \"orange\") == (False, [])\nassert func(\"12345\", \"123\") == (True, [(0, 3)])\nassert func(\"hello\", \"hi\") == (False, [])\nassert func(\"programming is fun\", \"is\") == (True, [(13, 15)])\n```", "response_code": "\nassert func(\"hello world\", \"world\") == (True, [(6, 11)])\nassert func(\"apple banana cherry\", \"orange\") == (False, [])\nassert func(\"12345\", \"123\") == (True, [(0, 3)])\nassert func(\"hello\", \"hi\") == (False, [])\nassert func(\"programming is fun\", \"is\") == (True, [(13, 15)])\n"}
{"task_id": 313, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND NTH BELL NUMBER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 5\nassert func(4) == 15\nassert func(5) == 52\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 5\nassert func(4) == 15\nassert func(5) == 52\n"}
{"task_id": 314, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1, L):\n    '''\n    WRITE A PYTHON FUNCTION TO REMOVE THE K'TH ELEMENT FROM A GIVEN LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 2) == [1, 3, 4, 5]\nassert func(['a', 'b', 'c', 'd'], 0) == ['b', 'c', 'd']\nassert func([10, 20, 30, 40, 50], 4) == [10, 20, 30, 40]\nassert func([True, False, True], 1) == [True, True]\nassert func([], 0) == []\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 2) == [1, 3, 4, 5]\nassert func(['a', 'b', 'c', 'd'], 0) == ['b', 'c', 'd']\nassert func([10, 20, 30, 40, 50], 4) == [10, 20, 30, 40]\nassert func([True, False, True], 1) == [True, True]\nassert func([], 0) == []\n"}
{"task_id": 315, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list, N):\n    '''\n    WRITE A FUNCTION TO FIND THE MAXIMUM OF NTH COLUMN FROM THE GIVEN TUPLE LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test Case 1\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nN = 0\nassert func(test_list, N) == 7\n\n# Test Case 2\ntest_list = [(10, 20, 30), (40, 50, 60), (70, 80, 90)]\nN = 1\nassert func(test_list, N) == 80\n\n# Test Case 3\ntest_list = [(100, 200, 300), (400, 500, 600), (700, 800, 900)]\nN = 2\nassert func(test_list, N) == 900\n\n# Test Case 4\ntest_list = [(3, 6, 9), (12, 15, 18), (21, 24, 27)]\nN = 1\nassert func(test_list, N) == 24\n\n# Test Case 5\ntest_list = [(2, 4, 6), (8, 10, 12), (14, 16, 18)]\nN = 0\nassert func(test_list, N) == 14\n```", "response_code": "\n# Test Case 1\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nN = 0\nassert func(test_list, N) == 7\n\n# Test Case 2\ntest_list = [(10, 20, 30), (40, 50, 60), (70, 80, 90)]\nN = 1\nassert func(test_list, N) == 80\n\n# Test Case 3\ntest_list = [(100, 200, 300), (400, 500, 600), (700, 800, 900)]\nN = 2\nassert func(test_list, N) == 900\n\n# Test Case 4\ntest_list = [(3, 6, 9), (12, 15, 18), (21, 24, 27)]\nN = 1\nassert func(test_list, N) == 24\n\n# Test Case 5\ntest_list = [(2, 4, 6), (8, 10, 12), (14, 16, 18)]\nN = 0\nassert func(test_list, N) == 14\n"}
{"task_id": 316, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lst):  \n    '''\n    WRITE A PYTHON FUNCTION TO MERGE THE FIRST AND LAST ELEMENTS SEPARATELY IN A LIST OF LISTS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 3], [4, 6], [7, 9]]\nassert func([[10, 20], [30, 40], [50, 60]]) == [[10, 20], [30, 40], [50, 60]]\nassert func([[100, 200, 300], [400, 500, 600]]) == [[100, 300], [400, 600]]\nassert func([[1], [2], [3]]) == [[1, 1], [2, 2], [3, 3]]\nassert func([[7, 8], [9, 10], [11, 12]]) == [[7, 8], [9, 10], [11, 12]]\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 3], [4, 6], [7, 9]]\nassert func([[10, 20], [30, 40], [50, 60]]) == [[10, 20], [30, 40], [50, 60]]\nassert func([[100, 200, 300], [400, 500, 600]]) == [[100, 300], [400, 600]]\nassert func([[1], [2], [3]]) == [[1, 1], [2, 2], [3, 3]]\nassert func([[7, 8], [9, 10], [11, 12]]) == [[7, 8], [9, 10], [11, 12]]\n"}
{"task_id": 317, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    WRITE A FUNCTION TO FIND THE CUMULATIVE SUM OF ALL THE VALUES THAT ARE PRESENT IN THE GIVEN TUPLE LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (3, 4), (5, 6)]) == [1, 3, 6, 10, 15, 21]\nassert func([(10, 20), (30, 40), (50, 60)]) == [10, 30, 60, 100, 150, 210]\nassert func([(2, 3), (4, 5), (6, 7)]) == [2, 5, 9, 14, 20, 27]\nassert func([(0, 0), (0, 0), (0, 0)]) == [0, 0, 0, 0, 0, 0]\nassert func([(1, 1), (2, 2), (3, 3)]) == [1, 2, 4, 6, 9, 12]\n```", "response_code": "\nassert func([(1, 2), (3, 4), (5, 6)]) == [1, 3, 6, 10, 15, 21]\nassert func([(10, 20), (30, 40), (50, 60)]) == [10, 30, 60, 100, 150, 210]\nassert func([(2, 3), (4, 5), (6, 7)]) == [2, 5, 9, 14, 20, 27]\nassert func([(0, 0), (0, 0), (0, 0)]) == [0, 0, 0, 0, 0, 0]\nassert func([(1, 1), (2, 2), (3, 3)]) == [1, 2, 4, 6, 9, 12]\n"}
{"task_id": 318, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    WRITE A FUNCTION TO FIND AVERAGE VALUE OF THE NUMBERS IN A GIVEN TUPLE OF TUPLES.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(((1, 2, 3), (4, 5, 6), (7, 8, 9))) == 5.0\nassert func(((10, 20), (30, 40), (50, 60))) == 35.0\nassert func(((2, 4, 6), (8, 10, 12))) == 7.0\nassert func(((1, 3, 5), (7, 9, 11), (13, 15, 17))) == 9.0\nassert func(((0, 0, 0), (0, 0, 0))) == 0.0\n```", "response_code": "\nassert func(((1, 2, 3), (4, 5, 6), (7, 8, 9))) == 5.0\nassert func(((10, 20), (30, 40), (50, 60))) == 35.0\nassert func(((2, 4, 6), (8, 10, 12))) == 7.0\nassert func(((1, 3, 5), (7, 9, 11), (13, 15, 17))) == 9.0\nassert func(((0, 0, 0), (0, 0, 0))) == 0.0\n"}
{"task_id": 319, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    WRITE A FUNCTION TO PERFOM THE MODULO OF TUPLE ELEMENTS IN THE GIVEN TWO TUPLES.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((10, 20, 30), (3, 4, 5)) == (1, 0, 0)\nassert func((15, 25, 35), (2, 3, 4)) == (1, 1, 3)\nassert func((100, 200, 300), (7, 8, 9)) == (2, 0, 3)\nassert func((50, 60, 70), (5, 6, 7)) == (0, 0, 0)\nassert func((45, 55, 65), (4, 5, 6)) == (1, 0, 5)\n```", "response_code": "\nassert func((10, 20, 30), (3, 4, 5)) == (1, 0, 0)\nassert func((15, 25, 35), (2, 3, 4)) == (1, 1, 3)\nassert func((100, 200, 300), (7, 8, 9)) == (2, 0, 3)\nassert func((50, 60, 70), (5, 6, 7)) == (0, 0, 0)\nassert func((45, 55, 65), (4, 5, 6)) == (1, 0, 5)\n"}
{"task_id": 320, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(steps, d): \n    '''\n    WRITE A FUNCTION TO CHECK FOR THE NUMBER OF JUMPS REQUIRED OF GIVEN LENGTH TO REACH A POINT OF FORM (D, 0) FROM ORIGIN IN A 2D PLANE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(10, 3) == 4\nassert func(5, 2) == 3\nassert func(15, 4) == 4\nassert func(20, 5) == 4\nassert func(8, 2) == 3\n```", "response_code": "\nassert func(10, 3) == 4\nassert func(5, 2) == 3\nassert func(15, 4) == 4\nassert func(20, 5) == 4\nassert func(8, 2) == 3\n"}
{"task_id": 321, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums1,nums2):\n    '''\n    WRITE A FUNCTION TO DIVIDE TWO LISTS USING MAP AND LAMBDA FUNCTION.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([10, 20, 30], [2, 4, 6]) == [5.0, 5.0, 5.0]\nassert func([15, 25, 35], [3, 5, 7]) == [5.0, 5.0, 5.0]\nassert func([100, 200, 300], [10, 20, 30]) == [10.0, 10.0, 10.0]\nassert func([5, 10, 15], [1, 2, 3]) == [5.0, 5.0, 5.0]\nassert func([8, 16, 24], [4, 8, 12]) == [2.0, 2.0, 2.0]\n```", "response_code": "\nassert func([10, 20, 30], [2, 4, 6]) == [5.0, 5.0, 5.0]\nassert func([15, 25, 35], [3, 5, 7]) == [5.0, 5.0, 5.0]\nassert func([100, 200, 300], [10, 20, 30]) == [10.0, 10.0, 10.0]\nassert func([5, 10, 15], [1, 2, 3]) == [5.0, 5.0, 5.0]\nassert func([8, 16, 24], [4, 8, 12]) == [2.0, 2.0, 2.0]\n"}
{"task_id": 322, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_str):\n    '''\n    WRITE A FUNCTION TO MOVE ALL THE NUMBERS IN IT TO THE GIVEN STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"abc123\") == \"123abc\"\nassert func(\"1a2b3c\") == \"123abc\"\nassert func(\"hello123world\") == \"123helloworld\"\nassert func(\"123\") == \"123\"\nassert func(\"abc\") == \"abc\"\n```", "response_code": "\nassert func(\"abc123\") == \"123abc\"\nassert func(\"1a2b3c\") == \"123abc\"\nassert func(\"hello123world\") == \"123helloworld\"\nassert func(\"123\") == \"123\"\nassert func(\"abc\") == \"abc\"\n"}
{"task_id": 323, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a):\n    '''\n    WRITE A FUNCTION TO FIND THE LARGEST SUBSET WHERE EACH PAIR IS DIVISIBLE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == [1, 2, 4]\nassert func([10, 20, 30, 40, 50]) == [10, 20, 40]\nassert func([3, 6, 9, 12, 15]) == [3, 6, 12]\nassert func([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\nassert func([5, 10, 15, 20, 25]) == [5, 10, 20]", "response_code": "assert func([1, 2, 3, 4, 5]) == [1, 2, 4]\nassert func([10, 20, 30, 40, 50]) == [10, 20, 40]\nassert func([3, 6, 9, 12, 15]) == [3, 6, 12]\nassert func([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\nassert func([5, 10, 15, 20, 25]) == [5, 10, 20]"}
{"task_id": 324, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr1, arr2, n):\n    '''\n    WRITE A FUNCTION TO FIND THE MEDIAN OF TWO SORTED ARRAYS OF SAME SIZE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 3, 5], [2, 4, 6], 3) == 3.5\nassert func([1, 2, 3, 4], [5, 6, 7, 8], 4) == 4.5\nassert func([10, 20, 30], [15, 25, 35], 3) == 20\nassert func([2, 4, 6, 8], [1, 3, 5, 7], 4) == 4.5\nassert func([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5) == 5.5\n```", "response_code": "\nassert func([1, 3, 5], [2, 4, 6], 3) == 3.5\nassert func([1, 2, 3, 4], [5, 6, 7, 8], 4) == 4.5\nassert func([10, 20, 30], [15, 25, 35], 3) == 20\nassert func([2, 4, 6, 8], [1, 3, 5, 7], 4) == 4.5\nassert func([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5) == 5.5\n"}
{"task_id": 325, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums,n):\n    '''\n    WRITE A FUNCTION TO FIND THE N-TH POWER OF INDIVIDUAL ELEMENTS IN A LIST USING LAMBDA FUNCTION.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([2, 3, 4], 2) == [4, 9, 16]\nassert func([1, 2, 3, 4], 3) == [1, 8, 27, 64]\nassert func([5, 6, 7], 0) == [1, 1, 1]\nassert func([0, 1, 2, 3], 1) == [0, 1, 2, 3]\nassert func([10], 5) == [100000]\n```", "response_code": "\nassert func([2, 3, 4], 2) == [4, 9, 16]\nassert func([1, 2, 3, 4], 3) == [1, 8, 27, 64]\nassert func([5, 6, 7], 0) == [1, 1, 1]\nassert func([0, 1, 2, 3], 1) == [0, 1, 2, 3]\nassert func([10], 5) == [100000]\n"}
{"task_id": 326, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(string):\n    '''\n    WRITE A PYTHON FUNCTION TO CONVERT THE GIVEN STRING TO UPPER CASE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == \"HELLO\"\nassert func(\"Python\") == \"PYTHON\"\nassert func(\"123abc\") == \"123ABC\"\nassert func(\"UPPERCASE\") == \"UPPERCASE\"\nassert func(\"\") == \"\"\n```", "response_code": "\nassert func(\"hello\") == \"HELLO\"\nassert func(\"Python\") == \"PYTHON\"\nassert func(\"123abc\") == \"123ABC\"\nassert func(\"UPPERCASE\") == \"UPPERCASE\"\nassert func(\"\") == \"\"\n"}
{"task_id": 327, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(newList): \n    '''\n    WRITE A PYTHON FUNCTION TO INTERCHANGE FIRST AND LAST ELEMENTS IN A GIVEN LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]\nassert func([10, 20, 30, 40, 50, 60]) == [60, 20, 30, 40, 50, 10]\nassert func(['a', 'b', 'c', 'd']) == ['d', 'b', 'c', 'a']\nassert func([100]) == [100]\nassert func([]) == []\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]\nassert func([10, 20, 30, 40, 50, 60]) == [60, 20, 30, 40, 50, 10]\nassert func(['a', 'b', 'c', 'd']) == ['d', 'b', 'c', 'a']\nassert func([100]) == [100]\nassert func([]) == []\n"}
{"task_id": 328, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(r) :  \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE LARGEST TRIANGLE THAT CAN BE INSCRIBED IN THE SEMICIRCLE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5) == 12.5\nassert func(8) == 20\nassert func(10) == 25\nassert func(15) == 37.5\nassert func(20) == 50\n```", "response_code": "\nassert func(5) == 12.5\nassert func(8) == 20\nassert func(10) == 25\nassert func(15) == 37.5\nassert func(20) == 50\n"}
{"task_id": 329, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(array,start=0,end=None):\n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SMALLEST MISSING NUMBER FROM THE GIVEN ARRAY.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([0, 1, 2, 3, 4, 5]) == 6\nassert func([1, 2, 3, 4, 5]) == 0\nassert func([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 10\nassert func([0, 1, 2, 3, 4, 5, 6, 7, 8, 10]) == 9\nassert func([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 11\n```", "response_code": "\nassert func([0, 1, 2, 3, 4, 5]) == 6\nassert func([1, 2, 3, 4, 5]) == 0\nassert func([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 10\nassert func([0, 1, 2, 3, 4, 5, 6, 7, 8, 10]) == 9\nassert func([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 11\n"}
{"task_id": 330, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(string):\n    '''\n    WRITE A FUNCTION TO REPLACE ALL SPACES IN THE GIVEN STRING WITH CHARACTER * LIST ITEM * LIST ITEM * LIST ITEM * LIST ITEM '%20'.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello world\") == \"hello%20world\"\nassert func(\"a b c d\") == \"a%20b%20c%20d\"\nassert func(\"  space  \") == \"%20%20space%20%20\"\nassert func(\"\") == \"\"\nassert func(\"noSpaces\") == \"noSpaces\"\n```", "response_code": "\nassert func(\"hello world\") == \"hello%20world\"\nassert func(\"a b c d\") == \"a%20b%20c%20d\"\nassert func(\"  space  \") == \"%20%20space%20%20\"\nassert func(\"\") == \"\"\nassert func(\"noSpaces\") == \"noSpaces\"\n"}
{"task_id": 331, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND EVEN NUMBERS FROM A MIXED LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == [2, 4]\nassert func([10, 15, 20, 25, 30]) == [10, 20, 30]\nassert func([11, 12, 13, 14, 15]) == [12, 14]\nassert func([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10]\nassert func([21, 22, 23, 24, 25]) == [22, 24]", "response_code": "assert func([1, 2, 3, 4, 5]) == [2, 4]\nassert func([10, 15, 20, 25, 30]) == [10, 20, 30]\nassert func([11, 12, 13, 14, 15]) == [12, 14]\nassert func([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10]\nassert func([21, 22, 23, 24, 25]) == [22, 24]"}
{"task_id": 332, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(ele, sub = []): \n    '''\n    WRITE A FUNCTION TO EXTRACT ALL THE ADJACENT COORDINATES OF THE GIVEN COORDINATE TUPLE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((0, 0)) == [(0, 1), (1, 0), (1, 1)]\nassert func((3, 3)) == [(2, 2), (2, 3), (3, 2)]\nassert func((5, 5)) == [(4, 4), (4, 5), (5, 4)]\nassert func((2, 4)) == [(1, 3), (1, 4), (2, 3), (3, 3), (3, 4)]\nassert func((0, 5)) == [(0, 4), (1, 4), (1, 5)]\n```", "response_code": "\nassert func((0, 0)) == [(0, 1), (1, 0), (1, 1)]\nassert func((3, 3)) == [(2, 2), (2, 3), (3, 2)]\nassert func((5, 5)) == [(4, 4), (4, 5), (5, 4)]\nassert func((2, 4)) == [(1, 3), (1, 4), (2, 3), (3, 3), (3, 4)]\nassert func((0, 5)) == [(0, 4), (1, 4), (1, 5)]\n"}
{"task_id": 333, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(text):\n    '''\n    WRITE A FUNCTION TO REPLACE WHITESPACES WITH AN UNDERSCORE AND VICE VERSA IN A GIVEN STRING BY USING REGEX.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello world\") == \"hello_world\"\nassert func(\"python_is_awesome\") == \"python is awesome\"\nassert func(\"a_b_c_d_e\") == \"a b c d e\"\nassert func(\"123_456_789\") == \"123 456 789\"\nassert func(\"   \") == \"___\"\n```", "response_code": "\nassert func(\"hello world\") == \"hello_world\"\nassert func(\"python_is_awesome\") == \"python is awesome\"\nassert func(\"a_b_c_d_e\") == \"a b c d e\"\nassert func(\"123_456_789\") == \"123 456 789\"\nassert func(\"   \") == \"___\"\n"}
{"task_id": 334, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(num_list):\n    '''\n    WRITE A PYTHON FUNCTION TO MOVE ALL ZEROES TO THE END OF THE GIVEN LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([0, 1, 0, 3, 12]) == [1, 3, 12, 0, 0]\nassert func([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([0, 0, 1, 0, 2]) == [1, 2, 0, 0, 0]\nassert func([0, 0, 0, 1, 2]) == [1, 2, 0, 0, 0]\n```", "response_code": "\nassert func([0, 1, 0, 3, 12]) == [1, 3, 12, 0, 0]\nassert func([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([0, 0, 1, 0, 2]) == [1, 2, 0, 0, 0]\nassert func([0, 0, 0, 1, 2]) == [1, 2, 0, 0, 0]\n"}
{"task_id": 335, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr,n) : \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SUM OF XOR OF ALL PAIRS OF NUMBERS IN THE GIVEN ARRAY.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], 3) == 6\nassert func([4, 5, 6, 7], 4) == 16\nassert func([10, 20, 30, 40, 50], 5) == 160\nassert func([3, 5, 7, 9, 11, 13], 6) == 64\nassert func([2, 4, 6, 8, 10, 12, 14], 7) == 112\n```", "response_code": "\nassert func([1, 2, 3], 3) == 6\nassert func([4, 5, 6, 7], 4) == 16\nassert func([10, 20, 30, 40, 50], 5) == 160\nassert func([3, 5, 7, 9, 11, 13], 6) == 64\nassert func([2, 4, 6, 8, 10, 12, 14], 7) == 112\n"}
{"task_id": 336, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import heapq as hq\ndef func(iterable):\n    '''\n    WRITE A FUNCTION TO PUSH ALL VALUES INTO A HEAP AND THEN POP OFF THE SMALLEST VALUES ONE AT A TIME.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test Case 1\niterable = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3]\nfunc(iterable)\n# Expected Output: [1, 1, 2, 3, 3, 4, 5, 5, 6, 9]\n\n# Test Case 2\niterable = [9, 8, 7, 6, 5, 4, 3, 2, 1]\nfunc(iterable)\n# Expected Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# Test Case 3\niterable = [5, 5, 5, 5, 5]\nfunc(iterable)\n# Expected Output: [5, 5, 5, 5, 5]\n\n# Test Case 4\niterable = [1, 2, 3, 4, 5]\nfunc(iterable)\n# Expected Output: [1, 2, 3, 4, 5]\n\n# Test Case 5\niterable = [10, 20, 30, 40, 50]\nfunc(iterable)\n# Expected Output: [10, 20, 30, 40, 50]\n```", "response_code": "\n# Test Case 1\niterable = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3]\nfunc(iterable)\n# Expected Output: [1, 1, 2, 3, 3, 4, 5, 5, 6, 9]\n\n# Test Case 2\niterable = [9, 8, 7, 6, 5, 4, 3, 2, 1]\nfunc(iterable)\n# Expected Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# Test Case 3\niterable = [5, 5, 5, 5, 5]\nfunc(iterable)\n# Expected Output: [5, 5, 5, 5, 5]\n\n# Test Case 4\niterable = [1, 2, 3, 4, 5]\nfunc(iterable)\n# Expected Output: [1, 2, 3, 4, 5]\n\n# Test Case 5\niterable = [10, 20, 30, 40, 50]\nfunc(iterable)\n# Expected Output: [10, 20, 30, 40, 50]\n"}
{"task_id": 337, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(actual_cost,sale_amount): \n    '''\n    WRITE A FUNCTION TO CHECK WHETHER THE GIVEN AMOUNT HAS NO PROFIT AND NO LOSS\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(100, 100) == \"No profit, No loss\"\nassert func(50, 50) == \"No profit, No loss\"\nassert func(200, 200) == \"No profit, No loss\"\nassert func(80, 80) == \"No profit, No loss\"\nassert func(120, 120) == \"No profit, No loss\"", "response_code": "assert func(100, 100) == \"No profit, No loss\"\nassert func(50, 50) == \"No profit, No loss\"\nassert func(200, 200) == \"No profit, No loss\"\nassert func(80, 80) == \"No profit, No loss\"\nassert func(120, 120) == \"No profit, No loss\""}
{"task_id": 338, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(v,t):\n    '''\n    WRITE A FUNCTION TO CALCULATE WIND CHILL INDEX.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(10, 5) == 6.807\nassert func(20, 10) == 8.694\nassert func(30, 15) == 10.581\nassert func(40, 20) == 12.468\nassert func(50, 25) == 14.355\n```", "response_code": "\nassert func(10, 5) == 6.807\nassert func(20, 10) == 8.694\nassert func(30, 15) == 10.581\nassert func(40, 20) == 12.468\nassert func(50, 25) == 14.355\n"}
{"task_id": 339, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(funces):\n    '''\n    WRITE A FUNCTION TO SUM THE LENGTH OF THE NAMES OF A GIVEN LIST OF NAMES AFTER REMOVING THE NAMES THAT START WITH A LOWERCASE LETTER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['Alice', 'bob', 'Charlie', 'David']) == 13\nassert func(['Eve', 'frank', 'Grace', 'Henry']) == 10\nassert func(['Ivy', 'jack', 'Kate', 'Liam']) == 7\nassert func(['Mary', 'nancy', 'Oliver', 'Peter']) == 10\nassert func(['Quinn', 'rose', 'Sam', 'Tom']) == 7\n```", "response_code": "\nassert func(['Alice', 'bob', 'Charlie', 'David']) == 13\nassert func(['Eve', 'frank', 'Grace', 'Henry']) == 10\nassert func(['Ivy', 'jack', 'Kate', 'Liam']) == 7\nassert func(['Mary', 'nancy', 'Oliver', 'Peter']) == 10\nassert func(['Quinn', 'rose', 'Sam', 'Tom']) == 7\n"}
{"task_id": 340, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(items):\n    '''\n    WRITE A FUNCTION TO REMOVE THE PARENTHESIS AREA IN A STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello (World)\") == \"Hello \"\nassert func(\"Python (Programming) is fun\") == \"Python is fun\"\nassert func(\"I love (coding) in Python\") == \"I love in Python\"\nassert func(\"This is a (test) string\") == \"This is a string\"\nassert func(\"(Remove) the parenthesis\") == \" the parenthesis\"\n```", "response_code": "\nassert func(\"Hello (World)\") == \"Hello \"\nassert func(\"Python (Programming) is fun\") == \"Python is fun\"\nassert func(\"I love (coding) in Python\") == \"I love in Python\"\nassert func(\"This is a (test) string\") == \"This is a string\"\nassert func(\"(Remove) the parenthesis\") == \" the parenthesis\"\n"}
{"task_id": 341, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A FUNCTION TO FIND THE NTH NONAGONAL NUMBER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 1\nassert func(2) == 9\nassert func(3) == 18\nassert func(4) == 27\nassert func(5) == 36", "response_code": "assert func(1) == 1\nassert func(2) == 9\nassert func(3) == 18\nassert func(4) == 27\nassert func(5) == 36"}
{"task_id": 342, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    WRITE A FUNCTION THAT MATCHES A WORD CONTAINING 'Z', NOT AT THE START OR END OF THE WORD.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"zebra\") == \"zebra\"\nassert func(\"amazing\") == \"amazing\"\nassert func(\"crazy\") == \"crazy\"\nassert func(\"frozen\") == \"frozen\"\nassert func(\"dizzy\") == \"dizzy\"\n```", "response_code": "\nassert func(\"zebra\") == \"zebra\"\nassert func(\"amazing\") == \"amazing\"\nassert func(\"crazy\") == \"crazy\"\nassert func(\"frozen\") == \"frozen\"\nassert func(\"dizzy\") == \"dizzy\"\n"}
{"task_id": 343, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(input, k): \n    '''\n    WRITE A PYTHON FUNCTION TO REVERSE AN ARRAY UPTO A GIVEN POSITION.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5], 2) == [2, 1, 3, 4, 5]\nassert func([5, 4, 3, 2, 1], 3) == [3, 4, 5, 2, 1]\nassert func([10, 20, 30, 40, 50, 60], 4) == [40, 30, 20, 10, 50, 60]\nassert func([100, 200, 300, 400], 1) == [200, 100, 300, 400]\nassert func([7, 8, 9], 0) == [7, 8, 9]", "response_code": "assert func([1, 2, 3, 4, 5], 2) == [2, 1, 3, 4, 5]\nassert func([5, 4, 3, 2, 1], 3) == [3, 4, 5, 2, 1]\nassert func([10, 20, 30, 40, 50, 60], 4) == [40, 30, 20, 10, 50, 60]\nassert func([100, 200, 300, 400], 1) == [200, 100, 300, 400]\nassert func([7, 8, 9], 0) == [7, 8, 9]"}
{"task_id": 344, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup, test_dict):\n    '''\n    WRITE A FUNCTION TO ADD A DICTIONARY TO THE TUPLE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test case 1\ntest_tup = (1, 2, 3)\ntest_dict = {'a': 4, 'b': 5}\nfunc(test_tup, test_dict)\nassert test_tup == (1, 2, 3, {'a': 4, 'b': 5})\n\n# Test case 2\ntest_tup = ('apple', 'banana')\ntest_dict = {'c': 'cherry', 'd': 'date'}\nfunc(test_tup, test_dict)\nassert test_tup == ('apple', 'banana', {'c': 'cherry', 'd': 'date'})\n\n# Test case 3\ntest_tup = (10,)\ntest_dict = {'x': 20}\nfunc(test_tup, test_dict)\nassert test_tup == (10, {'x': 20})\n\n# Test case 4\ntest_tup = ()\ntest_dict = {'empty': 'dictionary'}\nfunc(test_tup, test_dict)\nassert test_tup == ({'empty': 'dictionary'},)\n\n# Test case 5\ntest_tup = (True, False)\ntest_dict = {'yes': True, 'no': False}\nfunc(test_tup, test_dict)\nassert test_tup == (True, False, {'yes': True, 'no': False})\n```", "response_code": "\n# Test case 1\ntest_tup = (1, 2, 3)\ntest_dict = {'a': 4, 'b': 5}\nfunc(test_tup, test_dict)\nassert test_tup == (1, 2, 3, {'a': 4, 'b': 5})\n\n# Test case 2\ntest_tup = ('apple', 'banana')\ntest_dict = {'c': 'cherry', 'd': 'date'}\nfunc(test_tup, test_dict)\nassert test_tup == ('apple', 'banana', {'c': 'cherry', 'd': 'date'})\n\n# Test case 3\ntest_tup = (10,)\ntest_dict = {'x': 20}\nfunc(test_tup, test_dict)\nassert test_tup == (10, {'x': 20})\n\n# Test case 4\ntest_tup = ()\ntest_dict = {'empty': 'dictionary'}\nfunc(test_tup, test_dict)\nassert test_tup == ({'empty': 'dictionary'},)\n\n# Test case 5\ntest_tup = (True, False)\ntest_dict = {'yes': True, 'no': False}\nfunc(test_tup, test_dict)\nassert test_tup == (True, False, {'yes': True, 'no': False})\n"}
{"task_id": 345, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(cost):\n    '''\n    WRITE A FUNCTION TO FIND A PATH WITH THE MAXIMUM AVERAGE OVER ALL EXISTING PATHS FOR THE GIVEN SQUARE MATRIX OF SIZE N*N.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 6.0\nassert func([[1, 2], [3, 4]]) == 3.5\nassert func([[5]]) == 5.0\nassert func([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) == 1.0\nassert func([[10, 20, 30], [40, 50, 60], [70, 80, 90]]) == 50.0\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 6.0\nassert func([[1, 2], [3, 4]]) == 3.5\nassert func([[5]]) == 5.0\nassert func([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) == 1.0\nassert func([[10, 20, 30], [40, 50, 60], [70, 80, 90]]) == 50.0\n"}
{"task_id": 346, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(students,h,w):\n    '''\n    WRITE A FUNCTION TO FILTER THE HEIGHT AND WIDTH OF STUDENTS WHICH ARE STORED IN A DICTIONARY.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nstudents = {\n    'Alice': (160, 50),\n    'Bob': (175, 70),\n    'Charlie': (165, 60),\n    'David': (180, 75),\n    'Eve': (155, 45)\n}\n\n# Test Case 1: Filter students with height greater than 170 and width less than 65\nassert func(students, 170, 65) == {'Bob': (175, 70), 'David': (180, 75)}\n\n# Test Case 2: Filter students with height less than 160 and width greater than 55\nassert func(students, 160, 55) == {'Charlie': (165, 60)}\n\n# Test Case 3: Filter students with height equal to 155 and width equal to 45\nassert func(students, 155, 45) == {'Eve': (155, 45)}\n\n# Test Case 4: Filter students with height greater than 190 and width less than 80\nassert func(students, 190, 80) == {}\n\n# Test Case 5: Filter students with height less than 150 and width greater than 70\nassert func(students, 150, 70) == {}\n```", "response_code": "\nstudents = {\n    'Alice': (160, 50),\n    'Bob': (175, 70),\n    'Charlie': (165, 60),\n    'David': (180, 75),\n    'Eve': (155, 45)\n}\n\n# Test Case 1: Filter students with height greater than 170 and width less than 65\nassert func(students, 170, 65) == {'Bob': (175, 70), 'David': (180, 75)}\n\n# Test Case 2: Filter students with height less than 160 and width greater than 55\nassert func(students, 160, 55) == {'Charlie': (165, 60)}\n\n# Test Case 3: Filter students with height equal to 155 and width equal to 45\nassert func(students, 155, 45) == {'Eve': (155, 45)}\n\n# Test Case 4: Filter students with height greater than 190 and width less than 80\nassert func(students, 190, 80) == {}\n\n# Test Case 5: Filter students with height less than 150 and width greater than 70\nassert func(students, 150, 70) == {}\n"}
{"task_id": 347, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from operator import eq\ndef func(nums1, nums2):\n    '''\n    WRITE A FUNCTION TO COUNT THE SAME PAIR IN TWO GIVEN LISTS USING MAP FUNCTION.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], [1, 2, 3]) == 3\nassert func([1, 2, 3], [4, 5, 6]) == 0\nassert func([1, 2, 3], [3, 2, 1]) == 3\nassert func([1, 2, 3], [1, 2, 2]) == 2\nassert func([1, 2, 3], [4, 3, 2]) == 2\n```", "response_code": "\nassert func([1, 2, 3], [1, 2, 3]) == 3\nassert func([1, 2, 3], [4, 5, 6]) == 0\nassert func([1, 2, 3], [3, 2, 1]) == 3\nassert func([1, 2, 3], [1, 2, 2]) == 2\nassert func([1, 2, 3], [4, 3, 2]) == 2\n"}
{"task_id": 348, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(base, power):\n    '''\n    WRITE A FUNCTION TO CALCULATE THE SUM OF ALL DIGITS OF THE BASE TO THE SPECIFIED POWER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(2, 3) == 8\nassert func(5, 2) == 5\nassert func(10, 4) == 1\nassert func(3, 5) == 243\nassert func(7, 0) == 1\n```", "response_code": "\nassert func(2, 3) == 8\nassert func(5, 2) == 5\nassert func(10, 4) == 1\nassert func(3, 5) == 243\nassert func(7, 0) == 1\n"}
{"task_id": 349, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text1):\n    '''\n    WRITE A FUNCTION TO EXTRACT VALUES BETWEEN QUOTATION MARKS OF THE GIVEN STRING BY USING REGEX.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func('This is a \"test\" string') == ['test']\nassert func('No quotes here') == []\nassert func('Multiple \"quotes\" \"in\" \"one\" string') == ['quotes', 'in', 'one']\nassert func('\"Only one quote\"') == ['Only one quote']\nassert func('Empty quotes \"\" should not be included') == []\n```", "response_code": "\nassert func('This is a \"test\" string') == ['test']\nassert func('No quotes here') == []\nassert func('Multiple \"quotes\" \"in\" \"one\" string') == ['quotes', 'in', 'one']\nassert func('\"Only one quote\"') == ['Only one quote']\nassert func('Empty quotes \"\" should not be included') == []\n"}
{"task_id": 350, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    WRITE A FUNCTION TO MULTIPLY THE ADJACENT ELEMENTS OF THE GIVEN TUPLE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3, 4)) == (2, 6, 12)\nassert func((5, 10, 15, 20)) == (50, 150, 300)\nassert func((2, 4, 6, 8, 10)) == (8, 24, 48, 80)\nassert func((3, 6, 9, 12, 15, 18)) == (18, 54, 108, 180, 270)\nassert func((4, 8, 12, 16, 20, 24, 28)) == (32, 96, 192, 320, 480, 672)\n```", "response_code": "\nassert func((1, 2, 3, 4)) == (2, 6, 12)\nassert func((5, 10, 15, 20)) == (50, 150, 300)\nassert func((2, 4, 6, 8, 10)) == (8, 24, 48, 80)\nassert func((3, 6, 9, 12, 15, 18)) == (18, 54, 108, 180, 270)\nassert func((4, 8, 12, 16, 20, 24, 28)) == (32, 96, 192, 320, 480, 672)\n"}
{"task_id": 351, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lst1,lst2):\n    '''\n    WRITE A FUNCTION TO SUM ELEMENTS IN TWO LISTS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3], [4, 5, 6]) == [5, 7, 9]\nassert func([-1, 0, 1], [1, 2, 3]) == [0, 2, 4]\nassert func([10, 20, 30], [5, 10, 15]) == [15, 30, 45]\nassert func([0, 0, 0], [1, 2, 3]) == [1, 2, 3]\nassert func([100, 200, 300], [0, 0, 0]) == [100, 200, 300]", "response_code": "assert func([1, 2, 3], [4, 5, 6]) == [5, 7, 9]\nassert func([-1, 0, 1], [1, 2, 3]) == [0, 2, 4]\nassert func([10, 20, 30], [5, 10, 15]) == [15, 30, 45]\nassert func([0, 0, 0], [1, 2, 3]) == [1, 2, 3]\nassert func([100, 200, 300], [0, 0, 0]) == [100, 200, 300]"}
{"task_id": 352, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from itertools import groupby\ndef func(nums):\n    '''\n    WRITE A FUNCTION TO REMOVE CONSECUTIVE DUPLICATES OF A GIVEN LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [1, 2, 3, 4]\nassert func([1, 1, 1, 1, 1]) == [1]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1, 1, 2, 2, 3, 3, 3, 4, 4, 4]) == [1, 2, 3, 4]\nassert func([]) == []\n```", "response_code": "\nassert func([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [1, 2, 3, 4]\nassert func([1, 1, 1, 1, 1]) == [1]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1, 1, 2, 2, 3, 3, 3, 4, 4, 4]) == [1, 2, 3, 4]\nassert func([]) == []\n"}
{"task_id": 353, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(r,h):\n    '''\n    WRITE A FUNCTION TO FIND THE LATERAL SURFACE AREA OF A CONE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 4) == 28.274333882308138\nassert func(5, 7) == 110.6717834424047\nassert func(2, 10) == 31.41592653589793\nassert func(6, 3) == 56.548667764616276\nassert func(8, 6) == 150.79644737231007\n```", "response_code": "\nassert func(3, 4) == 28.274333882308138\nassert func(5, 7) == 110.6717834424047\nassert func(2, 10) == 31.41592653589793\nassert func(6, 3) == 56.548667764616276\nassert func(8, 6) == 150.79644737231007\n"}
{"task_id": 354, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    WRITE A FUNCTION TO REPLACE ALL OCCURRENCES OF SPACES, COMMAS, OR DOTS WITH A COLON.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello, World\") == \"Hello: World\"\nassert func(\"Python is fun.\") == \"Python: is: fun:\"\nassert func(\"1,2,3,4,5\") == \"1:2:3:4:5\"\nassert func(\"a b c d e\") == \"a:b:c:d:e\"\nassert func(\"Spaces . and , should be replaced\") == \"Spaces::and:::should:be:replaced\"\n```", "response_code": "\nassert func(\"Hello, World\") == \"Hello: World\"\nassert func(\"Python is fun.\") == \"Python: is: fun:\"\nassert func(\"1,2,3,4,5\") == \"1:2:3:4:5\"\nassert func(\"a b c d e\") == \"a:b:c:d:e\"\nassert func(\"Spaces . and , should be replaced\") == \"Spaces::and:::should:be:replaced\"\n"}
{"task_id": 355, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(A, x):\n    '''\n    WRITE A FUNCTION TO FIND THE INDEX OF THE FIRST OCCURRENCE OF A GIVEN NUMBER IN A SORTED ARRAY.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 3) == 2\nassert func([1, 2, 3, 4, 5], 1) == 0\nassert func([1, 2, 3, 4, 5], 5) == 4\nassert func([1, 2, 3, 4, 5], 6) == -1\nassert func([1, 2, 3, 3, 4, 5], 3) == 2\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 3) == 2\nassert func([1, 2, 3, 4, 5], 1) == 0\nassert func([1, 2, 3, 4, 5], 5) == 4\nassert func([1, 2, 3, 4, 5], 6) == -1\nassert func([1, 2, 3, 3, 4, 5], 3) == 2\n"}
{"task_id": 356, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):\n    '''\n    WRITE A PYTHON FUNCTION TO FIND SUM OF PRODUCTS OF ALL POSSIBLE SUBARRAYS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3]) == 60\nassert func([4, 5, 6]) == 420\nassert func([2, 3, 4, 5]) == 720\nassert func([1, 2, 3, 4, 5]) == 3120\nassert func([3, 4, 5, 6]) == 840\n```", "response_code": "\nassert func([1, 2, 3]) == 60\nassert func([4, 5, 6]) == 420\nassert func([2, 3, 4, 5]) == 720\nassert func([1, 2, 3, 4, 5]) == 3120\nassert func([3, 4, 5, 6]) == 840\n"}
{"task_id": 357, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):  \n    '''\n    WRITE A PYTHON FUNCTION TO TOGGLE BITS OF THE NUMBER EXCEPT THE FIRST AND THE LAST BIT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0b101010) == 0b101010\nassert func(0b110011) == 0b110000\nassert func(0b111111) == 0b111100\nassert func(0b100001) == 0b100000\nassert func(0b101101) == 0b101100\n```", "response_code": "\nassert func(0b101010) == 0b101010\nassert func(0b110011) == 0b110000\nassert func(0b111111) == 0b111100\nassert func(0b100001) == 0b100000\nassert func(0b101101) == 0b101100\n"}
{"task_id": 358, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import bisect\ndef func(a, x):\n    '''\n    WRITE A FUNCTION TO LOCATE THE LEFT INSERTION POINT FOR A SPECIFIED VALUE IN SORTED ORDER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 3, 5, 7, 9], 5) == 2\nassert func([1, 3, 5, 7, 9], 2) == 1\nassert func([1, 3, 5, 7, 9], 10) == 5\nassert func([1, 3, 5, 7, 9], 0) == 0\nassert func([1, 3, 5, 7, 9], 6) == 3\n```", "response_code": "\nassert func([1, 3, 5, 7, 9], 5) == 2\nassert func([1, 3, 5, 7, 9], 2) == 1\nassert func([1, 3, 5, 7, 9], 10) == 5\nassert func([1, 3, 5, 7, 9], 0) == 0\nassert func([1, 3, 5, 7, 9], 6) == 3\n"}
{"task_id": 359, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef func(string): \n    '''\n    WRITE A FUNCTION TO CHECK WHETHER THE GIVEN STRING IS STARTING WITH A VOWEL OR NOT USING REGEX.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"apple\") == True\nassert func(\"banana\") == True\nassert func(\"123abc\") == False\nassert func(\"Orange\") == True\nassert func(\"123\") == False\n```", "response_code": "\nassert func(\"apple\") == True\nassert func(\"banana\") == True\nassert func(\"123abc\") == False\nassert func(\"Orange\") == True\nassert func(\"123\") == False\n"}
{"task_id": 360, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    WRITE A FUNCTION TO CALCULATE THE GEOMETRIC SUM OF N-1.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 0\nassert func(2) == 1\nassert func(3) == 1.5\nassert func(4) == 1.75\nassert func(5) == 1.875\n```", "response_code": "\nassert func(1) == 0\nassert func(2) == 1\nassert func(3) == 1.5\nassert func(4) == 1.75\nassert func(5) == 1.875\n"}
{"task_id": 361, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math \ndef func(n): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE INDEX OF SMALLEST TRIANGULAR NUMBER WITH N DIGITS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 3\nassert func(3) == 6\nassert func(4) == 10\nassert func(5) == 15\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 3\nassert func(3) == 6\nassert func(4) == 10\nassert func(5) == 15\n"}
{"task_id": 362, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    WRITE A FUNCTION TO CONVERT THE GIVEN TUPLE TO A KEY-VALUE DICTIONARY USING ADJACENT ELEMENTS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3, 4)) == {1: 2, 3: 4}\nassert func(('a', 'b', 'c', 'd', 'e', 'f')) == {'a': 'b', 'c': 'd', 'e': 'f'}\nassert func((10, 20, 30, 40, 50)) == {10: 20, 30: 40, 50: None}\nassert func(('x', 'y')) == {'x': 'y'}\nassert func(()) == {}\n```", "response_code": "\nassert func((1, 2, 3, 4)) == {1: 2, 3: 4}\nassert func(('a', 'b', 'c', 'd', 'e', 'f')) == {'a': 'b', 'c': 'd', 'e': 'f'}\nassert func((10, 20, 30, 40, 50)) == {10: 20, 30: 40, 50: None}\nassert func(('x', 'y')) == {'x': 'y'}\nassert func(()) == {}\n"}
{"task_id": 363, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(s) :\n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER ALL THE CHARACTERS ARE SAME OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"aaa\") == True\nassert func(\"abc\") == False\nassert func(\"11111\") == True\nassert func(\"aAaAaA\") == False\nassert func(\"\") == True\n```", "response_code": "\nassert func(\"aaa\") == True\nassert func(\"abc\") == False\nassert func(\"11111\") == True\nassert func(\"aAaAaA\") == False\nassert func(\"\") == True\n"}
{"task_id": 364, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(side):\n    '''\n    WRITE A FUNCTION TO CALCULATE THE AREA OF A TETRAHEDRON.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == math.sqrt(2) / 12\nassert func(2) == math.sqrt(2) / 3\nassert func(3) == math.sqrt(2)\nassert func(4) == 2 * math.sqrt(2) / 3\nassert func(5) == math.sqrt(3)\n```", "response_code": "\nassert func(1) == math.sqrt(2) / 12\nassert func(2) == math.sqrt(2) / 3\nassert func(3) == math.sqrt(2)\nassert func(4) == 2 * math.sqrt(2) / 3\nassert func(5) == math.sqrt(3)\n"}
{"task_id": 365, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list, m):\n    '''\n    WRITE A FUNCTION TO ROTATE A GIVEN LIST BY SPECIFIED NUMBER OF ITEMS TO THE RIGHT DIRECTION.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]\nassert func([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5], 1) == [5, 1, 2, 3, 4]\nassert func([1, 2, 3, 4, 5], 3) == [3, 4, 5, 1, 2]\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]\nassert func([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5], 1) == [5, 1, 2, 3, 4]\nassert func([1, 2, 3, 4, 5], 3) == [3, 4, 5, 1, 2]\n"}
{"task_id": 366, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    WRITE A FUNCTION TO CHECK IF THE GIVEN TUPLE HAS ANY NONE VALUE OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func((1, 2, 3)) == False\nassert func((None, 2, 3)) == True\nassert func((1, None, 3)) == True\nassert func((1, 2, None)) == True\nassert func((None, None, None)) == True", "response_code": "assert func((1, 2, 3)) == False\nassert func((None, 2, 3)) == True\nassert func((1, None, 3)) == True\nassert func((1, 2, None)) == True\nassert func((None, None, None)) == True"}
{"task_id": 367, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(startnum, endnum):\n    '''\n    WRITE A FUNCTION TO FIND NUMBERS WITHIN A GIVEN RANGE WHERE EVERY NUMBER IS DIVISIBLE BY EVERY DIGIT IT CONTAINS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert func(10, 20) == [12, 15]\nassert func(50, 60) == [56]\nassert func(100, 110) == [102, 105, 108]\nassert func(200, 210) == [201, 204, 207]\n```", "response_code": "\nassert func(1, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert func(10, 20) == [12, 15]\nassert func(50, 60) == [56]\nassert func(100, 110) == [102, 105, 108]\nassert func(200, 210) == [201, 204, 207]\n"}
{"task_id": 368, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(r,a):\n    '''\n    WRITE A FUNCTION TO FIND AREA OF A SECTOR.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5, 30) == 7.853981633974483  # r=5, a=30 degrees, area=7.853981633974483\nassert func(10, 45) == 19.634954084936208  # r=10, a=45 degrees, area=19.634954084936208\nassert func(8, 60) == 16.755160819145562  # r=8, a=60 degrees, area=16.755160819145562\nassert func(12, 90) == 37.69911184307752  # r=12, a=90 degrees, area=37.69911184307752\nassert func(15, 120) == 58.90515489181724  # r=15, a=120 degrees, area=58.90515489181724\n```", "response_code": "\nassert func(5, 30) == 7.853981633974483  # r=5, a=30 degrees, area=7.853981633974483\nassert func(10, 45) == 19.634954084936208  # r=10, a=45 degrees, area=19.634954084936208\nassert func(8, 60) == 16.755160819145562  # r=8, a=60 degrees, area=16.755160819145562\nassert func(12, 90) == 37.69911184307752  # r=12, a=90 degrees, area=37.69911184307752\nassert func(15, 120) == 58.90515489181724  # r=15, a=120 degrees, area=58.90515489181724\n"}
{"task_id": 369, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(X, Y, Z): \n    '''\n    WRITE A FUNCTION TO FIND THE LONGEST COMMON SUBSEQUENCE FOR THE GIVEN THREE STRING SEQUENCE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"abcde\", \"ace\", \"abc\") == \"ac\"\nassert func(\"AGGTAB\", \"GXTXAYB\", \"GTAB\") == \"GTAB\"\nassert func(\"abcdef\", \"xyz\", \"123\") == \"\"\nassert func(\"ABCDGH\", \"AEDFHR\", \"ABCD\") == \"ABCD\"\nassert func(\"abc\", \"def\", \"ghi\") == \"\"\n```", "response_code": "\nassert func(\"abcde\", \"ace\", \"abc\") == \"ac\"\nassert func(\"AGGTAB\", \"GXTXAYB\", \"GTAB\") == \"GTAB\"\nassert func(\"abcdef\", \"xyz\", \"123\") == \"\"\nassert func(\"ABCDGH\", \"AEDFHR\", \"ABCD\") == \"ABCD\"\nassert func(\"abc\", \"def\", \"ghi\") == \"\"\n"}
{"task_id": 370, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(str1):\n    '''\n    WRITE A FUNCTION TO PUT SPACES BETWEEN WORDS STARTING WITH CAPITAL LETTERS IN A GIVEN STRING BY USING REGEX.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"HelloWorld\") == \"Hello World\"\nassert func(\"PythonIsGreat\") == \"Python Is Great\"\nassert func(\"RegexIsFun\") == \"Regex Is Fun\"\nassert func(\"ThisIsATest\") == \"This Is A Test\"\nassert func(\"OneTwoThree\") == \"One Two Three\"\n```", "response_code": "\nassert func(\"HelloWorld\") == \"Hello World\"\nassert func(\"PythonIsGreat\") == \"Python Is Great\"\nassert func(\"RegexIsFun\") == \"Regex Is Fun\"\nassert func(\"ThisIsATest\") == \"This Is A Test\"\nassert func(\"OneTwoThree\") == \"One Two Three\"\n"}
{"task_id": 371, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums_str):\n    '''\n    WRITE A FUNCTION TO SORT A GIVEN LIST OF STRINGS OF NUMBERS NUMERICALLY.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([\"3\", \"1\", \"2\"]) == [\"1\", \"2\", \"3\"]\nassert func([\"10\", \"5\", \"100\"]) == [\"5\", \"10\", \"100\"]\nassert func([\"20\", \"15\", \"25\"]) == [\"15\", \"20\", \"25\"]\nassert func([\"-3\", \"0\", \"5\"]) == [\"-3\", \"0\", \"5\"]\nassert func([\"1000\", \"100\", \"10\"]) == [\"10\", \"100\", \"1000\"]\n```", "response_code": "\nassert func([\"3\", \"1\", \"2\"]) == [\"1\", \"2\", \"3\"]\nassert func([\"10\", \"5\", \"100\"]) == [\"5\", \"10\", \"100\"]\nassert func([\"20\", \"15\", \"25\"]) == [\"15\", \"20\", \"25\"]\nassert func([\"-3\", \"0\", \"5\"]) == [\"-3\", \"0\", \"5\"]\nassert func([\"1000\", \"100\", \"10\"]) == [\"10\", \"100\", \"1000\"]\n"}
{"task_id": 372, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list, test_tup):\n    '''\n    WRITE A FUNCTION TO ADD THE GIVEN TUPLE TO THE GIVEN LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], (4, 5)) == [1, 2, 3, (4, 5)]\nassert func([], (1, 2, 3)) == [(1, 2, 3)]\nassert func(['a', 'b'], ('c',)) == ['a', 'b', ('c',)]\nassert func([1, 2, 3], ()) == [1, 2, 3, ()]\nassert func([], ()) == [()]\n```", "response_code": "\nassert func([1, 2, 3], (4, 5)) == [1, 2, 3, (4, 5)]\nassert func([], (1, 2, 3)) == [(1, 2, 3)]\nassert func(['a', 'b'], ('c',)) == ['a', 'b', ('c',)]\nassert func([1, 2, 3], ()) == [1, 2, 3, ()]\nassert func([], ()) == [()]\n"}
{"task_id": 373, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr, i):\n    '''\n    WRITE A FUNCTION TO CHECK IF THE GIVEN ARRAY REPRESENTS MIN HEAP OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5], 0) == True\nassert func([5, 4, 3, 2, 1], 0) == False\nassert func([1, 3, 2, 5, 4], 0) == False\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0) == True\nassert func([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 0) == False", "response_code": "assert func([1, 2, 3, 4, 5], 0) == True\nassert func([5, 4, 3, 2, 1], 0) == False\nassert func([1, 3, 2, 5, 4], 0) == False\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0) == True\nassert func([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 0) == False"}
{"task_id": 374, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A FUNCTION TO FIND THE NTH JACOBSTHAL NUMBER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 0\nassert func(1) == 1\nassert func(2) == 1\nassert func(5) == 11\nassert func(10) == 341\n```", "response_code": "\nassert func(0) == 0\nassert func(1) == 1\nassert func(2) == 1\nassert func(5) == 11\nassert func(10) == 341\n"}
{"task_id": 375, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list, K):\n    '''\n    WRITE A FUNCTION TO FIND MINIMUM K RECORDS FROM TUPLE LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 'apple'), (2, 'banana'), (3, 'cherry'), (4, 'date')], 2) == [(1, 'apple'), (2, 'banana')]\nassert func([(5, 'elephant'), (6, 'fox'), (7, 'giraffe'), (8, 'horse')], 3) == [(5, 'elephant'), (6, 'fox'), (7, 'giraffe')]\nassert func([(10, 'apple'), (20, 'banana'), (30, 'cherry'), (40, 'date')], 1) == [(10, 'apple')]\nassert func([(100, 'apple'), (200, 'banana'), (300, 'cherry'), (400, 'date')], 4) == [(100, 'apple'), (200, 'banana'), (300, 'cherry'), (400, 'date')]\nassert func([(1, 'apple'), (2, 'banana'), (3, 'cherry'), (4, 'date')], 0) == []\n```", "response_code": "\nassert func([(1, 'apple'), (2, 'banana'), (3, 'cherry'), (4, 'date')], 2) == [(1, 'apple'), (2, 'banana')]\nassert func([(5, 'elephant'), (6, 'fox'), (7, 'giraffe'), (8, 'horse')], 3) == [(5, 'elephant'), (6, 'fox'), (7, 'giraffe')]\nassert func([(10, 'apple'), (20, 'banana'), (30, 'cherry'), (40, 'date')], 1) == [(10, 'apple')]\nassert func([(100, 'apple'), (200, 'banana'), (300, 'cherry'), (400, 'date')], 4) == [(100, 'apple'), (200, 'banana'), (300, 'cherry'), (400, 'date')]\nassert func([(1, 'apple'), (2, 'banana'), (3, 'cherry'), (4, 'date')], 0) == []\n"}
{"task_id": 376, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l1, l2, l3):\n    '''\n    WRITE A FUNCTION TO FIND COMMON INDEX ELEMENTS FROM THREE LISTS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], [2, 3, 4], [3, 4, 5]) == [3]\nassert func([1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]) == [3, 4]\nassert func([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7]) == [3, 4, 5]\nassert func([1, 2, 3], [4, 5, 6], [7, 8, 9]) == []\nassert func([1, 2, 3], [1, 2, 3], [1, 2, 3]) == [1, 2, 3]\n```", "response_code": "\nassert func([1, 2, 3], [2, 3, 4], [3, 4, 5]) == [3]\nassert func([1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]) == [3, 4]\nassert func([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7]) == [3, 4, 5]\nassert func([1, 2, 3], [4, 5, 6], [7, 8, 9]) == []\nassert func([1, 2, 3], [1, 2, 3], [1, 2, 3]) == [1, 2, 3]\n"}
{"task_id": 377, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(numbers):\n    '''\n    WRITE A FUNCTION TO FIND THE SECOND SMALLEST NUMBER IN A LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 2\nassert func([5, 4, 3, 2, 1]) == 2\nassert func([3, 1, 4, 1, 5]) == 3\nassert func([7, 7, 7, 7, 7]) == 7\nassert func([9, 8, 7, 6, 5]) == 6\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 2\nassert func([5, 4, 3, 2, 1]) == 2\nassert func([3, 1, 4, 1, 5]) == 3\nassert func([7, 7, 7, 7, 7]) == 7\nassert func([9, 8, 7, 6, 5]) == 6\n"}
{"task_id": 378, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    WRITE A FUNCTION THAT MATCHES A STRING THAT HAS AN A FOLLOWED BY ZERO OR ONE 'B'.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"ac\") == True\nassert func(\"abc\") == True\nassert func(\"abbc\") == False\nassert func(\"a\") == True\nassert func(\"ab\") == True\n```", "response_code": "\nassert func(\"ac\") == True\nassert func(\"abc\") == True\nassert func(\"abbc\") == False\nassert func(\"a\") == True\nassert func(\"ab\") == True\n"}
{"task_id": 379, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    WRITE A FUNCTION TO COUNT THE PAIRS OF REVERSE STRINGS IN THE GIVEN STRING LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['ab', 'ba', 'cd', 'dc', 'ef', 'fe']) == 3\nassert func(['abc', 'cba', 'def', 'fed', 'ghi', 'ihg']) == 3\nassert func(['hello', 'olleh', 'world', 'dlrow', 'python', 'nohtyp']) == 3\nassert func(['racecar', 'racecar', 'level', 'level', 'madam', 'madam']) == 6\nassert func(['apple', 'elppa', 'banana', 'ananab', 'cherry', 'yrrehc']) == 0\n```", "response_code": "\nassert func(['ab', 'ba', 'cd', 'dc', 'ef', 'fe']) == 3\nassert func(['abc', 'cba', 'def', 'fed', 'ghi', 'ihg']) == 3\nassert func(['hello', 'olleh', 'world', 'dlrow', 'python', 'nohtyp']) == 3\nassert func(['racecar', 'racecar', 'level', 'level', 'madam', 'madam']) == 6\nassert func(['apple', 'elppa', 'banana', 'ananab', 'cherry', 'yrrehc']) == 0\n"}
{"task_id": 380, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A FUNCTION TO COUNT NUMBER OF UNIQUE LISTS WITHIN A LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([[1, 2], [3, 4], [1, 2]]) == 2\nassert func([[1, 2], [3, 4], [1, 2], [3, 4]]) == 2\nassert func([[1, 2], [3, 4], [5, 6]]) == 3\nassert func([[1, 2], [1, 2], [1, 2]]) == 1\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == 4", "response_code": "assert func([[1, 2], [3, 4], [1, 2]]) == 2\nassert func([[1, 2], [3, 4], [1, 2], [3, 4]]) == 2\nassert func([[1, 2], [3, 4], [5, 6]]) == 3\nassert func([[1, 2], [1, 2], [1, 2]]) == 1\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == 4"}
{"task_id": 381, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(num):\n    '''\n    WRITE A FUNCTION TO CHECK A DECIMAL WITH A PRECISION OF 2.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3.14159) == 3.14\nassert func(2.71828) == 2.72\nassert func(1.23456) == 1.23\nassert func(0.99999) == 1.00\nassert func(5.55555) == 5.56\n```", "response_code": "\nassert func(3.14159) == 3.14\nassert func(2.71828) == 2.72\nassert func(1.23456) == 1.23\nassert func(0.99999) == 1.00\nassert func(5.55555) == 5.56\n"}
{"task_id": 382, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):\n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER AN ARRAY CONTAINS ONLY ONE DISTINCT ELEMENT OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 1, 1, 1]) == True\nassert func([1, 2, 3, 4]) == False\nassert func([5, 5, 5, 5, 5]) == True\nassert func([0]) == True\nassert func([]) == True\n```", "response_code": "\nassert func([1, 1, 1, 1]) == True\nassert func([1, 2, 3, 4]) == False\nassert func([5, 5, 5, 5, 5]) == True\nassert func([0]) == True\nassert func([]) == True\n"}
{"task_id": 383, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(monthnum3):\n    '''\n    WRITE A FUNCTION TO CHECK WHETHER THE GIVEN MONTH NUMBER CONTAINS 30 DAYS OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(4) == True\nassert func(6) == True\nassert func(9) == True\nassert func(11) == True\nassert func(2) == False", "response_code": "assert func(4) == True\nassert func(6) == True\nassert func(9) == True\nassert func(11) == True\nassert func(2) == False"}
{"task_id": 384, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr,n): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE MINIMUM DIFFERENCE BETWEEN ANY TWO ELEMENTS IN A GIVEN ARRAY.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 5) == 1\nassert func([9, 15, 23, 30], 4) == 6\nassert func([10, 20, 30, 40, 50], 5) == 10\nassert func([5, 10, 15, 20, 25, 30], 6) == 5\nassert func([100, 200, 300, 400, 500, 600, 700], 7) == 100\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 5) == 1\nassert func([9, 15, 23, 30], 4) == 6\nassert func([10, 20, 30, 40, 50], 5) == 10\nassert func([5, 10, 15, 20, 25, 30], 6) == 5\nassert func([100, 200, 300, 400, 500, 600, 700], 7) == 100\n"}
{"task_id": 385, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str):\n    '''\n    WRITE A PYTHON FUNCTION TO COUNT NUMERIC VALUES IN A GIVEN STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"abc123\") == 3\nassert func(\"1a2b3c\") == 3\nassert func(\"12345\") == 5\nassert func(\"abc\") == 0\nassert func(\"\") == 0", "response_code": "assert func(\"abc123\") == 3\nassert func(\"1a2b3c\") == 3\nassert func(\"12345\") == 5\nassert func(\"abc\") == 0\nassert func(\"\") == 0"}
{"task_id": 386, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math \ndef func(n): \n    '''\n    WRITE A FUNCTION TO FIND NTH POLITE NUMBER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 3\nassert func(4) == 4\nassert func(5) == 5\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 3\nassert func(4) == 4\nassert func(5) == 5\n"}
{"task_id": 387, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l1):\n    '''\n    WRITE A FUNCTION TO ITERATE OVER ALL PAIRS OF CONSECUTIVE ITEMS IN A GIVEN LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test cases\nassert func([1, 2, 3, 4]) == [(1, 2), (2, 3), (3, 4)]\nassert func(['a', 'b', 'c']) == [('a', 'b'), ('b', 'c')]\nassert func([5, 10, 15, 20, 25]) == [(5, 10), (10, 15), (15, 20), (20, 25)]\nassert func([]) == []\nassert func([100]) == []\n```", "response_code": "\n# Test cases\nassert func([1, 2, 3, 4]) == [(1, 2), (2, 3), (3, 4)]\nassert func(['a', 'b', 'c']) == [('a', 'b'), ('b', 'c')]\nassert func([5, 10, 15, 20, 25]) == [(5, 10), (10, 15), (15, 20), (20, 25)]\nassert func([]) == []\nassert func([100]) == []\n"}
{"task_id": 388, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr, sum):\n    '''\n    WRITE A PYTHON FUNCTION TO COUNT THE NUMBER OF PAIRS WHOSE SUM IS EQUAL TO \u2018SUM\u2019.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 5) == 2\nassert func([1, 2, 3, 4, 5], 10) == 2\nassert func([1, 2, 3, 4, 5], 7) == 2\nassert func([1, 2, 3, 4, 5], 8) == 2\nassert func([1, 2, 3, 4, 5], 6) == 2\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 5) == 2\nassert func([1, 2, 3, 4, 5], 10) == 2\nassert func([1, 2, 3, 4, 5], 7) == 2\nassert func([1, 2, 3, 4, 5], 8) == 2\nassert func([1, 2, 3, 4, 5], 6) == 2\n"}
{"task_id": 389, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(li1,li2):\n    '''\n    WRITE A PYTHON FUNCTION TO GET THE DIFFERENCE BETWEEN TWO LISTS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], [2, 4, 6]) == [1, 3, 5]\nassert func([5, 4, 3, 2, 1], [2, 4, 6]) == [5, 3, 1]\nassert func([1, 2, 3], [4, 5, 6]) == [1, 2, 3]\nassert func([1, 2, 3, 4], [4, 3, 2, 1]) == []\nassert func([], [1, 2, 3]) == []\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], [2, 4, 6]) == [1, 3, 5]\nassert func([5, 4, 3, 2, 1], [2, 4, 6]) == [5, 3, 1]\nassert func([1, 2, 3], [4, 5, 6]) == [1, 2, 3]\nassert func([1, 2, 3, 4], [4, 3, 2, 1]) == []\nassert func([], [1, 2, 3]) == []\n"}
{"task_id": 390, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n) : \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SUM OF FOURTH POWER OF FIRST N ODD NATURAL NUMBERS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 17\nassert func(3) == 98\nassert func(4) == 354\nassert func(5) == 979\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 17\nassert func(3) == 98\nassert func(4) == 354\nassert func(5) == 979\n"}
{"task_id": 391, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from collections import deque\ndef func(exp):\n    '''\n    WRITE A FUNCTION TO CHECK IF THE GIVEN EXPRESSION IS BALANCED OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"()\") == True\nassert func(\"()[]{}\") == True\nassert func(\"(]\") == False\nassert func(\"([)]\") == False\nassert func(\"{[]}\") == True\n```", "response_code": "\nassert func(\"()\") == True\nassert func(\"()[]{}\") == True\nassert func(\"(]\") == False\nassert func(\"([)]\") == False\nassert func(\"{[]}\") == True\n"}
{"task_id": 392, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_str, K):\n    '''\n    WRITE A FUNCTION TO REMOVE ALL THE WORDS WITH K LENGTH IN THE GIVEN STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello world\", 5) == \"Hello\"\nassert func(\"Python is awesome\", 2) == \"is\"\nassert func(\"Keep calm and code on\", 4) == \"Keep calm code\"\nassert func(\"Testing the function\", 7) == \"Testing function\"\nassert func(\"This is a test\", 1) == \"is a\"\n```", "response_code": "\nassert func(\"Hello world\", 5) == \"Hello\"\nassert func(\"Python is awesome\", 2) == \"is\"\nassert func(\"Keep calm and code on\", 4) == \"Keep calm code\"\nassert func(\"Testing the function\", 7) == \"Testing function\"\nassert func(\"This is a test\", 1) == \"is a\"\n"}
{"task_id": 393, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text,pattern):\n    '''\n    WRITE A FUNCTION TO FIND THE OCCURRENCE AND POSITION OF THE SUBSTRINGS WITHIN A STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello world\", \"l\") == [(2, 3), (3, 4)]\nassert func(\"hello world\", \"o\") == [(4, 5), (7, 8)]\nassert func(\"hello world\", \"x\") == []\nassert func(\"hello world\", \"lo\") == [(3, 5)]\nassert func(\"hello world\", \"ld\") == [(9, 11)]\n```", "response_code": "\nassert func(\"hello world\", \"l\") == [(2, 3), (3, 4)]\nassert func(\"hello world\", \"o\") == [(4, 5), (7, 8)]\nassert func(\"hello world\", \"x\") == []\nassert func(\"hello world\", \"lo\") == [(3, 5)]\nassert func(\"hello world\", \"ld\") == [(9, 11)]\n"}
{"task_id": 394, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER EVERY ODD INDEX CONTAINS ODD NUMBERS OF A GIVEN LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == True\nassert func([2, 3, 6, 7, 8]) == False\nassert func([11, 22, 33, 44, 55]) == True\nassert func([2, 4, 6, 8, 10]) == True\nassert func([1, 2, 3, 4, 6]) == False\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == True\nassert func([2, 3, 6, 7, 8]) == False\nassert func([11, 22, 33, 44, 55]) == True\nassert func([2, 4, 6, 8, 10]) == True\nassert func([1, 2, 3, 4, 6]) == False\n"}
{"task_id": 395, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_str):\n    '''\n    WRITE A FUNCTION TO COUNT THOSE CHARACTERS WHICH HAVE VOWELS AS THEIR NEIGHBORS IN THE GIVEN STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == 2\nassert func(\"apple\") == 2\nassert func(\"banana\") == 3\nassert func(\"elephant\") == 3\nassert func(\"programming\") == 4\n```", "response_code": "\nassert func(\"hello\") == 2\nassert func(\"apple\") == 2\nassert func(\"banana\") == 3\nassert func(\"elephant\") == 3\nassert func(\"programming\") == 4\n"}
{"task_id": 396, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SUM OF NON-REPEATED ELEMENTS IN A GIVEN ARRAY.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 15\nassert func([1, 1, 2, 2, 3, 3, 4, 4]) == 10\nassert func([5, 5, 5, 5, 5]) == 5\nassert func([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 15\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 15\nassert func([1, 1, 2, 2, 3, 3, 4, 4]) == 10\nassert func([5, 5, 5, 5, 5]) == 5\nassert func([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 15\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55\n"}
{"task_id": 397, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from itertools import groupby\ndef func(list1):\n    '''\n    WRITE A FUNCTION TO PACK CONSECUTIVE DUPLICATES OF A GIVEN LIST ELEMENTS INTO SUBLISTS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 1, 2, 3, 3, 4, 4, 4]) == [[1, 1], [2], [3, 3], [4, 4, 4]]\nassert func([1, 1, 1, 1, 1]) == [[1, 1, 1, 1, 1]]\nassert func([1, 2, 3, 4, 5]) == [[1], [2], [3], [4], [5]]\nassert func(['a', 'a', 'b', 'c', 'c', 'c']) == [['a', 'a'], ['b'], ['c', 'c', 'c']]\nassert func([]) == []\n```", "response_code": "\nassert func([1, 1, 2, 3, 3, 4, 4, 4]) == [[1, 1], [2], [3, 3], [4, 4, 4]]\nassert func([1, 1, 1, 1, 1]) == [[1, 1, 1, 1, 1]]\nassert func([1, 2, 3, 4, 5]) == [[1], [2], [3], [4], [5]]\nassert func(['a', 'a', 'b', 'c', 'c', 'c']) == [['a', 'a'], ['b'], ['c', 'c', 'c']]\nassert func([]) == []\n"}
{"task_id": 398, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A FUNCTION TO COUNT THE NUMBER OF UNIQUE LISTS WITHIN A LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2], [3, 4], [1, 2]]) == 2\nassert func([[1, 2], [3, 4], [1, 2], [3, 4]]) == 2\nassert func([[1, 2], [3, 4], [5, 6]]) == 3\nassert func([[1, 2], [1, 2], [1, 2]]) == 1\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == 4\n```", "response_code": "\nassert func([[1, 2], [3, 4], [1, 2]]) == 2\nassert func([[1, 2], [3, 4], [1, 2], [3, 4]]) == 2\nassert func([[1, 2], [3, 4], [5, 6]]) == 3\nassert func([[1, 2], [1, 2], [1, 2]]) == 1\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == 4\n"}
{"task_id": 399, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from itertools import combinations \ndef func(test_list):\n    '''\n    WRITE A FUNCTION TO FIND THE COMBINATIONS OF SUMS WITH TUPLES IN THE GIVEN TUPLE LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (3, 4)]) == [(1, 3), (1, 4), (2, 3), (2, 4)]\nassert func([(5, 6), (7, 8), (9, 10)]) == [(5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10)]\nassert func([(2, 3, 4), (5, 6)]) == [(2, 5), (2, 6), (3, 5), (3, 6), (4, 5), (4, 6)]\nassert func([(1, 2, 3), (4, 5, 6)]) == [(1, 4), (1, 5), (1, 6), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6)]\nassert func([(10, 20), (30, 40), (50, 60)]) == [(10, 30), (10, 40), (10, 50), (10, 60), (20, 30), (20, 40), (20, 50), (20, 60)]\n```", "response_code": "\nassert func([(1, 2), (3, 4)]) == [(1, 3), (1, 4), (2, 3), (2, 4)]\nassert func([(5, 6), (7, 8), (9, 10)]) == [(5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10)]\nassert func([(2, 3, 4), (5, 6)]) == [(2, 5), (2, 6), (3, 5), (3, 6), (4, 5), (4, 6)]\nassert func([(1, 2, 3), (4, 5, 6)]) == [(1, 4), (1, 5), (1, 6), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6)]\nassert func([(10, 20), (30, 40), (50, 60)]) == [(10, 30), (10, 40), (10, 50), (10, 60), (20, 30), (20, 40), (20, 50), (20, 60)]\n"}
{"task_id": 400, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math \ndef func(n) : \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER THE COUNT OF DIVISORS IS EVEN OR ODD.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(6) == 'even'\nassert func(7) == 'odd'\nassert func(12) == 'even'\nassert func(15) == 'odd'\nassert func(28) == 'even'\n```", "response_code": "\nassert func(6) == 'even'\nassert func(7) == 'odd'\nassert func(12) == 'even'\nassert func(15) == 'odd'\nassert func(28) == 'even'\n"}
{"task_id": 401, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):\n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SUM OF ALL ODD LENGTH SUBARRAYS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 4, 2, 5, 3]) == 31\nassert func([1, 2, 3, 4, 5]) == 35\nassert func([2, 4, 6, 8, 10]) == 0\nassert func([3, 7, 1, 4, 9]) == 55\nassert func([5, 5, 5, 5, 5]) == 75\n```", "response_code": "\nassert func([1, 4, 2, 5, 3]) == 31\nassert func([1, 2, 3, 4, 5]) == 35\nassert func([2, 4, 6, 8, 10]) == 0\nassert func([3, 7, 1, 4, 9]) == 55\nassert func([5, 5, 5, 5, 5]) == 75\n"}
{"task_id": 402, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(r, g, b):\n    '''\n    WRITE A FUNCTION TO CONVERT RGB COLOR TO HSV COLOR.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(255, 0, 0) == (0.0, 1.0, 1.0)  # Red color\nassert func(0, 255, 0) == (120.0, 1.0, 1.0)  # Green color\nassert func(0, 0, 255) == (240.0, 1.0, 1.0)  # Blue color\nassert func(255, 255, 0) == (60.0, 1.0, 1.0)  # Yellow color\nassert func(255, 0, 255) == (300.0, 1.0, 1.0)  # Magenta color\n```", "response_code": "\nassert func(255, 0, 0) == (0.0, 1.0, 1.0)  # Red color\nassert func(0, 255, 0) == (120.0, 1.0, 1.0)  # Green color\nassert func(0, 0, 255) == (240.0, 1.0, 1.0)  # Blue color\nassert func(255, 255, 0) == (60.0, 1.0, 1.0)  # Yellow color\nassert func(255, 0, 255) == (300.0, 1.0, 1.0)  # Magenta color\n"}
{"task_id": 403, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    WRITE A FUNCTION TO FIND THE PRODUCT OF FIRST EVEN AND ODD NUMBER OF A GIVEN LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == 2\nassert func([2, 4, 6, 8, 10]) == 2\nassert func([3, 6, 9, 12, 15]) == 3\nassert func([2, 3, 5, 7, 11]) == 2\nassert func([1, 3, 5, 7, 9]) == 3", "response_code": "assert func([1, 2, 3, 4, 5]) == 2\nassert func([2, 4, 6, 8, 10]) == 2\nassert func([3, 6, 9, 12, 15]) == 3\nassert func([2, 3, 5, 7, 11]) == 2\nassert func([1, 3, 5, 7, 9]) == 3"}
{"task_id": 404, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_str):\n    '''\n    WRITE A FUNCTION TO CONVERT TUPLE STRING TO INTEGER TUPLE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"(1, 2, 3)\") == (1, 2, 3)\nassert func(\"(10, 20, 30)\") == (10, 20, 30)\nassert func(\"(100, 200, 300)\") == (100, 200, 300)\nassert func(\"(5, 10, 15)\") == (5, 10, 15)\nassert func(\"(0, 0, 0)\") == (0, 0, 0)\n```", "response_code": "\nassert func(\"(1, 2, 3)\") == (1, 2, 3)\nassert func(\"(10, 20, 30)\") == (10, 20, 30)\nassert func(\"(100, 200, 300)\") == (100, 200, 300)\nassert func(\"(5, 10, 15)\") == (5, 10, 15)\nassert func(\"(0, 0, 0)\") == (0, 0, 0)\n"}
{"task_id": 405, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import bisect\ndef func(a, x):\n    '''\n    WRITE A FUNCTION TO LOCATE THE RIGHT INSERTION POINT FOR A SPECIFIED VALUE IN SORTED ORDER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 3, 5, 7, 9], 4) == 2\nassert func([1, 3, 5, 7, 9], 10) == 5\nassert func([1, 3, 5, 7, 9], 0) == 0\nassert func([1, 3, 5, 7, 9], 6) == 3\nassert func([1, 3, 5, 7, 9], 8) == 4\n```", "response_code": "\nassert func([1, 3, 5, 7, 9], 4) == 2\nassert func([1, 3, 5, 7, 9], 10) == 5\nassert func([1, 3, 5, 7, 9], 0) == 0\nassert func([1, 3, 5, 7, 9], 6) == 3\nassert func([1, 3, 5, 7, 9], 8) == 4\n"}
{"task_id": 406, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    WRITE A FUNCTION THAT MATCHES A STRING THAT HAS AN A FOLLOWED BY THREE 'B'.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"abbb\") == True\nassert func(\"aabbb\") == True\nassert func(\"abb\") == False\nassert func(\"abbbb\") == False\nassert func(\"abc\") == False\n```", "response_code": "\nassert func(\"abbb\") == True\nassert func(\"aabbb\") == True\nassert func(\"abb\") == False\nassert func(\"abbbb\") == False\nassert func(\"abc\") == False\n"}
{"task_id": 407, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list, test_str):\n    '''\n    WRITE A FUNCTION TO CREATE A NEW TUPLE FROM THE GIVEN STRING AND LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], 'abc') == ([1, 2, 3], 'abc')\nassert func(['a', 'b', 'c'], '123') == (['a', 'b', 'c'], '123')\nassert func([], 'xyz') == ([], 'xyz')\nassert func([4, 5], 'def') == ([4, 5], 'def')\nassert func(['x', 'y', 'z'], '456') == (['x', 'y', 'z'], '456')\n```", "response_code": "\nassert func([1, 2, 3], 'abc') == ([1, 2, 3], 'abc')\nassert func(['a', 'b', 'c'], '123') == (['a', 'b', 'c'], '123')\nassert func([], 'xyz') == ([], 'xyz')\nassert func([4, 5], 'def') == ([4, 5], 'def')\nassert func(['x', 'y', 'z'], '456') == (['x', 'y', 'z'], '456')\n"}
{"task_id": 408, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER EVERY EVEN INDEX CONTAINS EVEN NUMBERS OF A GIVEN LIST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([2, 3, 6, 8, 10]) == True\nassert func([1, 4, 7, 2, 9]) == False\nassert func([0, 2, 4, 6, 8]) == True\nassert func([1, 3, 5, 7, 9]) == True\nassert func([2, 4, 6, 8, 10, 12]) == True", "response_code": "assert func([2, 3, 6, 8, 10]) == True\nassert func([1, 4, 7, 2, 9]) == False\nassert func([0, 2, 4, 6, 8]) == True\nassert func([1, 3, 5, 7, 9]) == True\nassert func([2, 4, 6, 8, 10, 12]) == True"}
{"task_id": 409, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    WRITE A FUNCTION TO REMOVE THE NESTED RECORD FROM THE GIVEN TUPLE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, (2, 3), 4)) == (1, 2, 3, 4)\nassert func((5, (6, (7, 8), 9), 10)) == (5, 6, 7, 8, 9, 10)\nassert func((11, (12, 13, 14), 15)) == (11, 12, 13, 14, 15)\nassert func((16, (17, 18), (19, 20))) == (16, 17, 18, 19, 20)\nassert func(((21, 22), 23, 24)) == (21, 22, 23, 24)\n```", "response_code": "\nassert func((1, (2, 3), 4)) == (1, 2, 3, 4)\nassert func((5, (6, (7, 8), 9), 10)) == (5, 6, 7, 8, 9, 10)\nassert func((11, (12, 13, 14), 15)) == (11, 12, 13, 14, 15)\nassert func((16, (17, 18), (19, 20))) == (16, 17, 18, 19, 20)\nassert func(((21, 22), 23, 24)) == (21, 22, 23, 24)\n"}
{"task_id": 410, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(input_list): \n    '''\n    WRITE A PYTHON FUNCTION TO COUNT THE NUMBER OF LISTS IN A GIVEN NUMBER OF LISTS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([]) == 0\nassert func([[], [], []]) == 3\nassert func([[1, 2], [3, 4], [5, 6]]) == 3\nassert func([[1], [2], [3], [4], [5]]) == 5\nassert func([[1, 2, 3], [4, 5], [6], [7, 8, 9]]) == 4\n```", "response_code": "\nassert func([]) == 0\nassert func([[], [], []]) == 3\nassert func([[1, 2], [3, 4], [5, 6]]) == 3\nassert func([[1], [2], [3], [4], [5]]) == 5\nassert func([[1, 2, 3], [4, 5], [6], [7, 8, 9]]) == 4\n"}
{"task_id": 411, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr,x):\n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE LAST POSITION OF AN ELEMENT IN A SORTED ARRAY.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 2, 3, 4, 5], 2) == 2\nassert func([1, 2, 2, 3, 4, 5], 5) == 5\nassert func([1, 2, 2, 3, 4, 5], 1) == 0\nassert func([1, 2, 2, 3, 4, 5], 6) == -1\nassert func([1, 2, 2, 3, 4, 5], 0) == -1\n```", "response_code": "\nassert func([1, 2, 2, 3, 4, 5], 2) == 2\nassert func([1, 2, 2, 3, 4, 5], 5) == 5\nassert func([1, 2, 2, 3, 4, 5], 1) == 0\nassert func([1, 2, 2, 3, 4, 5], 6) == -1\nassert func([1, 2, 2, 3, 4, 5], 0) == -1\n"}
{"task_id": 412, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    WRITE A FUNCTION THAT MATCHES A STRING THAT HAS AN 'A' FOLLOWED BY ANYTHING, ENDING IN 'B'.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"AxyzB\") == True\nassert func(\"A1234B\") == True\nassert func(\"AabcB\") == True\nassert func(\"AdefgB\") == True\nassert func(\"A123B\") == True\n```", "response_code": "\nassert func(\"AxyzB\") == True\nassert func(\"A1234B\") == True\nassert func(\"AabcB\") == True\nassert func(\"AdefgB\") == True\nassert func(\"A123B\") == True\n"}
{"task_id": 413, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(dict):\n    '''\n    WRITE A FUNCTION TO FIND THE SUM OF ALL ITEMS IN THE GIVEN DICTIONARY.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test Case 1\nassert func({'a': 1, 'b': 2, 'c': 3}) == 6\n# Output: 6\n\n# Test Case 2\nassert func({'x': 10, 'y': 20, 'z': 30}) == 60\n# Output: 60\n\n# Test Case 3\nassert func({'p': 5, 'q': 5, 'r': 5}) == 15\n# Output: 15\n\n# Test Case 4\nassert func({'apple': 2, 'banana': 3, 'cherry': 4}) == 9\n# Output: 9\n\n# Test Case 5\nassert func({'one': 100, 'two': 200, 'three': 300}) == 600\n# Output: 600\n```", "response_code": "\n# Test Case 1\nassert func({'a': 1, 'b': 2, 'c': 3}) == 6\n# Output: 6\n\n# Test Case 2\nassert func({'x': 10, 'y': 20, 'z': 30}) == 60\n# Output: 60\n\n# Test Case 3\nassert func({'p': 5, 'q': 5, 'r': 5}) == 15\n# Output: 15\n\n# Test Case 4\nassert func({'apple': 2, 'banana': 3, 'cherry': 4}) == 9\n# Output: 9\n\n# Test Case 5\nassert func({'one': 100, 'two': 200, 'three': 300}) == 600\n# Output: 600\n"}
{"task_id": 414, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SUM OF ALL ODD NATURAL NUMBERS WITHIN THE RANGE L AND R.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1, 5) == 9\nassert func(3, 10) == 28\nassert func(10, 20) == 75\nassert func(15, 30) == 168\nassert func(1, 100) == 2500\n```", "response_code": "\nassert func(1, 5) == 9\nassert func(3, 10) == 28\nassert func(10, 20) == 75\nassert func(15, 30) == 168\nassert func(1, 100) == 2500\n"}
{"task_id": 415, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):  \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE SUM OF AN ARRAY.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == 15\nassert func([5, 10, 15, 20]) == 50\nassert func([0, 0, 0, 0, 0]) == 0\nassert func([-1, 1, -1, 1]) == 0\nassert func([2, 4, 6, 8, 10]) == 30", "response_code": "assert func([1, 2, 3, 4, 5]) == 15\nassert func([5, 10, 15, 20]) == 50\nassert func([0, 0, 0, 0, 0]) == 0\nassert func([-1, 1, -1, 1]) == 0\nassert func([2, 4, 6, 8, 10]) == 30"}
{"task_id": 416, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n,d):   \n    '''\n    WRITE A PYTHON FUNCTION TO LEFT ROTATE THE BITS OF A GIVEN NUMBER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5, 1) == 10\nassert func(8, 2) == 32\nassert func(16, 3) == 128\nassert func(7, 4) == 14\nassert func(3, 5) == 6\n```", "response_code": "\nassert func(5, 1) == 10\nassert func(8, 2) == 32\nassert func(16, 3) == 128\nassert func(7, 4) == 14\nassert func(3, 5) == 6\n"}
{"task_id": 417, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    WRITE A FUNCTION TO REMOVE ALL WHITESPACES FROM A STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello World\") == \"HelloWorld\"\nassert func(\"  Python  \") == \"Python\"\nassert func(\"  Spaces  between  words  \") == \"Spacesbetweenwords\"\nassert func(\"123 456 789\") == \"123456789\"\nassert func(\"  Special  characters  !@#$%  \") == \"Specialcharacters!@#$%\"\n```", "response_code": "\nassert func(\"Hello World\") == \"HelloWorld\"\nassert func(\"  Python  \") == \"Python\"\nassert func(\"  Spaces  between  words  \") == \"Spacesbetweenwords\"\nassert func(\"123 456 789\") == \"123456789\"\nassert func(\"  Special  characters  !@#$%  \") == \"Specialcharacters!@#$%\"\n"}
{"task_id": 418, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x,y,z):\n    '''\n    WRITE A PYTHON FUNCTION TO COUNT THE NUMBER OF EQUAL NUMBERS FROM THREE GIVEN INTEGERS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1, 2, 3) == 0\nassert func(3, 3, 3) == 3\nassert func(5, 5, 6) == 2\nassert func(0, 0, 0) == 3\nassert func(-1, -1, -1) == 3", "response_code": "assert func(1, 2, 3) == 0\nassert func(3, 3, 3) == 3\nassert func(5, 5, 6) == 2\nassert func(0, 0, 0) == 3\nassert func(-1, -1, -1) == 3"}
{"task_id": 419, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):   \n    '''\n    WRITE A PYTHON FUNCTION TO COUNT THE NUMBER OF ROTATIONS REQUIRED TO GENERATE A SORTED ARRAY.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([4, 5, 6, 7, 0, 1, 2]) == 4\nassert func([7, 8, 9, 1, 2, 3, 4, 5, 6]) == 3\nassert func([2, 3, 4, 5, 6, 7, 8, 9, 1]) == 1\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0\nassert func([3, 4, 5, 6, 7, 8, 9, 1, 2]) == 7\n```", "response_code": "\nassert func([4, 5, 6, 7, 0, 1, 2]) == 4\nassert func([7, 8, 9, 1, 2, 3, 4, 5, 6]) == 3\nassert func([2, 3, 4, 5, 6, 7, 8, 9, 1]) == 1\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0\nassert func([3, 4, 5, 6, 7, 8, 9, 1, 2]) == 7\n"}
{"task_id": 420, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n) :\n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER THE GIVEN NUMBER IS A PERFECT SQUARE OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(16) == True\nassert func(25) == True\nassert func(36) == True\nassert func(49) == True\nassert func(81) == True\n```", "response_code": "\nassert func(16) == True\nassert func(25) == True\nassert func(36) == True\nassert func(49) == True\nassert func(81) == True\n"}
{"task_id": 421, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr): \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER THE PRODUCT OF NUMBERS IS EVEN OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([2, 4, 6]) == True\nassert func([1, 3, 5]) == False\nassert func([0, 2, 4]) == True\nassert func([1, 2, 3, 4, 5]) == True\nassert func([1, 3, 5, 7]) == False\n```", "response_code": "\nassert func([2, 4, 6]) == True\nassert func([1, 3, 5]) == False\nassert func([0, 2, 4]) == True\nassert func([1, 2, 3, 4, 5]) == True\nassert func([1, 3, 5, 7]) == False\n"}
{"task_id": 422, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lists):\n    '''\n    WRITE A FUNCTION TO FIND THE LIST IN A LIST OF LISTS WHOSE SUM OF ELEMENTS IS THE HIGHEST.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9]\nassert func([[10, 20, 30], [40, 50, 60], [70, 80, 90]]) == [70, 80, 90]\nassert func([[5, 10, 15], [20, 25, 30], [35, 40, 45]]) == [35, 40, 45]\nassert func([[2, 4, 6], [8, 10, 12], [14, 16, 18]]) == [14, 16, 18]\nassert func([[3, 6, 9], [12, 15, 18], [21, 24, 27]]) == [21, 24, 27]\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9]\nassert func([[10, 20, 30], [40, 50, 60], [70, 80, 90]]) == [70, 80, 90]\nassert func([[5, 10, 15], [20, 25, 30], [35, 40, 45]]) == [35, 40, 45]\nassert func([[2, 4, 6], [8, 10, 12], [14, 16, 18]]) == [14, 16, 18]\nassert func([[3, 6, 9], [12, 15, 18], [21, 24, 27]]) == [21, 24, 27]\n"}
{"task_id": 423, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_str):\n    '''\n    WRITE A FUNCTION TO FIND MAXIMUM RUN OF UPPERCASE CHARACTERS IN THE GIVEN STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello World\") == 1\nassert func(\"HELLO WORLD\") == 11\nassert func(\"AbCdEfGhIjKlMnOpQrStUvWxYz\") == 1\nassert func(\"UPPERCASE\") == 8\nassert func(\"lowercase\") == 0\n```", "response_code": "\nassert func(\"Hello World\") == 1\nassert func(\"HELLO WORLD\") == 11\nassert func(\"AbCdEfGhIjKlMnOpQrStUvWxYz\") == 1\nassert func(\"UPPERCASE\") == 8\nassert func(\"lowercase\") == 0\n"}
{"task_id": 424, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE FIRST ODD NUMBER IN A GIVEN LIST OF NUMBERS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([2, 4, 6, 8, 10]) == None\nassert func([1, 2, 3, 4, 5]) == 1\nassert func([2, 4, 6, 8, 9]) == 9\nassert func([10, 20, 30, 40, 50]) == None\nassert func([11, 12, 13, 14, 15]) == 11\n```", "response_code": "\nassert func([2, 4, 6, 8, 10]) == None\nassert func([1, 2, 3, 4, 5]) == 1\nassert func([2, 4, 6, 8, 9]) == 9\nassert func([10, 20, 30, 40, 50]) == None\nassert func([11, 12, 13, 14, 15]) == 11\n"}
{"task_id": 425, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup, K):\n    '''\n    WRITE A FUNCTION TO CHECK IF THE GIVEN TUPLES CONTAIN THE K OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func((1, 2, 3, 4, 5), 3) == True\nassert func((10, 20, 30, 40, 50), 25) == False\nassert func(('a', 'b', 'c', 'd', 'e'), 'c') == True\nassert func(('apple', 'banana', 'cherry', 'date', 'elderberry'), 'kiwi') == False\nassert func((True, False, True, False), True) == True", "response_code": "assert func((1, 2, 3, 4, 5), 3) == True\nassert func((10, 20, 30, 40, 50), 25) == False\nassert func(('a', 'b', 'c', 'd', 'e'), 'c') == True\nassert func(('apple', 'banana', 'cherry', 'date', 'elderberry'), 'kiwi') == False\nassert func((True, False, True, False), True) == True"}
{"task_id": 426, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    WRITE A FUNCTION TO CHECK IF EACH ELEMENT OF SECOND TUPLE IS SMALLER THAN ITS CORRESPONDING INDEX IN FIRST TUPLE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (0, 1, 2)) == True\nassert func((5, 6, 7), (0, 1, 2)) == True\nassert func((1, 2, 3), (1, 1, 1)) == False\nassert func((1, 2, 3), (2, 1, 0)) == False\nassert func((1, 2, 3), (0, 2, 1)) == False\n```", "response_code": "\nassert func((1, 2, 3), (0, 1, 2)) == True\nassert func((5, 6, 7), (0, 1, 2)) == True\nassert func((1, 2, 3), (1, 1, 1)) == False\nassert func((1, 2, 3), (2, 1, 0)) == False\nassert func((1, 2, 3), (0, 2, 1)) == False\n"}
