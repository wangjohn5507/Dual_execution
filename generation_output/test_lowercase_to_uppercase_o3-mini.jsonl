{"task_id": 0, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    WRITE A FUNCTION TO FIND THE SIMILAR ELEMENTS FROM THE GIVEN TWO TUPLE LISTS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (2, 3, 4)) == (2, 3)\nassert func(('a', 'b', 'c'), ('b', 'c', 'd')) == ('b', 'c')\nassert func((1, 2, 3), (4, 5, 6)) == ()\nassert func(('apple', 'banana', 'cherry'), ('banana', 'cherry', 'date')) == ('banana', 'cherry')\nassert func((1, 2, 3), (1, 2, 3)) == (1, 2, 3)\n```", "response_code": "\nassert func((1, 2, 3), (2, 3, 4)) == (2, 3)\nassert func(('a', 'b', 'c'), ('b', 'c', 'd')) == ('b', 'c')\nassert func((1, 2, 3), (4, 5, 6)) == ()\nassert func(('apple', 'banana', 'cherry'), ('banana', 'cherry', 'date')) == ('banana', 'cherry')\nassert func((1, 2, 3), (1, 2, 3)) == (1, 2, 3)\n"}
{"task_id": 1, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(n):\n    '''\n    WRITE A PYTHON FUNCTION TO IDENTIFY NON-PRIME NUMBERS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == False\nassert func(2) == False\nassert func(3) == False\nassert func(4) == True\nassert func(17) == False\n```", "response_code": "\nassert func(1) == False\nassert func(2) == False\nassert func(3) == False\nassert func(4) == True\nassert func(17) == False\n"}
{"task_id": 2, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import heapq as hq\ndef func(nums,n):\n    '''\n    WRITE A FUNCTION TO FIND THE LARGEST INTEGERS FROM A GIVEN LIST OF NUMBERS USING HEAP QUEUE ALGORITHM.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([3, 7, 2, 9, 5], 3) == [9, 7, 5]\nassert func([10, 20, 30, 40, 50], 2) == [50, 40]\nassert func([5, 5, 5, 5, 5], 1) == [5]\nassert func([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\nassert func([100, 200, 300, 400, 500], 4) == [500, 400, 300, 200]\n```", "response_code": "\nassert func([3, 7, 2, 9, 5], 3) == [9, 7, 5]\nassert func([10, 20, 30, 40, 50], 2) == [50, 40]\nassert func([5, 5, 5, 5, 5], 1) == [5]\nassert func([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\nassert func([100, 200, 300, 400, 500], 4) == [500, 400, 300, 200]\n"}
{"task_id": 3, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x): \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER THE TWO NUMBERS DIFFER AT ONE BIT POSITION ONLY OR NOT.\n    '''\n    pass\n\n# check the correctness of func \nassert "}], "response": "```python\nassert func(2, 3) == True\nassert func(5, 7) == True\nassert func(1, 2) == False\nassert func(0, 15) == False\nassert func(8, 9) == True\n```", "response_code": "\nassert func(2, 3) == True\nassert func(5, 7) == True\nassert func(1, 2) == False\nassert func(0, 15) == False\nassert func(8, 9) == True\n"}
{"task_id": 4, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    WRITE A FUNCTION TO FIND ALL WORDS WHICH ARE AT LEAST 4 CHARACTERS LONG IN A STRING BY USING REGEX.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello, this is a test\") == ['Hello', 'this', 'test']\nassert func(\"Python is a powerful language\") == ['Python', 'powerful', 'language']\nassert func(\"Regex is a useful tool for text processing\") == ['Regex', 'useful', 'tool', 'text', 'processing']\nassert func(\"1234 abcd 5678 efgh\") == ['1234', 'abcd', '5678', 'efgh']\nassert func(\"Short words like cat, dog, and bat\") == ['Short', 'words', 'like', 'cat', 'dog']\n```", "response_code": "\nassert func(\"Hello, this is a test\") == ['Hello', 'this', 'test']\nassert func(\"Python is a powerful language\") == ['Python', 'powerful', 'language']\nassert func(\"Regex is a useful tool for text processing\") == ['Regex', 'useful', 'tool', 'text', 'processing']\nassert func(\"1234 abcd 5678 efgh\") == ['1234', 'abcd', '5678', 'efgh']\nassert func(\"Short words like cat, dog, and bat\") == ['Short', 'words', 'like', 'cat', 'dog']\n"}
{"task_id": 5, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    WRITE A FUNCTION TO FIND SQUARES OF INDIVIDUAL ELEMENTS IN A LIST USING LAMBDA FUNCTION.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\nassert func([-1, -2, -3, -4, -5]) == [1, 4, 9, 16, 25]\nassert func([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]\nassert func([2, 3, 5, 7, 11]) == [4, 9, 25, 49, 121]\nassert func([-2, 3, -5, 7, -11]) == [4, 9, 25, 49, 121]\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\nassert func([-1, -2, -3, -4, -5]) == [1, 4, 9, 16, 25]\nassert func([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]\nassert func([2, 3, 5, 7, 11]) == [4, 9, 25, 49, 121]\nassert func([-2, 3, -5, 7, -11]) == [4, 9, 25, 49, 121]\n"}
{"task_id": 6, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str): \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE MINIMUM NUMBER OF ROTATIONS REQUIRED TO GET THE SAME STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\") == 5\nassert func(\"racecar\") == 0\nassert func(\"python\") == 6\nassert func(\"level\") == 0\nassert func(\"rotor\") == 0", "response_code": "assert func(\"hello\") == 5\nassert func(\"racecar\") == 0\nassert func(\"python\") == 6\nassert func(\"level\") == 0\nassert func(\"rotor\") == 0"}
{"task_id": 7, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(s,ch): \n    '''\n    WRITE A PYTHON FUNCTION TO REMOVE FIRST AND LAST OCCURRENCE OF A GIVEN CHARACTER FROM THE STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello world\", \"o\") == \"hell world\"\nassert func(\"programming\", \"m\") == \"prograing\"\nassert func(\"banana\", \"a\") == \"bnn\"\nassert func(\"racecar\", \"r\") == \"aceca\"\nassert func(\"apple\", \"p\") == \"ale\"\n```", "response_code": "\nassert func(\"hello world\", \"o\") == \"hell world\"\nassert func(\"programming\", \"m\") == \"prograing\"\nassert func(\"banana\", \"a\") == \"bnn\"\nassert func(\"racecar\", \"r\") == \"aceca\"\nassert func(\"apple\", \"p\") == \"ale\"\n"}
{"task_id": 8, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(M):\n    '''\n    WRITE A FUNCTION TO SORT A GIVEN MATRIX IN ASCENDING ORDER ACCORDING TO THE SUM OF ITS ROWS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert func([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\nassert func([[5, 2, 8], [1, 9, 3], [4, 7, 6]]) == [[1, 9, 3], [4, 7, 6], [5, 2, 8]]\nassert func([[10, 20, 30], [40, 50, 60], [70, 80, 90]]) == [[10, 20, 30], [40, 50, 60], [70, 80, 90]]\nassert func([[2, 4, 6], [1, 3, 5], [9, 7, 8]]) == [[1, 3, 5], [2, 4, 6], [9, 7, 8]]\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert func([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\nassert func([[5, 2, 8], [1, 9, 3], [4, 7, 6]]) == [[1, 9, 3], [4, 7, 6], [5, 2, 8]]\nassert func([[10, 20, 30], [40, 50, 60], [70, 80, 90]]) == [[10, 20, 30], [40, 50, 60], [70, 80, 90]]\nassert func([[2, 4, 6], [1, 3, 5], [9, 7, 8]]) == [[1, 3, 5], [2, 4, 6], [9, 7, 8]]\n"}
{"task_id": 9, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l,b,h) : \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE VOLUME OF A TRIANGULAR PRISM.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 4, 5) == 30\nassert func(6, 8, 10) == 240\nassert func(2, 2, 2) == 4.0\nassert func(0, 5, 7) == 0\nassert func(1, 1, 1) == 0.5\n```", "response_code": "\nassert func(3, 4, 5) == 30\nassert func(6, 8, 10) == 240\nassert func(2, 2, 2) == 4.0\nassert func(0, 5, 7) == 0\nassert func(1, 1, 1) == 0.5\n"}
{"task_id": 10, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    WRITE A FUNCTION TO FIND SEQUENCES OF LOWERCASE LETTERS JOINED WITH AN UNDERSCORE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello_world\") == [\"hello_world\"]\nassert func(\"python_is_cool\") == [\"python_is_cool\"]\nassert func(\"this_is_a_test\") == [\"this_is_a_test\"]\nassert func(\"abc_def_ghi\") == [\"abc_def_ghi\"]\nassert func(\"one_two_three\") == [\"one_two_three\"]\n```", "response_code": "\nassert func(\"hello_world\") == [\"hello_world\"]\nassert func(\"python_is_cool\") == [\"python_is_cool\"]\nassert func(\"this_is_a_test\") == [\"this_is_a_test\"]\nassert func(\"abc_def_ghi\") == [\"abc_def_ghi\"]\nassert func(\"one_two_three\") == [\"one_two_three\"]\n"}
{"task_id": 11, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a):\n    '''\n    WRITE A FUNCTION TO FIND THE PERIMETER OF A SQUARE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(0) == 0\nassert func(1) == 4\nassert func(5) == 20\nassert func(10) == 40\nassert func(15) == 60", "response_code": "assert func(0) == 0\nassert func(1) == 4\nassert func(5) == 20\nassert func(10) == 40\nassert func(15) == 60"}
{"task_id": 12, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "NO_OF_CHARS = 256\ndef func(string): \n    '''\n    WRITE A FUNCTION TO REMOVE CHARACTERS FROM THE FIRST STRING WHICH ARE PRESENT IN THE SECOND STRING.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\", \"world\") == \"he\"\nassert func(\"apple\", \"banana\") == \"apple\"\nassert func(\"python\", \"java\") == \"python\"\nassert func(\"abc123\", \"123\") == \"abc\"\nassert func(\"hello\", \"h\") == \"ello\"\n```", "response_code": "\nassert func(\"hello\", \"world\") == \"he\"\nassert func(\"apple\", \"banana\") == \"apple\"\nassert func(\"python\", \"java\") == \"python\"\nassert func(\"abc123\", \"123\") == \"abc\"\nassert func(\"hello\", \"h\") == \"ello\"\n"}
{"task_id": 13, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arraynums):\n    '''\n    WRITE A FUNCTION TO FIND WHETHER A GIVEN ARRAY OF INTEGERS CONTAINS ANY DUPLICATE ELEMENT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == False\nassert func([1, 2, 3, 4, 1]) == True\nassert func([5, 5, 5, 5, 5]) == True\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]) == True\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == False\nassert func([1, 2, 3, 4, 1]) == True\nassert func([5, 5, 5, 5, 5]) == True\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]) == True\n"}
{"task_id": 14, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x): \n    '''\n    WRITE A FUNCTION TO CHECK IF THE GIVEN NUMBER IS WOODBALL OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(27) == True\nassert func(64) == False\nassert func(100) == False\nassert func(125) == True\nassert func(256) == False", "response_code": "assert func(27) == True\nassert func(64) == False\nassert func(100) == False\nassert func(125) == True\nassert func(256) == False"}
{"task_id": 15, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(num):    \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK IF A GIVEN NUMBER IS ONE LESS THAN TWICE ITS REVERSE.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(12) == True\nassert func(25) == False\nassert func(36) == True\nassert func(47) == False\nassert func(99) == True\n```", "response_code": "\nassert func(12) == True\nassert func(25) == False\nassert func(36) == True\nassert func(47) == False\nassert func(99) == True\n"}
{"task_id": 16, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr) : \n    '''\n    WRITE A PYTHON FUNCTION TO FIND THE LARGEST NUMBER THAT CAN BE FORMED WITH THE GIVEN DIGITS.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([3, 1, 4, 2]) == 4321\nassert func([5, 5, 5, 5]) == 5555\nassert func([9, 8, 7, 6, 5]) == 98765\nassert func([0, 1, 2, 3, 4, 5]) == 543210\nassert func([2, 0, 4, 6, 8]) == 86420\n```", "response_code": "\nassert func([3, 1, 4, 2]) == 4321\nassert func([5, 5, 5, 5]) == 5555\nassert func([9, 8, 7, 6, 5]) == 98765\nassert func([0, 1, 2, 3, 4, 5]) == 543210\nassert func([2, 0, 4, 6, 8]) == 86420\n"}
{"task_id": 17, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x,y): \n    '''\n    WRITE A PYTHON FUNCTION TO CHECK WHETHER THE GIVEN TWO INTEGERS HAVE OPPOSITE SIGN OR NOT.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(5, -3) == True\nassert func(-2, 8) == True\nassert func(0, 0) == False\nassert func(-10, -5) == False\nassert func(3, 3) == False", "response_code": "assert func(5, -3) == True\nassert func(-2, 8) == True\nassert func(0, 0) == False\nassert func(-10, -5) == False\nassert func(3, 3) == False"}
{"task_id": 18, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    WRITE A FUNCTION TO FIND THE NTH OCTAGONAL NUMBER.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 8\nassert func(5) == 40\nassert func(10) == 160\nassert func(15) == 360\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 8\nassert func(5) == 40\nassert func(10) == 160\nassert func(15) == 360\n"}
{"task_id": 19, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from collections import defaultdict\ndef func(s):\n    '''\n    WRITE A PYTHON FUNCTION TO COUNT NUMBER OF SUBSTRINGS WITH THE SUM OF DIGITS EQUAL TO THEIR LENGTH.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"123\") == 1\nassert func(\"1234\") == 4\nassert func(\"111\") == 3\nassert func(\"12345\") == 6\nassert func(\"999\") == 3\n```", "response_code": "\nassert func(\"123\") == 1\nassert func(\"1234\") == 4\nassert func(\"111\") == 3\nassert func(\"12345\") == 6\nassert func(\"999\") == 3\n"}
