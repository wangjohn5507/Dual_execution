{"task_id": 0, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function that identifies the common elements between two lists of tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (3, 4), (5, 6)], [(3, 4), (7, 8), (9, 10)]) == [(3, 4)]\nassert func([(1, 2), (3, 4), (5, 6)], [(7, 8), (9, 10), (11, 12)]) == []\nassert func([(1, 2), (3, 4), (5, 6)], [(1, 2), (3, 4), (5, 6)]) == [(1, 2), (3, 4), (5, 6)]\nassert func([(1, 2), (3, 4), (5, 6)], [(5, 6), (7, 8), (9, 10)]) == [(5, 6)]\nassert func([(1, 2), (3, 4), (5, 6)], [(7, 8), (3, 4), (9, 10)]) == [(3, 4)]\n```", "response_code": "\nassert func([(1, 2), (3, 4), (5, 6)], [(3, 4), (7, 8), (9, 10)]) == [(3, 4)]\nassert func([(1, 2), (3, 4), (5, 6)], [(7, 8), (9, 10), (11, 12)]) == []\nassert func([(1, 2), (3, 4), (5, 6)], [(1, 2), (3, 4), (5, 6)]) == [(1, 2), (3, 4), (5, 6)]\nassert func([(1, 2), (3, 4), (5, 6)], [(5, 6), (7, 8), (9, 10)]) == [(5, 6)]\nassert func([(1, 2), (3, 4), (5, 6)], [(7, 8), (3, 4), (9, 10)]) == [(3, 4)]\n"}
{"task_id": 1, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(n):\n    '''\n    Create a Python function that can detect numbers that are not prime.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(2) == False\nassert func(3) == False\nassert func(4) == True\nassert func(17) == False\nassert func(21) == True", "response_code": "assert func(2) == False\nassert func(3) == False\nassert func(4) == True\nassert func(17) == False\nassert func(21) == True"}
{"task_id": 2, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import heapq as hq\ndef func(nums,n):\n    '''\n    Create a function that utilizes the heap queue algorithm to identify the highest integers within a provided list of numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 3) == [9, 6, 5]\nassert func([10, 20, 30, 40, 50], 2) == [50, 40]\nassert func([5, 4, 3, 2, 1], 1) == [5]\nassert func([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\nassert func([7, 7, 7, 7, 7], 2) == [7, 7]\n```", "response_code": "\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 3) == [9, 6, 5]\nassert func([10, 20, 30, 40, 50], 2) == [50, 40]\nassert func([5, 4, 3, 2, 1], 1) == [5]\nassert func([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\nassert func([7, 7, 7, 7, 7], 2) == [7, 7]\n"}
{"task_id": 3, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x): \n    '''\n    Create a Python function that determines if two numbers differ at only one bit position.\n    '''\n    pass\n\n# check the correctness of func \nassert "}], "response": "assert func(2, 3) == True\nassert func(5, 7) == True\nassert func(1, 4) == False\nassert func(0, 15) == False\nassert func(8, 9) == True", "response_code": "assert func(2, 3) == True\nassert func(5, 7) == True\nassert func(1, 4) == False\nassert func(0, 15) == False\nassert func(8, 9) == True"}
{"task_id": 4, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that uses regex to identify all words in a string that contain a minimum of 4 characters.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello, this is a test\") == ['Hello', 'this', 'test']\nassert func(\"Python is a great programming language\") == ['Python', 'great', 'programming', 'language']\nassert func(\"Regex is a powerful tool for text processing\") == ['Regex', 'powerful', 'tool', 'text', 'processing']\nassert func(\"1234 abcd 5678 efgh\") == ['1234', 'abcd', '5678', 'efgh']\nassert func(\"Short words like 'cat' or 'dog' are not included\") == ['Short', 'words', 'like', 'cat', 'included']\n```", "response_code": "\nassert func(\"Hello, this is a test\") == ['Hello', 'this', 'test']\nassert func(\"Python is a great programming language\") == ['Python', 'great', 'programming', 'language']\nassert func(\"Regex is a powerful tool for text processing\") == ['Regex', 'powerful', 'tool', 'text', 'processing']\nassert func(\"1234 abcd 5678 efgh\") == ['1234', 'abcd', '5678', 'efgh']\nassert func(\"Short words like 'cat' or 'dog' are not included\") == ['Short', 'words', 'like', 'cat', 'included']\n"}
{"task_id": 5, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a lambda function to calculate the squares of each element in a list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3]) == [1, 4, 9]\nassert func([0, 5, 10]) == [0, 25, 100]\nassert func([-1, -2, -3]) == [1, 4, 9]\nassert func([2, 4, 6]) == [4, 16, 36]\nassert func([3, 6, 9]) == [9, 36, 81]", "response_code": "assert func([1, 2, 3]) == [1, 4, 9]\nassert func([0, 5, 10]) == [0, 25, 100]\nassert func([-1, -2, -3]) == [1, 4, 9]\nassert func([2, 4, 6]) == [4, 16, 36]\nassert func([3, 6, 9]) == [9, 36, 81]"}
{"task_id": 6, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str): \n    '''\n    Create a Python function that determines the minimum number of rotations needed to achieve the same string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\") == 5\nassert func(\"racecar\") == 0\nassert func(\"python\") == 6\nassert func(\"level\") == 0\nassert func(\"rotor\") == 0", "response_code": "assert func(\"hello\") == 5\nassert func(\"racecar\") == 0\nassert func(\"python\") == 6\nassert func(\"level\") == 0\nassert func(\"rotor\") == 0"}
{"task_id": 7, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(s,ch): \n    '''\n    Create a Python function that eliminates the first and last instances of a specified character from a string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello world\", \"o\") == \"hell world\"\nassert func(\"banana\", \"a\") == \"bnana\"\nassert func(\"racecar\", \"r\") == \"aceca\"\nassert func(\"programming\", \"g\") == \"proammin\"\nassert func(\"apple\", \"p\") == \"aple\"\n```", "response_code": "\nassert func(\"hello world\", \"o\") == \"hell world\"\nassert func(\"banana\", \"a\") == \"bnana\"\nassert func(\"racecar\", \"r\") == \"aceca\"\nassert func(\"programming\", \"g\") == \"proammin\"\nassert func(\"apple\", \"p\") == \"aple\"\n"}
{"task_id": 8, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(M):\n    '''\n    Create a function that arranges a provided matrix in ascending order based on the sum of its rows.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert func([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\nassert func([[5, 2, 3], [1, 9, 6], [4, 7, 8]]) == [[1, 9, 6], [4, 7, 8], [5, 2, 3]]\nassert func([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == [[1, 1, 1], [2, 2, 2], [3, 3, 3]]\nassert func([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert func([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\nassert func([[5, 2, 3], [1, 9, 6], [4, 7, 8]]) == [[1, 9, 6], [4, 7, 8], [5, 2, 3]]\nassert func([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == [[1, 1, 1], [2, 2, 2], [3, 3, 3]]\nassert func([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\n"}
{"task_id": 9, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l,b,h) : \n    '''\n    Create a Python function that calculates the volume of a triangular prism.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(3,4,5) == 30\nassert func(6,8,10) == 240\nassert func(2,3,4) == 12\nassert func(5,12,13) == 390\nassert func(7,24,25) == 1050", "response_code": "assert func(3,4,5) == 30\nassert func(6,8,10) == 240\nassert func(2,3,4) == 12\nassert func(5,12,13) == 390\nassert func(7,24,25) == 1050"}
{"task_id": 10, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that identifies sequences of lowercase letters connected by an underscore.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello_world\") == [\"hello_world\"]\nassert func(\"python_is_cool\") == [\"python_is_cool\"]\nassert func(\"this_is_a_test\") == [\"this_is_a_test\"]\nassert func(\"abc_def_ghi\") == [\"abc_def_ghi\"]\nassert func(\"one_two_three\") == [\"one_two_three\"]\n```", "response_code": "\nassert func(\"hello_world\") == [\"hello_world\"]\nassert func(\"python_is_cool\") == [\"python_is_cool\"]\nassert func(\"this_is_a_test\") == [\"this_is_a_test\"]\nassert func(\"abc_def_ghi\") == [\"abc_def_ghi\"]\nassert func(\"one_two_three\") == [\"one_two_three\"]\n"}
{"task_id": 11, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a):\n    '''\n    Create a function that calculates the perimeter of a square.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 0\nassert func(1) == 4\nassert func(5) == 20\nassert func(10) == 40\nassert func(15) == 60\n```", "response_code": "\nassert func(0) == 0\nassert func(1) == 4\nassert func(5) == 20\nassert func(10) == 40\nassert func(15) == 60\n"}
{"task_id": 12, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "NO_OF_CHARS = 256\ndef func(string): \n    '''\n    Create a function that eliminates characters from the first string that are found in the second string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\", \"world\") == \"he\"\nassert func(\"apple\", \"pear\") == \"al\"\nassert func(\"python\", \"java\") == \"python\"\nassert func(\"abc123\", \"123\") == \"abc\"\nassert func(\"abcdef\", \"fedcba\") == \"\"\n```", "response_code": "\nassert func(\"hello\", \"world\") == \"he\"\nassert func(\"apple\", \"pear\") == \"al\"\nassert func(\"python\", \"java\") == \"python\"\nassert func(\"abc123\", \"123\") == \"abc\"\nassert func(\"abcdef\", \"fedcba\") == \"\"\n"}
{"task_id": 13, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arraynums):\n    '''\n    Create a function that determines if a provided array of integers has any duplicate elements.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == False\nassert func([1, 2, 3, 4, 1]) == True\nassert func([5, 5, 5, 5, 5]) == True\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\nassert func([1, 2, 3, 4, 5, 1]) == True", "response_code": "assert func([1, 2, 3, 4, 5]) == False\nassert func([1, 2, 3, 4, 1]) == True\nassert func([5, 5, 5, 5, 5]) == True\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\nassert func([1, 2, 3, 4, 5, 1]) == True"}
{"task_id": 14, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x): \n    '''\n    Create a function that determines whether the provided number is woodball.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(6) == True\nassert func(10) == False\nassert func(15) == False\nassert func(28) == True\nassert func(31) == False", "response_code": "assert func(6) == True\nassert func(10) == False\nassert func(15) == False\nassert func(28) == True\nassert func(31) == False"}
{"task_id": 15, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(num):    \n    '''\n    Create a Python function that verifies if a specified number is equal to one less than double its reverse.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(12) == True\nassert func(21) == True\nassert func(45) == False\nassert func(123) == True\nassert func(1001) == False\n```", "response_code": "\nassert func(12) == True\nassert func(21) == True\nassert func(45) == False\nassert func(123) == True\nassert func(1001) == False\n"}
{"task_id": 16, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr) : \n    '''\n    Create a Python function that determines the highest possible number using the provided digits.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3]) == 321\nassert func([4, 5, 6, 7]) == 7654\nassert func([9, 8, 7, 6, 5]) == 98765\nassert func([0, 0, 1, 2, 3]) == 32100\nassert func([3, 3, 3, 3, 3]) == 33333\n```", "response_code": "\nassert func([1, 2, 3]) == 321\nassert func([4, 5, 6, 7]) == 7654\nassert func([9, 8, 7, 6, 5]) == 98765\nassert func([0, 0, 1, 2, 3]) == 32100\nassert func([3, 3, 3, 3, 3]) == 33333\n"}
{"task_id": 17, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x,y): \n    '''\n    Create a Python function that determines if two given integers have opposite signs.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5, -3) == True\nassert func(-2, 8) == True\nassert func(0, 0) == False\nassert func(-10, -5) == False\nassert func(15, 20) == False\n```", "response_code": "\nassert func(5, -3) == True\nassert func(-2, 8) == True\nassert func(0, 0) == False\nassert func(-10, -5) == False\nassert func(15, 20) == False\n"}
{"task_id": 18, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function that calculates the nth octagonal number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 1\nassert func(2) == 8\nassert func(3) == 21\nassert func(4) == 40\nassert func(5) == 65", "response_code": "assert func(1) == 1\nassert func(2) == 8\nassert func(3) == 21\nassert func(4) == 40\nassert func(5) == 65"}
{"task_id": 19, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from collections import defaultdict\ndef func(s):\n    '''\n    Create a Python function that calculates the number of substrings where the sum of the digits is equal to the length of the substring.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"123\") == 3\nassert func(\"1234\") == 4\nassert func(\"111\") == 6\nassert func(\"999\") == 4\nassert func(\"12345\") == 5\n```", "response_code": "\nassert func(\"123\") == 3\nassert func(\"1234\") == 4\nassert func(\"111\") == 6\nassert func(\"999\") == 4\nassert func(\"12345\") == 5\n"}
{"task_id": 20, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(xs):\n    '''\n    Create a Python function that identifies the smallest number within a given list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([5, 3, 8, 1, 9]) == 1\nassert func([10, 20, 30, 40, 50]) == 10\nassert func([100, 50, 75, 125, 150]) == 50\nassert func([0, 0, 0, 0, 0]) == 0\nassert func([-5, -3, -8, -1, -9]) == -9\n```", "response_code": "\nassert func([5, 3, 8, 1, 9]) == 1\nassert func([10, 20, 30, 40, 50]) == 10\nassert func([100, 50, 75, 125, 150]) == 50\nassert func([0, 0, 0, 0, 0]) == 0\nassert func([-5, -3, -8, -1, -9]) == -9\n"}
{"task_id": 21, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Create a function that can determine the largest difference between pairs within a provided list of tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (3, 4), (5, 6)]) == 5\nassert func([(10, 20), (30, 40), (50, 60)]) == 50\nassert func([(5, 10), (15, 20), (25, 30)]) == 25\nassert func([(100, 200), (300, 400), (500, 600)]) == 500\nassert func([(2, 8), (15, 20), (25, 30)]) == 23\n```", "response_code": "\nassert func([(1, 2), (3, 4), (5, 6)]) == 5\nassert func([(10, 20), (30, 40), (50, 60)]) == 50\nassert func([(5, 10), (15, 20), (25, 30)]) == 25\nassert func([(100, 200), (300, 400), (500, 600)]) == 500\nassert func([(2, 8), (15, 20), (25, 30)]) == 23\n"}
{"task_id": 22, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(subjectmarks):\n    '''\n    Create a lambda function to sort a list of tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test case 1\nsubjectmarks = [('Math', 90), ('Science', 85), ('English', 88)]\nassert func(subjectmarks) == [('English', 88), ('Math', 90), ('Science', 85)]\n\n# Test case 2\nsubjectmarks = [('History', 75), ('Geography', 82), ('Art', 79)]\nassert func(subjectmarks) == [('Art', 79), ('Geography', 82), ('History', 75)]\n\n# Test case 3\nsubjectmarks = [('Biology', 95), ('Chemistry', 87), ('Physics', 91)]\nassert func(subjectmarks) == [('Chemistry', 87), ('Physics', 91), ('Biology', 95)]\n\n# Test case 4\nsubjectmarks = [('Computer Science', 100), ('Statistics', 98), ('Economics', 93)]\nassert func(subjectmarks) == [('Economics', 93), ('Statistics', 98), ('Computer Science', 100)]\n\n# Test case 5\nsubjectmarks = [('Music', 80), ('Drama', 85), ('Physical Education', 88)]\nassert func(subjectmarks) == [('Music', 80), ('Drama', 85), ('Physical Education', 88)]\n```", "response_code": "\n# Test case 1\nsubjectmarks = [('Math', 90), ('Science', 85), ('English', 88)]\nassert func(subjectmarks) == [('English', 88), ('Math', 90), ('Science', 85)]\n\n# Test case 2\nsubjectmarks = [('History', 75), ('Geography', 82), ('Art', 79)]\nassert func(subjectmarks) == [('Art', 79), ('Geography', 82), ('History', 75)]\n\n# Test case 3\nsubjectmarks = [('Biology', 95), ('Chemistry', 87), ('Physics', 91)]\nassert func(subjectmarks) == [('Chemistry', 87), ('Physics', 91), ('Biology', 95)]\n\n# Test case 4\nsubjectmarks = [('Computer Science', 100), ('Statistics', 98), ('Economics', 93)]\nassert func(subjectmarks) == [('Economics', 93), ('Statistics', 98), ('Computer Science', 100)]\n\n# Test case 5\nsubjectmarks = [('Music', 80), ('Drama', 85), ('Physical Education', 88)]\nassert func(subjectmarks) == [('Music', 80), ('Drama', 85), ('Physical Education', 88)]\n"}
{"task_id": 23, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(data_list):\n    '''\n    Create a recursive function that calculates the sum of a list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 15\nassert func([10, 20, 30, 40, 50]) == 150\nassert func([5, 10, 15, 20]) == 50\nassert func([2, 4, 6, 8, 10]) == 30\nassert func([3, 6, 9, 12, 15]) == 45\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 15\nassert func([10, 20, 30, 40, 50]) == 150\nassert func([5, 10, 15, 20]) == 50\nassert func([2, 4, 6, 8, 10]) == 30\nassert func([3, 6, 9, 12, 15]) == 45\n"}
{"task_id": 24, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list):\n    '''\n    Create a Python function that calculates the number of positive numbers in a given list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 5\nassert func([-1, -2, -3, -4, -5]) == 0\nassert func([0, 1, -2, 3, -4, 5]) == 3\nassert func([0, 0, 0, 0, 0]) == 0\nassert func([]) == 0\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 5\nassert func([-1, -2, -3, -4, -5]) == 0\nassert func([0, 1, -2, 3, -4, 5]) == 3\nassert func([0, 0, 0, 0, 0]) == 0\nassert func([]) == 0\n"}
{"task_id": 25, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):   \n    '''\n    Create a function that calculates the possible partitions of a set of bell numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 5\nassert func(4) == 15\nassert func(5) == 52\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 5\nassert func(4) == 15\nassert func(5) == 52\n"}
{"task_id": 26, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(A): \n    '''\n    Create a Python function that determines if the provided array is monotonic.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == True\nassert func([5, 4, 3, 2, 1]) == True\nassert func([1, 3, 2, 4, 5]) == False\nassert func([1, 1, 1, 1, 1]) == True\nassert func([5, 5, 5, 5, 5]) == True", "response_code": "assert func([1, 2, 3, 4, 5]) == True\nassert func([5, 4, 3, 2, 1]) == True\nassert func([1, 3, 2, 4, 5]) == False\nassert func([1, 1, 1, 1, 1]) == True\nassert func([5, 5, 5, 5, 5]) == True"}
{"task_id": 27, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l, s):\n    '''\n    Create a function that determines if a sublist is present in a list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], [2, 3]) == True\nassert func([1, 2, 3, 4, 5], [4, 6]) == False\nassert func([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\nassert func([1, 2, 3, 4, 5], [5, 4, 3]) == False\nassert func([1, 2, 3, 4, 5], [6]) == False\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], [2, 3]) == True\nassert func([1, 2, 3, 4, 5], [4, 6]) == False\nassert func([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\nassert func([1, 2, 3, 4, 5], [5, 4, 3]) == False\nassert func([1, 2, 3, 4, 5], [6]) == False\n"}
{"task_id": 28, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(Input):\n    '''\n    Create a function that determines if all the provided tuples are of the same length.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([(1, 2), (3, 4), (5, 6)]) == True\nassert func([(1, 2, 3), (4, 5), (6, 7, 8)]) == False\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == True\nassert func([(1,), (2,), (3,)]) == True\nassert func([(1, 2, 3, 4), (5, 6, 7), (8, 9)]) == False", "response_code": "assert func([(1, 2), (3, 4), (5, 6)]) == True\nassert func([(1, 2, 3), (4, 5), (6, 7, 8)]) == False\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == True\nassert func([(1,), (2,), (3,)]) == True\nassert func([(1, 2, 3, 4), (5, 6, 7), (8, 9)]) == False"}
{"task_id": 29, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a function that implements comb sort to arrange a list of elements.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([4, 2, 1, 3]) == [1, 2, 3, 4]\nassert func([5, 3, 8, 2, 7]) == [2, 3, 5, 7, 8]\nassert func([9, 5, 2, 7, 1, 6]) == [1, 2, 5, 6, 7, 9]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n```", "response_code": "\nassert func([4, 2, 1, 3]) == [1, 2, 3, 4]\nassert func([5, 3, 8, 2, 7]) == [2, 3, 5, 7, 8]\nassert func([9, 5, 2, 7, 1, 6]) == [1, 2, 5, 6, 7, 9]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n"}
{"task_id": 30, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a Python function that determines if a given number can be expressed as the difference of two squares.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5) == True\nassert func(10) == True\nassert func(15) == False\nassert func(25) == True\nassert func(30) == False\n```", "response_code": "\nassert func(5) == True\nassert func(10) == True\nassert func(15) == False\nassert func(25) == True\nassert func(30) == False\n"}
{"task_id": 31, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(colors, patterns):    \n    '''\n    Create a function that verifies if it adheres to the sequence provided in the patterns array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['red', 'blue', 'green'], ['color', 'color', 'color']) == True\nassert func(['red', 'blue', 'green'], ['color', 'pattern', 'color']) == False\nassert func(['red', 'blue', 'green'], ['color', 'color']) == False\nassert func(['red', 'blue', 'green'], ['pattern', 'pattern', 'pattern']) == True\nassert func(['red', 'blue', 'green'], ['pattern', 'color', 'pattern']) == False\n```", "response_code": "\nassert func(['red', 'blue', 'green'], ['color', 'color', 'color']) == True\nassert func(['red', 'blue', 'green'], ['color', 'pattern', 'color']) == False\nassert func(['red', 'blue', 'green'], ['color', 'color']) == False\nassert func(['red', 'blue', 'green'], ['pattern', 'pattern', 'pattern']) == True\nassert func(['red', 'blue', 'green'], ['pattern', 'color', 'pattern']) == False\n"}
{"task_id": 32, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list, K):\n    '''\n    Create a function that identifies tuples in a list where all elements are divisible by k.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([(2, 4), (6, 9), (10, 15)], 2) == [(2, 4), (10, 15)]\nassert func([(3, 6), (9, 12), (15, 18)], 3) == [(3, 6), (9, 12), (15, 18)]\nassert func([(4, 8), (12, 16), (20, 24)], 4) == [(4, 8), (12, 16), (20, 24)]\nassert func([(5, 10), (15, 20), (25, 30)], 5) == [(5, 10), (15, 20), (25, 30)]\nassert func([(6, 12), (18, 24), (30, 36)], 6) == [(6, 12), (18, 24), (30, 36)]", "response_code": "assert func([(2, 4), (6, 9), (10, 15)], 2) == [(2, 4), (10, 15)]\nassert func([(3, 6), (9, 12), (15, 18)], 3) == [(3, 6), (9, 12), (15, 18)]\nassert func([(4, 8), (12, 16), (20, 24)], 4) == [(4, 8), (12, 16), (20, 24)]\nassert func([(5, 10), (15, 20), (25, 30)], 5) == [(5, 10), (15, 20), (25, 30)]\nassert func([(6, 12), (18, 24), (30, 36)], 6) == [(6, 12), (18, 24), (30, 36)]"}
{"task_id": 33, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a Python function that calculates the difference between the sum of even digits and the sum of odd digits.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1234) == -2\nassert func(2468) == 8\nassert func(13579) == -16\nassert func(1111) == 0\nassert func(24681357) == 4\n```", "response_code": "\nassert func(1234) == -2\nassert func(2468) == 8\nassert func(13579) == -16\nassert func(1111) == 0\nassert func(24681357) == 4\n"}
{"task_id": 34, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(s): \n    '''\n    Create a Python function that determines if the length of a word is odd.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\") == True\nassert func(\"world\") == False\nassert func(\"python\") == True\nassert func(\"programming\") == False\nassert func(\"test\") == True", "response_code": "assert func(\"hello\") == True\nassert func(\"world\") == False\nassert func(\"python\") == True\nassert func(\"programming\") == False\nassert func(\"test\") == True"}
{"task_id": 35, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function that calculates the nth tetrahedral number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 1\nassert func(2) == 4\nassert func(3) == 10\nassert func(4) == 20\nassert func(5) == 35", "response_code": "assert func(1) == 1\nassert func(2) == 4\nassert func(3) == 10\nassert func(4) == 20\nassert func(5) == 35"}
{"task_id": 36, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(r):\n    '''\n    Create a function that calculates the volume of a sphere.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == (4/3) * math.pi\nassert func(2) == (4/3) * math.pi * 2**3\nassert func(0) == 0\nassert func(5) == (4/3) * math.pi * 5**3\nassert func(10) == (4/3) * math.pi * 10**3", "response_code": "assert func(1) == (4/3) * math.pi\nassert func(2) == (4/3) * math.pi * 2**3\nassert func(0) == 0\nassert func(5) == (4/3) * math.pi * 5**3\nassert func(10) == (4/3) * math.pi * 10**3"}
{"task_id": 37, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(strr):  \n    '''\n    Create a Python function that calculates the character resulting from adding all the characters in the provided string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"abc\") == 'c'\nassert func(\"hello\") == 'o'\nassert func(\"12345\") == '5'\nassert func(\"python\") == 'n'\nassert func(\"a1b2c3\") == '6'\n```", "response_code": "\nassert func(\"abc\") == 'c'\nassert func(\"hello\") == 'o'\nassert func(\"12345\") == '5'\nassert func(\"python\") == 'n'\nassert func(\"a1b2c3\") == '6'\n"}
{"task_id": 38, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function that determines the n-th number in the Newman Conway sequence.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 1\nassert func(5) == 3\nassert func(10) == 6\nassert func(15) == 8\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 1\nassert func(5) == 3\nassert func(10) == 6\nassert func(15) == 8\n"}
{"task_id": 39, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(r):\n    '''\n    Create a function that calculates the surface area of a sphere.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 4 * math.pi\nassert func(2) == 4 * math.pi * 2**2\nassert func(0.5) == 4 * math.pi * 0.5**2\nassert func(3) == 4 * math.pi * 3**2\nassert func(10) == 4 * math.pi * 10**2\n```", "response_code": "\nassert func(1) == 4 * math.pi\nassert func(2) == 4 * math.pi * 2**2\nassert func(0.5) == 4 * math.pi * 0.5**2\nassert func(3) == 4 * math.pi * 3**2\nassert func(10) == 4 * math.pi * 10**2\n"}
{"task_id": 40, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    Create a function that calculates the nth centered hexagonal number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 1\nassert func(2) == 7\nassert func(3) == 19\nassert func(4) == 37\nassert func(5) == 61", "response_code": "assert func(1) == 1\nassert func(2) == 7\nassert func(3) == 19\nassert func(4) == 37\nassert func(5) == 61"}
{"task_id": 41, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import collections as ct\ndef func(dict1,dict2, dict3):\n    '''\n    Create a function that combines three dictionaries into one.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}\ndict3 = {'e': 5, 'f': 6}\n\nassert func(dict1, dict2, dict3) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n\ndict1 = {'x': 10, 'y': 20}\ndict2 = {'z': 30}\ndict3 = {}\n\nassert func(dict1, dict2, dict3) == {'x': 10, 'y': 20, 'z': 30}\n\ndict1 = {}\ndict2 = {}\ndict3 = {}\n\nassert func(dict1, dict2, dict3) == {}\n\ndict1 = {'a': 1}\ndict2 = {'b': 2}\ndict3 = {'c': 3}\n\nassert func(dict1, dict2, dict3) == {'a': 1, 'b': 2, 'c': 3}\n\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'a': 3, 'd': 4}\ndict3 = {'e': 5, 'f': 6}\n\nassert func(dict1, dict2, dict3) == {'a': 3, 'b': 2, 'd': 4, 'e': 5, 'f': 6}\n```", "response_code": "\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}\ndict3 = {'e': 5, 'f': 6}\n\nassert func(dict1, dict2, dict3) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n\ndict1 = {'x': 10, 'y': 20}\ndict2 = {'z': 30}\ndict3 = {}\n\nassert func(dict1, dict2, dict3) == {'x': 10, 'y': 20, 'z': 30}\n\ndict1 = {}\ndict2 = {}\ndict3 = {}\n\nassert func(dict1, dict2, dict3) == {}\n\ndict1 = {'a': 1}\ndict2 = {'b': 2}\ndict3 = {'c': 3}\n\nassert func(dict1, dict2, dict3) == {'a': 1, 'b': 2, 'c': 3}\n\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'a': 3, 'd': 4}\ndict3 = {'e': 5, 'f': 6}\n\nassert func(dict1, dict2, dict3) == {'a': 3, 'b': 2, 'd': 4, 'e': 5, 'f': 6}\n"}
{"task_id": 42, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import collections\ndef func(list1):\n    '''\n    Create a function that calculates the frequency of each element in a given list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 2, 3, 3, 3]) == {1: 1, 2: 2, 3: 3}\nassert func([4, 4, 4, 4, 4]) == {4: 5}\nassert func([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}\nassert func([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == {1: 2, 2: 2, 3: 2, 4: 2, 5: 2}\nassert func([]) == {}\n```", "response_code": "\nassert func([1, 2, 2, 3, 3, 3]) == {1: 1, 2: 2, 3: 3}\nassert func([4, 4, 4, 4, 4]) == {4: 5}\nassert func([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}\nassert func([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == {1: 2, 2: 2, 3: 2, 4: 2, 5: 2}\nassert func([]) == {}\n"}
{"task_id": 43, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(N):\n    '''\n    Create a function that identifies the nearest number smaller than n.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(5) == 4\nassert func(10) == 9\nassert func(20) == 19\nassert func(0) == -1\nassert func(100) == 99", "response_code": "assert func(5) == 4\nassert func(10) == 9\nassert func(20) == 19\nassert func(0) == -1\nassert func(100) == 99"}
{"task_id": 44, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a Python function that determines the longest word's length.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([\"apple\", \"banana\", \"cherry\"]) == 6\nassert func([\"elephant\", \"giraffe\", \"hippopotamus\"]) == 12\nassert func([\"python\", \"java\", \"javascript\"]) == 10\nassert func([\"cat\", \"dog\", \"rabbit\"]) == 6\nassert func([\"hello\", \"world\"]) == 5\n```", "response_code": "\nassert func([\"apple\", \"banana\", \"cherry\"]) == 6\nassert func([\"elephant\", \"giraffe\", \"hippopotamus\"]) == 12\nassert func([\"python\", \"java\", \"javascript\"]) == 10\nassert func([\"cat\", \"dog\", \"rabbit\"]) == 6\nassert func([\"hello\", \"world\"]) == 5\n"}
{"task_id": 45, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1, sub_str):\n    '''\n    Create a function that verifies the existence of a substring within a provided list of strings.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['apple', 'banana', 'cherry'], 'ban') == True\nassert func(['apple', 'banana', 'cherry'], 'berry') == False\nassert func(['hello', 'world', 'python'], 'py') == True\nassert func(['hello', 'world', 'python'], 'java') == False\nassert func(['cat', 'dog', 'rabbit'], 'at') == False\n```", "response_code": "\nassert func(['apple', 'banana', 'cherry'], 'ban') == True\nassert func(['apple', 'banana', 'cherry'], 'berry') == False\nassert func(['hello', 'world', 'python'], 'py') == True\nassert func(['hello', 'world', 'python'], 'java') == False\nassert func(['cat', 'dog', 'rabbit'], 'at') == False\n"}
{"task_id": 46, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function that determines if the provided number is undulating.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(121) == True\nassert func(10101) == True\nassert func(12321) == True\nassert func(1234567890987654321) == True\nassert func(123454321) == True", "response_code": "assert func(121) == True\nassert func(10101) == True\nassert func(12321) == True\nassert func(1234567890987654321) == True\nassert func(123454321) == True"}
{"task_id": 47, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a,b):\n    '''\n    Create a function that computes the result of raising 'a' to the power of 'b'.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(2, 3) == 8\nassert func(5, 2) == 25\nassert func(0, 5) == 0\nassert func(3, 0) == 1\nassert func(4, -2) == 0.0625\n```", "response_code": "\nassert func(2, 3) == 8\nassert func(5, 2) == 25\nassert func(0, 5) == 0\nassert func(3, 0) == 1\nassert func(4, -2) == 0.0625\n"}
{"task_id": 48, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from operator import itemgetter \ndef func(test_list):\n    '''\n    Create a function that retrieves the index of the smallest value in the provided tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 0\nassert func([(10, 20, 30), (4, 5, 6), (7, 8, 9)]) == 1\nassert func([(1, 2, 3), (4, 5, 6), (0, 8, 9)]) == 2\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 0)]) == 2\nassert func([(1, 2, 3), (4, 0, 6), (7, 8, 9)]) == 1\n```", "response_code": "\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 0\nassert func([(10, 20, 30), (4, 5, 6), (7, 8, 9)]) == 1\nassert func([(1, 2, 3), (4, 5, 6), (0, 8, 9)]) == 2\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 0)]) == 2\nassert func([(1, 2, 3), (4, 0, 6), (7, 8, 9)]) == 1\n"}
{"task_id": 49, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lst):  \n    '''\n    Create a Python function that determines the shortest length of a sublist.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 2\nassert func([[1, 2, 3, 4], [5], [6, 7]]) == 1\nassert func([[1], [2], [3], [4]]) == 1\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == 2\nassert func([[1, 2, 3, 4, 5], [6, 7, 8], [9, 10]]) == 3\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 2\nassert func([[1, 2, 3, 4], [5], [6, 7]]) == 1\nassert func([[1], [2], [3], [4]]) == 1\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == 2\nassert func([[1, 2, 3, 4, 5], [6, 7, 8], [9, 10]]) == 3\n"}
{"task_id": 50, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    Create a Python function that calculates the quantity of divisors for a specified integer.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(10) == 4\nassert func(12) == 6\nassert func(25) == 3\nassert func(100) == 9\n```", "response_code": "\nassert func(1) == 1\nassert func(10) == 4\nassert func(12) == 6\nassert func(25) == 3\nassert func(100) == 9\n"}
{"task_id": 51, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function that calculates the frequency of each element in a list of lists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == {1: 1, 2: 2, 3: 3, 4: 2, 5: 1}\nassert func([[1, 1, 1], [2, 2], [3, 3, 3, 3]]) == {1: 3, 2: 2, 3: 4}\nassert func([[1, 2], [3], [4, 4, 4]]) == {1: 1, 2: 1, 3: 1, 4: 3}\nassert func([[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]]) == {1: 1, 2: 2, 3: 3, 4: 3, 5: 2, 6: 1}\nassert func([[1], [2], [3], [4]]) == {1: 1, 2: 1, 3: 1, 4: 1}\n```", "response_code": "\nassert func([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == {1: 1, 2: 2, 3: 3, 4: 2, 5: 1}\nassert func([[1, 1, 1], [2, 2], [3, 3, 3, 3]]) == {1: 3, 2: 2, 3: 4}\nassert func([[1, 2], [3], [4, 4, 4]]) == {1: 1, 2: 1, 3: 1, 4: 3}\nassert func([[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]]) == {1: 1, 2: 2, 3: 3, 4: 3, 5: 2, 6: 1}\nassert func([[1], [2], [3], [4]]) == {1: 1, 2: 1, 3: 1, 4: 1}\n"}
{"task_id": 52, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(numbers):  \n    '''\n    Create a function that multiplies all the numbers in a list and then divides the result by the length of the list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 15.0\nassert func([10, 20, 30]) == 200.0\nassert func([2, 4, 6, 8, 10]) == 40.0\nassert func([5, 5, 5, 5, 5, 5, 5]) == 25.0\nassert func([1, 3, 5, 7, 9]) == 15.0\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 15.0\nassert func([10, 20, 30]) == 200.0\nassert func([2, 4, 6, 8, 10]) == 40.0\nassert func([5, 5, 5, 5, 5, 5, 5]) == 25.0\nassert func([1, 3, 5, 7, 9]) == 15.0\n"}
{"task_id": 53, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function that will convert the provided decimal number into binary form.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == '0'\nassert func(1) == '1'\nassert func(5) == '101'\nassert func(10) == '1010'\nassert func(15) == '1111'\n```", "response_code": "\nassert func(0) == '0'\nassert func(1) == '1'\nassert func(5) == '101'\nassert func(10) == '1010'\nassert func(15) == '1111'\n"}
{"task_id": 54, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import sys\ndef func(num):\n    '''\n    Create a function that determines the next smallest palindrome for a given number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(123) == 131\nassert func(999) == 1001\nassert func(45678) == 45754\nassert func(123456789) == 123464321\nassert func(987654321) == 987676789\n```", "response_code": "\nassert func(123) == 131\nassert func(999) == 1001\nassert func(45678) == 45754\nassert func(123456789) == 123464321\nassert func(987654321) == 987676789\n"}
{"task_id": 55, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr, k):\n    '''\n    Create a function that locates the kth element within the provided array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 3) == 3\nassert func([10, 20, 30, 40, 50], 1) == 10\nassert func([5, 10, 15, 20, 25], 5) == 25\nassert func([100, 200, 300, 400, 500], 2) == 200\nassert func([2, 4, 6, 8, 10], 4) == 8\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 3) == 3\nassert func([10, 20, 30, 40, 50], 1) == 10\nassert func([5, 10, 15, 20, 25], 5) == 25\nassert func([100, 200, 300, 400, 500], 2) == 200\nassert func([2, 4, 6, 8, 10], 4) == 8\n"}
{"task_id": 56, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(word):\n    '''\n    Create a function that transforms a snake case string into a camel case string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello_world\") == \"helloWorld\"\nassert func(\"snake_case_example\") == \"snakeCaseExample\"\nassert func(\"this_is_a_test\") == \"thisIsATest\"\nassert func(\"camel_case_string\") == \"camelCaseString\"\nassert func(\"another_example\") == \"anotherExample\"\n```", "response_code": "\nassert func(\"hello_world\") == \"helloWorld\"\nassert func(\"snake_case_example\") == \"snakeCaseExample\"\nassert func(\"this_is_a_test\") == \"thisIsATest\"\nassert func(\"camel_case_string\") == \"camelCaseString\"\nassert func(\"another_example\") == \"anotherExample\"\n"}
{"task_id": 57, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n, m): \n    '''\n    Create a function that calculates the Eulerian number a(n, m).\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0, 0) == 1\nassert func(3, 2) == 10\nassert func(5, 3) == 50\nassert func(4, 1) == 5\nassert func(6, 4) == 140\n```", "response_code": "\nassert func(0, 0) == 1\nassert func(3, 2) == 10\nassert func(5, 3) == 50\nassert func(4, 1) == 5\nassert func(6, 4) == 140\n"}
{"task_id": 58, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(input_list):\n    '''\n    Create a lambda function to sort the strings within each sublist of a given list of lists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\ninput_list = [['banana', 'apple', 'cherry'], ['orange', 'grape', 'kiwi']]\nassert func(input_list) == [['apple', 'banana', 'cherry'], ['grape', 'kiwi', 'orange']]\n\ninput_list = [['zebra', 'lion', 'elephant'], ['monkey', 'giraffe', 'tiger']]\nassert func(input_list) == [['elephant', 'lion', 'zebra'], ['giraffe', 'monkey', 'tiger']]\n\ninput_list = [['pear', 'apple', 'banana'], ['grape', 'kiwi', 'orange']]\nassert func(input_list) == [['apple', 'banana', 'pear'], ['grape', 'kiwi', 'orange']]\n\ninput_list = [['dog', 'cat', 'rabbit'], ['hamster', 'guinea pig', 'ferret']]\nassert func(input_list) == [['cat', 'dog', 'rabbit'], ['ferret', 'guinea pig', 'hamster']]\n\ninput_list = [['sunflower', 'rose', 'tulip'], ['daisy', 'lily', 'orchid']]\nassert func(input_list) == [['rose', 'sunflower', 'tulip'], ['daisy', 'lily', 'orchid']]\n```", "response_code": "\ninput_list = [['banana', 'apple', 'cherry'], ['orange', 'grape', 'kiwi']]\nassert func(input_list) == [['apple', 'banana', 'cherry'], ['grape', 'kiwi', 'orange']]\n\ninput_list = [['zebra', 'lion', 'elephant'], ['monkey', 'giraffe', 'tiger']]\nassert func(input_list) == [['elephant', 'lion', 'zebra'], ['giraffe', 'monkey', 'tiger']]\n\ninput_list = [['pear', 'apple', 'banana'], ['grape', 'kiwi', 'orange']]\nassert func(input_list) == [['apple', 'banana', 'pear'], ['grape', 'kiwi', 'orange']]\n\ninput_list = [['dog', 'cat', 'rabbit'], ['hamster', 'guinea pig', 'ferret']]\nassert func(input_list) == [['cat', 'dog', 'rabbit'], ['ferret', 'guinea pig', 'hamster']]\n\ninput_list = [['sunflower', 'rose', 'tulip'], ['daisy', 'lily', 'orchid']]\nassert func(input_list) == [['rose', 'sunflower', 'tulip'], ['daisy', 'lily', 'orchid']]\n"}
{"task_id": 59, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lst):   \n    '''\n    Create a Python function that counts the number of true boolean values in a provided list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([True, False, True, False, True]) == 3\nassert func([True, True, True, True, True]) == 5\nassert func([False, False, False, False, False]) == 0\nassert func([True, False, False, True, False]) == 2\nassert func([]) == 0", "response_code": "assert func([True, False, True, False, True]) == 3\nassert func([True, True, True, True, True]) == 5\nassert func([False, False, False, False, False]) == 0\nassert func([True, False, False, True, False]) == 2\nassert func([]) == 0"}
{"task_id": 60, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list, test_tup):\n    '''\n    Create a function that combines the provided list with the provided tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], (4, 5, 6)) == [1, 2, 3, 4, 5, 6]\nassert func(['a', 'b'], ('c', 'd')) == ['a', 'b', 'c', 'd']\nassert func([], (1, 2, 3)) == [1, 2, 3]\nassert func([10, 20], ()) == [10, 20]\nassert func(['x'], ('y',)) == ['x', 'y']\n```", "response_code": "\nassert func([1, 2, 3], (4, 5, 6)) == [1, 2, 3, 4, 5, 6]\nassert func(['a', 'b'], ('c', 'd')) == ['a', 'b', 'c', 'd']\nassert func([], (1, 2, 3)) == [1, 2, 3]\nassert func([10, 20], ()) == [10, 20]\nassert func(['x'], ('y',)) == ['x', 'y']\n"}
{"task_id": 61, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import heapq\ndef func(num1,num2,num3):\n    '''\n    Create a function that uses the heap queue algorithm to combine several sorted inputs into one sorted iterator.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert list(func([1, 3, 5], [2, 4, 6], [0, 7, 8])) == [0, 1, 2, 3, 4, 5, 6, 7, 8]\nassert list(func([1, 2, 3], [4, 5, 6], [7, 8, 9])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert list(func([1, 4, 7], [2, 5, 8], [3, 6, 9])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert list(func([5, 10, 15], [3, 6, 9], [2, 4, 8])) == [2, 3, 4, 5, 6, 8, 9, 10, 15]\nassert list(func([10, 20, 30], [15, 25, 35], [5, 12, 18])) == [5, 10, 12, 15, 18, 20, 25, 30, 35]\n```", "response_code": "\nassert list(func([1, 3, 5], [2, 4, 6], [0, 7, 8])) == [0, 1, 2, 3, 4, 5, 6, 7, 8]\nassert list(func([1, 2, 3], [4, 5, 6], [7, 8, 9])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert list(func([1, 4, 7], [2, 5, 8], [3, 6, 9])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert list(func([5, 10, 15], [3, 6, 9], [2, 4, 8])) == [2, 3, 4, 5, 6, 8, 9, 10, 15]\nassert list(func([10, 20, 30], [15, 25, 35], [5, 12, 18])) == [5, 10, 12, 15, 18, 20, 25, 30, 35]\n"}
{"task_id": 62, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(s,n): \n    '''\n    Create a Python function that calculates the number of rotations of a binary string that has an odd value.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func('101', 3) == 1\nassert func('1101', 4) == 2\nassert func('11111', 5) == 0\nassert func('1001', 4) == 1\nassert func('1010101', 7) == 3\n```", "response_code": "\nassert func('101', 3) == 1\nassert func('1101', 4) == 2\nassert func('11111', 5) == 0\nassert func('1001', 4) == 1\nassert func('1010101', 7) == 3\n"}
{"task_id": 63, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nestedlist):\n    '''\n    Create a function that identifies common elements within nested lists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == []\nassert func([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]\nassert func([[1, 2, 3], [4, 5, 6], [1, 2, 3]]) == [1, 2, 3]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3]]) == []\n```", "response_code": "\nassert func([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == []\nassert func([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]\nassert func([[1, 2, 3], [4, 5, 6], [1, 2, 3]]) == [1, 2, 3]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3]]) == []\n"}
{"task_id": 64, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(text):\n    '''\n    Create a function that verifies whether a given string is an integer or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"123\") == True\nassert func(\"-456\") == True\nassert func(\"0\") == True\nassert func(\"12.34\") == False\nassert func(\"abc\") == False\n```", "response_code": "\nassert func(\"123\") == True\nassert func(\"-456\") == True\nassert func(\"0\") == True\nassert func(\"12.34\") == False\nassert func(\"abc\") == False\n"}
{"task_id": 65, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function that verifies if all dictionaries within a list are either empty or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([{}, {}, {}]) == True\nassert func([{'a': 1}, {'b': 2}, {'c': 3}]) == True\nassert func([{}, {'a': 1}, {}]) == True\nassert func([{'a': 1}, {}, {'b': 2}]) == True\nassert func([{}, {}, {}]) == True", "response_code": "assert func([{}, {}, {}]) == True\nassert func([{'a': 1}, {'b': 2}, {'c': 3}]) == True\nassert func([{}, {'a': 1}, {}]) == True\nassert func([{'a': 1}, {}, {'b': 2}]) == True\nassert func([{}, {}, {}]) == True"}
{"task_id": 66, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a function that transforms a tuple of positive integers into a single integer.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3)) == 123\nassert func((9, 8, 7, 6)) == 9876\nassert func((5, 0, 2, 1)) == 5021\nassert func((4, 3, 2, 1, 0)) == 43210\nassert func((1, 0, 0, 0, 0)) == 10000\n```", "response_code": "\nassert func((1, 2, 3)) == 123\nassert func((9, 8, 7, 6)) == 9876\nassert func((5, 0, 2, 1)) == 5021\nassert func((4, 3, 2, 1, 0)) == 43210\nassert func((1, 0, 0, 0, 0)) == 10000\n"}
{"task_id": 67, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Create a function that changes any elements in the list that can be converted to float.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3]) == [1, 2, 3]\nassert func([1.5, '2', '3.5', '4', '5.0']) == [1.5, 2, 3.5, 4, 5.0]\nassert func(['a', 'b', 'c']) == ['a', 'b', 'c']\nassert func(['1.5', '2.5', '3.5']) == [1.5, 2.5, 3.5]\nassert func(['1', '2', '3']) == [1, 2, 3]\n```", "response_code": "\nassert func([1, 2, 3]) == [1, 2, 3]\nassert func([1.5, '2', '3.5', '4', '5.0']) == [1.5, 2, 3.5, 4, 5.0]\nassert func(['a', 'b', 'c']) == ['a', 'b', 'c']\nassert func(['1.5', '2.5', '3.5']) == [1.5, 2.5, 3.5]\nassert func(['1', '2', '3']) == [1, 2, 3]\n"}
{"task_id": 68, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(string): \n    '''\n    Create a function that transforms a string into a list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\") == ['h', 'e', 'l', 'l', 'o']\nassert func(\"12345\") == ['1', '2', '3', '4', '5']\nassert func(\"abcde\") == ['a', 'b', 'c', 'd', 'e']\nassert func(\"\") == []\nassert func(\"testing 123\") == ['t', 'e', 's', 't', 'i', 'n', 'g', ' ', '1', '2', '3']", "response_code": "assert func(\"hello\") == ['h', 'e', 'l', 'l', 'o']\nassert func(\"12345\") == ['1', '2', '3', '4', '5']\nassert func(\"abcde\") == ['a', 'b', 'c', 'd', 'e']\nassert func(\"\") == []\nassert func(\"testing 123\") == ['t', 'e', 's', 't', 'i', 'n', 'g', ' ', '1', '2', '3']"}
{"task_id": 69, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):\n    '''\n    Create a Python function that identifies the element that occurs only once in a sorted array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 1, 2, 2, 3, 4, 4, 5, 5]) == 3\nassert func([1, 1, 2, 2, 3, 3, 4, 4, 5]) == 5\nassert func([1, 2, 2, 3, 3, 4, 4, 5, 5]) == 1\nassert func([1, 1, 2, 3, 3, 4, 4, 5, 5]) == 2\nassert func([1, 1, 2, 2, 3, 3, 4, 5, 5]) == 4", "response_code": "assert func([1, 1, 2, 2, 3, 4, 4, 5, 5]) == 3\nassert func([1, 1, 2, 2, 3, 3, 4, 4, 5]) == 5\nassert func([1, 2, 2, 3, 3, 4, 4, 5, 5]) == 1\nassert func([1, 1, 2, 3, 3, 4, 4, 5, 5]) == 2\nassert func([1, 1, 2, 2, 3, 3, 4, 5, 5]) == 4"}
{"task_id": 70, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function that determines the highest product from pairs of tuples in a specified list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (3, 4), (5, 6)]) == 30\nassert func([(2, 3), (4, 5), (6, 7)]) == 42\nassert func([(10, 2), (3, 4), (5, 6)]) == 60\nassert func([(1, 1), (2, 2), (3, 3)]) == 9\nassert func([(1, 10), (2, 3), (4, 5)]) == 50\n```", "response_code": "\nassert func([(1, 2), (3, 4), (5, 6)]) == 30\nassert func([(2, 3), (4, 5), (6, 7)]) == 42\nassert func([(10, 2), (3, 4), (5, 6)]) == 60\nassert func([(1, 1), (2, 2), (3, 3)]) == 9\nassert func([(1, 10), (2, 3), (4, 5)]) == 50\n"}
{"task_id": 71, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(limit):\n    '''\n    Create a function that calculates the sum of all amicable numbers within a given range starting from 1.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(100) == 0\nassert func(200) == 504\nassert func(300) == 504\nassert func(500) == 504\nassert func(1000) == 504\n```", "response_code": "\nassert func(100) == 0\nassert func(200) == 504\nassert func(300) == 504\nassert func(500) == 504\nassert func(1000) == 504\n"}
{"task_id": 72, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import cmath\ndef func(a,b):\n    '''\n    Create a function that calculates the angle of a complex number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1, 0) == 0\nassert func(0, 1) == 1.5707963267948966\nassert func(-1, 0) == 3.141592653589793\nassert func(0, -1) == -1.5707963267948966\nassert func(3, 4) == 0.9272952180016122\n```", "response_code": "\nassert func(1, 0) == 0\nassert func(0, 1) == 1.5707963267948966\nassert func(-1, 0) == 3.141592653589793\nassert func(0, -1) == -1.5707963267948966\nassert func(3, 4) == 0.9272952180016122\n"}
{"task_id": 73, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(string): \n    '''\n    Create a function that determines the largest difference between the count of 0s and 1s in any substring of the provided binary string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"110100\") == 3\nassert func(\"1010101\") == 5\nassert func(\"1111\") == 0\nassert func(\"0000\") == 0\nassert func(\"101010101\") == 7\n```", "response_code": "\nassert func(\"110100\") == 3\nassert func(\"1010101\") == 5\nassert func(\"1111\") == 0\nassert func(\"0000\") == 0\nassert func(\"101010101\") == 7\n"}
{"task_id": 74, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a,b): \n    '''\n    Create a Python function that calculates the total of shared divisors between two specified numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(10, 15) == 2  # shared divisors are 1 and 5\nassert func(12, 18) == 3  # shared divisors are 1, 2, and 3\nassert func(20, 25) == 2  # shared divisors are 1 and 5\nassert func(30, 45) == 3  # shared divisors are 1, 3, and 5\nassert func(24, 36) == 4  # shared divisors are 1, 2, 3, and 4\n```", "response_code": "\nassert func(10, 15) == 2  # shared divisors are 1 and 5\nassert func(12, 18) == 3  # shared divisors are 1, 2, and 3\nassert func(20, 25) == 2  # shared divisors are 1 and 5\nassert func(30, 45) == 3  # shared divisors are 1, 3, and 5\nassert func(24, 36) == 4  # shared divisors are 1, 2, 3, and 4\n"}
{"task_id": 75, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x, y):\n    '''\n    Create a function in Python that multiplies two integers without utilizing the * operator.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 4) == 12\nassert func(0, 5) == 0\nassert func(-2, 6) == -12\nassert func(7, -3) == -21\nassert func(-4, -2) == 8\n```", "response_code": "\nassert func(3, 4) == 12\nassert func(0, 5) == 0\nassert func(-2, 6) == -12\nassert func(7, -3) == -21\nassert func(-4, -2) == 8\n"}
{"task_id": 76, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n, str):\n    '''\n    Create a function that filters out words from a list that are longer than a specified length, n.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5, [\"apple\", \"banana\", \"kiwi\", \"orange\", \"grape\"]) == [\"apple\", \"kiwi\"]\nassert func(4, [\"elephant\", \"lion\", \"tiger\", \"giraffe\", \"zebra\"]) == [\"lion\"]\nassert func(3, [\"cat\", \"dog\", \"rabbit\", \"hamster\", \"guinea pig\"]) == [\"cat\", \"dog\"]\nassert func(6, [\"python\", \"java\", \"javascript\", \"ruby\", \"swift\"]) == [\"python\", \"ruby\", \"swift\"]\nassert func(2, [\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == [\"is\"]\n```", "response_code": "\nassert func(5, [\"apple\", \"banana\", \"kiwi\", \"orange\", \"grape\"]) == [\"apple\", \"kiwi\"]\nassert func(4, [\"elephant\", \"lion\", \"tiger\", \"giraffe\", \"zebra\"]) == [\"lion\"]\nassert func(3, [\"cat\", \"dog\", \"rabbit\", \"hamster\", \"guinea pig\"]) == [\"cat\", \"dog\"]\nassert func(6, [\"python\", \"java\", \"javascript\", \"ruby\", \"swift\"]) == [\"python\", \"ruby\", \"swift\"]\nassert func(2, [\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == [\"is\"]\n"}
{"task_id": 77, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(my_matrix):\n    '''\n    Create a function that can determine a magic square.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test case 1: 3x3 magic square\nassert func([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == True\n\n# Test case 2: 3x3 non-magic square\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False\n\n# Test case 3: 4x4 magic square\nassert func([[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]) == True\n\n# Test case 4: 4x4 non-magic square\nassert func([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == False\n\n# Test case 5: 5x5 magic square\nassert func([[17, 24, 1, 8, 15], [23, 5, 7, 14, 16], [4, 6, 13, 20, 22], [10, 12, 19, 21, 3], [11, 18, 25, 2, 9]]) == True\n```", "response_code": "\n# Test case 1: 3x3 magic square\nassert func([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == True\n\n# Test case 2: 3x3 non-magic square\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False\n\n# Test case 3: 4x4 magic square\nassert func([[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]) == True\n\n# Test case 4: 4x4 non-magic square\nassert func([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == False\n\n# Test case 5: 5x5 magic square\nassert func([[17, 24, 1, 8, 15], [23, 5, 7, 14, 16], [4, 6, 13, 20, 22], [10, 12, 19, 21, 3], [11, 18, 25, 2, 9]]) == True\n"}
{"task_id": 78, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from collections import defaultdict\ndef func(nums):\n    '''\n    Create a function that identifies the item in a given list that appears most frequently.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5, 5, 5, 6, 7]) == 5\nassert func([1, 1, 1, 2, 2, 3, 3, 3, 3]) == 3\nassert func([4, 4, 4, 4, 4, 4, 4, 4, 4]) == 4\nassert func([1, 2, 3, 4, 5]) == 1\nassert func([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5]) == 5\n```", "response_code": "\nassert func([1, 2, 3, 4, 5, 5, 5, 6, 7]) == 5\nassert func([1, 1, 1, 2, 2, 3, 3, 3, 3]) == 3\nassert func([4, 4, 4, 4, 4, 4, 4, 4, 4]) == 4\nassert func([1, 2, 3, 4, 5]) == 1\nassert func([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5]) == 5\n"}
{"task_id": 79, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1):\n    '''\n    Create a Python function that reverses the vowels in a given string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == \"holle\"\nassert func(\"world\") == \"werld\"\nassert func(\"apple\") == \"eppla\"\nassert func(\"python\") == \"pythan\"\nassert func(\"algorithm\") == \"algoruthm\"\n```", "response_code": "\nassert func(\"hello\") == \"holle\"\nassert func(\"world\") == \"werld\"\nassert func(\"apple\") == \"eppla\"\nassert func(\"python\") == \"pythan\"\nassert func(\"algorithm\") == \"algoruthm\"\n"}
{"task_id": 80, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(tup1):\n    '''\n    Create a function that changes a tuple into a string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(('a', 'b', 'c')) == 'abc'\nassert func(('hello', 'world')) == 'helloworld'\nassert func(('1', '2', '3')) == '123'\nassert func(('apple', 'banana', 'cherry')) == 'applebananacherry'\nassert func(('python', 'is', 'fun')) == 'pythonisfun'\n```", "response_code": "\nassert func(('a', 'b', 'c')) == 'abc'\nassert func(('hello', 'world')) == 'helloworld'\nassert func(('1', '2', '3')) == '123'\nassert func(('apple', 'banana', 'cherry')) == 'applebananacherry'\nassert func(('python', 'is', 'fun')) == 'pythonisfun'\n"}
{"task_id": 81, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a lambda function that calculates the sum of the negative numbers in a provided list of numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([-1, 2, -3, 4, -5]) == -9\nassert func([1, 2, 3, 4, 5]) == 0\nassert func([-10, -20, -30, -40, -50]) == -150\nassert func([0, 0, 0, 0, 0]) == 0\nassert func([-1, -2, -3, -4, -5]) == -15\n```", "response_code": "\nassert func([-1, 2, -3, 4, -5]) == -9\nassert func([1, 2, 3, 4, 5]) == 0\nassert func([-10, -20, -30, -40, -50]) == -150\nassert func([0, 0, 0, 0, 0]) == 0\nassert func([-1, -2, -3, -4, -5]) == -15\n"}
{"task_id": 82, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function that calculates the nth hexagonal number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 1\nassert func(2) == 6\nassert func(3) == 15\nassert func(4) == 28\nassert func(5) == 45", "response_code": "assert func(1) == 1\nassert func(2) == 6\nassert func(3) == 15\nassert func(4) == 28\nassert func(5) == 45"}
{"task_id": 83, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from array import array\ndef func(nums):\n    '''\n    Create a function that calculates the proportion of zeros in an array of whole numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(array('i', [0, 1, 0, 3, 0, 5])) == 0.5\nassert func(array('i', [1, 2, 3, 4, 5])) == 0.0\nassert func(array('i', [0, 0, 0, 0, 0])) == 1.0\nassert func(array('i', [1, 0, 1, 0, 1])) == 0.4\nassert func(array('i', [0, 0, 1, 1, 1])) == 0.4\n```", "response_code": "\nassert func(array('i', [0, 1, 0, 3, 0, 5])) == 0.5\nassert func(array('i', [1, 2, 3, 4, 5])) == 0.0\nassert func(array('i', [0, 0, 0, 0, 0])) == 1.0\nassert func(array('i', [1, 0, 1, 0, 1])) == 0.4\nassert func(array('i', [0, 0, 1, 1, 1])) == 0.4\n"}
{"task_id": 84, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a Python function that determines if a given number can be expressed as the sum of non-zero powers of 2.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(10) == True\nassert func(7) == True\nassert func(6) == False\nassert func(15) == False\nassert func(16) == True\n```", "response_code": "\nassert func(10) == True\nassert func(7) == True\nassert func(6) == False\nassert func(15) == False\nassert func(16) == True\n"}
{"task_id": 85, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(r):\n    '''\n    Create a function that calculates the circumference of a circle.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 6.283185307179586\nassert func(2) == 12.566370614359172\nassert func(5) == 31.41592653589793\nassert func(10) == 62.83185307179586\nassert func(0) == 0.0\n```", "response_code": "\nassert func(1) == 6.283185307179586\nassert func(2) == 12.566370614359172\nassert func(5) == 31.41592653589793\nassert func(10) == 62.83185307179586\nassert func(0) == 0.0\n"}
{"task_id": 86, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Create a function that retrieves elements that appear only once in the provided list of tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (2, 3), (3, 4), (4, 5)]) == [(1, 2), (3, 4), (4, 5)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (1, 2)]) == [(3, 4), (4, 5)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (1, 2), (3, 4)]) == [(4, 5)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (1, 2), (3, 4), (4, 5)]) == []\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (1, 2), (3, 4), (4, 5), (5, 6)]) == [(1, 2), (2, 3), (5, 6)]\n```", "response_code": "\nassert func([(1, 2), (2, 3), (3, 4), (4, 5)]) == [(1, 2), (3, 4), (4, 5)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (1, 2)]) == [(3, 4), (4, 5)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (1, 2), (3, 4)]) == [(4, 5)]\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (1, 2), (3, 4), (4, 5)]) == []\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (1, 2), (3, 4), (4, 5), (5, 6)]) == [(1, 2), (2, 3), (5, 6)]\n"}
{"task_id": 87, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a function that utilizes pancake sort to arrange a list of elements.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([3, 2, 1]) == [1, 2, 3]\nassert func([5, 2, 9, 1, 5]) == [1, 2, 5, 5, 9]\nassert func([10, 5, 8, 3, 1, 6]) == [1, 3, 5, 6, 8, 10]\nassert func([7, 4, 2, 9, 5, 1, 8]) == [1, 2, 4, 5, 7, 8, 9]\nassert func([6, 3, 8, 2, 5, 7, 1, 4]) == [1, 2, 3, 4, 5, 6, 7, 8]\n```", "response_code": "\nassert func([3, 2, 1]) == [1, 2, 3]\nassert func([5, 2, 9, 1, 5]) == [1, 2, 5, 5, 9]\nassert func([10, 5, 8, 3, 1, 6]) == [1, 3, 5, 6, 8, 10]\nassert func([7, 4, 2, 9, 5, 1, 8]) == [1, 2, 4, 5, 7, 8, 9]\nassert func([6, 3, 8, 2, 5, 7, 1, 4]) == [1, 2, 3, 4, 5, 6, 7, 8]\n"}
{"task_id": 88, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1,list2,list3):\n    '''\n    Create a function that counts the occurrences of identical pairs in three provided lists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], [2, 3, 4], [3, 4, 5]) == 0\nassert func([1, 2, 2, 3], [2, 3, 4], [3, 4, 5]) == 1\nassert func([1, 2, 2, 3], [2, 3, 4], [3, 4, 5, 5]) == 2\nassert func([1, 2, 2, 3], [2, 3, 4, 4], [3, 4, 5, 5]) == 3\nassert func([1, 2, 2, 3, 3], [2, 3, 4, 4], [3, 4, 5, 5]) == 4\n```", "response_code": "\nassert func([1, 2, 3], [2, 3, 4], [3, 4, 5]) == 0\nassert func([1, 2, 2, 3], [2, 3, 4], [3, 4, 5]) == 1\nassert func([1, 2, 2, 3], [2, 3, 4], [3, 4, 5, 5]) == 2\nassert func([1, 2, 2, 3], [2, 3, 4, 4], [3, 4, 5, 5]) == 3\nassert func([1, 2, 2, 3, 3], [2, 3, 4, 4], [3, 4, 5, 5]) == 4\n"}
{"task_id": 89, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(Input): \n    '''\n    Create a function that determines the quantity of lists within the provided tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(([], [], [])) == 3\nassert func(([], [], [], [])) == 4\nassert func(([], [], [], [], [])) == 5\nassert func(()) == 0\nassert func(([1, 2], [3, 4])) == 2", "response_code": "assert func(([], [], [])) == 3\nassert func(([], [], [], [])) == 4\nassert func(([], [], [], [], [])) == 5\nassert func(()) == 0\nassert func(([1, 2], [3, 4])) == 2"}
{"task_id": 90, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr): \n    '''\n    Create a Python function that determines the largest difference between two elements within a provided array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == 4\nassert func([5, 4, 3, 2, 1]) == 4\nassert func([10, 20, 30, 40, 50]) == 40\nassert func([5, 15, 10, 20, 25]) == 20\nassert func([1, 1, 1, 1, 1]) == 0", "response_code": "assert func([1, 2, 3, 4, 5]) == 4\nassert func([5, 4, 3, 2, 1]) == 4\nassert func([10, 20, 30, 40, 50]) == 40\nassert func([5, 15, 10, 20, 25]) == 20\nassert func([1, 1, 1, 1, 1]) == 0"}
{"task_id": 91, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a, b, n):\n    '''\n    Create a function that determines the values of x and y which satisfy the equation ax + by = n.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(2, 3, 8) == [(2, 2), (5, 1)]\nassert func(4, 5, 22) == [(2, 4), (7, 3), (12, 2), (17, 1)]\nassert func(3, 7, 16) == [(2, 2), (9, 1)]\nassert func(1, 1, 5) == [(4, 1)]\nassert func(6, 2, 18) == [(3, 6)]\n```", "response_code": "\nassert func(2, 3, 8) == [(2, 2), (5, 1)]\nassert func(4, 5, 22) == [(2, 4), (7, 3), (12, 2), (17, 1)]\nassert func(3, 7, 16) == [(2, 2), (9, 1)]\nassert func(1, 1, 5) == [(4, 1)]\nassert func(6, 2, 18) == [(3, 6)]\n"}
{"task_id": 92, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1, list2):\n    '''\n    Create a function that eliminates any elements from a specified list that are also found in a separate list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]\nassert func([10, 20, 30, 40, 50], [60, 70]) == [10, 20, 30, 40, 50]\nassert func(['a', 'b', 'c', 'd'], ['b', 'd']) == ['a', 'c']\nassert func([], [1, 2, 3]) == []\nassert func([1, 2, 3], []) == [1, 2, 3]", "response_code": "assert func([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]\nassert func([10, 20, 30, 40, 50], [60, 70]) == [10, 20, 30, 40, 50]\nassert func(['a', 'b', 'c', 'd'], ['b', 'd']) == ['a', 'c']\nassert func([], [1, 2, 3]) == []\nassert func([1, 2, 3], []) == [1, 2, 3]"}
{"task_id": 93, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    Create a function that computes the sum of positive integers starting from n and decreasing by 2 until the result is less than or equal to 0.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(10) == 25\nassert func(5) == 9\nassert func(1) == 1\nassert func(20) == 36\nassert func(15) == 25\n```", "response_code": "\nassert func(10) == 25\nassert func(5) == 9\nassert func(1) == 1\nassert func(20) == 36\nassert func(15) == 25\n"}
{"task_id": 94, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from math import tan, pi\ndef func(s, l):\n    '''\n    Create a function that computes the area of a regular polygon.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 5) == 10.83\nassert func(4, 10) == 100.0\nassert func(5, 7) == 21.72\nassert func(6, 4) == 6.93\nassert func(8, 6) == 24.0\n```", "response_code": "\nassert func(3, 5) == 10.83\nassert func(4, 10) == 100.0\nassert func(5, 7) == 21.72\nassert func(6, 4) == 6.93\nassert func(8, 6) == 24.0\n"}
{"task_id": 95, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math \ndef func(n): \n    '''\n    Create a Python function that verifies if the sum of divisors is equal or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(6) == True\nassert func(28) == True\nassert func(12) == False\nassert func(16) == False\nassert func(496) == True\n```", "response_code": "\nassert func(6) == True\nassert func(28) == True\nassert func(12) == False\nassert func(16) == False\nassert func(496) == True\n"}
{"task_id": 96, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1): \n    '''\n    Create a Python function that counts the number of characters in a given string that are in the same position in the English alphabet, regardless of case.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"abc\") == 3\nassert func(\"aBc\") == 2\nassert func(\"hello\") == 1\nassert func(\"aabbcc\") == 3\nassert func(\"xyz\") == 0", "response_code": "assert func(\"abc\") == 3\nassert func(\"aBc\") == 2\nassert func(\"hello\") == 1\nassert func(\"aabbcc\") == 3\nassert func(\"xyz\") == 0"}
{"task_id": 97, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(A): \n    '''\n    Create a Python function that calculates the number of pairs with an even XOR.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 6  # [1, 2], [1, 4], [2, 3], [2, 4], [3, 4], [4, 5]\nassert func([2, 2, 2, 2]) == 6  # [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2]\nassert func([1, 3, 5, 7]) == 0  # No pairs with even XOR\nassert func([0, 0, 0, 0, 0]) == 10  # [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 20  # [1, 2], [1, 4], [1, 6], [1, 8], [2, 3], [2, 4], [2, 6], [2, 8], [3, 4], [3, 6], [3, 8], [4, 5], [4, 6], [4, 8], [5, 6], [5, 8], [6, 7], [6, 8], [7, 8], [8, 9]\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 6  # [1, 2], [1, 4], [2, 3], [2, 4], [3, 4], [4, 5]\nassert func([2, 2, 2, 2]) == 6  # [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2]\nassert func([1, 3, 5, 7]) == 0  # No pairs with even XOR\nassert func([0, 0, 0, 0, 0]) == 10  # [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 20  # [1, 2], [1, 4], [1, 6], [1, 8], [2, 3], [2, 4], [2, 6], [2, 8], [3, 4], [3, 6], [3, 8], [4, 5], [4, 6], [4, 8], [5, 6], [5, 8], [6, 7], [6, 8], [7, 8], [8, 9]\n"}
{"task_id": 98, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a Python function that determines the smallest power of 2 that is greater than or equal to n.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5) == 8\nassert func(10) == 16\nassert func(20) == 32\nassert func(50) == 64\nassert func(100) == 128\n```", "response_code": "\nassert func(5) == 8\nassert func(10) == 16\nassert func(20) == 32\nassert func(50) == 64\nassert func(100) == 128\n"}
{"task_id": 99, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a,x): \n    '''\n    Create a Python function that calculates the occurrence of a specific number within a provided array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 3) == 1\nassert func([1, 2, 3, 4, 5, 3], 3) == 2\nassert func([1, 2, 3, 4, 5], 6) == 0\nassert func([1, 1, 1, 1, 1], 1) == 5\nassert func([], 5) == 0\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 3) == 1\nassert func([1, 2, 3, 4, 5, 3], 3) == 2\nassert func([1, 2, 3, 4, 5], 6) == 0\nassert func([1, 1, 1, 1, 1], 1) == 5\nassert func([], 5) == 0\n"}
{"task_id": 100, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1, m, n):                                                                                                                                                                                                \n    '''\n    Create a function that calculates the total of the numbers within a list based on a specified range of indices.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 1, 3) == 9\nassert func([10, 20, 30, 40, 50], 0, 2) == 60\nassert func([5, 10, 15, 20, 25], 2, 4) == 55\nassert func([2, 4, 6, 8, 10], 3, 4) == 18\nassert func([3, 6, 9, 12, 15], 0, 4) == 45\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 1, 3) == 9\nassert func([10, 20, 30, 40, 50], 0, 2) == 60\nassert func([5, 10, 15, 20, 25], 2, 4) == 55\nassert func([2, 4, 6, 8, 10], 3, 4) == 18\nassert func([3, 6, 9, 12, 15], 0, 4) == 45\n"}
{"task_id": 101, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(a):\n    '''\n    Create a function that calculates the perimeter of a pentagon.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5) == 25\nassert func(7) == 35\nassert func(10) == 50\nassert func(3) == 15\nassert func(12) == 60\n```", "response_code": "\nassert func(5) == 25\nassert func(7) == 35\nassert func(10) == 50\nassert func(3) == 15\nassert func(12) == 60\n"}
{"task_id": 102, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(s):\n    '''\n    Create a function that counts the number of times the characters 'std' appear in the provided string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"student\") == 1\nassert func(\"stand\") == 1\nassert func(\"studstud\") == 2\nassert func(\"stdstdstd\") == 3\nassert func(\"stdstdstdstd\") == 4", "response_code": "assert func(\"student\") == 1\nassert func(\"stand\") == 1\nassert func(\"studstud\") == 2\nassert func(\"stdstdstd\") == 3\nassert func(\"stdstdstdstd\") == 4"}
{"task_id": 103, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tuple):\n    '''\n    Create a function that verifies whether all elements in a tuple share the same data type.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func((1, 2, 3)) == True\nassert func(('a', 'b', 'c')) == True\nassert func((1, 'a', 3.14)) == False\nassert func(()) == True\nassert func((True, False, True)) == True", "response_code": "assert func((1, 2, 3)) == True\nassert func(('a', 'b', 'c')) == True\nassert func((1, 'a', 3.14)) == False\nassert func(()) == True\nassert func((True, False, True)) == True"}
{"task_id": 104, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr, n, x):\n    '''\n    Create a function that verifies the presence of a majority element in the provided sorted array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 2, 3, 3, 3, 3, 4], 8, 3) == True\nassert func([1, 2, 2, 3, 3, 3, 3, 4], 8, 2) == False\nassert func([1, 1, 2, 2, 2, 3, 3, 3, 3], 9, 2) == True\nassert func([1, 1, 2, 2, 2, 3, 3, 3, 3], 9, 4) == False\nassert func([1, 1, 1, 2, 2, 2, 3, 3, 3], 9, 1) == True\n```", "response_code": "\nassert func([1, 2, 2, 3, 3, 3, 3, 4], 8, 3) == True\nassert func([1, 2, 2, 3, 3, 3, 3, 4], 8, 2) == False\nassert func([1, 1, 2, 2, 2, 3, 3, 3, 3], 9, 2) == True\nassert func([1, 1, 2, 2, 2, 3, 3, 3, 3], 9, 4) == False\nassert func([1, 1, 1, 2, 2, 2, 3, 3, 3], 9, 1) == True\n"}
{"task_id": 105, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a Python function that calculates the number of set bits in a given number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(0) == 0\nassert func(1) == 1\nassert func(5) == 2\nassert func(15) == 4\nassert func(255) == 8", "response_code": "assert func(0) == 0\nassert func(1) == 1\nassert func(5) == 2\nassert func(15) == 4\nassert func(255) == 8"}
{"task_id": 106, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str):\n    '''\n    Create a Python function that eliminates characters with odd index values from a specified string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == \"hlo\"\nassert func(\"python\") == \"pto\"\nassert func(\"abcdefg\") == \"aceg\"\nassert func(\"12345\") == \"135\"\nassert func(\"a1b2c3d4e5\") == \"abcde\"\n```", "response_code": "\nassert func(\"hello\") == \"hlo\"\nassert func(\"python\") == \"pto\"\nassert func(\"abcdefg\") == \"aceg\"\nassert func(\"12345\") == \"135\"\nassert func(\"a1b2c3d4e5\") == \"abcde\"\n"}
{"task_id": 107, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a,b,c): \n    '''\n    Create a function that determines the smallest value among three numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1,2,3) == 1\nassert func(5,5,5) == 5\nassert func(-10,0,10) == -10\nassert func(100,50,75) == 50\nassert func(2.5,3.7,1.8) == 1.8", "response_code": "assert func(1,2,3) == 1\nassert func(5,5,5) == 5\nassert func(-10,0,10) == -10\nassert func(100,50,75) == 50\nassert func(2.5,3.7,1.8) == 1.8"}
{"task_id": 108, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n,l,r):  \n    '''\n    Create a Python function that verifies if all bits within a specified range are not set.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5, 1, 3) == False\nassert func(10, 2, 4) == False\nassert func(15, 0, 2) == False\nassert func(7, 2, 3) == True\nassert func(12, 2, 2) == True\n```", "response_code": "\nassert func(5, 1, 3) == False\nassert func(10, 2, 4) == False\nassert func(15, 0, 2) == False\nassert func(7, 2, 3) == True\nassert func(12, 2, 2) == True\n"}
{"task_id": 109, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr, n):\n    '''\n    Create a function that organizes the elements of the provided array so that negative elements come before positive ones.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([-1, 2, -3, 4, -5], 5) == [-1, -3, -5, 2, 4]\nassert func([5, -2, 3, -4, 1], 5) == [-2, -4, 5, 3, 1]\nassert func([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\nassert func([-1, -2, -3, -4, -5], 5) == [-1, -2, -3, -4, -5]\nassert func([0, 0, 0, 0, 0], 5) == [0, 0, 0, 0, 0]\n```", "response_code": "\nassert func([-1, 2, -3, 4, -5], 5) == [-1, -3, -5, 2, 4]\nassert func([5, -2, 3, -4, 1], 5) == [-2, -4, 5, 3, 1]\nassert func([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\nassert func([-1, -2, -3, -4, -5], 5) == [-1, -2, -3, -4, -5]\nassert func([0, 0, 0, 0, 0], 5) == [0, 0, 0, 0, 0]\n"}
{"task_id": 110, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1,char):\n    '''\n    Create a function that replaces empty spaces with a specified character in a given string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello world\", \"-\") == \"hello-world\"\nassert func(\"python is fun\", \"*\") == \"python*is*fun\"\nassert func(\"  hello  \", \"#\") == \"##hello##\"\nassert func(\"\", \"+\") == \"\"\nassert func(\"no_spaces\", \"&\") == \"no_spaces\"\n```", "response_code": "\nassert func(\"hello world\", \"-\") == \"hello-world\"\nassert func(\"python is fun\", \"*\") == \"python*is*fun\"\nassert func(\"  hello  \", \"#\") == \"##hello##\"\nassert func(\"\", \"+\") == \"\"\nassert func(\"no_spaces\", \"&\") == \"no_spaces\"\n"}
{"task_id": 111, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import heapq\ndef func(list1,n):\n    '''\n    Create a function that retrieves the n largest items from a dataset.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 2) == [4, 5]\nassert func([10, 20, 30, 40, 50], 3) == [30, 40, 50]\nassert func([5, 4, 3, 2, 1], 1) == [5]\nassert func([100, 200, 300, 400, 500], 5) == [100, 200, 300, 400, 500]\nassert func([7, 3, 9, 1, 5], 4) == [3, 5, 7, 9]\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 2) == [4, 5]\nassert func([10, 20, 30, 40, 50], 3) == [30, 40, 50]\nassert func([5, 4, 3, 2, 1], 1) == [5]\nassert func([100, 200, 300, 400, 500], 5) == [100, 200, 300, 400, 500]\nassert func([7, 3, 9, 1, 5], 4) == [3, 5, 7, 9]\n"}
{"task_id": 112, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(r,h):\n    '''\n    Create a function that calculates the lateral surface area of a cylinder.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 4) == 75.39822368615503\nassert func(5, 2) == 62.83185307179586\nassert func(1, 10) == 31.41592653589793\nassert func(0, 5) == 0\nassert func(8, 3) == 150.79644737231007\n```", "response_code": "\nassert func(3, 4) == 75.39822368615503\nassert func(5, 2) == 62.83185307179586\nassert func(1, 10) == 31.41592653589793\nassert func(0, 5) == 0\nassert func(8, 3) == 150.79644737231007\n"}
{"task_id": 113, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l):\n    '''\n    Create a function that calculates the volume of a cube.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(3) == 27\nassert func(5) == 125\nassert func(0) == 0\nassert func(10) == 1000\nassert func(2.5) == 15.625", "response_code": "assert func(3) == 27\nassert func(5) == 125\nassert func(0) == 0\nassert func(10) == 1000\nassert func(2.5) == 15.625"}
{"task_id": 114, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a Python function that will modify all even bits of a specified number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(0) == 0\nassert func(1) == 2\nassert func(5) == 5\nassert func(10) == 10\nassert func(15) == 10", "response_code": "assert func(0) == 0\nassert func(1) == 2\nassert func(5) == 5\nassert func(10) == 10\nassert func(15) == 10"}
{"task_id": 115, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from collections import Counter \ndef func(test_list):\n    '''\n    Create a function that checks for the frequency of records that occur the same number of times in the provided tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]) == {1: 1, 2: 2, 3: 2, 4: 2, 5: 2, 6: 1}\nassert func([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]) == {1: 2, 2: 2, 3: 2, 4: 2, 5: 2}\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 5)]) == {1: 1, 2: 2, 3: 2, 4: 1, 5: 2}\nassert func([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (5, 5)]) == {1: 2, 2: 2, 3: 2, 4: 2, 5: 4}\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 6)]) == {1: 1, 2: 2, 3: 2, 4: 2, 5: 2, 6: 3}\n```", "response_code": "\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]) == {1: 1, 2: 2, 3: 2, 4: 2, 5: 2, 6: 1}\nassert func([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]) == {1: 2, 2: 2, 3: 2, 4: 2, 5: 2}\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 5)]) == {1: 1, 2: 2, 3: 2, 4: 1, 5: 2}\nassert func([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (5, 5)]) == {1: 2, 2: 2, 3: 2, 4: 2, 5: 4}\nassert func([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 6)]) == {1: 1, 2: 2, 3: 2, 4: 2, 5: 2, 6: 3}\n"}
{"task_id": 116, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str): \n    '''\n    Create a Python function that calculates the total number of non-empty substrings in a provided string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"abc\") == 6\nassert func(\"hello\") == 15\nassert func(\"12345\") == 15\nassert func(\"a\") == 1\nassert func(\"\") == 0\n```", "response_code": "\nassert func(\"abc\") == 6\nassert func(\"hello\") == 15\nassert func(\"12345\") == 15\nassert func(\"a\") == 1\nassert func(\"\") == 0\n"}
{"task_id": 117, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(m,n): \n    '''\n    Create a function that calculates the number of potential sequences of length n, where each subsequent element is at least double the previous element but no greater than m.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(10, 3) == 4\nassert func(5, 4) == 6\nassert func(8, 2) == 3\nassert func(12, 5) == 10\nassert func(15, 3) == 6\n```", "response_code": "\nassert func(10, 3) == 4\nassert func(5, 4) == 6\nassert func(8, 2) == 3\nassert func(12, 5) == 10\nassert func(15, 3) == 6\n"}
{"task_id": 118, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1,list2):\n    '''\n    Create a function that swaps the final element of a list with a different list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], [4, 5, 6]) == [1, 2, 4]\nassert func([7, 8, 9], [10, 11, 12]) == [7, 8, 10]\nassert func(['a', 'b', 'c'], ['d', 'e', 'f']) == ['a', 'b', 'd']\nassert func([True, False], [False, True]) == [True, False]\nassert func([], [1, 2, 3]) == [1, 2]\n```", "response_code": "\nassert func([1, 2, 3], [4, 5, 6]) == [1, 2, 4]\nassert func([7, 8, 9], [10, 11, 12]) == [7, 8, 10]\nassert func(['a', 'b', 'c'], ['d', 'e', 'f']) == ['a', 'b', 'd']\nassert func([True, False], [False, True]) == [True, False]\nassert func([], [1, 2, 3]) == [1, 2]\n"}
{"task_id": 119, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1):\n    '''\n    Create a function that calculates the total number of characters in a given string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == 5\nassert func(\"12345\") == 5\nassert func(\"\") == 0\nassert func(\"a b c d e\") == 9\nassert func(\"testing 123\") == 11\n```", "response_code": "\nassert func(\"hello\") == 5\nassert func(\"12345\") == 5\nassert func(\"\") == 0\nassert func(\"a b c d e\") == 9\nassert func(\"testing 123\") == 11\n"}
{"task_id": 120, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math  \ndef func(N): \n    '''\n    Create a Python function that determines the next perfect square larger than a specified number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(10) == 16\nassert func(25) == 36\nassert func(50) == 64\nassert func(100) == 121\nassert func(500) == 529\n```", "response_code": "\nassert func(10) == 16\nassert func(25) == 36\nassert func(50) == 64\nassert func(100) == 121\nassert func(500) == 529\n"}
{"task_id": 121, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr): \n    '''\n    Create a function that can determine the highest sum of a bi-tonic sub-sequence within a provided array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 15\nassert func([1, 2, 3, 4, 5, 4, 3, 2, 1]) == 15\nassert func([10, 5, 4, 3, 2, 1, 2, 3, 4, 5]) == 25\nassert func([1, 2, 3, 4, 5, 4, 3, 2, 1, 10]) == 25\nassert func([5, 4, 3, 2, 1, 2, 3, 4, 5]) == 15\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 15\nassert func([1, 2, 3, 4, 5, 4, 3, 2, 1]) == 15\nassert func([10, 5, 4, 3, 2, 1, 2, 3, 4, 5]) == 25\nassert func([1, 2, 3, 4, 5, 4, 3, 2, 1, 10]) == 25\nassert func([5, 4, 3, 2, 1, 2, 3, 4, 5]) == 15\n"}
{"task_id": 122, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(number):\n    '''\n    Create a function that calculates square roots using the Babylonian algorithm.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(16) == 4\nassert func(25) == 5\nassert func(36) == 6\nassert func(49) == 7\nassert func(64) == 8\n```", "response_code": "\nassert func(16) == 4\nassert func(25) == 5\nassert func(36) == 6\nassert func(49) == 7\nassert func(64) == 8\n"}
{"task_id": 123, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str): \n    '''\n    Create a function that identifies the longest palindromic subsequence within a provided string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"racecar\") == \"racecar\"\nassert func(\"banana\") == \"anana\"\nassert func(\"level\") == \"level\"\nassert func(\"abacdfgdcaba\") == \"aba\"\nassert func(\"hello\") == \"ll\"\n```", "response_code": "\nassert func(\"racecar\") == \"racecar\"\nassert func(\"banana\") == \"anana\"\nassert func(\"level\") == \"level\"\nassert func(\"abacdfgdcaba\") == \"aba\"\nassert func(\"hello\") == \"ll\"\n"}
{"task_id": 124, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    Create a function that computes the sum of the reciprocals of the integers from 1 to n.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 1.5\nassert func(5) == 2.283333333333333\nassert func(10) == 2.928968253968254\nassert func(100) == 5.187377517639621\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 1.5\nassert func(5) == 2.283333333333333\nassert func(10) == 2.928968253968254\nassert func(100) == 5.187377517639621\n"}
{"task_id": 125, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(array_nums1,array_nums2):\n    '''\n    Create a lambda function to determine the common elements between two arrays.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4], [3, 4, 5, 6]) == [3, 4]\nassert func([7, 8, 9], [1, 2, 3]) == []\nassert func([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\nassert func([4, 5, 6], [1, 2, 3]) == []\nassert func([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]) == [4, 5]\n```", "response_code": "\nassert func([1, 2, 3, 4], [3, 4, 5, 6]) == [3, 4]\nassert func([7, 8, 9], [1, 2, 3]) == []\nassert func([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\nassert func([4, 5, 6], [1, 2, 3]) == []\nassert func([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]) == [4, 5]\n"}
{"task_id": 126, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(tup, x): \n    '''\n    Create a Python function that counts the number of times an element appears in a tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3, 4, 2, 2), 2) == 3\nassert func((5, 5, 5, 5), 5) == 4\nassert func((1, 2, 3, 4), 5) == 0\nassert func(('a', 'b', 'c', 'a', 'a'), 'a') == 3\nassert func((), 1) == 0\n```", "response_code": "\nassert func((1, 2, 3, 4, 2, 2), 2) == 3\nassert func((5, 5, 5, 5), 5) == 4\nassert func((1, 2, 3, 4), 5) == 0\nassert func(('a', 'b', 'c', 'a', 'a'), 'a') == 3\nassert func((), 1) == 0\n"}
{"task_id": 127, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list,element):\n    '''\n    Create a function that inserts an element before every element in a list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], 0) == [0, 1, 0, 2, 0, 3]\nassert func(['a', 'b', 'c'], 'x') == ['x', 'a', 'x', 'b', 'x', 'c']\nassert func([], 5) == []\nassert func([True, False], False) == [False, True, False, False]\nassert func([10, 20, 30, 40], 15) == [15, 10, 15, 20, 15, 30, 15, 40]\n```", "response_code": "\nassert func([1, 2, 3], 0) == [0, 1, 0, 2, 0, 3]\nassert func(['a', 'b', 'c'], 'x') == ['x', 'a', 'x', 'b', 'x', 'c']\nassert func([], 5) == []\nassert func([True, False], False) == [False, True, False, False]\nassert func([10, 20, 30, 40], 15) == [15, 10, 15, 20, 15, 30, 15, 40]\n"}
{"task_id": 128, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import cmath  \ndef func(numbers):    \n    '''\n    Create a Python function that transforms complex numbers into polar coordinates.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1+1j, 2-3j, -4+4j]) == [(1.4142135623730951, 0.7853981633974483), (3.605551275463989, -0.982793723247329), (5.656854249492381, 2.356194490192345)]\nassert func([5+5j, -3-4j, 0+1j]) == [(7.0710678118654755, 0.7853981633974483), (5.0, -2.214297435588181), (1.0, 1.5707963267948966)]\nassert func([3+4j, -2+2j, 1-1j]) == [(5.0, 0.9272952180016122), (2.8284271247461903, 2.356194490192345), (1.4142135623730951, -0.7853981633974483)]\nassert func([0+0j, 1+0j, 0+1j]) == [(0.0, 0.0), (1.0, 0.0), (1.0, 1.5707963267948966)]\nassert func([2+3j, -1-1j, 4-2j]) == [(3.605551275463989, 0.982793723247329), (1.4142135623730951, -2.356194490192345), (4.47213595499958, -0.4636476090008061)]\n```", "response_code": "\nassert func([1+1j, 2-3j, -4+4j]) == [(1.4142135623730951, 0.7853981633974483), (3.605551275463989, -0.982793723247329), (5.656854249492381, 2.356194490192345)]\nassert func([5+5j, -3-4j, 0+1j]) == [(7.0710678118654755, 0.7853981633974483), (5.0, -2.214297435588181), (1.0, 1.5707963267948966)]\nassert func([3+4j, -2+2j, 1-1j]) == [(5.0, 0.9272952180016122), (2.8284271247461903, 2.356194490192345), (1.4142135623730951, -0.7853981633974483)]\nassert func([0+0j, 1+0j, 0+1j]) == [(0.0, 0.0), (1.0, 0.0), (1.0, 1.5707963267948966)]\nassert func([2+3j, -1-1j, 4-2j]) == [(3.605551275463989, 0.982793723247329), (1.4142135623730951, -2.356194490192345), (4.47213595499958, -0.4636476090008061)]\n"}
{"task_id": 129, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a Python function that counts the number of integers in a specified list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == 5\nassert func([10, 20, 30, 40, 50, 60]) == 6\nassert func([100, 200, 300]) == 3\nassert func([0, 0, 0, 0, 0]) == 5\nassert func([]) == 0", "response_code": "assert func([1, 2, 3, 4, 5]) == 5\nassert func([10, 20, 30, 40, 50, 60]) == 6\nassert func([100, 200, 300]) == 3\nassert func([0, 0, 0, 0, 0]) == 5\nassert func([]) == 0"}
{"task_id": 130, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from itertools import combinations_with_replacement \ndef func(l, n):\n    '''\n    Create a function that selects a specified number of colors from a pool of three different colors and generates all possible combinations with repetitions.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['red', 'green', 'blue'], 2) == [('red', 'red'), ('red', 'green'), ('red', 'blue'), ('green', 'green'), ('green', 'blue'), ('blue', 'blue')]\nassert func(['red', 'green', 'blue'], 3) == [('red', 'red', 'red'), ('red', 'red', 'green'), ('red', 'red', 'blue'), ('red', 'green', 'green'), ('red', 'green', 'blue'), ('red', 'blue', 'blue'), ('green', 'green', 'green'), ('green', 'green', 'blue'), ('green', 'blue', 'blue'), ('blue', 'blue', 'blue')]\nassert func(['red', 'green', 'blue'], 1) == [('red',), ('green',), ('blue',)]\nassert func(['red', 'green', 'blue'], 0) == [()]\nassert func(['red', 'green', 'blue'], 4) == [('red', 'red', 'red', 'red'), ('red', 'red', 'red', 'green'), ('red', 'red', 'red', 'blue'), ('red', 'red', 'green', 'green'), ('red', 'red', 'green', 'blue'), ('red', 'red', 'blue', 'blue'), ('red', 'green', 'green', 'green'), ('red', 'green', 'green', 'blue'), ('red', 'green', 'blue', 'blue'), ('red', 'blue', 'blue', 'blue'), ('green', 'green', 'green', 'green'), ('green', 'green', 'green', 'blue'), ('green', 'green', 'blue', 'blue'), ('green', 'blue', 'blue', 'blue'), ('blue', 'blue', 'blue', 'blue')]\n```", "response_code": "\nassert func(['red', 'green', 'blue'], 2) == [('red', 'red'), ('red', 'green'), ('red', 'blue'), ('green', 'green'), ('green', 'blue'), ('blue', 'blue')]\nassert func(['red', 'green', 'blue'], 3) == [('red', 'red', 'red'), ('red', 'red', 'green'), ('red', 'red', 'blue'), ('red', 'green', 'green'), ('red', 'green', 'blue'), ('red', 'blue', 'blue'), ('green', 'green', 'green'), ('green', 'green', 'blue'), ('green', 'blue', 'blue'), ('blue', 'blue', 'blue')]\nassert func(['red', 'green', 'blue'], 1) == [('red',), ('green',), ('blue',)]\nassert func(['red', 'green', 'blue'], 0) == [()]\nassert func(['red', 'green', 'blue'], 4) == [('red', 'red', 'red', 'red'), ('red', 'red', 'red', 'green'), ('red', 'red', 'red', 'blue'), ('red', 'red', 'green', 'green'), ('red', 'red', 'green', 'blue'), ('red', 'red', 'blue', 'blue'), ('red', 'green', 'green', 'green'), ('red', 'green', 'green', 'blue'), ('red', 'green', 'blue', 'blue'), ('red', 'blue', 'blue', 'blue'), ('green', 'green', 'green', 'green'), ('green', 'green', 'green', 'blue'), ('green', 'green', 'blue', 'blue'), ('green', 'blue', 'blue', 'blue'), ('blue', 'blue', 'blue', 'blue')]\n"}
{"task_id": 131, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    Create a Python function that calculates the quantity of prime numbers that are smaller than a specified non-negative number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(10) == 4\nassert func(20) == 8\nassert func(50) == 15\nassert func(100) == 25\nassert func(200) == 46", "response_code": "assert func(10) == 4\nassert func(20) == 8\nassert func(50) == 15\nassert func(100) == 25\nassert func(200) == 46"}
{"task_id": 132, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a,b):\n    '''\n    Create a function that exchanges the values of two numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 5) == (5, 3)\nassert func(-2, 8) == (8, -2)\nassert func(0, 0) == (0, 0)\nassert func(100, -50) == (-50, 100)\nassert func(7, 7) == (7, 7)\n```", "response_code": "\nassert func(3, 5) == (5, 3)\nassert func(-2, 8) == (8, -2)\nassert func(0, 0) == (0, 0)\nassert func(100, -50) == (-50, 100)\nassert func(7, 7) == (7, 7)\n"}
{"task_id": 133, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function that maximizes two given tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (4, 5, 6)) == (4, 5, 6)\nassert func((10, 20, 30), (4, 5, 6)) == (10, 20, 30)\nassert func((1, 2, 3), (1, 2, 3)) == (1, 2, 3)\nassert func((100, 200, 300), (50, 60, 70)) == (100, 200, 300)\nassert func((5, 10, 15), (5, 10, 15)) == (5, 10, 15)\n```", "response_code": "\nassert func((1, 2, 3), (4, 5, 6)) == (4, 5, 6)\nassert func((10, 20, 30), (4, 5, 6)) == (10, 20, 30)\nassert func((1, 2, 3), (1, 2, 3)) == (1, 2, 3)\nassert func((100, 200, 300), (50, 60, 70)) == (100, 200, 300)\nassert func((5, 10, 15), (5, 10, 15)) == (5, 10, 15)\n"}
{"task_id": 134, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function that identifies the nth Newman\u2013Shanks\u2013Williams prime.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 5\nassert func(2) == 11\nassert func(3) == 17\nassert func(4) == 29\nassert func(5) == 41", "response_code": "assert func(1) == 5\nassert func(2) == 11\nassert func(3) == 17\nassert func(4) == 29\nassert func(5) == 41"}
{"task_id": 135, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function that divides the tuples provided using mathematical operations.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((10, 5), (2, 3)) == (5.0, 1.6666666666666667)\nassert func((15, 6), (3, 2)) == (5.0, 3.0)\nassert func((8, 4), (2, 2)) == (4.0, 2.0)\nassert func((20, 10), (4, 5)) == (5.0, 2.0)\nassert func((12, 6), (3, 2)) == (4.0, 3.0)\n```", "response_code": "\nassert func((10, 5), (2, 3)) == (5.0, 1.6666666666666667)\nassert func((15, 6), (3, 2)) == (5.0, 3.0)\nassert func((8, 4), (2, 2)) == (4.0, 2.0)\nassert func((20, 10), (4, 5)) == (5.0, 2.0)\nassert func((12, 6), (3, 2)) == (4.0, 3.0)\n"}
{"task_id": 136, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1, L):\n    '''\n    Create a function that divides a specified list into two parts, with the length of the first part predetermined.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])\nassert func([10, 20, 30, 40, 50, 60], 3) == ([10, 20, 30], [40, 50, 60])\nassert func([100, 200, 300, 400], 0) == ([], [100, 200, 300, 400])\nassert func([7, 14, 21, 28, 35, 42, 49], 4) == ([7, 14, 21, 28], [35, 42, 49])\nassert func([8, 16, 24, 32, 40], 5) == ([8, 16, 24, 32, 40], [])\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])\nassert func([10, 20, 30, 40, 50, 60], 3) == ([10, 20, 30], [40, 50, 60])\nassert func([100, 200, 300, 400], 0) == ([], [100, 200, 300, 400])\nassert func([7, 14, 21, 28, 35, 42, 49], 4) == ([7, 14, 21, 28], [35, 42, 49])\nassert func([8, 16, 24, 32, 40], 5) == ([8, 16, 24, 32, 40], [])\n"}
{"task_id": 137, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(h_age):\n    '''\n    Create a function that determines a dog's age in terms of dog years.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 15\nassert func(2) == 24\nassert func(5) == 39\nassert func(10) == 64\nassert func(15) == 84\n```", "response_code": "\nassert func(1) == 15\nassert func(2) == 24\nassert func(5) == 39\nassert func(10) == 64\nassert func(15) == 84\n"}
{"task_id": 138, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(S, step):\n    '''\n    Create a function that divides a list into sublists containing every nth element.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == [[1, 3, 5, 7, 9], [2, 4, 6, 8]]\nassert func([10, 20, 30, 40, 50, 60], 3) == [[10, 40], [20, 50], [30, 60]]\nassert func([100, 200, 300, 400, 500], 1) == [[100], [200], [300], [400], [500]]\nassert func([11, 22, 33, 44, 55, 66, 77], 4) == [[11, 55], [22, 66], [33, 77], [44]]\nassert func([111, 222, 333, 444, 555, 666, 777, 888], 5) == [[111, 666], [222, 777], [333, 888], [444], [555]]\n```", "response_code": "\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == [[1, 3, 5, 7, 9], [2, 4, 6, 8]]\nassert func([10, 20, 30, 40, 50, 60], 3) == [[10, 40], [20, 50], [30, 60]]\nassert func([100, 200, 300, 400, 500], 1) == [[100], [200], [300], [400], [500]]\nassert func([11, 22, 33, 44, 55, 66, 77], 4) == [[11, 55], [22, 66], [33, 77], [44]]\nassert func([111, 222, 333, 444, 555, 666, 777, 888], 5) == [[111, 666], [222, 777], [333, 888], [444], [555]]\n"}
{"task_id": 139, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l):\n    '''\n    Create a function that calculates the lateral surface area of a cube.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(3) == 54\nassert func(5) == 150\nassert func(0) == 0\nassert func(10) == 600\nassert func(2.5) == 30", "response_code": "assert func(3) == 54\nassert func(5) == 150\nassert func(0) == 0\nassert func(10) == 600\nassert func(2.5) == 30"}
{"task_id": 140, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):  \n    '''\n    Create a Python function that calculates the sum of the squares of the first n odd natural numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1  # 1^2 = 1\nassert func(2) == 10  # 1^2 + 3^2 = 1 + 9 = 10\nassert func(3) == 35  # 1^2 + 3^2 + 5^2 = 1 + 9 + 25 = 35\nassert func(4) == 84  # 1^2 + 3^2 + 5^2 + 7^2 = 1 + 9 + 25 + 49 = 84\nassert func(5) == 165  # 1^2 + 3^2 + 5^2 + 7^2 + 9^2 = 1 + 9 + 25 + 49 + 81 = 165\n```", "response_code": "\nassert func(1) == 1  # 1^2 = 1\nassert func(2) == 10  # 1^2 + 3^2 = 1 + 9 = 10\nassert func(3) == 35  # 1^2 + 3^2 + 5^2 = 1 + 9 + 25 = 35\nassert func(4) == 84  # 1^2 + 3^2 + 5^2 + 7^2 = 1 + 9 + 25 + 49 = 84\nassert func(5) == 165  # 1^2 + 3^2 + 5^2 + 7^2 + 9^2 = 1 + 9 + 25 + 49 + 81 = 165\n"}
{"task_id": 141, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function that calculates the nth star number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 1\nassert func(2) == 13\nassert func(3) == 37\nassert func(4) == 73\nassert func(5) == 121", "response_code": "assert func(1) == 1\nassert func(2) == 13\nassert func(3) == 37\nassert func(4) == 73\nassert func(5) == 121"}
{"task_id": 142, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(k):\n    '''\n    Create a function that determines the ASCII value of a character.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func('A') == 65\nassert func('a') == 97\nassert func('1') == 49\nassert func('!') == 33\nassert func(' ') == 32\n```", "response_code": "\nassert func('A') == 65\nassert func('a') == 97\nassert func('1') == 49\nassert func('!') == 33\nassert func(' ') == 32\n"}
{"task_id": 143, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):  \n    '''\n    Create a Python function that calculates the total of even numbers located at even indexes.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5, 6]) == 6  # Output: 2 (index 0) + 4 (index 2) + 6 (index 4) = 12\nassert func([2, 4, 6, 8, 10]) == 20  # Output: 2 (index 0) + 6 (index 2) + 10 (index 4) = 18\nassert func([1, 3, 5, 7, 9]) == 0  # No even numbers at even indexes\nassert func([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 20  # Output: 0 (index 0) + 2 (index 2) + 4 (index 4) + 6 (index 6) + 8 (index 8) = 20\nassert func([10, 20, 30, 40, 50, 60, 70, 80, 90]) == 240  # Output: 10 (index 0) + 30 (index 2) + 50 (index 4) + 70 (index 6) + 90 (index 8) = 250\n```", "response_code": "\nassert func([1, 2, 3, 4, 5, 6]) == 6  # Output: 2 (index 0) + 4 (index 2) + 6 (index 4) = 12\nassert func([2, 4, 6, 8, 10]) == 20  # Output: 2 (index 0) + 6 (index 2) + 10 (index 4) = 18\nassert func([1, 3, 5, 7, 9]) == 0  # No even numbers at even indexes\nassert func([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 20  # Output: 0 (index 0) + 2 (index 2) + 4 (index 4) + 6 (index 6) + 8 (index 8) = 20\nassert func([10, 20, 30, 40, 50, 60, 70, 80, 90]) == 240  # Output: 10 (index 0) + 30 (index 2) + 50 (index 4) + 70 (index 6) + 90 (index 8) = 250\n"}
{"task_id": 144, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a Python function that calculates the sum of the fifth power of the first n even natural numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 2**5\nassert func(2) == 2**5 + 4**5\nassert func(3) == 2**5 + 4**5 + 6**5\nassert func(4) == 2**5 + 4**5 + 6**5 + 8**5\nassert func(5) == 2**5 + 4**5 + 6**5 + 8**5 + 10**5", "response_code": "assert func(1) == 2**5\nassert func(2) == 2**5 + 4**5\nassert func(3) == 2**5 + 4**5 + 6**5\nassert func(4) == 2**5 + 4**5 + 6**5 + 8**5\nassert func(5) == 2**5 + 4**5 + 6**5 + 8**5 + 10**5"}
{"task_id": 145, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Create a function that extracts the last element from a list of tuple records.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [3, 6, 9]\nassert func([('a', 'b', 'c'), ('d', 'e', 'f')]) == ['c', 'f']\nassert func([(10, 20), (30, 40), (50, 60)]) == [20, 40, 60]\nassert func([(True, False), (False, True)]) == [False, True]\nassert func([(1.5, 2.5, 3.5), (4.5, 5.5, 6.5)]) == [3.5, 6.5]\n```", "response_code": "\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [3, 6, 9]\nassert func([('a', 'b', 'c'), ('d', 'e', 'f')]) == ['c', 'f']\nassert func([(10, 20), (30, 40), (50, 60)]) == [20, 40, 60]\nassert func([(True, False), (False, True)]) == [False, True]\nassert func([(1.5, 2.5, 3.5), (4.5, 5.5, 6.5)]) == [3.5, 6.5]\n"}
{"task_id": 146, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function that subtracts the values of one tuple from the values of another tuple at the same index.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (1, 1, 1)) == (0, 1, 2)\nassert func((5, 10, 15), (2, 4, 6)) == (3, 6, 9)\nassert func((0, 0, 0), (1, 2, 3)) == (-1, -2, -3)\nassert func((100, 200, 300), (10, 20, 30)) == (90, 180, 270)\nassert func((7, 8, 9), (7, 8, 9)) == (0, 0, 0)\n```", "response_code": "\nassert func((1, 2, 3), (1, 1, 1)) == (0, 1, 2)\nassert func((5, 10, 15), (2, 4, 6)) == (3, 6, 9)\nassert func((0, 0, 0), (1, 2, 3)) == (-1, -2, -3)\nassert func((100, 200, 300), (10, 20, 30)) == (90, 180, 270)\nassert func((7, 8, 9), (7, 8, 9)) == (0, 0, 0)\n"}
{"task_id": 147, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math  \ndef func( n): \n    '''\n    Create a Python function that calculates the sum of binomial coefficients at even indices.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 1\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 3\nassert func(4) == 6\n```", "response_code": "\nassert func(0) == 1\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 3\nassert func(4) == 6\n"}
{"task_id": 148, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(r,h):\n    '''\n    Create a function that calculates the volume of a cylinder.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1, 1) == 3.141592653589793\nassert func(2, 3) == 37.69911184307752\nassert func(0, 5) == 0.0\nassert func(4, 2) == 100.53096491487338\nassert func(3, 4) == 113.09733552923255\n```", "response_code": "\nassert func(1, 1) == 3.141592653589793\nassert func(2, 3) == 37.69911184307752\nassert func(0, 5) == 0.0\nassert func(4, 2) == 100.53096491487338\nassert func(3, 4) == 113.09733552923255\n"}
{"task_id": 149, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(dict,n):\n    '''\n    Create a function that will sort a dictionary based on its values.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test case 1\nassert func({'a': 3, 'b': 1, 'c': 2}, 3) == {'b': 1, 'c': 2, 'a': 3}\n\n# Test case 2\nassert func({'x': 10, 'y': 5, 'z': 8}, 3) == {'y': 5, 'z': 8, 'x': 10}\n\n# Test case 3\nassert func({'apple': 50, 'banana': 30, 'cherry': 20}, 3) == {'cherry': 20, 'banana': 30, 'apple': 50}\n\n# Test case 4\nassert func({'red': 100, 'green': 200, 'blue': 50}, 3) == {'blue': 50, 'red': 100, 'green': 200}\n\n# Test case 5\nassert func({'dog': 5, 'cat': 5, 'bird': 5}, 3) == {'dog': 5, 'cat': 5, 'bird': 5}\n```", "response_code": "\n# Test case 1\nassert func({'a': 3, 'b': 1, 'c': 2}, 3) == {'b': 1, 'c': 2, 'a': 3}\n\n# Test case 2\nassert func({'x': 10, 'y': 5, 'z': 8}, 3) == {'y': 5, 'z': 8, 'x': 10}\n\n# Test case 3\nassert func({'apple': 50, 'banana': 30, 'cherry': 20}, 3) == {'cherry': 20, 'banana': 30, 'apple': 50}\n\n# Test case 4\nassert func({'red': 100, 'green': 200, 'blue': 50}, 3) == {'blue': 50, 'red': 100, 'green': 200}\n\n# Test case 5\nassert func({'dog': 5, 'cat': 5, 'bird': 5}, 3) == {'dog': 5, 'cat': 5, 'bird': 5}\n"}
{"task_id": 150, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    Create a function that determines the number of occurrences of an element before a specified record in the provided tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3, 4, 2), 2) == 1\nassert func((1, 2, 3, 4, 2, 2, 2), 2) == 1\nassert func((1, 2, 3, 4, 5), 2) == 1\nassert func((1, 2, 3, 4, 5, 2, 2), 2) == 1\nassert func((1, 2, 3, 4, 5, 2, 2, 2), 2) == 1\n```", "response_code": "\nassert func((1, 2, 3, 4, 2), 2) == 1\nassert func((1, 2, 3, 4, 2, 2, 2), 2) == 1\nassert func((1, 2, 3, 4, 5), 2) == 1\nassert func((1, 2, 3, 4, 5, 2, 2), 2) == 1\nassert func((1, 2, 3, 4, 5, 2, 2, 2), 2) == 1\n"}
{"task_id": 151, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function that calculates the decagonal number at position n.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 10\nassert func(2) == 20\nassert func(3) == 30\nassert func(5) == 50\nassert func(10) == 100\n```", "response_code": "\nassert func(1) == 10\nassert func(2) == 20\nassert func(3) == 30\nassert func(5) == 50\nassert func(10) == 100\n"}
{"task_id": 152, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(dlist, item):\n    '''\n    Create a function that uses sequential search to find an element in the provided array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 3) == True\nassert func([10, 20, 30, 40, 50], 25) == False\nassert func(['a', 'b', 'c', 'd', 'e'], 'c') == True\nassert func([True, False, True, False], False) == True\nassert func([], 10) == False\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 3) == True\nassert func([10, 20, 30, 40, 50], 25) == False\nassert func(['a', 'b', 'c', 'd', 'e'], 'c') == True\nassert func([True, False, True, False], False) == True\nassert func([], 10) == False\n"}
{"task_id": 153, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Create a Python function that verifies whether the elements in a provided list are distinct.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == True\nassert func([1, 2, 3, 3, 4, 5]) == False\nassert func(['a', 'b', 'c', 'd']) == True\nassert func(['a', 'b', 'c', 'c', 'd']) == False\nassert func([]) == True", "response_code": "assert func([1, 2, 3, 4, 5]) == True\nassert func([1, 2, 3, 3, 4, 5]) == False\nassert func(['a', 'b', 'c', 'd']) == True\nassert func(['a', 'b', 'c', 'c', 'd']) == False\nassert func([]) == True"}
{"task_id": 154, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums1,nums2):\n    '''\n    Create a function that subtracts two lists using the map and lambda functions.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], [1, 2, 3]) == [0, 0, 0]\nassert func([5, 10, 15], [2, 4, 6]) == [3, 6, 9]\nassert func([10, 20, 30], [5, 10, 15]) == [5, 10, 15]\nassert func([100, 200, 300], [50, 100, 150]) == [50, 100, 150]\nassert func([2, 4, 6], [1, 3, 5]) == [1, 1, 1]\n```", "response_code": "\nassert func([1, 2, 3], [1, 2, 3]) == [0, 0, 0]\nassert func([5, 10, 15], [2, 4, 6]) == [3, 6, 9]\nassert func([10, 20, 30], [5, 10, 15]) == [5, 10, 15]\nassert func([100, 200, 300], [50, 100, 150]) == [50, 100, 150]\nassert func([2, 4, 6], [1, 3, 5]) == [1, 1, 1]\n"}
{"task_id": 155, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a Python function that verifies if the frequency of each digit is not greater than the digit itself.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(123) == True\nassert func(112233) == True\nassert func(444) == True\nassert func(9876543210) == True\nassert func(111222333) == False", "response_code": "assert func(123) == True\nassert func(112233) == True\nassert func(444) == True\nassert func(9876543210) == True\nassert func(111222333) == False"}
{"task_id": 156, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list,element):\n    '''\n    Create a function that verifies if all elements in a list match a specified string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['apple', 'banana', 'cherry'], 'apple') == False\nassert func(['apple', 'apple', 'apple'], 'apple') == True\nassert func(['apple', 'banana', 'apple'], 'apple') == False\nassert func(['apple', 'apple', 'apple', 'apple'], 'apple') == True\nassert func([], 'apple') == False\n```", "response_code": "\nassert func(['apple', 'banana', 'cherry'], 'apple') == False\nassert func(['apple', 'apple', 'apple'], 'apple') == True\nassert func(['apple', 'banana', 'apple'], 'apple') == False\nassert func(['apple', 'apple', 'apple', 'apple'], 'apple') == True\nassert func([], 'apple') == False\n"}
{"task_id": 157, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that identifies a string containing an 'a' followed by two or three 'b'.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"abb\") == True\nassert func(\"abbb\") == True\nassert func(\"abbbb\") == True\nassert func(\"aabbb\") == False\nassert func(\"ab\") == False\n```", "response_code": "\nassert func(\"abb\") == True\nassert func(\"abbb\") == True\nassert func(\"abbbb\") == True\nassert func(\"aabbb\") == False\nassert func(\"ab\") == False\n"}
{"task_id": 158, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a, n, k): \n    '''\n    Create a function that identifies the highest sum of consecutive elements in an array that has been repeated k times.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 3, 2) == 45\nassert func([1, 2, 3, 4, 5], 2, 3) == 30\nassert func([1, 2, 3, 4, 5], 1, 4) == 15\nassert func([5, 5, 5, 5, 5], 2, 3) == 50\nassert func([1, 2, 3, 4, 5], 4, 1) == 60\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 3, 2) == 45\nassert func([1, 2, 3, 4, 5], 2, 3) == 30\nassert func([1, 2, 3, 4, 5], 1, 4) == 15\nassert func([5, 5, 5, 5, 5], 2, 3) == 50\nassert func([1, 2, 3, 4, 5], 4, 1) == 60\n"}
{"task_id": 159, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):  \n    '''\n    Create a Python function that calculates the sum of the squares of the first n even natural numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 4\nassert func(2) == 20\nassert func(3) == 56\nassert func(4) == 120\nassert func(5) == 220\n```", "response_code": "\nassert func(1) == 4\nassert func(2) == 20\nassert func(3) == 56\nassert func(4) == 120\nassert func(5) == 220\n"}
{"task_id": 160, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function that identifies the list of lists with the longest length.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [[6, 7, 8, 9]]\nassert func([[1, 2], [3, 4, 5], [6, 7]]) == [[3, 4, 5]]\nassert func([[1], [2], [3], [4]]) == [[1], [2], [3], [4]]\nassert func([[1, 2, 3, 4], [5, 6, 7], [8, 9]]) == [[1, 2, 3, 4]]\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 2], [3, 4], [5, 6], [7, 8]]\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [[6, 7, 8, 9]]\nassert func([[1, 2], [3, 4, 5], [6, 7]]) == [[3, 4, 5]]\nassert func([[1], [2], [3], [4]]) == [[1], [2], [3], [4]]\nassert func([[1, 2, 3, 4], [5, 6, 7], [8, 9]]) == [[1, 2, 3, 4]]\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 2], [3, 4], [5, 6], [7, 8]]\n"}
{"task_id": 161, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n, k): \n    '''\n    Create a function that calculates the number of possible ways to paint a fence with n posts and k colors, ensuring that no more than 2 adjacent posts have the same color.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 2) == 6\nassert func(4, 3) == 24\nassert func(5, 2) == 20\nassert func(6, 4) == 72\nassert func(2, 3) == 9\n```", "response_code": "\nassert func(3, 2) == 6\nassert func(4, 3) == 24\nassert func(5, 2) == 20\nassert func(6, 4) == 72\nassert func(2, 3) == 9\n"}
{"task_id": 162, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n,m):  \n    '''\n    Create a Python function that calculates the quotient of two numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(10, 2) == 5\nassert func(15, 3) == 5\nassert func(20, 4) == 5\nassert func(25, 5) == 5\nassert func(30, 6) == 5\n```", "response_code": "\nassert func(10, 2) == 5\nassert func(15, 3) == 5\nassert func(20, 4) == 5\nassert func(25, 5) == 5\nassert func(30, 6) == 5\n"}
{"task_id": 163, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(w,h):\n    '''\n    Create a function that calculates the length of the third side in a right-angled triangle.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 4) == 5\nassert func(5, 12) == 13\nassert func(7, 24) == 25\nassert func(8, 15) == 17\nassert func(9, 40) == 41\n```", "response_code": "\nassert func(3, 4) == 5\nassert func(5, 12) == 13\nassert func(7, 24) == 25\nassert func(8, 15) == 17\nassert func(9, 40) == 41\n"}
{"task_id": 164, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(listval):\n    '''\n    Create a function that can determine the highest value within a list containing different data types.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == 5\nassert func([-10, 0, 10, 20, 30]) == 30\nassert func(['a', 'b', 'c', 'd', 'e']) == 'e'\nassert func([True, False, True, False]) == True\nassert func([1, 'a', True, 5.5]) == 5.5", "response_code": "assert func([1, 2, 3, 4, 5]) == 5\nassert func([-10, 0, 10, 20, 30]) == 30\nassert func(['a', 'b', 'c', 'd', 'e']) == 'e'\nassert func([True, False, True, False]) == True\nassert func([1, 'a', True, 5.5]) == 5.5"}
{"task_id": 165, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(number):\n    '''\n    Create a function that calculates the total sum of a number's divisors.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(6) == 12\nassert func(10) == 8\nassert func(16) == 15\nassert func(28) == 28\nassert func(100) == 117\n```", "response_code": "\nassert func(6) == 12\nassert func(10) == 8\nassert func(16) == 15\nassert func(28) == 28\nassert func(100) == 117\n"}
{"task_id": 166, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr): \n    '''\n    Create a Python function that calculates the number of inversions in an array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 0\nassert func([5, 4, 3, 2, 1]) == 10\nassert func([2, 4, 1, 3, 5]) == 3\nassert func([1, 1, 1, 1, 1]) == 0\nassert func([5, 3, 2, 4, 1]) == 8\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 0\nassert func([5, 4, 3, 2, 1]) == 10\nassert func([2, 4, 1, 3, 5]) == 3\nassert func([1, 1, 1, 1, 1]) == 0\nassert func([5, 3, 2, 4, 1]) == 8\n"}
{"task_id": 167, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function that can flatten a nested list structure.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([[1,2,3],[4,5],[6]]) == [1,2,3,4,5,6]\nassert func([[1,2],[3,[4,5]],[6]]) == [1,2,3,4,5,6]\nassert func([[1],[2],[3],[4]]) == [1,2,3,4]\nassert func([[1,2,3,4]]) == [1,2,3,4]\nassert func([1,2,3,4]) == [1,2,3,4]", "response_code": "assert func([[1,2,3],[4,5],[6]]) == [1,2,3,4,5,6]\nassert func([[1,2],[3,[4,5]],[6]]) == [1,2,3,4,5,6]\nassert func([[1],[2],[3],[4]]) == [1,2,3,4]\nassert func([[1,2,3,4]]) == [1,2,3,4]\nassert func([1,2,3,4]) == [1,2,3,4]"}
{"task_id": 168, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from collections import defaultdict\ndef func(stdata):\n    '''\n    Create a function that calculates the highest total value from a list of tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test case 1\nstdata = [('A', 10), ('B', 20), ('C', 15)]\nassert func(stdata) == 45\n\n# Test case 2\nstdata = [('X', 5), ('Y', 10), ('Z', 8)]\nassert func(stdata) == 23\n\n# Test case 3\nstdata = [('P', 25), ('Q', 30), ('R', 35)]\nassert func(stdata) == 90\n\n# Test case 4\nstdata = [('M', 12), ('N', 18), ('O', 15)]\nassert func(stdata) == 45\n\n# Test case 5\nstdata = [('D', 7), ('E', 9), ('F', 11)]\nassert func(stdata) == 27\n```", "response_code": "\n# Test case 1\nstdata = [('A', 10), ('B', 20), ('C', 15)]\nassert func(stdata) == 45\n\n# Test case 2\nstdata = [('X', 5), ('Y', 10), ('Z', 8)]\nassert func(stdata) == 23\n\n# Test case 3\nstdata = [('P', 25), ('Q', 30), ('R', 35)]\nassert func(stdata) == 90\n\n# Test case 4\nstdata = [('M', 12), ('N', 18), ('O', 15)]\nassert func(stdata) == 45\n\n# Test case 5\nstdata = [('D', 7), ('E', 9), ('F', 11)]\nassert func(stdata) == 27\n"}
{"task_id": 169, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function that calculates the number of binary sequences with a length of 2n where the sum of the first n bits is equal to the sum of the last n bits.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 2\nassert func(2) == 6\nassert func(3) == 20\nassert func(4) == 70\nassert func(5) == 252\n```", "response_code": "\nassert func(1) == 2\nassert func(2) == 6\nassert func(3) == 20\nassert func(4) == 70\nassert func(5) == 252\n"}
{"task_id": 170, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(d):\n    '''\n    Create a function that determines the depth of a dictionary.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func({}) == 1\nassert func({'a': 1}) == 2\nassert func({'a': {'b': 2}}) == 3\nassert func({'a': {'b': {'c': 3}}}) == 4\nassert func({'a': {'b': {'c': {'d': 4}}}}) == 5", "response_code": "assert func({}) == 1\nassert func({'a': 1}) == 2\nassert func({'a': {'b': 2}}) == 3\nassert func({'a': {'b': {'c': 3}}}) == 4\nassert func({'a': {'b': {'c': {'d': 4}}}}) == 5"}
{"task_id": 171, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr,ranges,rotations,index) :  \n    '''\n    Create a Python function that can determine the element at a specified index after a certain number of rotations.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], [(0, 2), (1, 3)], 2, 3) == 4\nassert func([10, 20, 30, 40, 50], [(1, 4), (0, 3)], 1, 2) == 30\nassert func([5, 10, 15, 20, 25], [(0, 3), (2, 4)], 3, 1) == 20\nassert func([100, 200, 300, 400, 500], [(2, 3), (0, 2)], 4, 0) == 300\nassert func([2, 4, 6, 8, 10], [(1, 2), (3, 4)], 1, 4) == 8\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], [(0, 2), (1, 3)], 2, 3) == 4\nassert func([10, 20, 30, 40, 50], [(1, 4), (0, 3)], 1, 2) == 30\nassert func([5, 10, 15, 20, 25], [(0, 3), (2, 4)], 3, 1) == 20\nassert func([100, 200, 300, 400, 500], [(2, 3), (0, 2)], 4, 0) == 300\nassert func([2, 4, 6, 8, 10], [(1, 2), (3, 4)], 1, 4) == 8\n"}
{"task_id": 172, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(words):\n    '''\n    Create a function that compares two words from a list of words that all begin with the letter 'p'.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['python', 'pear', 'peach', 'potato']) == [('pear', 'peach'), ('pear', 'potato'), ('peach', 'potato')]\nassert func(['pencil', 'pen', 'paper', 'phone']) == [('pen', 'paper'), ('pen', 'phone'), ('paper', 'phone')]\nassert func(['penguin', 'parrot', 'panda', 'peacock']) == [('parrot', 'panda'), ('parrot', 'peacock'), ('panda', 'peacock')]\nassert func(['piano', 'painting', 'photograph', 'poem']) == [('painting', 'photograph'), ('painting', 'poem'), ('photograph', 'poem')]\nassert func(['pottery', 'puzzle', 'paint', 'pasta']) == [('puzzle', 'paint'), ('puzzle', 'pasta'), ('paint', 'pasta')]\n```", "response_code": "\nassert func(['python', 'pear', 'peach', 'potato']) == [('pear', 'peach'), ('pear', 'potato'), ('peach', 'potato')]\nassert func(['pencil', 'pen', 'paper', 'phone']) == [('pen', 'paper'), ('pen', 'phone'), ('paper', 'phone')]\nassert func(['penguin', 'parrot', 'panda', 'peacock']) == [('parrot', 'panda'), ('parrot', 'peacock'), ('panda', 'peacock')]\nassert func(['piano', 'painting', 'photograph', 'poem']) == [('painting', 'photograph'), ('painting', 'poem'), ('photograph', 'poem')]\nassert func(['pottery', 'puzzle', 'paint', 'pasta']) == [('puzzle', 'paint'), ('puzzle', 'pasta'), ('paint', 'pasta')]\n"}
{"task_id": 173, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a, n, index, k):\n    '''\n    Create a function that calculates the maximum sum of an increasing subsequence from the beginning up to the ith index, including a specified kth element that comes after i (where k > i).\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 5, 2, 4) == 9\nassert func([1, 2, 3, 4, 5], 5, 1, 3) == 6\nassert func([5, 4, 3, 2, 1], 5, 2, 4) == 5\nassert func([5, 4, 3, 2, 1], 5, 3, 5) == 9\nassert func([10, 20, 30, 40, 50], 5, 0, 2) == 30\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 5, 2, 4) == 9\nassert func([1, 2, 3, 4, 5], 5, 1, 3) == 6\nassert func([5, 4, 3, 2, 1], 5, 2, 4) == 5\nassert func([5, 4, 3, 2, 1], 5, 3, 5) == 9\nassert func([10, 20, 30, 40, 50], 5, 0, 2) == 30\n"}
{"task_id": 174, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from copy import deepcopy\ndef func(tuplex,m,n):\n    '''\n    Create a function that retrieves the colon of a tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\ntuplex = (1, 2, 3, 4, 5)\nm = 1\nn = 3\nassert func(tuplex, m, n) == (2, 3, 4)\n\ntuplex = (10, 20, 30, 40, 50, 60)\nm = 2\nn = 4\nassert func(tuplex, m, n) == (30, 40)\n\ntuplex = (100, 200, 300, 400)\nm = 0\nn = 2\nassert func(tuplex, m, n) == (100, 200)\n\ntuplex = (5, 10, 15, 20, 25)\nm = 3\nn = 4\nassert func(tuplex, m, n) == (20, 25)\n\ntuplex = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\nm = 5\nn = 9\nassert func(tuplex, m, n) == (5, 6, 7, 8, 9)\n```", "response_code": "\ntuplex = (1, 2, 3, 4, 5)\nm = 1\nn = 3\nassert func(tuplex, m, n) == (2, 3, 4)\n\ntuplex = (10, 20, 30, 40, 50, 60)\nm = 2\nn = 4\nassert func(tuplex, m, n) == (30, 40)\n\ntuplex = (100, 200, 300, 400)\nm = 0\nn = 2\nassert func(tuplex, m, n) == (100, 200)\n\ntuplex = (5, 10, 15, 20, 25)\nm = 3\nn = 4\nassert func(tuplex, m, n) == (20, 25)\n\ntuplex = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\nm = 5\nn = 9\nassert func(tuplex, m, n) == (5, 6, 7, 8, 9)\n"}
{"task_id": 175, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums1, nums2, N):\n    '''\n    Create a function that identifies the specified number of highest products from two provided lists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], [4, 5, 6], 1) == [18]\nassert func([1, 2, 3], [4, 5, 6], 2) == [18, 15]\nassert func([1, 2, 3], [4, 5, 6], 3) == [18, 15, 12]\nassert func([5, 10, 15], [2, 4, 6], 2) == [150, 120]\nassert func([5, 10, 15], [2, 4, 6], 3) == [150, 120, 90]\n```", "response_code": "\nassert func([1, 2, 3], [4, 5, 6], 1) == [18]\nassert func([1, 2, 3], [4, 5, 6], 2) == [18, 15]\nassert func([1, 2, 3], [4, 5, 6], 3) == [18, 15, 12]\nassert func([5, 10, 15], [2, 4, 6], 2) == [150, 120]\nassert func([5, 10, 15], [2, 4, 6], 3) == [150, 120, 90]\n"}
{"task_id": 176, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a,b):   \n    '''\n    Create a Python function that determines the larger of two numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 5) == 5\nassert func(10, 10) == 10\nassert func(-2, 7) == 7\nassert func(100, 50) == 100\nassert func(-10, -5) == -5\n```", "response_code": "\nassert func(3, 5) == 5\nassert func(10, 10) == 10\nassert func(-2, 7) == 7\nassert func(100, 50) == 100\nassert func(-10, -5) == -5\n"}
{"task_id": 177, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1):\n    '''\n    Create a function that transforms a provided string into a tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\") == ('h', 'e', 'l', 'l', 'o')\nassert func(\"12345\") == ('1', '2', '3', '4', '5')\nassert func(\"abcde\") == ('a', 'b', 'c', 'd', 'e')\nassert func(\"\") == ()\nassert func(\"testing 123\") == ('t', 'e', 's', 't', 'i', 'n', 'g', ' ', '1', '2', '3')", "response_code": "assert func(\"hello\") == ('h', 'e', 'l', 'l', 'o')\nassert func(\"12345\") == ('1', '2', '3', '4', '5')\nassert func(\"abcde\") == ('a', 'b', 'c', 'd', 'e')\nassert func(\"\") == ()\nassert func(\"testing 123\") == ('t', 'e', 's', 't', 'i', 'n', 'g', ' ', '1', '2', '3')"}
{"task_id": 178, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a Python function that will identify and set the leftmost bit that is not currently set.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 1\nassert func(1) == 2\nassert func(5) == 6\nassert func(15) == 16\nassert func(255) == 256\n```", "response_code": "\nassert func(0) == 1\nassert func(1) == 2\nassert func(5) == 6\nassert func(15) == 16\nassert func(255) == 256\n"}
{"task_id": 179, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(r,h):\n    '''\n    Create a function that calculates the volume of a cone.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 4) == math.pi * 3**2 * 4 / 3\nassert func(5, 7) == math.pi * 5**2 * 7 / 3\nassert func(1, 10) == math.pi * 1**2 * 10 / 3\nassert func(0, 5) == 0\nassert func(8, 2) == math.pi * 8**2 * 2 / 3\n```", "response_code": "\nassert func(3, 4) == math.pi * 3**2 * 4 / 3\nassert func(5, 7) == math.pi * 5**2 * 7 / 3\nassert func(1, 10) == math.pi * 1**2 * 10 / 3\nassert func(0, 5) == 0\nassert func(8, 2) == math.pi * 8**2 * 2 / 3\n"}
{"task_id": 180, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a Python function that determines the largest power of 2 that is less than or equal to n.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(10) == 8\nassert func(20) == 16\nassert func(5) == 4\nassert func(100) == 64\nassert func(256) == 256", "response_code": "assert func(10) == 8\nassert func(20) == 16\nassert func(5) == 4\nassert func(100) == 64\nassert func(256) == 256"}
{"task_id": 181, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function that calculates the nth Lucas number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 2\nassert func(1) == 1\nassert func(5) == 11\nassert func(10) == 123\nassert func(15) == 1364\n```", "response_code": "\nassert func(0) == 2\nassert func(1) == 1\nassert func(5) == 11\nassert func(10) == 123\nassert func(15) == 1364\n"}
{"task_id": 182, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list_, string):\n    '''\n    Create a function that adds a specified string to the start of each item in a list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['apple', 'banana', 'cherry'], 'fruit_') == ['fruit_apple', 'fruit_banana', 'fruit_cherry']\nassert func([1, 2, 3, 4], 'number_') == ['number_1', 'number_2', 'number_3', 'number_4']\nassert func(['hello', 'world'], 'greetings_') == ['greetings_hello', 'greetings_world']\nassert func([], 'empty_') == []\nassert func(['a'], 'single_') == ['single_a']\n```", "response_code": "\nassert func(['apple', 'banana', 'cherry'], 'fruit_') == ['fruit_apple', 'fruit_banana', 'fruit_cherry']\nassert func([1, 2, 3, 4], 'number_') == ['number_1', 'number_2', 'number_3', 'number_4']\nassert func(['hello', 'world'], 'greetings_') == ['greetings_hello', 'greetings_world']\nassert func([], 'empty_') == []\nassert func(['a'], 'single_') == ['single_a']\n"}
{"task_id": 183, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l1, l2, l3):\n    '''\n    Create a function that converts multiple lists into a nested dictionary.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], ['a', 'b', 'c'], ['x', 'y', 'z']) == {1: {'a': 'x', 'b': 'y', 'c': 'z'}}\nassert func([10, 20], ['apple', 'banana'], ['red', 'yellow']) == {10: {'apple': 'red', 'banana': 'yellow'}}\nassert func([100], ['one'], ['first']) == {100: {'one': 'first'}}\nassert func([], [], []) == {}\nassert func([1, 2, 3], ['a', 'b'], ['x', 'y', 'z']) == {1: {'a': 'x', 'b': 'y'}, 2: {'a': 'z'}}\n```", "response_code": "\nassert func([1, 2, 3], ['a', 'b', 'c'], ['x', 'y', 'z']) == {1: {'a': 'x', 'b': 'y', 'c': 'z'}}\nassert func([10, 20], ['apple', 'banana'], ['red', 'yellow']) == {10: {'apple': 'red', 'banana': 'yellow'}}\nassert func([100], ['one'], ['first']) == {100: {'one': 'first'}}\nassert func([], [], []) == {}\nassert func([1, 2, 3], ['a', 'b'], ['x', 'y', 'z']) == {1: {'a': 'x', 'b': 'y'}, 2: {'a': 'z'}}\n"}
{"task_id": 184, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    Create a function that calculates the highest sum achievable by utilizing the equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    pass\n\n# check the correctness of func \nassert "}], "response": "```python\nassert func(10) == 12\nassert func(20) == 21\nassert func(30) == 31\nassert func(50) == 52\nassert func(100) == 105\n```", "response_code": "\nassert func(10) == 12\nassert func(20) == 21\nassert func(30) == 31\nassert func(50) == 52\nassert func(100) == 105\n"}
{"task_id": 185, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(input_list):\n    '''\n    Create a lambda function to determine the list with the longest length.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]\nassert func([[1, 2], [3, 4, 5], [6, 7]]) == [3, 4, 5]\nassert func([[1], [2], [3], [4]]) == [1]\nassert func([[1, 2, 3, 4], [5, 6, 7], [8, 9]]) == [1, 2, 3, 4]\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == [1, 2]\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]\nassert func([[1, 2], [3, 4, 5], [6, 7]]) == [3, 4, 5]\nassert func([[1], [2], [3], [4]]) == [1]\nassert func([[1, 2, 3, 4], [5, 6, 7], [8, 9]]) == [1, 2, 3, 4]\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == [1, 2]\n"}
{"task_id": 186, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    Create a function that determines whether a given tuple is unique or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3, 4)) == True\nassert func((1, 2, 2, 4)) == False\nassert func(('a', 'b', 'c')) == True\nassert func(('a', 'b', 'a')) == False\nassert func(()) == True\n```", "response_code": "\nassert func((1, 2, 3, 4)) == True\nassert func((1, 2, 2, 4)) == False\nassert func(('a', 'b', 'c')) == True\nassert func(('a', 'b', 'a')) == False\nassert func(()) == True\n"}
{"task_id": 187, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1):\n    '''\n    Create a Python function that identifies the initial character in a provided string that does not repeat.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\") == \"h\"\nassert func(\"racecar\") == \"e\"\nassert func(\"apple\") == \"a\"\nassert func(\"banana\") == \"b\"\nassert func(\"mississippi\") == \"m\"", "response_code": "assert func(\"hello\") == \"h\"\nassert func(\"racecar\") == \"e\"\nassert func(\"apple\") == \"a\"\nassert func(\"banana\") == \"b\"\nassert func(\"mississippi\") == \"m\""}
{"task_id": 188, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef func(string): \n    '''\n    Create a function that uses regex to determine if a string begins and ends with the same character.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == False\nassert func(\"level\") == True\nassert func(\"racecar\") == True\nassert func(\"python\") == False\nassert func(\"a\") == True\n```", "response_code": "\nassert func(\"hello\") == False\nassert func(\"level\") == True\nassert func(\"racecar\") == True\nassert func(\"python\") == False\nassert func(\"a\") == True\n"}
{"task_id": 189, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a,b,c):\n    '''\n    Create a function that calculates the median of three given numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1, 2, 3) == 2\nassert func(10, 5, 15) == 10\nassert func(7, 7, 7) == 7\nassert func(-1, -2, -3) == -2\nassert func(100, 200, 150) == 150\n```", "response_code": "\nassert func(1, 2, 3) == 2\nassert func(10, 5, 15) == 10\nassert func(7, 7, 7) == 7\nassert func(-1, -2, -3) == -2\nassert func(100, 200, 150) == 150\n"}
{"task_id": 190, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a function that calculates the total of all the digits in each number within a specified list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([123, 456, 789]) == [6, 15, 24]\nassert func([111, 222, 333]) == [3, 6, 9]\nassert func([9876, 5432, 1098]) == [30, 14, 18]\nassert func([87654, 321, 987]) == [30, 6, 24]\nassert func([555, 666, 777]) == [15, 18, 21]", "response_code": "assert func([123, 456, 789]) == [6, 15, 24]\nassert func([111, 222, 333]) == [3, 6, 9]\nassert func([9876, 5432, 1098]) == [30, 14, 18]\nassert func([87654, 321, 987]) == [30, 6, 24]\nassert func([555, 666, 777]) == [15, 18, 21]"}
{"task_id": 191, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function that calculates the bitwise xor operation on the provided tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((0, 1, 0, 1), (1, 0, 1, 0)) == (1, 1, 1, 1)\nassert func((1, 1, 0, 0), (1, 0, 1, 0)) == (0, 1, 1, 0)\nassert func((1, 0, 1, 0), (0, 1, 0, 1)) == (1, 1, 1, 1)\nassert func((1, 1, 1, 1), (0, 0, 0, 0)) == (1, 1, 1, 1)\nassert func((0, 0, 0, 0), (1, 1, 1, 1)) == (1, 1, 1, 1)\n```", "response_code": "\nassert func((0, 1, 0, 1), (1, 0, 1, 0)) == (1, 1, 1, 1)\nassert func((1, 1, 0, 0), (1, 0, 1, 0)) == (0, 1, 1, 0)\nassert func((1, 0, 1, 0), (0, 1, 0, 1)) == (1, 1, 1, 1)\nassert func((1, 1, 1, 1), (0, 0, 0, 0)) == (1, 1, 1, 1)\nassert func((0, 0, 0, 0), (1, 1, 1, 1)) == (1, 1, 1, 1)\n"}
{"task_id": 192, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Create a function that retrieves the occurrence of distinct tuples in the provided list without considering the order.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (2, 1), (3, 4), (4, 3)]) == 2\nassert func([(1, 2), (2, 1), (1, 2), (2, 1)]) == 1\nassert func([(1, 2), (2, 1), (1, 2), (2, 1), (3, 4)]) == 2\nassert func([(1, 2), (2, 1), (1, 2), (2, 1), (3, 4), (4, 3)]) == 2\nassert func([(1, 2), (2, 1), (1, 2), (2, 1), (3, 4), (4, 3), (5, 6)]) == 3\n```", "response_code": "\nassert func([(1, 2), (2, 1), (3, 4), (4, 3)]) == 2\nassert func([(1, 2), (2, 1), (1, 2), (2, 1)]) == 1\nassert func([(1, 2), (2, 1), (1, 2), (2, 1), (3, 4)]) == 2\nassert func([(1, 2), (2, 1), (1, 2), (2, 1), (3, 4), (4, 3)]) == 2\nassert func([(1, 2), (2, 1), (1, 2), (2, 1), (3, 4), (4, 3), (5, 6)]) == 3\n"}
{"task_id": 193, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function that adds the elements of two nested tuples together based on their indexes.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(((1, 2), (3, 4)), ((5, 6), (7, 8))) == ((6, 8), (10, 12))\nassert func(((10, 20), (30, 40)), ((50, 60), (70, 80))) == ((60, 80), (100, 120))\nassert func(((0, 0), (0, 0)), ((1, 1), (1, 1))) == ((1, 1), (1, 1))\nassert func(((1, 2, 3), (4, 5, 6)), ((7, 8, 9), (10, 11, 12))) == ((8, 10, 12), (14, 16, 18))\nassert func(((1,), (2,)), ((3,), (4,))) == ((4,), (6,))\n```", "response_code": "\nassert func(((1, 2), (3, 4)), ((5, 6), (7, 8))) == ((6, 8), (10, 12))\nassert func(((10, 20), (30, 40)), ((50, 60), (70, 80))) == ((60, 80), (100, 120))\nassert func(((0, 0), (0, 0)), ((1, 1), (1, 1))) == ((1, 1), (1, 1))\nassert func(((1, 2, 3), (4, 5, 6)), ((7, 8, 9), (10, 11, 12))) == ((8, 10, 12), (14, 16, 18))\nassert func(((1,), (2,)), ((3,), (4,))) == ((4,), (6,))\n"}
{"task_id": 194, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a,b):   \n    '''\n    Create a Python function that determines the smaller of two numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 5) == 3\nassert func(10, 2) == 2\nassert func(-1, 0) == -1\nassert func(100, 100) == 100\nassert func(7, 7) == 7\n```", "response_code": "\nassert func(3, 5) == 3\nassert func(10, 2) == 2\nassert func(-1, 0) == -1\nassert func(100, 100) == 100\nassert func(7, 7) == 7\n"}
{"task_id": 195, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(tuplex,tuple1): \n    '''\n    Create a function that verifies if an element is present in a tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func((1, 2, 3), 2) == True\nassert func(('a', 'b', 'c'), 'd') == False\nassert func((10, 20, 30, 40), 30) == True\nassert func(('apple', 'banana', 'cherry'), 'pear') == False\nassert func(('x', 'y', 'z'), 'z') == True", "response_code": "assert func((1, 2, 3), 2) == True\nassert func(('a', 'b', 'c'), 'd') == False\nassert func((10, 20, 30, 40), 30) == True\nassert func(('apple', 'banana', 'cherry'), 'pear') == False\nassert func(('x', 'y', 'z'), 'z') == True"}
{"task_id": 196, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x): \n    '''\n    Create a Python function that determines the parity of a specified number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 'even'\nassert func(1) == 'odd'\nassert func(2) == 'even'\nassert func(15) == 'odd'\nassert func(-4) == 'even'\n```", "response_code": "\nassert func(0) == 'even'\nassert func(1) == 'odd'\nassert func(2) == 'even'\nassert func(15) == 'odd'\nassert func(-4) == 'even'\n"}
{"task_id": 197, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    Create a function that rearranges the digits of a given number to find the next largest number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(123) == 132\nassert func(321) == 123\nassert func(534976) == 536479\nassert func(9876543210) == 1023456789\nassert func(11111) == 11111\n```", "response_code": "\nassert func(123) == 132\nassert func(321) == 123\nassert func(534976) == 536479\nassert func(9876543210) == 1023456789\nassert func(11111) == 11111\n"}
{"task_id": 198, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import heapq\ndef func(nums1, nums2, k):\n    '''\n    Create a function that identifies k pairs, each containing one element from the first array and one element from the second array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1,7,11], [2,4,6], 3) == [(1, 2), (1, 4), (1, 6)]\nassert func([1,1,2], [1,2,3], 2) == [(1, 1), (1, 1)]\nassert func([1,2], [3,4], 1) == [(1, 3)]\nassert func([5,6,7], [1,2,3], 4) == [(5, 1), (5, 2), (5, 3), (6, 1)]\nassert func([3,5,7], [2,4,6], 5) == [(3, 2), (3, 4), (3, 6), (5, 2), (5, 4)]\n```", "response_code": "\nassert func([1,7,11], [2,4,6], 3) == [(1, 2), (1, 4), (1, 6)]\nassert func([1,1,2], [1,2,3], 2) == [(1, 1), (1, 1)]\nassert func([1,2], [3,4], 1) == [(1, 3)]\nassert func([5,6,7], [1,2,3], 4) == [(5, 1), (5, 2), (5, 3), (6, 1)]\nassert func([3,5,7], [2,4,6], 5) == [(3, 2), (3, 4), (3, 6), (5, 2), (5, 4)]\n"}
{"task_id": 199, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function that determines the smallest product from pairs of tuples in a specified list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (3, 4), (5, 6)]) == 2\nassert func([(2, 3), (4, 5), (6, 7)]) == 6\nassert func([(10, 2), (3, 5), (6, 1)]) == 2\nassert func([(1, 1), (2, 2), (3, 3)]) == 1\nassert func([(5, 10), (3, 7), (2, 8)]) == 10\n```", "response_code": "\nassert func([(1, 2), (3, 4), (5, 6)]) == 2\nassert func([(2, 3), (4, 5), (6, 7)]) == 6\nassert func([(10, 2), (3, 5), (6, 1)]) == 2\nassert func([(1, 1), (2, 2), (3, 3)]) == 1\nassert func([(5, 10), (3, 7), (2, 8)]) == 10\n"}
{"task_id": 200, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(listval):\n    '''\n    Create a function that can determine the smallest value within a list containing different data types.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([5, 'a', 3.5, -2]) == -2\nassert func(['hello', 'world', 'python']) == 'hello'\nassert func([True, False, True, False]) == False\nassert func([100, 200, 50, 75]) == 50\nassert func([0.5, 0.1, 0.9, 0.3]) == 0.1\n```", "response_code": "\nassert func([5, 'a', 3.5, -2]) == -2\nassert func(['hello', 'world', 'python']) == 'hello'\nassert func([True, False, True, False]) == False\nassert func([100, 200, 50, 75]) == 50\nassert func([0.5, 0.1, 0.9, 0.3]) == 0.1\n"}
{"task_id": 201, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(word):\n    '''\n    Create a function that uses regex to transform the provided snake case string into camel case.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello_world\") == \"helloWorld\"\nassert func(\"snake_case_example\") == \"snakeCaseExample\"\nassert func(\"this_is_a_test\") == \"thisIsATest\"\nassert func(\"camel_case\") == \"camelCase\"\nassert func(\"another_example\") == \"anotherExample\"\n```", "response_code": "\nassert func(\"hello_world\") == \"helloWorld\"\nassert func(\"snake_case_example\") == \"snakeCaseExample\"\nassert func(\"this_is_a_test\") == \"thisIsATest\"\nassert func(\"camel_case\") == \"camelCase\"\nassert func(\"another_example\") == \"anotherExample\"\n"}
{"task_id": 202, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l):\n    '''\n    Create a Python function that eliminates odd numbers from a provided list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == [2, 4]\nassert func([10, 15, 20, 25, 30]) == [10, 20, 30]\nassert func([11, 13, 17, 19]) == []\nassert func([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10]\nassert func([1, 3, 5, 7, 9]) == []", "response_code": "assert func([1, 2, 3, 4, 5]) == [2, 4]\nassert func([10, 15, 20, 25, 30]) == [10, 20, 30]\nassert func([11, 13, 17, 19]) == []\nassert func([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10]\nassert func([1, 3, 5, 7, 9]) == []"}
{"task_id": 203, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1, n):\n    '''\n    Create a function that retrieves the nth element from a provided list of tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (3, 4), (5, 6)], 0) == (1, 2)\nassert func([(1, 2), (3, 4), (5, 6)], 1) == (3, 4)\nassert func([(1, 2), (3, 4), (5, 6)], 2) == (5, 6)\nassert func([(10, 20), (30, 40), (50, 60)], 1) == (30, 40)\nassert func([(100, 200), (300, 400), (500, 600)], 2) == (500, 600)\n```", "response_code": "\nassert func([(1, 2), (3, 4), (5, 6)], 0) == (1, 2)\nassert func([(1, 2), (3, 4), (5, 6)], 1) == (3, 4)\nassert func([(1, 2), (3, 4), (5, 6)], 2) == (5, 6)\nassert func([(10, 20), (30, 40), (50, 60)], 1) == (30, 40)\nassert func([(100, 200), (300, 400), (500, 600)], 2) == (500, 600)\n"}
{"task_id": 204, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1,list2):  \n    '''\n    Create a Python function that verifies if a value is present in a sequence.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5], 3) == True\nassert func([1, 2, 3, 4, 5], 6) == False\nassert func(['a', 'b', 'c', 'd'], 'c') == True\nassert func(['apple', 'banana', 'cherry'], 'pear') == False\nassert func([True, False, True], False) == True", "response_code": "assert func([1, 2, 3, 4, 5], 3) == True\nassert func([1, 2, 3, 4, 5], 6) == False\nassert func(['a', 'b', 'c', 'd'], 'c') == True\nassert func(['apple', 'banana', 'cherry'], 'pear') == False\nassert func([True, False, True], False) == True"}
{"task_id": 205, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr): \n    '''\n    Create a Python function that identifies the pair of integers with the highest product from a given array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == (4, 5)\nassert func([-10, -3, -5, -2, -1]) == (-10, -1)\nassert func([0, 1, 2, 3, 4]) == (3, 4)\nassert func([-5, -4, -3, -2, -1]) == (-1, -2)\nassert func([10, 20, 30, 40, 50]) == (40, 50)\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == (4, 5)\nassert func([-10, -3, -5, -2, -1]) == (-10, -1)\nassert func([0, 1, 2, 3, 4]) == (3, 4)\nassert func([-5, -4, -3, -2, -1]) == (-1, -2)\nassert func([10, 20, 30, 40, 50]) == (40, 50)\n"}
{"task_id": 206, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(Input): \n    '''\n    Create a function that identifies the first element that is common among all tuples in a given list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([(1, 2, 3), (2, 3, 4), (3, 4, 5)]) == 3\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == None\nassert func([(1, 2, 3), (1, 4, 5), (1, 6, 7)]) == 1\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9), (1, 2, 3)]) == 3\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]) == None", "response_code": "assert func([(1, 2, 3), (2, 3, 4), (3, 4, 5)]) == 3\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == None\nassert func([(1, 2, 3), (1, 4, 5), (1, 6, 7)]) == 1\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9), (1, 2, 3)]) == 3\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]) == None"}
{"task_id": 207, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lst): \n    '''\n    Create a Python function that identifies the sublist with the longest length.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]\nassert func([[1, 2], [3, 4, 5], [6, 7]]) == [3, 4, 5]\nassert func([[1], [2], [3], [4]]) == [1]\nassert func([[1, 2, 3, 4], [5, 6, 7], [8, 9]]) == [1, 2, 3, 4]\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == [1, 2]", "response_code": "assert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]\nassert func([[1, 2], [3, 4, 5], [6, 7]]) == [3, 4, 5]\nassert func([[1], [2], [3], [4]]) == [1]\nassert func([[1, 2, 3, 4], [5, 6, 7], [8, 9]]) == [1, 2, 3, 4]\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == [1, 2]"}
{"task_id": 208, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function that rounds each number in a specified list, then calculates the total sum of the rounded numbers multiplied by the length of the list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1.2, 2.7, 3.5, 4.9]) == 40\nassert func([5.5, 6.1, 7.8]) == 57\nassert func([0.9, 1.1, 2.4, 3.6, 4.9]) == 50\nassert func([2.3, 3.8, 4.2, 5.7, 6.9]) == 70\nassert func([1.5, 2.5, 3.5, 4.5, 5.5]) == 70\n```", "response_code": "\nassert func([1.2, 2.7, 3.5, 4.9]) == 40\nassert func([5.5, 6.1, 7.8]) == 57\nassert func([0.9, 1.1, 2.4, 3.6, 4.9]) == 50\nassert func([2.3, 3.8, 4.2, 5.7, 6.9]) == 70\nassert func([1.5, 2.5, 3.5, 4.5, 5.5]) == 70\n"}
{"task_id": 209, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a Python function that calculates the sum of the cubes of the first n even natural numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 2\nassert func(2) == 2**3 + 4**3\nassert func(3) == 2**3 + 4**3 + 6**3\nassert func(4) == 2**3 + 4**3 + 6**3 + 8**3\nassert func(5) == 2**3 + 4**3 + 6**3 + 8**3 + 10**3\n```", "response_code": "\nassert func(1) == 2\nassert func(2) == 2**3 + 4**3\nassert func(3) == 2**3 + 4**3 + 6**3\nassert func(4) == 2**3 + 4**3 + 6**3 + 8**3\nassert func(5) == 2**3 + 4**3 + 6**3 + 8**3 + 10**3\n"}
{"task_id": 210, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    Create a function that combines each element of a tuple using a specified delimiter.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(('apple', 'banana', 'cherry'), '-') == 'apple-banana-cherry'\nassert func(('hello', 'world'), ' ') == 'hello world'\nassert func(('1', '2', '3'), ',') == '1,2,3'\nassert func(('a', 'b', 'c', 'd'), '') == 'abcd'\nassert func(('cat', 'dog', 'fish'), ' and ') == 'cat and dog and fish'\n```", "response_code": "\nassert func(('apple', 'banana', 'cherry'), '-') == 'apple-banana-cherry'\nassert func(('hello', 'world'), ' ') == 'hello world'\nassert func(('1', '2', '3'), ',') == '1,2,3'\nassert func(('a', 'b', 'c', 'd'), '') == 'abcd'\nassert func(('cat', 'dog', 'fish'), ' and ') == 'cat and dog and fish'\n"}
{"task_id": 211, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):  \n    '''\n    Create a Python function that calculates the average of the cubes of the first n natural numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 4.5\nassert func(3) == 14.67\nassert func(4) == 36\nassert func(5) == 75\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 4.5\nassert func(3) == 14.67\nassert func(4) == 36\nassert func(5) == 75\n"}
{"task_id": 212, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tuple):\n    '''\n    Create a function that retrieves the last element of each string in the provided tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(('hello', 'world')) == ('o', 'd')\nassert func(('apple', 'banana', 'cherry')) == ('e', 'a', 'y')\nassert func(('python', 'java', 'ruby', 'javascript')) == ('n', 'a', 'y', 't')\nassert func(('programming', 'coding', 'testing')) == ('g', 'g', 'g')\nassert func(('12345', '67890')) == ('5', '0')\n```", "response_code": "\nassert func(('hello', 'world')) == ('o', 'd')\nassert func(('apple', 'banana', 'cherry')) == ('e', 'a', 'y')\nassert func(('python', 'java', 'ruby', 'javascript')) == ('n', 'a', 'y', 't')\nassert func(('programming', 'coding', 'testing')) == ('g', 'g', 'g')\nassert func(('12345', '67890')) == ('5', '0')\n"}
{"task_id": 213, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1, x): \n    '''\n    Create a function that calculates the quantity of sublists that include a specific element.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5], [6, 7, 8]], 2) == 1\nassert func([[1, 2, 3], [4, 5], [6, 7, 8]], 4) == 1\nassert func([[1, 2, 3], [4, 5], [6, 7, 8]], 6) == 1\nassert func([[1, 2, 3], [4, 5], [6, 7, 8]], 1) == 1\nassert func([[1, 2, 3], [4, 5], [6, 7, 8]], 9) == 0\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5], [6, 7, 8]], 2) == 1\nassert func([[1, 2, 3], [4, 5], [6, 7, 8]], 4) == 1\nassert func([[1, 2, 3], [4, 5], [6, 7, 8]], 6) == 1\nassert func([[1, 2, 3], [4, 5], [6, 7, 8]], 1) == 1\nassert func([[1, 2, 3], [4, 5], [6, 7, 8]], 9) == 0\n"}
{"task_id": 214, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a lambda function to filter out odd numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == [2, 4]\nassert func([10, 15, 20, 25, 30]) == [10, 20, 30]\nassert func([11, 12, 13, 14, 15]) == [12, 14]\nassert func([100, 101, 102, 103, 104]) == [100, 102, 104]\nassert func([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10]", "response_code": "assert func([1, 2, 3, 4, 5]) == [2, 4]\nassert func([10, 15, 20, 25, 30]) == [10, 20, 30]\nassert func([11, 12, 13, 14, 15]) == [12, 14]\nassert func([100, 101, 102, 103, 104]) == [100, 102, 104]\nassert func([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10]"}
{"task_id": 215, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(dt):\n    '''\n    Create a function that uses regex to change a date from yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"2022-12-31\") == \"31-12-2022\"\nassert func(\"1999-01-15\") == \"15-01-1999\"\nassert func(\"2023-05-20\") == \"20-05-2023\"\nassert func(\"2000-10-05\") == \"05-10-2000\"\nassert func(\"1988-03-08\") == \"08-03-1988\"\n```", "response_code": "\nassert func(\"2022-12-31\") == \"31-12-2022\"\nassert func(\"1999-01-15\") == \"15-01-1999\"\nassert func(\"2023-05-20\") == \"20-05-2023\"\nassert func(\"2000-10-05\") == \"05-10-2000\"\nassert func(\"1988-03-08\") == \"08-03-1988\"\n"}
{"task_id": 216, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(my_list):\n    '''\n    Create a function that utilizes shell sort to arrange the provided array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([4, 2, 7, 1, 5]) == [1, 2, 4, 5, 7]\nassert func([9, 3, 6, 2, 8, 1, 5, 7, 4]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert func([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1]) == [1]\n```", "response_code": "\nassert func([4, 2, 7, 1, 5]) == [1, 2, 4, 5, 7]\nassert func([9, 3, 6, 2, 8, 1, 5, 7, 4]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert func([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([1]) == [1]\n"}
{"task_id": 217, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function that retrieves the individual elements and pairs from two given tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (4, 5, 6)) == ([1, 2, 3], [(1, 4), (2, 5), (3, 6)])\nassert func(('a', 'b', 'c'), ('x', 'y', 'z')) == (['a', 'b', 'c'], [('a', 'x'), ('b', 'y'), ('c', 'z')])\nassert func((10, 20, 30), (100, 200, 300)) == ([10, 20, 30], [(10, 100), (20, 200), (30, 300)])\nassert func(('apple', 'banana', 'cherry'), ('red', 'yellow', 'pink')) == (['apple', 'banana', 'cherry'], [('apple', 'red'), ('banana', 'yellow'), ('cherry', 'pink')])\nassert func((), ()) == ([], [])\n```", "response_code": "\nassert func((1, 2, 3), (4, 5, 6)) == ([1, 2, 3], [(1, 4), (2, 5), (3, 6)])\nassert func(('a', 'b', 'c'), ('x', 'y', 'z')) == (['a', 'b', 'c'], [('a', 'x'), ('b', 'y'), ('c', 'z')])\nassert func((10, 20, 30), (100, 200, 300)) == ([10, 20, 30], [(10, 100), (20, 200), (30, 300)])\nassert func(('apple', 'banana', 'cherry'), ('red', 'yellow', 'pink')) == (['apple', 'banana', 'cherry'], [('apple', 'red'), ('banana', 'yellow'), ('cherry', 'pink')])\nassert func((), ()) == ([], [])\n"}
{"task_id": 218, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a, b, c): \n    '''\n    Create a function that determines the directrix of a parabola.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1, 2, 3) == -1\nassert func(2, -1, 5) == 3.25\nassert func(-3, 4, 2) == 3.5\nassert func(0, 0, 0) == None\nassert func(1, 1, 1) == -0.5", "response_code": "assert func(1, 2, 3) == -1\nassert func(2, -1, 5) == 3.25\nassert func(-3, 4, 2) == 3.5\nassert func(0, 0, 0) == None\nassert func(1, 1, 1) == -0.5"}
{"task_id": 219, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1, list2):\n    '''\n    Create a function that accepts two lists and outputs true if they share at least one element.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], [4, 5, 6]) == False\nassert func([1, 2, 3], [3, 4, 5]) == True\nassert func([1, 2, 3], [4, 5, 6, 3]) == True\nassert func([], [4, 5, 6]) == False\nassert func([], []) == False\n```", "response_code": "\nassert func([1, 2, 3], [4, 5, 6]) == False\nassert func([1, 2, 3], [3, 4, 5]) == True\nassert func([1, 2, 3], [4, 5, 6, 3]) == True\nassert func([], [4, 5, 6]) == False\nassert func([], []) == False\n"}
{"task_id": 220, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(base1,base2,height):\n    '''\n    Create a function that calculates the median of a trapezium.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 5, 4) == 4.0\nassert func(2, 4, 3) == 2.5\nassert func(6, 8, 5) == 6.0\nassert func(1, 3, 2) == 1.5\nassert func(4, 6, 3) == 4.0\n```", "response_code": "\nassert func(3, 5, 4) == 4.0\nassert func(2, 4, 3) == 2.5\nassert func(6, 8, 5) == 6.0\nassert func(1, 3, 2) == 1.5\nassert func(4, 6, 3) == 4.0\n"}
{"task_id": 221, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr, number):\n    '''\n    Create a function that determines if the input number is larger than any of the elements in the provided array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 6) == True\nassert func([1, 2, 3, 4, 5], 3) == False\nassert func([10, 20, 30, 40, 50], 25) == False\nassert func([10, 20, 30, 40, 50], 60) == True\nassert func([5, 10, 15, 20, 25], 10) == True\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 6) == True\nassert func([1, 2, 3, 4, 5], 3) == False\nassert func([10, 20, 30, 40, 50], 25) == False\nassert func([10, 20, 30, 40, 50], 60) == True\nassert func([5, 10, 15, 20, 25], 10) == True\n"}
{"task_id": 222, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that identifies a string containing an 'a' followed by one or more 'b's.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"ab\") == True\nassert func(\"abb\") == True\nassert func(\"aab\") == False\nassert func(\"b\") == False\nassert func(\"acbb\") == False\n```", "response_code": "\nassert func(\"ab\") == True\nassert func(\"abb\") == True\nassert func(\"aab\") == False\nassert func(\"b\") == False\nassert func(\"acbb\") == False\n"}
{"task_id": 223, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n) :\n    '''\n    Create a Python function that determines the final digit of a specified number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(123) == 3\nassert func(4567) == 7\nassert func(987654321) == 1\nassert func(0) == 0\nassert func(1111111111) == 1\n```", "response_code": "\nassert func(123) == 3\nassert func(4567) == 7\nassert func(987654321) == 1\nassert func(0) == 0\nassert func(1111111111) == 1\n"}
{"task_id": 224, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a Python function that displays negative numbers from a list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, -2, 3, -4, 5]) == [-2, -4]\nassert func([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]\nassert func([0, 1, 2, 3, 4]) == []\nassert func([-5, 0, 5, -10, 15]) == [-5, -10]\nassert func([]) == []\n```", "response_code": "\nassert func([1, -2, 3, -4, 5]) == [-2, -4]\nassert func([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]\nassert func([0, 1, 2, 3, 4]) == []\nassert func([-5, 0, 5, -10, 15]) == [-5, -10]\nassert func([]) == []\n"}
{"task_id": 225, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1):\n    '''\n    Create a function that eliminates characters with odd indexes in a string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\") == \"hlo\"\nassert func(\"python\") == \"pto\"\nassert func(\"abcdefg\") == \"aceg\"\nassert func(\"12345\") == \"135\"\nassert func(\"a1b2c3d4e5\") == \"abcde\"", "response_code": "assert func(\"hello\") == \"hlo\"\nassert func(\"python\") == \"pto\"\nassert func(\"abcdefg\") == \"aceg\"\nassert func(\"12345\") == \"135\"\nassert func(\"a1b2c3d4e5\") == \"abcde\""}
{"task_id": 226, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Create a function that counts pairs of tuples that are bidirectional.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([(1, 2), (2, 1), (3, 4), (4, 3)]) == 2\nassert func([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6)]) == 2\nassert func([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6), (6, 5)]) == 3\nassert func([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6), (6, 5), (7, 8)]) == 3\nassert func([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6), (6, 5), (7, 8), (8, 7)]) == 4", "response_code": "assert func([(1, 2), (2, 1), (3, 4), (4, 3)]) == 2\nassert func([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6)]) == 2\nassert func([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6), (6, 5)]) == 3\nassert func([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6), (6, 5), (7, 8)]) == 3\nassert func([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6), (6, 5), (7, 8), (8, 7)]) == 4"}
{"task_id": 227, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(L):\n    '''\n    Create a function that transforms a list of several integers into a singular integer.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3]) == 123\nassert func([9, 8, 7, 6]) == 9876\nassert func([0, 0, 0, 0]) == 0\nassert func([5, 0, 2, 1]) == 5021\nassert func([3, 5, 2, 9, 1]) == 35291\n```", "response_code": "\nassert func([1, 2, 3]) == 123\nassert func([9, 8, 7, 6]) == 9876\nassert func([0, 0, 0, 0]) == 0\nassert func([5, 0, 2, 1]) == 5021\nassert func([3, 5, 2, 9, 1]) == 35291\n"}
{"task_id": 228, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that identifies all adverbs and their locations within a provided sentence.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"She quickly ran to the store.\") == {'quickly': 3}\nassert func(\"He carefully examined the evidence.\") == {'carefully': 2}\nassert func(\"They happily danced all night long.\") == {'happily': 1}\nassert func(\"I will never forget that day.\") == {'never': 3}\nassert func(\"The dog barked loudly at the mailman.\") == {'loudly': 3}\n```", "response_code": "\nassert func(\"She quickly ran to the store.\") == {'quickly': 3}\nassert func(\"He carefully examined the evidence.\") == {'carefully': 2}\nassert func(\"They happily danced all night long.\") == {'happily': 1}\nassert func(\"I will never forget that day.\") == {'never': 3}\nassert func(\"The dog barked loudly at the mailman.\") == {'loudly': 3}\n"}
{"task_id": 229, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l):\n    '''\n    Create a function that calculates the surface area of a cube.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 6\nassert func(2) == 24\nassert func(3) == 54\nassert func(4) == 96\nassert func(5) == 150\n```", "response_code": "\nassert func(1) == 6\nassert func(2) == 24\nassert func(3) == 54\nassert func(4) == 96\nassert func(5) == 150\n"}
{"task_id": 230, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from array import array\ndef func(nums):\n    '''\n    Create a function that calculates the proportion of positive numbers in an array of integers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(array('i', [1, 2, 3, 4, 5])) == 1.0\nassert func(array('i', [-1, -2, -3, -4, -5])) == 0.0\nassert func(array('i', [0, 0, 0, 0, 0])) == 0.0\nassert func(array('i', [1, -2, 3, -4, 5])) == 0.6\nassert func(array('i', [-1, 2, -3, 4, -5])) == 0.4\n```", "response_code": "\nassert func(array('i', [1, 2, 3, 4, 5])) == 1.0\nassert func(array('i', [-1, -2, -3, -4, -5])) == 0.0\nassert func(array('i', [0, 0, 0, 0, 0])) == 0.0\nassert func(array('i', [1, -2, 3, -4, 5])) == 0.6\nassert func(array('i', [-1, 2, -3, 4, -5])) == 0.4\n"}
{"task_id": 231, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1): \n    '''\n    Create a Python function that identifies the largest negative number in a provided list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([-1, -2, -3, -4, -5]) == -1\nassert func([-5, -4, -3, -2, -1]) == -1\nassert func([-10, -20, -30, -40, -50]) == -10\nassert func([-5, -10, -15, -20, -25]) == -5\nassert func([-2, -4, -6, -8, -10]) == -2", "response_code": "assert func([-1, -2, -3, -4, -5]) == -1\nassert func([-5, -4, -3, -2, -1]) == -1\nassert func([-10, -20, -30, -40, -50]) == -10\nassert func([-5, -10, -15, -20, -25]) == -5\nassert func([-2, -4, -6, -8, -10]) == -2"}
{"task_id": 232, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list, K):\n    '''\n    Create a function that trims each tuple by k in the provided list of tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == [(2, 3), (5, 6), (8, 9)]\nassert func([(10, 20, 30), (40, 50, 60), (70, 80, 90)], 2) == [(30,), (60,), (90,)]\nassert func([(100, 200, 300), (400, 500, 600), (700, 800, 900)], 0) == [(100, 200, 300), (400, 500, 600), (700, 800, 900)]\nassert func([(1, 2), (3, 4), (5, 6)], 1) == [(2,), (4,), (6,)]\nassert func([(7,), (8,), (9,)], 1) == [(), (), ()]\n```", "response_code": "\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == [(2, 3), (5, 6), (8, 9)]\nassert func([(10, 20, 30), (40, 50, 60), (70, 80, 90)], 2) == [(30,), (60,), (90,)]\nassert func([(100, 200, 300), (400, 500, 600), (700, 800, 900)], 0) == [(100, 200, 300), (400, 500, 600), (700, 800, 900)]\nassert func([(1, 2), (3, 4), (5, 6)], 1) == [(2,), (4,), (6,)]\nassert func([(7,), (8,), (9,)], 1) == [(), (), ()]\n"}
{"task_id": 233, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function that multiplies the elements of two tuples together based on their corresponding indices.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (4, 5, 6)) == (4, 10, 18)\nassert func((0, 0, 0), (1, 2, 3)) == (0, 0, 0)\nassert func((-1, -2, -3), (1, 2, 3)) == (-1, -4, -9)\nassert func((5, 10, 15), (1, 2, 3)) == (5, 20, 45)\nassert func((2, 4, 6), (0, 0, 0)) == (0, 0, 0)\n```", "response_code": "\nassert func((1, 2, 3), (4, 5, 6)) == (4, 10, 18)\nassert func((0, 0, 0), (1, 2, 3)) == (0, 0, 0)\nassert func((-1, -2, -3), (1, 2, 3)) == (-1, -4, -9)\nassert func((5, 10, 15), (1, 2, 3)) == (5, 20, 45)\nassert func((2, 4, 6), (0, 0, 0)) == (0, 0, 0)\n"}
{"task_id": 234, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from collections import Counter \ndef func(tup, lst): \n    '''\n    Create a Python function that counts the frequency of each element in a list within a tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), [1, 2, 3, 1, 2, 3]) == {1: 2, 2: 2, 3: 2}\nassert func(('a', 'b', 'c'), ['a', 'b', 'c', 'a', 'b', 'c', 'a']) == {'a': 3, 'b': 2, 'c': 2}\nassert func((1, 2, 3), [4, 5, 6]) == {4: 0, 5: 0, 6: 0}\nassert func(('x', 'y', 'z'), ['x', 'y', 'z', 'x', 'y', 'z']) == {'x': 2, 'y': 2, 'z': 2}\nassert func(('apple', 'banana', 'cherry'), ['apple', 'banana', 'cherry', 'apple', 'banana']) == {'apple': 2, 'banana': 2, 'cherry': 1}\n```", "response_code": "\nassert func((1, 2, 3), [1, 2, 3, 1, 2, 3]) == {1: 2, 2: 2, 3: 2}\nassert func(('a', 'b', 'c'), ['a', 'b', 'c', 'a', 'b', 'c', 'a']) == {'a': 3, 'b': 2, 'c': 2}\nassert func((1, 2, 3), [4, 5, 6]) == {4: 0, 5: 0, 6: 0}\nassert func(('x', 'y', 'z'), ['x', 'y', 'z', 'x', 'y', 'z']) == {'x': 2, 'y': 2, 'z': 2}\nassert func(('apple', 'banana', 'cherry'), ['apple', 'banana', 'cherry', 'apple', 'banana']) == {'apple': 2, 'banana': 2, 'cherry': 1}\n"}
{"task_id": 235, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a lambda function to calculate the cube of each element in a list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3]) == [1, 8, 27]\nassert func([0, 4, 5]) == [0, 64, 125]\nassert func([-1, -2, -3]) == [-1, -8, -27]\nassert func([2.5, 3.5, 4.5]) == [15.625, 42.875, 91.125]\nassert func([0.5, 1.5, 2.5]) == [0.125, 3.375, 15.625]\n```", "response_code": "\nassert func([1, 2, 3]) == [1, 8, 27]\nassert func([0, 4, 5]) == [0, 64, 125]\nassert func([-1, -2, -3]) == [-1, -8, -27]\nassert func([2.5, 3.5, 4.5]) == [15.625, 42.875, 91.125]\nassert func([0.5, 1.5, 2.5]) == [0.125, 3.375, 15.625]\n"}
{"task_id": 236, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function that computes the total of Perrin numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 3\nassert func(1) == 0\nassert func(5) == 10\nassert func(10) == 57\nassert func(15) == 165\n```", "response_code": "\nassert func(0) == 3\nassert func(1) == 0\nassert func(5) == 10\nassert func(10) == 57\nassert func(15) == 165\n"}
{"task_id": 237, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str, l):\n    '''\n    Create a function that retrieves strings of a specific size from a provided list of strings.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['apple', 'banana', 'cherry', 'date'], 5) == ['apple', 'cherry']\nassert func(['apple', 'banana', 'cherry', 'date'], 6) == ['banana']\nassert func(['apple', 'banana', 'cherry', 'date'], 4) == ['date']\nassert func(['apple', 'banana', 'cherry', 'date'], 3) == ['apple']\nassert func(['apple', 'banana', 'cherry', 'date'], 7) == []\n```", "response_code": "\nassert func(['apple', 'banana', 'cherry', 'date'], 5) == ['apple', 'cherry']\nassert func(['apple', 'banana', 'cherry', 'date'], 6) == ['banana']\nassert func(['apple', 'banana', 'cherry', 'date'], 4) == ['date']\nassert func(['apple', 'banana', 'cherry', 'date'], 3) == ['apple']\nassert func(['apple', 'banana', 'cherry', 'date'], 7) == []\n"}
{"task_id": 238, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text1):\n    '''\n    Create a function that utilizes regex to eliminate all spaces from the provided string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello world\") == \"helloworld\"\nassert func(\"  spaces  \") == \"spaces\"\nassert func(\"no_spaces\") == \"no_spaces\"\nassert func(\"\") == \"\"\nassert func(\"  multiple   spaces  \") == \"multiplespaces\"\n```", "response_code": "\nassert func(\"hello world\") == \"helloworld\"\nassert func(\"  spaces  \") == \"spaces\"\nassert func(\"no_spaces\") == \"no_spaces\"\nassert func(\"\") == \"\"\nassert func(\"  multiple   spaces  \") == \"multiplespaces\"\n"}
{"task_id": 239, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(actual_cost,sale_amount): \n    '''\n    Create a function that returns the loss amount if the specified amount incurs a loss, otherwise return none.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(100, 80) == 20\nassert func(50, 50) == None\nassert func(200, 150) == 50\nassert func(75, 100) == None\nassert func(120, 90) == 30\n```", "response_code": "\nassert func(100, 80) == 20\nassert func(50, 50) == None\nassert func(200, 150) == 50\nassert func(75, 100) == None\nassert func(120, 90) == 30\n"}
{"task_id": 240, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math \ndef func(n) : \n    '''\n    Create a Python function that calculates the total of even factors for a given number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(6) == 6  # 2 + 6 = 8\nassert func(10) == 12  # 2 + 4 + 6 + 10 = 22\nassert func(15) == 8  # 2 + 6 = 8\nassert func(20) == 42  # 2 + 4 + 6 + 8 + 10 + 20 = 50\nassert func(25) == 12  # 2 + 6 + 10 + 20 = 38\n```", "response_code": "\nassert func(6) == 6  # 2 + 6 = 8\nassert func(10) == 12  # 2 + 4 + 6 + 10 = 22\nassert func(15) == 8  # 2 + 6 = 8\nassert func(20) == 42  # 2 + 4 + 6 + 8 + 10 + 20 = 50\nassert func(25) == 12  # 2 + 6 + 10 + 20 = 38\n"}
{"task_id": 241, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that identifies a word with the letter 'z'.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"zebra\") == \"zebra\"\nassert func(\"amazing\") == \"\"\nassert func(\"lazy\") == \"lazy\"\nassert func(\"zoo\") == \"zoo\"\nassert func(\"zeal\") == \"zeal\"\n```", "response_code": "\nassert func(\"zebra\") == \"zebra\"\nassert func(\"amazing\") == \"\"\nassert func(\"lazy\") == \"lazy\"\nassert func(\"zoo\") == \"zoo\"\nassert func(\"zeal\") == \"zeal\"\n"}
{"task_id": 242, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(monthnum2):\n    '''\n    Create a function that determines if the specified month has 31 days.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == True\nassert func(4) == True\nassert func(7) == True\nassert func(9) == True\nassert func(11) == True", "response_code": "assert func(1) == True\nassert func(4) == True\nassert func(7) == True\nassert func(9) == True\nassert func(11) == True"}
{"task_id": 243, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(stringlist):\n    '''\n    Create a function that reverses strings within a list of string values.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['hello', 'world']) == ['olleh', 'dlrow']\nassert func(['python', 'is', 'awesome']) == ['nohtyp', 'si', 'emosewa']\nassert func(['racecar', 'level', 'radar']) == ['racecar', 'level', 'radar']\nassert func(['12345', '67890']) == ['54321', '09876']\nassert func(['abc', 'def', 'ghi']) == ['cba', 'fed', 'ihg']\n```", "response_code": "\nassert func(['hello', 'world']) == ['olleh', 'dlrow']\nassert func(['python', 'is', 'awesome']) == ['nohtyp', 'si', 'emosewa']\nassert func(['racecar', 'level', 'radar']) == ['racecar', 'level', 'radar']\nassert func(['12345', '67890']) == ['54321', '09876']\nassert func(['abc', 'def', 'ghi']) == ['cba', 'fed', 'ihg']\n"}
{"task_id": 244, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lst): \n    '''\n    Create a Python function that identifies the sublist with the shortest length.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [4, 5]\nassert func([[1, 2], [3, 4, 5], [6, 7]]) == [1, 2]\nassert func([[1], [2], [3], [4]]) == [1]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9]\nassert func([[1, 2, 3, 4], [5, 6], [7, 8, 9]]) == [5, 6]", "response_code": "assert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [4, 5]\nassert func([[1, 2], [3, 4, 5], [6, 7]]) == [1, 2]\nassert func([[1], [2], [3], [4]]) == [1]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9]\nassert func([[1, 2, 3, 4], [5, 6], [7, 8, 9]]) == [5, 6]"}
{"task_id": 245, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l,b):\n    '''\n    Create a function that calculates the area of a rectangle.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 4) == 12\nassert func(5, 7) == 35\nassert func(10, 2) == 20\nassert func(6, 9) == 54\nassert func(8, 8) == 64\n```", "response_code": "\nassert func(3, 4) == 12\nassert func(5, 7) == 35\nassert func(10, 2) == 20\nassert func(6, 9) == 54\nassert func(8, 8) == 64\n"}
{"task_id": 246, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(str1):\n    '''\n    Create a function that utilizes regex to eliminate uppercase portions of a provided string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello World\") == \"ello orld\"\nassert func(\"Python Is Fun\") == \"ython s un\"\nassert func(\"REGEX Is COOL\") == \" s \"\nassert func(\"12345\") == \"12345\"\nassert func(\"\") == \"\"\n```", "response_code": "\nassert func(\"Hello World\") == \"ello orld\"\nassert func(\"Python Is Fun\") == \"ython s un\"\nassert func(\"REGEX Is COOL\") == \" s \"\nassert func(\"12345\") == \"12345\"\nassert func(\"\") == \"\"\n"}
{"task_id": 247, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lst): \n    '''\n    Create a Python function that retrieves the initial element from every sub-list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]\nassert func([[10, 20], [30, 40], [50, 60]]) == [10, 30, 50]\nassert func([[100], [200], [300]]) == [100, 200, 300]\nassert func([[1, 2], [3, 4], [5, 6]]) == [1, 3, 5]\nassert func([[7, 8, 9], [10, 11, 12], [13, 14, 15]]) == [7, 10, 13]", "response_code": "assert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]\nassert func([[10, 20], [30, 40], [50, 60]]) == [10, 30, 50]\nassert func([[100], [200], [300]]) == [100, 200, 300]\nassert func([[1, 2], [3, 4], [5, 6]]) == [1, 3, 5]\nassert func([[7, 8, 9], [10, 11, 12], [13, 14, 15]]) == [7, 10, 13]"}
{"task_id": 248, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str):\n    '''\n    Create a Python function that calculates the number of uppercase letters in a provided string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello World\") == 2\nassert func(\"Python\") == 1\nassert func(\"UPPERCASE\") == 9\nassert func(\"lowercase\") == 0\nassert func(\"12345\") == 0\n```", "response_code": "\nassert func(\"Hello World\") == 2\nassert func(\"Python\") == 1\nassert func(\"UPPERCASE\") == 9\nassert func(\"lowercase\") == 0\nassert func(\"12345\") == 0\n"}
{"task_id": 249, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function that generates all potential combinations of the items in a specified list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2]) == [[1, 2], [2, 1]]\nassert func([1, 2, 3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\nassert func(['a', 'b', 'c']) == [['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]\nassert func([1, 'a']) == [[1, 'a'], ['a', 1]]\nassert func([]) == [[]]\n```", "response_code": "\nassert func([1, 2]) == [[1, 2], [2, 1]]\nassert func([1, 2, 3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\nassert func(['a', 'b', 'c']) == [['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]\nassert func([1, 'a']) == [[1, 'a'], ['a', 1]]\nassert func([]) == [[]]\n"}
{"task_id": 250, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):\n    '''\n    Create a function that can identify the largest product subarray within a provided array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([2, 3, -2, 4]) == 6\nassert func([-2, 0, -1]) == 0\nassert func([2, 3, -2, 4, -1]) == 48\nassert func([2, -5, 3, -2, 4]) == 120\nassert func([2, 3, -2, 4, -1, 2, -3, 4]) == 192\n```", "response_code": "\nassert func([2, 3, -2, 4]) == 6\nassert func([-2, 0, -1]) == 0\nassert func([2, 3, -2, 4, -1]) == 48\nassert func([2, -5, 3, -2, 4]) == 120\nassert func([2, 3, -2, 4, -1, 2, -3, 4]) == 192\n"}
{"task_id": 251, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(dict, n):\n    '''\n    Create a function that verifies if all values in a dictionary are identical.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test case 1: All values are identical\nassert func({'a': 5, 'b': 5, 'c': 5}, 3) == True\n\n# Test case 2: All values are different\nassert func({'x': 1, 'y': 2, 'z': 3}, 3) == False\n\n# Test case 3: Empty dictionary\nassert func({}, 0) == True\n\n# Test case 4: Only one key-value pair\nassert func({'key': 10}, 1) == True\n\n# Test case 5: Values are strings\nassert func({'apple': 'red', 'banana': 'yellow', 'cherry': 'red'}, 3) == False\n```", "response_code": "\n# Test case 1: All values are identical\nassert func({'a': 5, 'b': 5, 'c': 5}, 3) == True\n\n# Test case 2: All values are different\nassert func({'x': 1, 'y': 2, 'z': 3}, 3) == False\n\n# Test case 3: Empty dictionary\nassert func({}, 0) == True\n\n# Test case 4: Only one key-value pair\nassert func({'key': 10}, 1) == True\n\n# Test case 5: Values are strings\nassert func({'apple': 'red', 'banana': 'yellow', 'cherry': 'red'}, 3) == False\n"}
{"task_id": 252, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(dict1):\n    '''\n    Create a function that removes any empty items from a provided dictionary.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test case 1: Empty dictionary\nassert func({}) == {}\n\n# Test case 2: Dictionary with empty string value\nassert func({'key1': ''}) == {}\n\n# Test case 3: Dictionary with non-empty values\nassert func({'key1': 'value1', 'key2': 'value2'}) == {'key1': 'value1', 'key2': 'value2'}\n\n# Test case 4: Dictionary with empty list value\nassert func({'key1': []}) == {}\n\n# Test case 5: Dictionary with empty string and non-empty values\nassert func({'key1': '', 'key2': 'value2'}) == {'key2': 'value2'}\n```", "response_code": "\n# Test case 1: Empty dictionary\nassert func({}) == {}\n\n# Test case 2: Dictionary with empty string value\nassert func({'key1': ''}) == {}\n\n# Test case 3: Dictionary with non-empty values\nassert func({'key1': 'value1', 'key2': 'value2'}) == {'key1': 'value1', 'key2': 'value2'}\n\n# Test case 4: Dictionary with empty list value\nassert func({'key1': []}) == {}\n\n# Test case 5: Dictionary with empty string and non-empty values\nassert func({'key1': '', 'key2': 'value2'}) == {'key2': 'value2'}\n"}
{"task_id": 253, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):   \n    '''\n    Create a function that calculates the highest possible product by multiplying numbers from a subset of the array that is in ascending order.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 60\nassert func([-1, -2, -3, -4, -5]) == 20\nassert func([5, 4, 3, 2, 1]) == 60\nassert func([1, 2, 3, -4, -5]) == 6\nassert func([-5, -4, -3, -2, -1]) == 20\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 60\nassert func([-1, -2, -3, -4, -5]) == 20\nassert func([5, 4, 3, 2, 1]) == 60\nassert func([1, 2, 3, -4, -5]) == 6\nassert func([-5, -4, -3, -2, -1]) == 20\n"}
{"task_id": 254, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    Create a function that calculates the sum of each pair of elements in the provided tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3, 4)) == (3, 7)\nassert func((5, 10, 15, 20)) == (15, 35)\nassert func((-1, 1, -2, 2)) == (0, 0)\nassert func((0, 0, 0, 0)) == (0, 0)\nassert func((2, 3, 5, 7)) == (5, 12)\n```", "response_code": "\nassert func((1, 2, 3, 4)) == (3, 7)\nassert func((5, 10, 15, 20)) == (15, 35)\nassert func((-1, 1, -2, 2)) == (0, 0)\nassert func((0, 0, 0, 0)) == (0, 0)\nassert func((2, 3, 5, 7)) == (5, 12)\n"}
{"task_id": 255, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr, n): \n    '''\n    Create a Python function that calculates the remainder of the product of an array divided by n.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 3) == 2\nassert func([10, 20, 30], 7) == 4\nassert func([5, 10, 15, 20], 4) == 0\nassert func([3, 6, 9, 12, 15], 5) == 0\nassert func([2, 4, 6, 8, 10], 9) == 8\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 3) == 2\nassert func([10, 20, 30], 7) == 4\nassert func([5, 10, 15, 20], 4) == 0\nassert func([3, 6, 9, 12, 15], 5) == 0\nassert func([2, 4, 6, 8, 10], 9) == 8\n"}
{"task_id": 256, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l): \n    '''\n    Create a Python function that determines if a list contains consecutive numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == True\nassert func([1, 3, 4, 5, 6]) == False\nassert func([7, 8, 9, 10]) == True\nassert func([10, 8, 7, 6]) == False\nassert func([3, 5, 7, 9]) == False", "response_code": "assert func([1, 2, 3, 4, 5]) == True\nassert func([1, 3, 4, 5, 6]) == False\nassert func([7, 8, 9, 10]) == True\nassert func([10, 8, 7, 6]) == False\nassert func([3, 5, 7, 9]) == False"}
{"task_id": 257, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list1, test_list2):\n    '''\n    Create a function that can identify the common elements in a list of tuples, regardless of their order.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (3, 4)], [(3, 4), (1, 2)]) == [(1, 2), (3, 4)]\nassert func([(1, 2), (3, 4)], [(5, 6), (7, 8)]) == []\nassert func([(1, 2), (3, 4)], [(1, 2), (5, 6)]) == [(1, 2)]\nassert func([(1, 2), (3, 4)], [(3, 4), (5, 6)]) == [(3, 4)]\nassert func([(1, 2), (3, 4)], [(5, 6), (1, 2)]) == [(1, 2)]\n```", "response_code": "\nassert func([(1, 2), (3, 4)], [(3, 4), (1, 2)]) == [(1, 2), (3, 4)]\nassert func([(1, 2), (3, 4)], [(5, 6), (7, 8)]) == []\nassert func([(1, 2), (3, 4)], [(1, 2), (5, 6)]) == [(1, 2)]\nassert func([(1, 2), (3, 4)], [(3, 4), (5, 6)]) == [(3, 4)]\nassert func([(1, 2), (3, 4)], [(5, 6), (1, 2)]) == [(1, 2)]\n"}
{"task_id": 258, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1,ch,newch):\n    '''\n    Create a function that can substitute characters within a given string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\", \"l\", \"x\") == \"hexxo\"\nassert func(\"world\", \"o\", \"a\") == \"warld\"\nassert func(\"banana\", \"a\", \"o\") == \"bonono\"\nassert func(\"apple\", \"p\", \"b\") == \"abble\"\nassert func(\"python\", \"y\", \"i\") == \"pithon\"\n```", "response_code": "\nassert func(\"hello\", \"l\", \"x\") == \"hexxo\"\nassert func(\"world\", \"o\", \"a\") == \"warld\"\nassert func(\"banana\", \"a\", \"o\") == \"bonono\"\nassert func(\"apple\", \"p\", \"b\") == \"abble\"\nassert func(\"python\", \"y\", \"i\") == \"pithon\"\n"}
{"task_id": 259, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from collections import Counter\ndef func(dict1):\n    '''\n    Create a function that organizes a counter based on its values.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\n# Test case 1\ndict1 = {'a': 3, 'b': 1, 'c': 2}\nassert func(dict1) == {1: ['b'], 2: ['c'], 3: ['a']}\n\n# Test case 2\ndict2 = {'x': 5, 'y': 5, 'z': 5}\nassert func(dict2) == {5: ['x', 'y', 'z']}\n\n# Test case 3\ndict3 = {'apple': 2, 'banana': 2, 'cherry': 2}\nassert func(dict3) == {2: ['apple', 'banana', 'cherry']}\n\n# Test case 4\ndict4 = {'red': 4, 'green': 2, 'blue': 3}\nassert func(dict4) == {2: ['green'], 3: ['blue'], 4: ['red']}\n\n# Test case 5\ndict5 = {'one': 1, 'two': 2, 'three': 3, 'four': 4}\nassert func(dict5) == {1: ['one'], 2: ['two'], 3: ['three'], 4: ['four']}\n```", "response_code": "\n# Test case 1\ndict1 = {'a': 3, 'b': 1, 'c': 2}\nassert func(dict1) == {1: ['b'], 2: ['c'], 3: ['a']}\n\n# Test case 2\ndict2 = {'x': 5, 'y': 5, 'z': 5}\nassert func(dict2) == {5: ['x', 'y', 'z']}\n\n# Test case 3\ndict3 = {'apple': 2, 'banana': 2, 'cherry': 2}\nassert func(dict3) == {2: ['apple', 'banana', 'cherry']}\n\n# Test case 4\ndict4 = {'red': 4, 'green': 2, 'blue': 3}\nassert func(dict4) == {2: ['green'], 3: ['blue'], 4: ['red']}\n\n# Test case 5\ndict5 = {'one': 1, 'two': 2, 'three': 3, 'four': 4}\nassert func(dict5) == {1: ['one'], 2: ['two'], 3: ['three'], 4: ['four']}\n"}
{"task_id": 260, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a Python function that calculates the sum of the highest and lowest values in a provided array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == 6\nassert func([10, 20, 30, 40, 50]) == 60\nassert func([-10, -5, 0, 5, 10]) == 0\nassert func([5, 5, 5, 5, 5]) == 10\nassert func([-100, 0, 100]) == 0", "response_code": "assert func([1, 2, 3, 4, 5]) == 6\nassert func([10, 20, 30, 40, 50]) == 60\nassert func([-10, -5, 0, 5, 10]) == 0\nassert func([5, 5, 5, 5, 5]) == 10\nassert func([-100, 0, 100]) == 0"}
{"task_id": 261, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(string):\n    '''\n    Create a Python function that changes the provided string to lowercase.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello World\") == \"hello world\"\nassert func(\"PYTHON\") == \"python\"\nassert func(\"123ABC\") == \"123abc\"\nassert func(\"LoWeRcAsE\") == \"lowercase\"\nassert func(\"\") == \"\"\n```", "response_code": "\nassert func(\"Hello World\") == \"hello world\"\nassert func(\"PYTHON\") == \"python\"\nassert func(\"123ABC\") == \"123abc\"\nassert func(\"LoWeRcAsE\") == \"lowercase\"\nassert func(\"\") == \"\"\n"}
{"task_id": 262, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(str1):\n    '''\n    Create a function that eliminates lowercase sections from a provided string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello World\") == \"H W\"\nassert func(\"abc123def456\") == \"\"\nassert func(\"PythonIsFun\") == \"P\"\nassert func(\"12345\") == \"12345\"\nassert func(\"aBcDeF\") == \"BDF\"\n```", "response_code": "\nassert func(\"Hello World\") == \"H W\"\nassert func(\"abc123def456\") == \"\"\nassert func(\"PythonIsFun\") == \"P\"\nassert func(\"12345\") == \"12345\"\nassert func(\"aBcDeF\") == \"BDF\"\n"}
{"task_id": 263, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n) :  \n    '''\n    Create a Python function that identifies the initial digit of a provided number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(12345) == 1\nassert func(987654321) == 9\nassert func(500) == 5\nassert func(0) == 0\nassert func(87654321) == 8\n```", "response_code": "\nassert func(12345) == 1\nassert func(987654321) == 9\nassert func(500) == 5\nassert func(0) == 0\nassert func(87654321) == 8\n"}
{"task_id": 264, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list): \n    '''\n    Create a Python function that identifies odd numbers within a list containing both odd and even numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == [1, 3, 5]\nassert func([10, 20, 30, 40, 50]) == []\nassert func([11, 22, 33, 44, 55]) == [11, 33, 55]\nassert func([2, 4, 6, 8, 10]) == []\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]", "response_code": "assert func([1, 2, 3, 4, 5]) == [1, 3, 5]\nassert func([10, 20, 30, 40, 50]) == []\nassert func([11, 22, 33, 44, 55]) == [11, 33, 55]\nassert func([2, 4, 6, 8, 10]) == []\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]"}
{"task_id": 265, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n) :  \n    '''\n    Create a Python function that calculates the difference between the sum of the cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 0\nassert func(2) == 7\nassert func(3) == 36\nassert func(4) == 100\nassert func(5) == 225", "response_code": "assert func(1) == 0\nassert func(2) == 7\nassert func(3) == 36\nassert func(4) == 100\nassert func(5) == 225"}
{"task_id": 266, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(A,N) : \n    '''\n    Create a Python function that calculates the number of pairs with an odd XOR.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 5) == 6\nassert func([2, 4, 6, 8, 10], 5) == 0\nassert func([3, 5, 7, 9, 11], 5) == 10\nassert func([1, 3, 5, 7, 9], 5) == 10\nassert func([2, 3, 5, 7, 11], 5) == 8\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 5) == 6\nassert func([2, 4, 6, 8, 10], 5) == 0\nassert func([3, 5, 7, 9, 11], 5) == 10\nassert func([1, 3, 5, 7, 9], 5) == 10\nassert func([2, 3, 5, 7, 11], 5) == 8\n"}
{"task_id": 267, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(string):\n    '''\n    Create a function that switches the case of characters in a string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello World\") == \"hELLO wORLD\"\nassert func(\"Python is Fun\") == \"pYTHON IS fUN\"\nassert func(\"12345\") == \"12345\"\nassert func(\"aBcDeF\") == \"AbCdEf\"\nassert func(\"\") == \"\"\n```", "response_code": "\nassert func(\"Hello World\") == \"hELLO wORLD\"\nassert func(\"Python is Fun\") == \"pYTHON IS fUN\"\nassert func(\"12345\") == \"12345\"\nassert func(\"aBcDeF\") == \"AbCdEf\"\nassert func(\"\") == \"\"\n"}
{"task_id": 268, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n1, n2):\n    '''\n    Create a Python function that calculates the digit distance between two integers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(123, 456) == 6\nassert func(100, 1000) == 2\nassert func(555, 555) == 0\nassert func(9876, 1234) == 8\nassert func(0, 999) == 9\n```", "response_code": "\nassert func(123, 456) == 6\nassert func(100, 1000) == 2\nassert func(555, 555) == 0\nassert func(9876, 1234) == 8\nassert func(0, 999) == 9\n"}
{"task_id": 269, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a, size):\n    '''\n    Create a function that can determine the maximum sum of a continuous subarray within a provided array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 3) == 12\nassert func([-2, 1, -3, 4, -1, 2, 1, -5, 4], 4) == 6\nassert func([-2, -3, 4, -1, -2, 1, 5, -3], 5) == 7\nassert func([1, -1, 1, -1, 1, -1, 1], 2) == 1\nassert func([5, -2, 3, 1, -1, 2, -1], 3) == 8\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 3) == 12\nassert func([-2, 1, -3, 4, -1, 2, 1, -5, 4], 4) == 6\nassert func([-2, -3, 4, -1, -2, 1, 5, -3], 5) == 7\nassert func([1, -1, 1, -1, 1, -1, 1], 2) == 1\nassert func([5, -2, 3, 1, -1, 2, -1], 3) == 8\n"}
{"task_id": 270, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function that determines the combined elements of the provided tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\nassert func(('a', 'b', 'c'), ('d', 'e', 'f')) == ('a', 'b', 'c', 'd', 'e', 'f')\nassert func((10, 20), (30, 40)) == (10, 20, 30, 40)\nassert func(('x', 'y'), ('z',)) == ('x', 'y', 'z')\nassert func((), ()) == ()\n```", "response_code": "\nassert func((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\nassert func(('a', 'b', 'c'), ('d', 'e', 'f')) == ('a', 'b', 'c', 'd', 'e', 'f')\nassert func((10, 20), (30, 40)) == (10, 20, 30, 40)\nassert func(('x', 'y'), ('z',)) == ('x', 'y', 'z')\nassert func((), ()) == ()\n"}
{"task_id": 271, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lst):  \n    '''\n    Create a Python function that determines the longest length of a sublist.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 4\nassert func([[1, 2], [3, 4, 5], [6, 7, 8]]) == 3\nassert func([[1], [2], [3], [4]]) == 1\nassert func([[1, 2, 3, 4, 5]]) == 5\nassert func([]) == 0", "response_code": "assert func([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 4\nassert func([[1, 2], [3, 4, 5], [6, 7, 8]]) == 3\nassert func([[1], [2], [3], [4]]) == 1\nassert func([[1, 2, 3, 4, 5]]) == 5\nassert func([]) == 0"}
{"task_id": 272, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that retrieves values enclosed in quotation marks from a string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func('Hello \"world\"') == ['world']\nassert func('The \"quick\" brown \"fox\" jumps') == ['quick', 'fox']\nassert func('No quotes here') == []\nassert func('\"Single\" quotes') == ['Single']\nassert func('Multiple \"words\" in\" quotes\"') == ['words', 'quotes']\n```", "response_code": "\nassert func('Hello \"world\"') == ['world']\nassert func('The \"quick\" brown \"fox\" jumps') == ['quick', 'fox']\nassert func('No quotes here') == []\nassert func('\"Single\" quotes') == ['Single']\nassert func('Multiple \"words\" in\" quotes\"') == ['words', 'quotes']\n"}
{"task_id": 273, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr,n): \n    '''\n    Create a Python function that counts the number of pairs of unequal elements in a given array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 5) == 10\nassert func([1, 1, 1, 1, 1], 5) == 0\nassert func([1, 2, 3, 2, 1], 5) == 6\nassert func([5, 4, 3, 2, 1], 5) == 10\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 45\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 5) == 10\nassert func([1, 1, 1, 1, 1], 5) == 0\nassert func([1, 2, 3, 2, 1], 5) == 6\nassert func([5, 4, 3, 2, 1], 5) == 10\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 45\n"}
{"task_id": 274, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(word): \n    '''\n    Create a Python function that separates a string into individual characters.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello\") == ['h', 'e', 'l', 'l', 'o']\nassert func(\"python\") == ['p', 'y', 't', 'h', 'o', 'n']\nassert func(\"12345\") == ['1', '2', '3', '4', '5']\nassert func(\"abc123\") == ['a', 'b', 'c', '1', '2', '3']\nassert func(\"\") == []", "response_code": "assert func(\"hello\") == ['h', 'e', 'l', 'l', 'o']\nassert func(\"python\") == ['p', 'y', 't', 'h', 'o', 'n']\nassert func(\"12345\") == ['1', '2', '3', '4', '5']\nassert func(\"abc123\") == ['a', 'b', 'c', '1', '2', '3']\nassert func(\"\") == []"}
{"task_id": 275, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    Create a function that calculates the total of a non-negative whole number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(0) == 0\nassert func(1) == 1\nassert func(5) == 5\nassert func(10) == 10\nassert func(100) == 100", "response_code": "assert func(0) == 0\nassert func(1) == 1\nassert func(5) == 5\nassert func(10) == 10\nassert func(100) == 100"}
{"task_id": 276, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function that determines if a given list is in sorted order or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == True\nassert func([5, 4, 3, 2, 1]) == False\nassert func([1, 3, 2, 4, 5]) == False\nassert func([1, 1, 1, 1, 1]) == True\nassert func([]) == True", "response_code": "assert func([1, 2, 3, 4, 5]) == True\nassert func([5, 4, 3, 2, 1]) == False\nassert func([1, 3, 2, 4, 5]) == False\nassert func([1, 1, 1, 1, 1]) == True\nassert func([]) == True"}
{"task_id": 277, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(length):\n    '''\n    Create a function that generates a list containing empty dictionaries.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(0) == []\nassert func(1) == [{}]\nassert func(5) == [{}, {}, {}, {}, {}]\nassert func(3) == [{}, {}, {}]\nassert func(10) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}]", "response_code": "assert func(0) == []\nassert func(1) == [{}]\nassert func(5) == [{}, {}, {}, {}, {}]\nassert func(3) == [{}, {}, {}]\nassert func(10) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}]"}
{"task_id": 278, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function that sorts the strings within each sublist of a given list of lists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([['banana', 'apple', 'cherry'], ['orange', 'grape', 'kiwi']]) == [['apple', 'banana', 'cherry'], ['grape', 'kiwi', 'orange']]\nassert func([['zebra', 'lion', 'elephant'], ['monkey', 'giraffe', 'tiger']]) == [['elephant', 'lion', 'zebra'], ['giraffe', 'monkey', 'tiger']]\nassert func([['pear', 'peach', 'plum'], ['watermelon', 'melon', 'strawberry']]) == [['peach', 'pear', 'plum'], ['melon', 'strawberry', 'watermelon']]\nassert func([['dog', 'cat', 'rabbit'], ['hamster', 'guinea pig', 'ferret']]) == [['cat', 'dog', 'rabbit'], ['ferret', 'guinea pig', 'hamster']]\nassert func([['sunflower', 'rose', 'tulip'], ['daisy', 'lily', 'carnation']]) == [['rose', 'sunflower', 'tulip'], ['carnation', 'daisy', 'lily']]\n```", "response_code": "\nassert func([['banana', 'apple', 'cherry'], ['orange', 'grape', 'kiwi']]) == [['apple', 'banana', 'cherry'], ['grape', 'kiwi', 'orange']]\nassert func([['zebra', 'lion', 'elephant'], ['monkey', 'giraffe', 'tiger']]) == [['elephant', 'lion', 'zebra'], ['giraffe', 'monkey', 'tiger']]\nassert func([['pear', 'peach', 'plum'], ['watermelon', 'melon', 'strawberry']]) == [['peach', 'pear', 'plum'], ['melon', 'strawberry', 'watermelon']]\nassert func([['dog', 'cat', 'rabbit'], ['hamster', 'guinea pig', 'ferret']]) == [['cat', 'dog', 'rabbit'], ['ferret', 'guinea pig', 'hamster']]\nassert func([['sunflower', 'rose', 'tulip'], ['daisy', 'lily', 'carnation']]) == [['rose', 'sunflower', 'tulip'], ['carnation', 'daisy', 'lily']]\n"}
{"task_id": 279, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a Python function that eliminates two duplicate numbers from a set of lists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 2, 3]) == [1, 4]\nassert func([5, 5, 5, 5, 5, 5]) == []\nassert func([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert func([1, 1, 2, 2, 3, 3]) == []\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == []\n```", "response_code": "\nassert func([1, 2, 3, 4, 2, 3]) == [1, 4]\nassert func([5, 5, 5, 5, 5, 5]) == []\nassert func([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert func([1, 1, 2, 2, 3, 3]) == []\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == []\n"}
{"task_id": 280, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list_data):\n    '''\n    Create a Python function that finds the product of the distinct numbers in a provided list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == 120\nassert func([2, 3, 5, 7, 11]) == 2310\nassert func([1, 2, 2, 3, 3, 4, 4]) == 24\nassert func([5, 5, 5, 5, 5]) == 5\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 362880", "response_code": "assert func([1, 2, 3, 4, 5]) == 120\nassert func([2, 3, 5, 7, 11]) == 2310\nassert func([1, 2, 2, 3, 3, 4, 4]) == 24\nassert func([5, 5, 5, 5, 5]) == 5\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 362880"}
{"task_id": 281, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(r,h):\n    '''\n    Create a function that calculates the surface area of a cylinder.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1, 1) == 6.283185307179586  # radius=1, height=1\nassert func(2, 3) == 62.83185307179586   # radius=2, height=3\nassert func(0, 5) == 0                   # radius=0, height=5\nassert func(4, 0) == 100.53096491487338  # radius=4, height=0\nassert func(3, 4) == 131.94689145077132  # radius=3, height=4\n```", "response_code": "\nassert func(1, 1) == 6.283185307179586  # radius=1, height=1\nassert func(2, 3) == 62.83185307179586   # radius=2, height=3\nassert func(0, 5) == 0                   # radius=0, height=5\nassert func(4, 0) == 100.53096491487338  # radius=4, height=0\nassert func(3, 4) == 131.94689145077132  # radius=3, height=4\n"}
{"task_id": 282, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(A,B): \n    '''\n    Create a Python function that determines if an array is a subarray of another array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], [1, 2, 3, 4, 5]) == True\nassert func([4, 5], [1, 2, 3, 4, 5]) == True\nassert func([1, 2, 3], [4, 5, 6]) == False\nassert func([1, 2, 3], [1, 2, 4, 3, 5]) == False\nassert func([1, 2, 3], [1, 2]) == False\n```", "response_code": "\nassert func([1, 2, 3], [1, 2, 3, 4, 5]) == True\nassert func([4, 5], [1, 2, 3, 4, 5]) == True\nassert func([1, 2, 3], [4, 5, 6]) == False\nassert func([1, 2, 3], [1, 2, 4, 3, 5]) == False\nassert func([1, 2, 3], [1, 2]) == False\n"}
{"task_id": 283, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a Python function that determines the last digit of the factorial of a specified number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5) == 0  # 5! = 120, last digit is 0\nassert func(7) == 4  # 7! = 5040, last digit is 4\nassert func(10) == 0  # 10! = 3628800, last digit is 0\nassert func(15) == 0  # 15! = 1307674368000, last digit is 0\nassert func(20) == 0  # 20! = 2432902008176640000, last digit is 0\n```", "response_code": "\nassert func(5) == 0  # 5! = 120, last digit is 0\nassert func(7) == 4  # 7! = 5040, last digit is 4\nassert func(10) == 0  # 10! = 3628800, last digit is 0\nassert func(15) == 0  # 15! = 1307674368000, last digit is 0\nassert func(20) == 0  # 20! = 2432902008176640000, last digit is 0\n"}
{"task_id": 284, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1,list2,list3):\n    '''\n    Create a function that interleaves lists of equal length.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3], ['a', 'b', 'c'], [True, False, True]) == [1, 'a', True, 2, 'b', False, 3, 'c', True]\nassert func([4, 5, 6], ['x', 'y', 'z'], [False, True, False]) == [4, 'x', False, 5, 'y', True, 6, 'z', False]\nassert func([7, 8], ['m', 'n'], [True, False]) == [7, 'm', True, 8, 'n', False]\nassert func([], [], []) == []\nassert func([1], ['a'], [True]) == [1, 'a', True]", "response_code": "assert func([1, 2, 3], ['a', 'b', 'c'], [True, False, True]) == [1, 'a', True, 2, 'b', False, 3, 'c', True]\nassert func([4, 5, 6], ['x', 'y', 'z'], [False, True, False]) == [4, 'x', False, 5, 'y', True, 6, 'z', False]\nassert func([7, 8], ['m', 'n'], [True, False]) == [7, 'm', True, 8, 'n', False]\nassert func([], [], []) == []\nassert func([1], ['a'], [True]) == [1, 'a', True]"}
{"task_id": 285, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function that identifies the unique elements in two given tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (2, 3, 4)) == (1, 4)\nassert func(('a', 'b', 'c'), ('b', 'c', 'd')) == ('a', 'd')\nassert func((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\nassert func(('apple', 'banana', 'cherry'), ('banana', 'cherry', 'date')) == ('apple', 'date')\nassert func((), ()) == ()\n```", "response_code": "\nassert func((1, 2, 3), (2, 3, 4)) == (1, 4)\nassert func(('a', 'b', 'c'), ('b', 'c', 'd')) == ('a', 'd')\nassert func((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\nassert func(('apple', 'banana', 'cherry'), ('banana', 'cherry', 'date')) == ('apple', 'date')\nassert func((), ()) == ()\n"}
{"task_id": 286, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tuple, even_fnc): \n    '''\n    Create a function that retrieves the even elements from a mixed tuple that contains nested tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\ntest_tuple = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\neven_fnc = lambda x: x % 2 == 0\nassert func(test_tuple, even_fnc) == (2, 4, 6, 8)\n\ntest_tuple = ((11, 22, 33), (44, 55, 66), (77, 88, 99))\neven_fnc = lambda x: x % 2 == 0\nassert func(test_tuple, even_fnc) == (22, 44, 66, 88)\n\ntest_tuple = ((10, 20, 30), (40, 50, 60), (70, 80, 90))\neven_fnc = lambda x: x % 2 == 0\nassert func(test_tuple, even_fnc) == (10, 20, 30, 40, 50, 60, 70, 80, 90)\n\ntest_tuple = ((2, 4, 6), (8, 10, 12), (14, 16, 18))\neven_fnc = lambda x: x % 2 == 0\nassert func(test_tuple, even_fnc) == (2, 4, 6, 8, 10, 12, 14, 16, 18)\n\ntest_tuple = ((1, 3, 5), (7, 9, 11), (13, 15, 17))\neven_fnc = lambda x: x % 2 == 0\nassert func(test_tuple, even_fnc) == ()\n```", "response_code": "\ntest_tuple = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\neven_fnc = lambda x: x % 2 == 0\nassert func(test_tuple, even_fnc) == (2, 4, 6, 8)\n\ntest_tuple = ((11, 22, 33), (44, 55, 66), (77, 88, 99))\neven_fnc = lambda x: x % 2 == 0\nassert func(test_tuple, even_fnc) == (22, 44, 66, 88)\n\ntest_tuple = ((10, 20, 30), (40, 50, 60), (70, 80, 90))\neven_fnc = lambda x: x % 2 == 0\nassert func(test_tuple, even_fnc) == (10, 20, 30, 40, 50, 60, 70, 80, 90)\n\ntest_tuple = ((2, 4, 6), (8, 10, 12), (14, 16, 18))\neven_fnc = lambda x: x % 2 == 0\nassert func(test_tuple, even_fnc) == (2, 4, 6, 8, 10, 12, 14, 16, 18)\n\ntest_tuple = ((1, 3, 5), (7, 9, 11), (13, 15, 17))\neven_fnc = lambda x: x % 2 == 0\nassert func(test_tuple, even_fnc) == ()\n"}
{"task_id": 287, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(b,s): \n    '''\n    Create a Python function that calculates the surface area of a square pyramid.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5, 10) == 125\nassert func(3, 6) == 27\nassert func(8, 4) == 128\nassert func(2, 2) == 8\nassert func(7, 7) == 98\n```", "response_code": "\nassert func(5, 10) == 125\nassert func(3, 6) == 27\nassert func(8, 4) == 128\nassert func(2, 2) == 8\nassert func(7, 7) == 98\n"}
{"task_id": 288, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(dict1):\n    '''\n    Create a function that determines whether a dictionary is empty or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func({}) == True\nassert func({1: 'a', 2: 'b'}) == False\nassert func({'key': 'value'}) == False\nassert func({1: 2, 3: 4, 5: 6}) == False\nassert func({}) == True", "response_code": "assert func({}) == True\nassert func({1: 'a', 2: 'b'}) == False\nassert func({'key': 'value'}) == False\nassert func({1: 2, 3: 4, 5: 6}) == False\nassert func({}) == True"}
{"task_id": 289, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(num):\n    '''\n    Create a function that calculates the nth Catalan number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 1\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 5\nassert func(4) == 14\n```", "response_code": "\nassert func(0) == 1\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 5\nassert func(4) == 14\n"}
{"task_id": 290, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that uses regex to identify all adverbs and their locations within a provided sentence.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"She quickly ran to the store.\") == [(\"quickly\", 4)]\nassert func(\"He carefully read the instructions.\") == [(\"carefully\", 3)]\nassert func(\"They happily danced all night long.\") == [(\"happily\", 5)]\nassert func(\"I will never forget this moment.\") == [(\"never\", 3)]\nassert func(\"She always arrives on time.\") == [(\"always\", 3)]\n```", "response_code": "\nassert func(\"She quickly ran to the store.\") == [(\"quickly\", 4)]\nassert func(\"He carefully read the instructions.\") == [(\"carefully\", 3)]\nassert func(\"They happily danced all night long.\") == [(\"happily\", 5)]\nassert func(\"I will never forget this moment.\") == [(\"never\", 3)]\nassert func(\"She always arrives on time.\") == [(\"always\", 3)]\n"}
{"task_id": 291, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import heapq\ndef func(items,n):\n    '''\n    Create a function that uses the heap queue algorithm to identify the n most costly items in a provided dataset.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([10, 20, 30, 40, 50], 2) == [50, 40]\nassert func([5, 15, 25, 35, 45], 3) == [45, 35, 25]\nassert func([100, 200, 300, 400, 500], 1) == [500]\nassert func([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\nassert func([7, 14, 21, 28, 35], 4) == [35, 28, 21, 14]\n```", "response_code": "\nassert func([10, 20, 30, 40, 50], 2) == [50, 40]\nassert func([5, 15, 25, 35, 45], 3) == [45, 35, 25]\nassert func([100, 200, 300, 400, 500], 1) == [500]\nassert func([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\nassert func([7, 14, 21, 28, 35], 4) == [35, 28, 21, 14]\n"}
{"task_id": 292, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l, n):\n    '''\n    Create a Python function that divides the array and appends the initial portion to the end.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2]\nassert func([5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 5, 6, 7]\nassert func([10, 20, 30, 40, 50, 60, 70], 4) == [50, 60, 70, 10, 20, 30, 40]\nassert func([100, 200, 300, 400], 1) == [200, 300, 400, 100]\nassert func([1, 3, 5, 7, 9], 5) == [1, 3, 5, 7, 9]\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2]\nassert func([5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 5, 6, 7]\nassert func([10, 20, 30, 40, 50, 60, 70], 4) == [50, 60, 70, 10, 20, 30, 40]\nassert func([100, 200, 300, 400], 1) == [200, 300, 400, 100]\nassert func([1, 3, 5, 7, 9], 5) == [1, 3, 5, 7, 9]\n"}
{"task_id": 293, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(listx):\n    '''\n    Create a function that transforms a list into a tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3]) == (1, 2, 3)\nassert func(['a', 'b', 'c']) == ('a', 'b', 'c')\nassert func([True, False, True]) == (True, False, True)\nassert func([]) == ()\nassert func([1]) == (1,)\n```", "response_code": "\nassert func([1, 2, 3]) == (1, 2, 3)\nassert func(['a', 'b', 'c']) == ('a', 'b', 'c')\nassert func([True, False, True]) == (True, False, True)\nassert func([]) == ()\nassert func([1]) == (1,)\n"}
{"task_id": 294, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a Python function that calculates the difference between the largest and smallest values in a provided array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 4\nassert func([10, 3, 5, 8, 1]) == 9\nassert func([7, 7, 7, 7, 7]) == 0\nassert func([-5, -2, 0, 3, 8]) == 13\nassert func([100, 50, 75, 125, 25]) == 100\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 4\nassert func([10, 3, 5, 8, 1]) == 9\nassert func([7, 7, 7, 7, 7]) == 0\nassert func([-5, -2, 0, 3, 8]) == 13\nassert func([100, 50, 75, 125, 25]) == 100\n"}
{"task_id": 295, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a, b):\n    '''\n    Create a function that identifies all perfect squares within a specified range of numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1, 10) == [1, 4, 9]\nassert func(10, 20) == [16]\nassert func(25, 36) == [25, 36]\nassert func(50, 60) == []\nassert func(100, 120) == [100, 121]", "response_code": "assert func(1, 10) == [1, 4, 9]\nassert func(10, 20) == [16]\nassert func(25, 36) == [25, 36]\nassert func(50, 60) == []\nassert func(100, 120) == [100, 121]"}
{"task_id": 296, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import cmath\ndef func(x,y):\n    '''\n    Create a function that transforms polar coordinates into rectangular coordinates.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1, 0) == (1, 0)\nassert func(2, cmath.pi/2) == (0, 2)\nassert func(3, cmath.pi) == (-3, 0)\nassert func(4, 3*cmath.pi/2) == (0, -4)\nassert func(5, cmath.pi/4) == (3.5355339059327378, 3.5355339059327378)\n```", "response_code": "\nassert func(1, 0) == (1, 0)\nassert func(2, cmath.pi/2) == (0, 2)\nassert func(3, cmath.pi) == (-3, 0)\nassert func(4, 3*cmath.pi/2) == (0, -4)\nassert func(5, cmath.pi/4) == (3.5355339059327378, 3.5355339059327378)\n"}
{"task_id": 297, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(newList): \n    '''\n    Create a Python function that swaps the first and last elements of a list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]\nassert func(['a', 'b', 'c', 'd']) == ['d', 'b', 'c', 'a']\nassert func([10, 20, 30, 40, 50, 60]) == [60, 20, 30, 40, 50, 10]\nassert func([True, False, True]) == [True, False, True]\nassert func([]) == []\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]\nassert func(['a', 'b', 'c', 'd']) == ['d', 'b', 'c', 'a']\nassert func([10, 20, 30, 40, 50, 60]) == [60, 20, 30, 40, 50, 10]\nassert func([True, False, True]) == [True, False, True]\nassert func([]) == []\n"}
{"task_id": 298, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n,k): \n    '''\n    Create a Python function that calculates the sum of the products of binomial coefficients.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 2) == 10\nassert func(4, 3) == 35\nassert func(5, 2) == 26\nassert func(6, 4) == 126\nassert func(7, 3) == 84\n```", "response_code": "\nassert func(3, 2) == 10\nassert func(4, 3) == 35\nassert func(5, 2) == 26\nassert func(6, 4) == 126\nassert func(7, 3) == 84\n"}
{"task_id": 299, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(ip):\n    '''\n    Create a function that eliminates any leading zeros from an IP address.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"192.168.001.001\") == \"192.168.1.1\"\nassert func(\"010.010.010.010\") == \"10.10.10.10\"\nassert func(\"000.000.000.000\") == \"0.0.0.0\"\nassert func(\"255.255.255.255\") == \"255.255.255.255\"\nassert func(\"001.002.003.004\") == \"1.2.3.4\"\n```", "response_code": "\nassert func(\"192.168.001.001\") == \"192.168.1.1\"\nassert func(\"010.010.010.010\") == \"10.10.10.10\"\nassert func(\"000.000.000.000\") == \"0.0.0.0\"\nassert func(\"255.255.255.255\") == \"255.255.255.255\"\nassert func(\"001.002.003.004\") == \"1.2.3.4\"\n"}
{"task_id": 300, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function that calculates the difference between the first even and odd numbers in a provided list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 1\nassert func([2, 4, 6, 8, 10]) == -1\nassert func([5, 10, 15, 20, 25]) == 5\nassert func([1, 3, 5, 7, 9]) == -2\nassert func([2, 3, 4, 5, 6]) == 1\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 1\nassert func([2, 4, 6, 8, 10]) == -1\nassert func([5, 10, 15, 20, 25]) == 5\nassert func([1, 3, 5, 7, 9]) == -2\nassert func([2, 3, 4, 5, 6]) == 1\n"}
{"task_id": 301, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1,str2) : \n    '''\n    Create a Python function that calculates the minimum number of swaps needed to transform one binary string into another.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func('1101', '1110') == 2\nassert func('10101', '11010') == 3\nassert func('111', '111') == 0\nassert func('1010101', '0101010') == 4\nassert func('11111', '00000') == 5", "response_code": "assert func('1101', '1110') == 2\nassert func('10101', '11010') == 3\nassert func('111', '111') == 0\nassert func('1010101', '0101010') == 4\nassert func('11111', '00000') == 5"}
{"task_id": 302, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import sys \ndef func(tuple_list):\n    '''\n    Create a function that determines the length of the provided tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2, 3)]) == 1\nassert func([(1, 2, 3), (4, 5)]) == 2\nassert func([(1,), (2,), (3,)]) == 3\nassert func([(1, 2), (3, 4), (5, 6)]) == 3\nassert func([]) == 0\n```", "response_code": "\nassert func([(1, 2, 3)]) == 1\nassert func([(1, 2, 3), (4, 5)]) == 2\nassert func([(1,), (2,), (3,)]) == 3\nassert func([(1, 2), (3, 4), (5, 6)]) == 3\nassert func([]) == 0\n"}
{"task_id": 303, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr1, arr2, k):\n    '''\n    Create a function that determines the kth element in two sorted arrays.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 3, 5], [2, 4, 6], 3) == 3\nassert func([1, 3, 5], [2, 4, 6], 4) == 4\nassert func([1, 3, 5], [2, 4, 6], 5) == 5\nassert func([1, 3, 5], [2, 4, 6], 6) == 6\nassert func([1, 3, 5], [2, 4, 6], 7) == None\n```", "response_code": "\nassert func([1, 3, 5], [2, 4, 6], 3) == 3\nassert func([1, 3, 5], [2, 4, 6], 4) == 4\nassert func([1, 3, 5], [2, 4, 6], 5) == 5\nassert func([1, 3, 5], [2, 4, 6], 6) == 6\nassert func([1, 3, 5], [2, 4, 6], 7) == None\n"}
{"task_id": 304, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(number):\n    '''\n    Create a function that determines if a given number is an Armstrong number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(153) == True\nassert func(370) == True\nassert func(9474) == True\nassert func(9475) == False\nassert func(1634) == True", "response_code": "assert func(153) == True\nassert func(370) == True\nassert func(9474) == True\nassert func(9475) == False\nassert func(1634) == True"}
{"task_id": 305, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(number):\n    '''\n    Create a function that calculates the sum and average of the first n natural numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5) == (15, 3.0)\nassert func(10) == (55, 5.5)\nassert func(1) == (1, 1.0)\nassert func(0) == (0, 0.0)\nassert func(100) == (5050, 50.5)\n```", "response_code": "\nassert func(5) == (15, 3.0)\nassert func(10) == (55, 5.5)\nassert func(1) == (1, 1.0)\nassert func(0) == (0, 0.0)\nassert func(100) == (5050, 50.5)\n"}
{"task_id": 306, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n) : \n    '''\n    Create a Python function that uses a bitwise operator to determine if a given number is even.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == True\nassert func(2) == True\nassert func(5) == False\nassert func(10) == True\nassert func(17) == False\n```", "response_code": "\nassert func(0) == True\nassert func(2) == True\nassert func(5) == False\nassert func(10) == True\nassert func(17) == False\n"}
{"task_id": 307, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str1):\n    '''\n    Create a Python function that identifies the initial repeated character in a provided string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == \"l\"\nassert func(\"racecar\") == \"r\"\nassert func(\"python\") == None\nassert func(\"aabbc\") == \"a\"\nassert func(\"abcdefg\") == None\n```", "response_code": "\nassert func(\"hello\") == \"l\"\nassert func(\"racecar\") == \"r\"\nassert func(\"python\") == None\nassert func(\"aabbc\") == \"a\"\nassert func(\"abcdefg\") == None\n"}
{"task_id": 308, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    Create a function that retrieves a lucid number that is less than or equal to n.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(10) == 8\nassert func(20) == 18\nassert func(30) == 18\nassert func(50) == 48\nassert func(100) == 98\n```", "response_code": "\nassert func(10) == 8\nassert func(20) == 18\nassert func(30) == 18\nassert func(50) == 48\nassert func(100) == 98\n"}
{"task_id": 309, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(s):\n    '''\n    Create a function that reverses the order of words in a provided string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello World\") == \"World Hello\"\nassert func(\"Python is fun\") == \"fun is Python\"\nassert func(\"123 456 789\") == \"789 456 123\"\nassert func(\"a b c d e\") == \"e d c b a\"\nassert func(\"Reverse this string\") == \"string this Reverse\"\n```", "response_code": "\nassert func(\"Hello World\") == \"World Hello\"\nassert func(\"Python is fun\") == \"fun is Python\"\nassert func(\"123 456 789\") == \"789 456 123\"\nassert func(\"a b c d e\") == \"e d c b a\"\nassert func(\"Reverse this string\") == \"string this Reverse\"\n"}
{"task_id": 310, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(num):\n    '''\n    Create a function that determines whether the provided integer is a prime number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(2) == True\nassert func(3) == True\nassert func(5) == True\nassert func(7) == True\nassert func(11) == True\n```", "response_code": "\nassert func(2) == True\nassert func(3) == True\nassert func(5) == True\nassert func(7) == True\nassert func(11) == True\n"}
{"task_id": 311, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(degree):\n    '''\n    Create a function that converts degrees to radians.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 0.0\nassert func(90) == math.pi/2\nassert func(180) == math.pi\nassert func(270) == 3*math.pi/2\nassert func(360) == 2*math.pi\n```", "response_code": "\nassert func(0) == 0.0\nassert func(90) == math.pi/2\nassert func(180) == math.pi\nassert func(270) == 3*math.pi/2\nassert func(360) == 2*math.pi\n"}
{"task_id": 312, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\n\ndef func(text, pattern):\n    '''\n    Create a function that uses regex to search for a specific string within another string and determine the location of the pattern within the original string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello world\", \"world\") == 6\nassert func(\"apple banana cherry\", \"banana\") == 6\nassert func(\"python is fun\", \"python\") == 0\nassert func(\"regex is powerful\", \"powerful\") == 9\nassert func(\"programming is cool\", \"programming\") == 0\n```", "response_code": "\nassert func(\"hello world\", \"world\") == 6\nassert func(\"apple banana cherry\", \"banana\") == 6\nassert func(\"python is fun\", \"python\") == 0\nassert func(\"regex is powerful\", \"powerful\") == 9\nassert func(\"programming is cool\", \"programming\") == 0\n"}
{"task_id": 313, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a Python function that calculates the nth Bell number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(0) == 1\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 5\nassert func(4) == 15", "response_code": "assert func(0) == 1\nassert func(1) == 1\nassert func(2) == 2\nassert func(3) == 5\nassert func(4) == 15"}
{"task_id": 314, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1, L):\n    '''\n    Create a Python function that deletes the element at index k from a specified list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5], 2) == [1, 2, 4, 5]\nassert func(['a', 'b', 'c', 'd'], 1) == ['a', 'c', 'd']\nassert func([10, 20, 30, 40, 50], 3) == [10, 20, 30, 50]\nassert func([], 0) == []\nassert func(['x', 'y', 'z'], 2) == ['x', 'y']", "response_code": "assert func([1, 2, 3, 4, 5], 2) == [1, 2, 4, 5]\nassert func(['a', 'b', 'c', 'd'], 1) == ['a', 'c', 'd']\nassert func([10, 20, 30, 40, 50], 3) == [10, 20, 30, 50]\nassert func([], 0) == []\nassert func(['x', 'y', 'z'], 2) == ['x', 'y']"}
{"task_id": 315, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list, N):\n    '''\n    Create a function that can determine the highest value in the nth column of a provided list of tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 0) == 7\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == 8\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == 9\nassert func([(10, 20, 30), (40, 50, 60), (70, 80, 90)], 1) == 80\nassert func([(100, 200, 300), (400, 500, 600), (700, 800, 900)], 0) == 700\n```", "response_code": "\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 0) == 7\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == 8\nassert func([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == 9\nassert func([(10, 20, 30), (40, 50, 60), (70, 80, 90)], 1) == 80\nassert func([(100, 200, 300), (400, 500, 600), (700, 800, 900)], 0) == 700\n"}
{"task_id": 316, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lst):  \n    '''\n    Create a Python function that combines the first and last elements of each sublist in a list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 3], [4, 6], [7, 9]]\nassert func([[10, 20], [30, 40], [50, 60]]) == [[10, 20], [30, 40], [50, 60]]\nassert func([[100, 200, 300], [400, 500, 600]]) == [[100, 300], [400, 600]]\nassert func([[1], [2], [3]]) == [[1, 1], [2, 2], [3, 3]]\nassert func([[1, 2, 3, 4]]) == [[1, 4]]\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 3], [4, 6], [7, 9]]\nassert func([[10, 20], [30, 40], [50, 60]]) == [[10, 20], [30, 40], [50, 60]]\nassert func([[100, 200, 300], [400, 500, 600]]) == [[100, 300], [400, 600]]\nassert func([[1], [2], [3]]) == [[1, 1], [2, 2], [3, 3]]\nassert func([[1, 2, 3, 4]]) == [[1, 4]]\n"}
{"task_id": 317, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Create a function that calculates the total sum of all values in a given list of tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([(1, 2), (3, 4), (5, 6)]) == 21\nassert func([(10, 20), (30, 40), (50, 60)]) == 210\nassert func([(2, 3), (4, 5), (6, 7)]) == 27\nassert func([(0, 0), (0, 0), (0, 0)]) == 0\nassert func([(1, 1), (2, 2), (3, 3)]) == 12", "response_code": "assert func([(1, 2), (3, 4), (5, 6)]) == 21\nassert func([(10, 20), (30, 40), (50, 60)]) == 210\nassert func([(2, 3), (4, 5), (6, 7)]) == 27\nassert func([(0, 0), (0, 0), (0, 0)]) == 0\nassert func([(1, 1), (2, 2), (3, 3)]) == 12"}
{"task_id": 318, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a function that calculates the average value of the numbers within a tuple containing multiple tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(((1, 2, 3), (4, 5, 6), (7, 8, 9))) == 5.0\nassert func(((10, 20), (30, 40, 50), (60, 70, 80, 90))) == 50.0\nassert func(((2, 4, 6), (8, 10), (12, 14, 16))) == 9.0\nassert func(((1, 3, 5, 7), (2, 4, 6), (9, 11, 13))) == 6.0\nassert func(((0,), (0,), (0,))) == 0.0\n```", "response_code": "\nassert func(((1, 2, 3), (4, 5, 6), (7, 8, 9))) == 5.0\nassert func(((10, 20), (30, 40, 50), (60, 70, 80, 90))) == 50.0\nassert func(((2, 4, 6), (8, 10), (12, 14, 16))) == 9.0\nassert func(((1, 3, 5, 7), (2, 4, 6), (9, 11, 13))) == 6.0\nassert func(((0,), (0,), (0,))) == 0.0\n"}
{"task_id": 319, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function that calculates the modulo of elements in two tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((10, 5, 8), (3, 2, 4)) == (1, 1, 0)\nassert func((15, 7, 9), (4, 3, 5)) == (3, 1, 4)\nassert func((20, 10, 6), (7, 3, 2)) == (6, 1, 0)\nassert func((25, 12, 15), (8, 4, 6)) == (1, 0, 3)\nassert func((30, 18, 21), (9, 6, 7)) == (3, 0, 0)\n```", "response_code": "\nassert func((10, 5, 8), (3, 2, 4)) == (1, 1, 0)\nassert func((15, 7, 9), (4, 3, 5)) == (3, 1, 4)\nassert func((20, 10, 6), (7, 3, 2)) == (6, 1, 0)\nassert func((25, 12, 15), (8, 4, 6)) == (1, 0, 3)\nassert func((30, 18, 21), (9, 6, 7)) == (3, 0, 0)\n"}
{"task_id": 320, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(steps, d): \n    '''\n    Create a function that determines the number of jumps needed to reach a point (d, 0) from the origin in a 2D plane, given a specific jump length.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 5) == 2\nassert func(5, 10) == 1\nassert func(4, 8) == 2\nassert func(2, 3) == 2\nassert func(6, 12) == 1\n```", "response_code": "\nassert func(3, 5) == 2\nassert func(5, 10) == 1\nassert func(4, 8) == 2\nassert func(2, 3) == 2\nassert func(6, 12) == 1\n"}
{"task_id": 321, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums1,nums2):\n    '''\n    Create a function that uses map and lambda to divide two lists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([10, 20, 30], [2, 4, 6]) == [5.0, 5.0, 5.0]\nassert func([5, 10, 15], [1, 2, 3]) == [5.0, 5.0, 5.0]\nassert func([100, 200, 300], [10, 20, 30]) == [10.0, 10.0, 10.0]\nassert func([8, 16, 24], [2, 4, 6]) == [4.0, 4.0, 4.0]\nassert func([25, 50, 75], [5, 10, 15]) == [5.0, 5.0, 5.0]\n```", "response_code": "\nassert func([10, 20, 30], [2, 4, 6]) == [5.0, 5.0, 5.0]\nassert func([5, 10, 15], [1, 2, 3]) == [5.0, 5.0, 5.0]\nassert func([100, 200, 300], [10, 20, 30]) == [10.0, 10.0, 10.0]\nassert func([8, 16, 24], [2, 4, 6]) == [4.0, 4.0, 4.0]\nassert func([25, 50, 75], [5, 10, 15]) == [5.0, 5.0, 5.0]\n"}
{"task_id": 322, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_str):\n    '''\n    Create a function that transfers all the numbers from the input to the specified string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"abc123\") == \"123\"\nassert func(\"1a2b3c\") == \"123\"\nassert func(\"hello123world456\") == \"123456\"\nassert func(\"no_numbers_here\") == \"\"\nassert func(\"12345\") == \"12345\"\n```", "response_code": "\nassert func(\"abc123\") == \"123\"\nassert func(\"1a2b3c\") == \"123\"\nassert func(\"hello123world456\") == \"123456\"\nassert func(\"no_numbers_here\") == \"\"\nassert func(\"12345\") == \"12345\"\n"}
{"task_id": 323, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a):\n    '''\n    Create a function that identifies the largest subset in which every pair of elements is divisible.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == [1, 2, 4]\nassert func([2, 4, 6, 8, 10]) == [2, 4, 8]\nassert func([3, 6, 9, 12, 15]) == [3, 6, 12]\nassert func([5, 10, 15, 20, 25]) == [5, 10, 20]\nassert func([1, 3, 5, 7, 9]) == [1]\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == [1, 2, 4]\nassert func([2, 4, 6, 8, 10]) == [2, 4, 8]\nassert func([3, 6, 9, 12, 15]) == [3, 6, 12]\nassert func([5, 10, 15, 20, 25]) == [5, 10, 20]\nassert func([1, 3, 5, 7, 9]) == [1]\n"}
{"task_id": 324, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr1, arr2, n):\n    '''\n    Create a function that calculates the median of two sorted arrays that are the same size.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 3, 5], [2, 4, 6], 3) == 3.5\nassert func([1, 2, 3, 4], [5, 6, 7, 8], 4) == 4.5\nassert func([10, 20, 30], [15, 25, 35], 3) == 22.5\nassert func([2, 4, 6, 8], [1, 3, 5, 7], 4) == 4.5\nassert func([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5) == 5.5\n```", "response_code": "\nassert func([1, 3, 5], [2, 4, 6], 3) == 3.5\nassert func([1, 2, 3, 4], [5, 6, 7, 8], 4) == 4.5\nassert func([10, 20, 30], [15, 25, 35], 3) == 22.5\nassert func([2, 4, 6, 8], [1, 3, 5, 7], 4) == 4.5\nassert func([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5) == 5.5\n"}
{"task_id": 325, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums,n):\n    '''\n    Create a lambda function that calculates the n-th power of each element in a list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([2, 3, 4], 2) == [4, 9, 16]\nassert func([1, 2, 3, 4], 3) == [1, 8, 27, 64]\nassert func([5, 6, 7], 0) == [1, 1, 1]\nassert func([0, 1, 2, 3], 1) == [0, 1, 2, 3]\nassert func([2, 4, 6, 8], 4) == [16, 256, 1296, 4096]\n```", "response_code": "\nassert func([2, 3, 4], 2) == [4, 9, 16]\nassert func([1, 2, 3, 4], 3) == [1, 8, 27, 64]\nassert func([5, 6, 7], 0) == [1, 1, 1]\nassert func([0, 1, 2, 3], 1) == [0, 1, 2, 3]\nassert func([2, 4, 6, 8], 4) == [16, 256, 1296, 4096]\n"}
{"task_id": 326, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(string):\n    '''\n    Create a Python function that changes the provided string to uppercase.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == \"HELLO\"\nassert func(\"Python\") == \"PYTHON\"\nassert func(\"123abc\") == \"123ABC\"\nassert func(\"UPPERCASE\") == \"UPPERCASE\"\nassert func(\"\") == \"\"\n```", "response_code": "\nassert func(\"hello\") == \"HELLO\"\nassert func(\"Python\") == \"PYTHON\"\nassert func(\"123abc\") == \"123ABC\"\nassert func(\"UPPERCASE\") == \"UPPERCASE\"\nassert func(\"\") == \"\"\n"}
{"task_id": 327, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(newList): \n    '''\n    Create a Python function that swaps the first and last elements of a provided list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]\nassert func(['a', 'b', 'c', 'd']) == ['d', 'b', 'c', 'a']\nassert func([10, 20, 30, 40, 50, 60]) == [60, 20, 30, 40, 50, 10]\nassert func([True, False, True]) == [True, False, True]\nassert func([]) == []\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]\nassert func(['a', 'b', 'c', 'd']) == ['d', 'b', 'c', 'a']\nassert func([10, 20, 30, 40, 50, 60]) == [60, 20, 30, 40, 50, 10]\nassert func([True, False, True]) == [True, False, True]\nassert func([]) == []\n"}
{"task_id": 328, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(r) :  \n    '''\n    Create a Python function that determines the largest triangle that can fit inside a semicircle.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5) == 10.0\nassert func(8) == 16.0\nassert func(10) == 20.0\nassert func(15) == 30.0\nassert func(20) == 40.0\n```", "response_code": "\nassert func(5) == 10.0\nassert func(8) == 16.0\nassert func(10) == 20.0\nassert func(15) == 30.0\nassert func(20) == 40.0\n"}
{"task_id": 329, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(array,start=0,end=None):\n    '''\n    Create a Python function that identifies the smallest missing number in a provided array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([0, 1, 2, 3, 4, 5]) == 6\nassert func([1, 2, 3, 4, 5]) == 0\nassert func([0, 1, 2, 3, 4]) == 5\nassert func([0, 1, 3, 4, 5]) == 2\nassert func([0, 1, 2, 3, 5]) == 4\n```", "response_code": "\nassert func([0, 1, 2, 3, 4, 5]) == 6\nassert func([1, 2, 3, 4, 5]) == 0\nassert func([0, 1, 2, 3, 4]) == 5\nassert func([0, 1, 3, 4, 5]) == 2\nassert func([0, 1, 2, 3, 5]) == 4\n"}
{"task_id": 330, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(string):\n    '''\n    Create a function that replaces all spaces in the provided string with the characters '%20'.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello world\") == \"hello%20world\"\nassert func(\"a b c\") == \"a%20b%20c\"\nassert func(\"  space  \") == \"%20%20space%20%20\"\nassert func(\"\") == \"\"\nassert func(\"noSpaces\") == \"noSpaces\"\n```", "response_code": "\nassert func(\"hello world\") == \"hello%20world\"\nassert func(\"a b c\") == \"a%20b%20c\"\nassert func(\"  space  \") == \"%20%20space%20%20\"\nassert func(\"\") == \"\"\nassert func(\"noSpaces\") == \"noSpaces\"\n"}
{"task_id": 331, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list): \n    '''\n    Create a Python function that identifies even numbers within a list containing a mix of numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5]) == [2, 4]\nassert func([10, 15, 20, 25, 30]) == [10, 20, 30]\nassert func([11, 13, 17, 19, 23]) == []\nassert func([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10]\nassert func([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 2, 4, 6, 8]", "response_code": "assert func([1, 2, 3, 4, 5]) == [2, 4]\nassert func([10, 15, 20, 25, 30]) == [10, 20, 30]\nassert func([11, 13, 17, 19, 23]) == []\nassert func([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10]\nassert func([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 2, 4, 6, 8]"}
{"task_id": 332, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(ele, sub = []): \n    '''\n    Create a function that retrieves all neighboring coordinates of a specified coordinate tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((0, 0)) == [(0, 1), (1, 0)]\nassert func((2, 2)) == [(1, 2), (3, 2), (2, 1), (2, 3)]\nassert func((0, 0), [(0, 1)]) == [(0, 1), (1, 0)]\nassert func((2, 2), [(1, 2), (3, 2)]) == [(1, 2), (3, 2), (2, 1), (2, 3)]\nassert func((5, 5), [(4, 5), (5, 4)]) == [(4, 5), (5, 4), (5, 6), (6, 5)]\n```", "response_code": "\nassert func((0, 0)) == [(0, 1), (1, 0)]\nassert func((2, 2)) == [(1, 2), (3, 2), (2, 1), (2, 3)]\nassert func((0, 0), [(0, 1)]) == [(0, 1), (1, 0)]\nassert func((2, 2), [(1, 2), (3, 2)]) == [(1, 2), (3, 2), (2, 1), (2, 3)]\nassert func((5, 5), [(4, 5), (5, 4)]) == [(4, 5), (5, 4), (5, 6), (6, 5)]\n"}
{"task_id": 333, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(text):\n    '''\n    Create a function that uses regex to swap whitespaces with underscores and vice versa in a provided string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello world\") == \"hello_world\"\nassert func(\"python_is_fun\") == \"python is fun\"\nassert func(\"a_b_c\") == \"a b c\"\nassert func(\"123_456\") == \"123 456\"\nassert func(\"   \") == \"___\"\n```", "response_code": "\nassert func(\"hello world\") == \"hello_world\"\nassert func(\"python_is_fun\") == \"python is fun\"\nassert func(\"a_b_c\") == \"a b c\"\nassert func(\"123_456\") == \"123 456\"\nassert func(\"   \") == \"___\"\n"}
{"task_id": 334, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(num_list):\n    '''\n    Create a Python function that shifts all zeros to the end of a provided list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([0, 1, 0, 3, 12]) == [1, 3, 12, 0, 0]\nassert func([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([0, 0, 1, 0, 2]) == [1, 2, 0, 0, 0]\nassert func([0, 5, 0, 0, 8]) == [5, 8, 0, 0, 0]\n```", "response_code": "\nassert func([0, 1, 0, 3, 12]) == [1, 3, 12, 0, 0]\nassert func([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([0, 0, 1, 0, 2]) == [1, 2, 0, 0, 0]\nassert func([0, 5, 0, 0, 8]) == [5, 8, 0, 0, 0]\n"}
{"task_id": 335, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr,n) : \n    '''\n    Create a Python function that calculates the sum of the XOR of all pairs of numbers in the provided array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], 3) == 2\nassert func([4, 5, 6, 7], 4) == 8\nassert func([10, 20, 30, 40, 50], 5) == 80\nassert func([3, 5, 7, 9, 11, 13], 6) == 16\nassert func([2, 4, 6, 8, 10, 12, 14], 7) == 24\n```", "response_code": "\nassert func([1, 2, 3], 3) == 2\nassert func([4, 5, 6, 7], 4) == 8\nassert func([10, 20, 30, 40, 50], 5) == 80\nassert func([3, 5, 7, 9, 11, 13], 6) == 16\nassert func([2, 4, 6, 8, 10, 12, 14], 7) == 24\n"}
{"task_id": 336, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import heapq as hq\ndef func(iterable):\n    '''\n    Create a function that adds all values to a heap and then removes the smallest values individually.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]\nassert func([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert func([2, 2, 2, 2, 2]) == [2, 2, 2, 2, 2]\n```", "response_code": "\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]\nassert func([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert func([2, 2, 2, 2, 2]) == [2, 2, 2, 2, 2]\n"}
{"task_id": 337, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(actual_cost,sale_amount): \n    '''\n    Create a function that determines if the specified amount results in neither profit nor loss.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(100, 100) == True\nassert func(50, 50) == True\nassert func(200, 200) == True\nassert func(150, 150) == True\nassert func(75, 75) == True\n```", "response_code": "\nassert func(100, 100) == True\nassert func(50, 50) == True\nassert func(200, 200) == True\nassert func(150, 150) == True\nassert func(75, 75) == True\n"}
{"task_id": 338, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(v,t):\n    '''\n    Create a function that computes the wind chill index.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(10, 5) == 6.0\nassert func(20, 10) == 8.0\nassert func(30, 15) == 10.0\nassert func(40, 20) == 12.0\nassert func(50, 25) == 14.0\n```", "response_code": "\nassert func(10, 5) == 6.0\nassert func(20, 10) == 8.0\nassert func(30, 15) == 10.0\nassert func(40, 20) == 12.0\nassert func(50, 25) == 14.0\n"}
{"task_id": 339, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(funces):\n    '''\n    Create a function that calculates the total length of names in a list after excluding those that begin with a lowercase letter.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['Alice', 'bob', 'Charlie', 'David']) == 12\nassert func(['Eve', 'frank', 'Grace', 'Henry']) == 8\nassert func(['Ivy', 'jack', 'Kate', 'Liam']) == 7\nassert func(['Mary', 'Nathan', 'Olivia', 'Peter']) == 18\nassert func(['Quinn', 'Rose', 'Sam', 'Tom']) == 10\n```", "response_code": "\nassert func(['Alice', 'bob', 'Charlie', 'David']) == 12\nassert func(['Eve', 'frank', 'Grace', 'Henry']) == 8\nassert func(['Ivy', 'jack', 'Kate', 'Liam']) == 7\nassert func(['Mary', 'Nathan', 'Olivia', 'Peter']) == 18\nassert func(['Quinn', 'Rose', 'Sam', 'Tom']) == 10\n"}
{"task_id": 340, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(items):\n    '''\n    Create a function that eliminates the content within parentheses in a given string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello (world)\") == \"Hello \"\nassert func(\"Python (programming) is fun\") == \"Python  is fun\"\nassert func(\"I love (coding) in Python\") == \"I love  in Python\"\nassert func(\"This is a (test)\") == \"This is a \"\nassert func(\"(Hello) World\") == \" World\"\n```", "response_code": "\nassert func(\"Hello (world)\") == \"Hello \"\nassert func(\"Python (programming) is fun\") == \"Python  is fun\"\nassert func(\"I love (coding) in Python\") == \"I love  in Python\"\nassert func(\"This is a (test)\") == \"This is a \"\nassert func(\"(Hello) World\") == \" World\"\n"}
{"task_id": 341, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function that calculates the nonagonal number at position n.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 1\nassert func(2) == 9\nassert func(3) == 27\nassert func(4) == 51\nassert func(5) == 81", "response_code": "assert func(1) == 1\nassert func(2) == 9\nassert func(3) == 27\nassert func(4) == 51\nassert func(5) == 81"}
{"task_id": 342, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that identifies a word with the letter 'z' in the middle, not at the beginning or end.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"zebra\") == False\nassert func(\"amazing\") == True\nassert func(\"crazy\") == False\nassert func(\"pizza\") == True\nassert func(\"hazard\") == True\n```", "response_code": "\nassert func(\"zebra\") == False\nassert func(\"amazing\") == True\nassert func(\"crazy\") == False\nassert func(\"pizza\") == True\nassert func(\"hazard\") == True\n"}
{"task_id": 343, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(input, k): \n    '''\n    Create a Python function that reverses an array up to a specified position.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3, 4, 5], 2) == [2, 1, 3, 4, 5]\nassert func([5, 4, 3, 2, 1], 3) == [3, 4, 5, 2, 1]\nassert func([10, 20, 30, 40, 50], 4) == [40, 30, 20, 10, 50]\nassert func([100, 200, 300, 400, 500], 0) == [100, 200, 300, 400, 500]\nassert func([7, 8, 9, 10], 3) == [9, 8, 7, 10]", "response_code": "assert func([1, 2, 3, 4, 5], 2) == [2, 1, 3, 4, 5]\nassert func([5, 4, 3, 2, 1], 3) == [3, 4, 5, 2, 1]\nassert func([10, 20, 30, 40, 50], 4) == [40, 30, 20, 10, 50]\nassert func([100, 200, 300, 400, 500], 0) == [100, 200, 300, 400, 500]\nassert func([7, 8, 9, 10], 3) == [9, 8, 7, 10]"}
{"task_id": 344, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup, test_dict):\n    '''\n    Create a function that adds a dictionary to a tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\ntest_tup = (1, 2, 3)\ntest_dict = {'a': 1, 'b': 2}\n\nfunc(test_tup, test_dict)\nassert test_tup == (1, 2, 3, {'a': 1, 'b': 2})\n\ntest_tup = ('apple', 'banana')\ntest_dict = {'c': 'cherry', 'd': 'date'}\n\nfunc(test_tup, test_dict)\nassert test_tup == ('apple', 'banana', {'c': 'cherry', 'd': 'date'})\n\ntest_tup = (10,)\ntest_dict = {'x': 100}\n\nfunc(test_tup, test_dict)\nassert test_tup == (10, {'x': 100})\n\ntest_tup = ()\ntest_dict = {'empty': 'dictionary'}\n\nfunc(test_tup, test_dict)\nassert test_tup == ({'empty': 'dictionary'},)\n\ntest_tup = (True, False)\ntest_dict = {'yes': True, 'no': False}\n\nfunc(test_tup, test_dict)\nassert test_tup == (True, False, {'yes': True, 'no': False})\n```", "response_code": "\ntest_tup = (1, 2, 3)\ntest_dict = {'a': 1, 'b': 2}\n\nfunc(test_tup, test_dict)\nassert test_tup == (1, 2, 3, {'a': 1, 'b': 2})\n\ntest_tup = ('apple', 'banana')\ntest_dict = {'c': 'cherry', 'd': 'date'}\n\nfunc(test_tup, test_dict)\nassert test_tup == ('apple', 'banana', {'c': 'cherry', 'd': 'date'})\n\ntest_tup = (10,)\ntest_dict = {'x': 100}\n\nfunc(test_tup, test_dict)\nassert test_tup == (10, {'x': 100})\n\ntest_tup = ()\ntest_dict = {'empty': 'dictionary'}\n\nfunc(test_tup, test_dict)\nassert test_tup == ({'empty': 'dictionary'},)\n\ntest_tup = (True, False)\ntest_dict = {'yes': True, 'no': False}\n\nfunc(test_tup, test_dict)\nassert test_tup == (True, False, {'yes': True, 'no': False})\n"}
{"task_id": 345, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(cost):\n    '''\n    Create a function that determines the path with the highest average among all paths in a square matrix of size n*n.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [9]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == [12]\nassert func([[1, 2], [3, 4]]) == [4]\nassert func([[5]]) == [5]\nassert func([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == [16]\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [9]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == [12]\nassert func([[1, 2], [3, 4]]) == [4]\nassert func([[5]]) == [5]\nassert func([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == [16]\n"}
{"task_id": 346, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(students,h,w):\n    '''\n    Create a function that filters the height and width values of students stored in a dictionary.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nstudents = {\n    'Alice': {'height': 160, 'width': 50},\n    'Bob': {'height': 170, 'width': 60},\n    'Charlie': {'height': 165, 'width': 55},\n    'David': {'height': 175, 'width': 65},\n    'Eve': {'height': 155, 'width': 45}\n}\n\n# Test case 1: Filter students with height greater than 160 and width greater than 50\nassert func(students, 160, 50) == {'Bob': {'height': 170, 'width': 60}, 'David': {'height': 175, 'width': 65}}\n\n# Test case 2: Filter students with height greater than 170 and width greater than 60\nassert func(students, 170, 60) == {'David': {'height': 175, 'width': 65}}\n\n# Test case 3: Filter students with height greater than 180 and width greater than 70\nassert func(students, 180, 70) == {}\n\n# Test case 4: Filter students with height greater than 150 and width greater than 40\nassert func(students, 150, 40) == students\n\n# Test case 5: Filter students with height greater than 160 and width greater than 60\nassert func(students, 160, 60) == {'Bob': {'height': 170, 'width': 60}, 'David': {'height': 175, 'width': 65}}\n```", "response_code": "\nstudents = {\n    'Alice': {'height': 160, 'width': 50},\n    'Bob': {'height': 170, 'width': 60},\n    'Charlie': {'height': 165, 'width': 55},\n    'David': {'height': 175, 'width': 65},\n    'Eve': {'height': 155, 'width': 45}\n}\n\n# Test case 1: Filter students with height greater than 160 and width greater than 50\nassert func(students, 160, 50) == {'Bob': {'height': 170, 'width': 60}, 'David': {'height': 175, 'width': 65}}\n\n# Test case 2: Filter students with height greater than 170 and width greater than 60\nassert func(students, 170, 60) == {'David': {'height': 175, 'width': 65}}\n\n# Test case 3: Filter students with height greater than 180 and width greater than 70\nassert func(students, 180, 70) == {}\n\n# Test case 4: Filter students with height greater than 150 and width greater than 40\nassert func(students, 150, 40) == students\n\n# Test case 5: Filter students with height greater than 160 and width greater than 60\nassert func(students, 160, 60) == {'Bob': {'height': 170, 'width': 60}, 'David': {'height': 175, 'width': 65}}\n"}
{"task_id": 347, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from operator import eq\ndef func(nums1, nums2):\n    '''\n    Create a function that uses the map function to count identical pairs in two provided lists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], [1, 2, 3]) == 3\nassert func([1, 2, 3], [4, 5, 6]) == 0\nassert func([1, 2, 3], [3, 2, 1]) == 3\nassert func([1, 2, 3], [1, 2, 3, 4, 5]) == 3\nassert func([], []) == 0\n```", "response_code": "\nassert func([1, 2, 3], [1, 2, 3]) == 3\nassert func([1, 2, 3], [4, 5, 6]) == 0\nassert func([1, 2, 3], [3, 2, 1]) == 3\nassert func([1, 2, 3], [1, 2, 3, 4, 5]) == 3\nassert func([], []) == 0\n"}
{"task_id": 348, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(base, power):\n    '''\n    Create a function that adds up all the digits of the base raised to the given power.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(2, 3) == 8\nassert func(3, 4) == 9\nassert func(5, 2) == 7\nassert func(10, 2) == 1\nassert func(7, 3) == 8\n```", "response_code": "\nassert func(2, 3) == 8\nassert func(3, 4) == 9\nassert func(5, 2) == 7\nassert func(10, 2) == 1\nassert func(7, 3) == 8\n"}
{"task_id": 349, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text1):\n    '''\n    Create a function that uses regex to retrieve values enclosed in quotation marks from a provided string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func('This is a \"test\" string') == ['test']\nassert func('No quotes here') == []\nassert func('Multiple \"quotes\" \"in\" \"one\" string') == ['quotes', 'in', 'one']\nassert func('Only \"one\" quote') == ['one']\nassert func('Empty \"\" quotes') == ['']\n```", "response_code": "\nassert func('This is a \"test\" string') == ['test']\nassert func('No quotes here') == []\nassert func('Multiple \"quotes\" \"in\" \"one\" string') == ['quotes', 'in', 'one']\nassert func('Only \"one\" quote') == ['one']\nassert func('Empty \"\" quotes') == ['']\n"}
{"task_id": 350, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    Create a function that multiplies the neighboring elements in the provided tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3, 4)) == (2, 6, 12)\nassert func((5, 10, 15, 20)) == (50, 150, 300)\nassert func((2, 4, 6, 8, 10)) == (8, 24, 48, 80)\nassert func((3, 6, 9, 12, 15, 18)) == (18, 54, 108, 180, 270)\nassert func((4, 8, 12, 16, 20, 24, 28)) == (32, 96, 192, 320, 480, 672)\n```", "response_code": "\nassert func((1, 2, 3, 4)) == (2, 6, 12)\nassert func((5, 10, 15, 20)) == (50, 150, 300)\nassert func((2, 4, 6, 8, 10)) == (8, 24, 48, 80)\nassert func((3, 6, 9, 12, 15, 18)) == (18, 54, 108, 180, 270)\nassert func((4, 8, 12, 16, 20, 24, 28)) == (32, 96, 192, 320, 480, 672)\n"}
{"task_id": 351, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lst1,lst2):\n    '''\n    Create a function that adds up the elements in two lists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3], [4, 5, 6]) == [5, 7, 9]\nassert func([10, 20, 30], [40, 50, 60]) == [50, 70, 90]\nassert func([0, 0, 0], [0, 0, 0]) == [0, 0, 0]\nassert func([-1, -2, -3], [-4, -5, -6]) == [-5, -7, -9]\nassert func([100, 200, 300], [400, 500, 600]) == [500, 700, 900]", "response_code": "assert func([1, 2, 3], [4, 5, 6]) == [5, 7, 9]\nassert func([10, 20, 30], [40, 50, 60]) == [50, 70, 90]\nassert func([0, 0, 0], [0, 0, 0]) == [0, 0, 0]\nassert func([-1, -2, -3], [-4, -5, -6]) == [-5, -7, -9]\nassert func([100, 200, 300], [400, 500, 600]) == [500, 700, 900]"}
{"task_id": 352, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from itertools import groupby\ndef func(nums):\n    '''\n    Create a function that eliminates consecutive duplicates from a provided list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [1, 2, 3, 4]\nassert func([1, 1, 1, 1, 1]) == [1]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([]) == []\nassert func([1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4]) == [1, 2, 3, 4]\n```", "response_code": "\nassert func([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [1, 2, 3, 4]\nassert func([1, 1, 1, 1, 1]) == [1]\nassert func([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert func([]) == []\nassert func([1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4]) == [1, 2, 3, 4]\n"}
{"task_id": 353, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(r,h):\n    '''\n    Create a function that calculates the lateral surface area of a cone.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 4) == 18.85\nassert func(5, 7) == 66.96\nassert func(2, 10) == 25.13\nassert func(6, 3) == 47.12\nassert func(8, 6) == 100.53\n```", "response_code": "\nassert func(3, 4) == 18.85\nassert func(5, 7) == 66.96\nassert func(2, 10) == 25.13\nassert func(6, 3) == 47.12\nassert func(8, 6) == 100.53\n"}
{"task_id": 354, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that replaces any instances of spaces, commas, or dots with a colon.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello, world\") == \"Hello: world\"\nassert func(\"Python is fun.\") == \"Python: is: fun:\"\nassert func(\"1,2,3,4,5\") == \"1:2:3:4:5\"\nassert func(\"NoSpacesHere\") == \"NoSpacesHere\"\nassert func(\"   \") == \":::\"\n```", "response_code": "\nassert func(\"Hello, world\") == \"Hello: world\"\nassert func(\"Python is fun.\") == \"Python: is: fun:\"\nassert func(\"1,2,3,4,5\") == \"1:2:3:4:5\"\nassert func(\"NoSpacesHere\") == \"NoSpacesHere\"\nassert func(\"   \") == \":::\"\n"}
{"task_id": 355, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(A, x):\n    '''\n    Create a function that determines the position of the first instance of a specified number in an array that has been sorted.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 3) == 2\nassert func([1, 2, 3, 4, 5], 6) == -1\nassert func([1, 2, 3, 4, 5], 0) == -1\nassert func([1, 2, 3, 4, 5], 1) == 0\nassert func([1, 2, 3, 4, 5], 5) == 4\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 3) == 2\nassert func([1, 2, 3, 4, 5], 6) == -1\nassert func([1, 2, 3, 4, 5], 0) == -1\nassert func([1, 2, 3, 4, 5], 1) == 0\nassert func([1, 2, 3, 4, 5], 5) == 4\n"}
{"task_id": 356, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):\n    '''\n    Create a Python function that calculates the sum of the products of all potential subarrays.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3]) == 50\nassert func([4, 5, 6, 7]) == 444\nassert func([2, 2, 2, 2]) == 40\nassert func([3, 4, 5, 6]) == 190\nassert func([1, 2, 3, 4, 5]) == 370\n```", "response_code": "\nassert func([1, 2, 3]) == 50\nassert func([4, 5, 6, 7]) == 444\nassert func([2, 2, 2, 2]) == 40\nassert func([3, 4, 5, 6]) == 190\nassert func([1, 2, 3, 4, 5]) == 370\n"}
{"task_id": 357, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):  \n    '''\n    Create a Python function that switches the bits of a number, excluding the first and last bits.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(10) == 5\nassert func(21) == 10\nassert func(56) == 7\nassert func(127) == 63\nassert func(255) == 127\n```", "response_code": "\nassert func(10) == 5\nassert func(21) == 10\nassert func(56) == 7\nassert func(127) == 63\nassert func(255) == 127\n"}
{"task_id": 358, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import bisect\ndef func(a, x):\n    '''\n    Create a function that finds the index where a specified value should be inserted in a sorted list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 3, 5, 7], 4) == 2\nassert func([1, 3, 5, 7], 8) == 4\nassert func([1, 3, 5, 7], 0) == 0\nassert func([1, 3, 5, 7], 3) == 1\nassert func([1, 3, 5, 7], 6) == 3\n```", "response_code": "\nassert func([1, 3, 5, 7], 4) == 2\nassert func([1, 3, 5, 7], 8) == 4\nassert func([1, 3, 5, 7], 0) == 0\nassert func([1, 3, 5, 7], 3) == 1\nassert func([1, 3, 5, 7], 6) == 3\n"}
{"task_id": 359, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef func(string): \n    '''\n    Create a function that uses regex to determine if a given string begins with a vowel.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"apple\") == True\nassert func(\"banana\") == True\nassert func(\"123abc\") == False\nassert func(\"orange\") == True\nassert func(\"123\") == False\n```", "response_code": "\nassert func(\"apple\") == True\nassert func(\"banana\") == True\nassert func(\"123abc\") == False\nassert func(\"orange\") == True\nassert func(\"123\") == False\n"}
{"task_id": 360, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n):\n    '''\n    Create a function that computes the geometric sum up to n-1.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 0\nassert func(2) == 1\nassert func(3) == 1.5\nassert func(4) == 1.75\nassert func(5) == 1.875\n```", "response_code": "\nassert func(1) == 0\nassert func(2) == 1\nassert func(3) == 1.5\nassert func(4) == 1.75\nassert func(5) == 1.875\n"}
{"task_id": 361, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math \ndef func(n): \n    '''\n    Create a Python function that determines the index of the smallest triangular number with n digits.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 3\nassert func(2) == 45\nassert func(3) == 285\nassert func(4) == 1785\nassert func(5) == 12375\n```", "response_code": "\nassert func(1) == 3\nassert func(2) == 45\nassert func(3) == 285\nassert func(4) == 1785\nassert func(5) == 12375\n"}
{"task_id": 362, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    Create a function that transforms the provided tuple into a dictionary with key-value pairs using consecutive elements.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3, 4)) == {1: 2, 3: 4}\nassert func(('a', 'b', 'c', 'd', 'e', 'f')) == {'a': 'b', 'c': 'd', 'e': 'f'}\nassert func((10, 20, 30)) == {10: 20, 30: None}\nassert func(('x', 'y')) == {'x': 'y'}\nassert func(()) == {}\n```", "response_code": "\nassert func((1, 2, 3, 4)) == {1: 2, 3: 4}\nassert func(('a', 'b', 'c', 'd', 'e', 'f')) == {'a': 'b', 'c': 'd', 'e': 'f'}\nassert func((10, 20, 30)) == {10: 20, 30: None}\nassert func(('x', 'y')) == {'x': 'y'}\nassert func(()) == {}\n"}
{"task_id": 363, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(s) :\n    '''\n    Create a Python function that verifies if all characters are identical or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"aaaa\") == True\nassert func(\"abcde\") == False\nassert func(\"11111\") == True\nassert func(\"zzzzz\") == True\nassert func(\"xyxyx\") == False", "response_code": "assert func(\"aaaa\") == True\nassert func(\"abcde\") == False\nassert func(\"11111\") == True\nassert func(\"zzzzz\") == True\nassert func(\"xyxyx\") == False"}
{"task_id": 364, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(side):\n    '''\n    Create a function that calculates the area of a tetrahedron.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == math.sqrt(2) / 12\nassert func(2) == math.sqrt(2) / 3\nassert func(3) == math.sqrt(2)\nassert func(4) == 2 * math.sqrt(2) / 3\nassert func(5) == 5 * math.sqrt(2) / 3\n```", "response_code": "\nassert func(1) == math.sqrt(2) / 12\nassert func(2) == math.sqrt(2) / 3\nassert func(3) == math.sqrt(2)\nassert func(4) == 2 * math.sqrt(2) / 3\nassert func(5) == 5 * math.sqrt(2) / 3\n"}
{"task_id": 365, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list, m):\n    '''\n    Create a function that rotates a given list to the right by a specified number of items.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]\nassert func([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5], 3) == [3, 4, 5, 1, 2]\nassert func([1, 2, 3, 4, 5], 1) == [5, 1, 2, 3, 4]\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]\nassert func([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\nassert func([1, 2, 3, 4, 5], 3) == [3, 4, 5, 1, 2]\nassert func([1, 2, 3, 4, 5], 1) == [5, 1, 2, 3, 4]\n"}
{"task_id": 366, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    Create a function that verifies whether the provided tuple contains any null values.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func((1, 2, 3)) == False\nassert func((None, 2, 3)) == True\nassert func((1, None, 3)) == True\nassert func((1, 2, None)) == True\nassert func((None, None, None)) == True", "response_code": "assert func((1, 2, 3)) == False\nassert func((None, 2, 3)) == True\nassert func((1, None, 3)) == True\nassert func((1, 2, None)) == True\nassert func((None, None, None)) == True"}
{"task_id": 367, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(startnum, endnum):\n    '''\n    Create a function that identifies numbers in a specified range that are divisible by each of their individual digits.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(10, 20) == [12]\nassert func(50, 60) == [55]\nassert func(100, 110) == [102, 105, 108]\nassert func(200, 210) == [201, 204, 207]\nassert func(300, 310) == [303, 306, 309]\n```", "response_code": "\nassert func(10, 20) == [12]\nassert func(50, 60) == [55]\nassert func(100, 110) == [102, 105, 108]\nassert func(200, 210) == [201, 204, 207]\nassert func(300, 310) == [303, 306, 309]\n"}
{"task_id": 368, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(r,a):\n    '''\n    Create a function that calculates the area of a sector.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5, 45) == 19.63\nassert func(10, 90) == 78.54\nassert func(3, 120) == 9.42\nassert func(7, 30) == 3.85\nassert func(12, 60) == 37.70\n```", "response_code": "\nassert func(5, 45) == 19.63\nassert func(10, 90) == 78.54\nassert func(3, 120) == 9.42\nassert func(7, 30) == 3.85\nassert func(12, 60) == 37.70\n"}
{"task_id": 369, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(X, Y, Z): \n    '''\n    Create a function that identifies the longest common subsequence among three given strings.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"abcde\", \"ace\", \"abc\") == \"ac\"\nassert func(\"AGGTAB\", \"GXTXAYB\", \"GTAB\") == \"GTAB\"\nassert func(\"abcdef\", \"xyz\", \"123\") == \"\"\nassert func(\"aaa\", \"aa\", \"a\") == \"a\"\nassert func(\"abc\", \"def\", \"ghi\") == \"\"\n```", "response_code": "\nassert func(\"abcde\", \"ace\", \"abc\") == \"ac\"\nassert func(\"AGGTAB\", \"GXTXAYB\", \"GTAB\") == \"GTAB\"\nassert func(\"abcdef\", \"xyz\", \"123\") == \"\"\nassert func(\"aaa\", \"aa\", \"a\") == \"a\"\nassert func(\"abc\", \"def\", \"ghi\") == \"\"\n"}
{"task_id": 370, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(str1):\n    '''\n    Create a function that uses regex to insert spaces between words that begin with capital letters in a provided string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"HelloWorld\") == \"Hello World\"\nassert func(\"PythonIsFun\") == \"Python Is Fun\"\nassert func(\"RegexIsCool\") == \"Regex Is Cool\"\nassert func(\"TestCasesAreImportant\") == \"Test Cases Are Important\"\nassert func(\"ThisIsAString\") == \"This Is A String\"\n```", "response_code": "\nassert func(\"HelloWorld\") == \"Hello World\"\nassert func(\"PythonIsFun\") == \"Python Is Fun\"\nassert func(\"RegexIsCool\") == \"Regex Is Cool\"\nassert func(\"TestCasesAreImportant\") == \"Test Cases Are Important\"\nassert func(\"ThisIsAString\") == \"This Is A String\"\n"}
{"task_id": 371, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums_str):\n    '''\n    Create a function that sorts a list of strings containing numbers in numerical order.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([\"3\", \"1\", \"4\", \"1\", \"5\", \"9\", \"2\", \"6\", \"5\"]) == [\"1\", \"1\", \"2\", \"3\", \"4\", \"5\", \"5\", \"6\", \"9\"]\nassert func([\"10\", \"5\", \"20\", \"15\", \"30\"]) == [\"5\", \"10\", \"15\", \"20\", \"30\"]\nassert func([\"100\", \"20\", \"300\", \"40\", \"500\"]) == [\"20\", \"40\", \"100\", \"300\", \"500\"]\nassert func([\"9\", \"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\", \"1\"]) == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\nassert func([\"2\", \"22\", \"222\", \"2222\", \"22222\"]) == [\"2\", \"22\", \"222\", \"2222\", \"22222\"]\n```", "response_code": "\nassert func([\"3\", \"1\", \"4\", \"1\", \"5\", \"9\", \"2\", \"6\", \"5\"]) == [\"1\", \"1\", \"2\", \"3\", \"4\", \"5\", \"5\", \"6\", \"9\"]\nassert func([\"10\", \"5\", \"20\", \"15\", \"30\"]) == [\"5\", \"10\", \"15\", \"20\", \"30\"]\nassert func([\"100\", \"20\", \"300\", \"40\", \"500\"]) == [\"20\", \"40\", \"100\", \"300\", \"500\"]\nassert func([\"9\", \"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\", \"1\"]) == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\nassert func([\"2\", \"22\", \"222\", \"2222\", \"22222\"]) == [\"2\", \"22\", \"222\", \"2222\", \"22222\"]\n"}
{"task_id": 372, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list, test_tup):\n    '''\n    Create a function that appends the provided tuple to the provided list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], (4, 5)) == [1, 2, 3, (4, 5)]\nassert func([], (1, 2, 3)) == [(1, 2, 3)]\nassert func(['a', 'b'], ('c',)) == ['a', 'b', ('c',)]\nassert func([True, False], (True,)) == [True, False, (True,)]\nassert func([1.5, 2.5], (3.5, 4.5)) == [1.5, 2.5, (3.5, 4.5)]\n```", "response_code": "\nassert func([1, 2, 3], (4, 5)) == [1, 2, 3, (4, 5)]\nassert func([], (1, 2, 3)) == [(1, 2, 3)]\nassert func(['a', 'b'], ('c',)) == ['a', 'b', ('c',)]\nassert func([True, False], (True,)) == [True, False, (True,)]\nassert func([1.5, 2.5], (3.5, 4.5)) == [1.5, 2.5, (3.5, 4.5)]\n"}
{"task_id": 373, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr, i):\n    '''\n    Create a function that determines whether the provided array is a minimum heap or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 0) == True\nassert func([5, 4, 3, 2, 1], 0) == False\nassert func([1, 3, 2, 5, 4], 0) == True\nassert func([1, 2, 3, 4, 5, 6], 0) == True\nassert func([1], 0) == True\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 0) == True\nassert func([5, 4, 3, 2, 1], 0) == False\nassert func([1, 3, 2, 5, 4], 0) == True\nassert func([1, 2, 3, 4, 5, 6], 0) == True\nassert func([1], 0) == True\n"}
{"task_id": 374, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function that calculates the nth Jacobsthal number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(0) == 0\nassert func(1) == 1\nassert func(2) == 1\nassert func(5) == 11\nassert func(10) == 341", "response_code": "assert func(0) == 0\nassert func(1) == 1\nassert func(2) == 1\nassert func(5) == 11\nassert func(10) == 341"}
{"task_id": 375, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list, K):\n    '''\n    Create a function that retrieves the smallest k records from a list of tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 'apple'), (3, 'banana'), (2, 'orange')], 2) == [(1, 'apple'), (2, 'orange')]\nassert func([(5, 'grape'), (2, 'kiwi'), (4, 'pear'), (1, 'melon')], 3) == [(1, 'melon'), (2, 'kiwi'), (4, 'pear')]\nassert func([(10, 'cherry'), (7, 'strawberry'), (8, 'blueberry')], 1) == [(7, 'strawberry')]\nassert func([(5, 'peach')], 1) == [(5, 'peach')]\nassert func([(3, 'plum'), (6, 'raspberry'), (4, 'blackberry')], 2) == [(3, 'plum'), (4, 'blackberry')]\n```", "response_code": "\nassert func([(1, 'apple'), (3, 'banana'), (2, 'orange')], 2) == [(1, 'apple'), (2, 'orange')]\nassert func([(5, 'grape'), (2, 'kiwi'), (4, 'pear'), (1, 'melon')], 3) == [(1, 'melon'), (2, 'kiwi'), (4, 'pear')]\nassert func([(10, 'cherry'), (7, 'strawberry'), (8, 'blueberry')], 1) == [(7, 'strawberry')]\nassert func([(5, 'peach')], 1) == [(5, 'peach')]\nassert func([(3, 'plum'), (6, 'raspberry'), (4, 'blackberry')], 2) == [(3, 'plum'), (4, 'blackberry')]\n"}
{"task_id": 376, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l1, l2, l3):\n    '''\n    Create a function that identifies the common elements at the same index position in three lists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], [4, 5, 6], [7, 8, 9]) == []\nassert func([1, 2, 3], [4, 5, 6], [1, 5, 9]) == [1]\nassert func(['a', 'b', 'c'], ['x', 'y', 'z'], ['a', 'y', 'c']) == ['a', 'c']\nassert func([True, False, True], [True, True, False], [False, True, True]) == [False, True]\nassert func([], [], []) == []\n```", "response_code": "\nassert func([1, 2, 3], [4, 5, 6], [7, 8, 9]) == []\nassert func([1, 2, 3], [4, 5, 6], [1, 5, 9]) == [1]\nassert func(['a', 'b', 'c'], ['x', 'y', 'z'], ['a', 'y', 'c']) == ['a', 'c']\nassert func([True, False, True], [True, True, False], [False, True, True]) == [False, True]\nassert func([], [], []) == []\n"}
{"task_id": 377, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(numbers):\n    '''\n    Create a function that identifies the second smallest number within a given list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([5, 2, 8, 1, 3]) == 2\nassert func([10, 5, 7, 3, 9]) == 5\nassert func([100, 50, 75, 25, 150]) == 50\nassert func([2, 2, 2, 2, 2]) == 2\nassert func([1, 2, 3, 4, 5]) == 2", "response_code": "assert func([5, 2, 8, 1, 3]) == 2\nassert func([10, 5, 7, 3, 9]) == 5\nassert func([100, 50, 75, 25, 150]) == 50\nassert func([2, 2, 2, 2, 2]) == 2\nassert func([1, 2, 3, 4, 5]) == 2"}
{"task_id": 378, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that identifies a string containing an 'a' followed by either zero or one 'b'.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"ac\") == True\nassert func(\"ab\") == True\nassert func(\"abc\") == False\nassert func(\"a\") == True\nassert func(\"ad\") == True\n```", "response_code": "\nassert func(\"ac\") == True\nassert func(\"ab\") == True\nassert func(\"abc\") == False\nassert func(\"a\") == True\nassert func(\"ad\") == True\n"}
{"task_id": 379, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list):\n    '''\n    Create a function that counts the number of pairs of strings in a list that are reverse of each other.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(['ab', 'ba', 'cd', 'dc', 'ef', 'fe']) == 3\nassert func(['abc', 'cba', 'def', 'fed', 'ghi', 'hgi']) == 2\nassert func(['racecar', 'car', 'level', 'level', 'hello', 'olleh']) == 4\nassert func(['apple', 'elppa', 'banana', 'ananab', 'cherry', 'yrrehc']) == 3\nassert func(['noon', 'noon', 'moon', 'noom', 'radar', 'radar']) == 4\n```", "response_code": "\nassert func(['ab', 'ba', 'cd', 'dc', 'ef', 'fe']) == 3\nassert func(['abc', 'cba', 'def', 'fed', 'ghi', 'hgi']) == 2\nassert func(['racecar', 'car', 'level', 'level', 'hello', 'olleh']) == 4\nassert func(['apple', 'elppa', 'banana', 'ananab', 'cherry', 'yrrehc']) == 3\nassert func(['noon', 'noon', 'moon', 'noom', 'radar', 'radar']) == 4\n"}
{"task_id": 380, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function that calculates the total number of distinct lists in a given list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([]) == 0\nassert func([1, 2, 3]) == 1\nassert func([[1, 2], [3, 4]]) == 2\nassert func([[1, 2], [1, 2]]) == 1\nassert func([[1, 2], [2, 1]]) == 2\n```", "response_code": "\nassert func([]) == 0\nassert func([1, 2, 3]) == 1\nassert func([[1, 2], [3, 4]]) == 2\nassert func([[1, 2], [1, 2]]) == 1\nassert func([[1, 2], [2, 1]]) == 2\n"}
{"task_id": 381, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(num):\n    '''\n    Create a function that verifies a decimal number with a precision of 2.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3.14) == True\nassert func(2.718) == True\nassert func(1.2345) == False\nassert func(0.999) == True\nassert func(5) == False\n```", "response_code": "\nassert func(3.14) == True\nassert func(2.718) == True\nassert func(1.2345) == False\nassert func(0.999) == True\nassert func(5) == False\n"}
{"task_id": 382, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):\n    '''\n    Create a Python function that determines if an array has only one unique element or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 1, 1, 1]) == True\nassert func([1, 2, 3, 4]) == False\nassert func([5, 5, 5, 5, 5]) == True\nassert func([0, 0, 0, 0, 1]) == False\nassert func([2]) == True", "response_code": "assert func([1, 1, 1, 1]) == True\nassert func([1, 2, 3, 4]) == False\nassert func([5, 5, 5, 5, 5]) == True\nassert func([0, 0, 0, 0, 1]) == False\nassert func([2]) == True"}
{"task_id": 383, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(monthnum3):\n    '''\n    Create a function that determines if a given month number has 30 days.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(4) == True\nassert func(6) == True\nassert func(9) == True\nassert func(11) == True\nassert func(2) == False", "response_code": "assert func(4) == True\nassert func(6) == True\nassert func(9) == True\nassert func(11) == True\nassert func(2) == False"}
{"task_id": 384, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr,n): \n    '''\n    Create a Python function that determines the smallest difference between two elements within a specified array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 3, 5, 7, 9], 5) == 2\nassert func([10, 20, 30, 40, 50], 5) == 10\nassert func([5, 15, 25, 35, 45], 5) == 10\nassert func([100, 200, 300, 400, 500], 5) == 100\nassert func([2, 8, 15, 22, 30], 5) == 6\n```", "response_code": "\nassert func([1, 3, 5, 7, 9], 5) == 2\nassert func([10, 20, 30, 40, 50], 5) == 10\nassert func([5, 15, 25, 35, 45], 5) == 10\nassert func([100, 200, 300, 400, 500], 5) == 100\nassert func([2, 8, 15, 22, 30], 5) == 6\n"}
{"task_id": 385, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str):\n    '''\n    Create a Python function that calculates the number of numerical values in a provided string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"There are 5 apples and 2 oranges\") == 2\nassert func(\"The price is $10.50\") == 4\nassert func(\"1234567890\") == 10\nassert func(\"No numbers here!\") == 0\nassert func(\"\") == 0\n```", "response_code": "\nassert func(\"There are 5 apples and 2 oranges\") == 2\nassert func(\"The price is $10.50\") == 4\nassert func(\"1234567890\") == 10\nassert func(\"No numbers here!\") == 0\nassert func(\"\") == 0\n"}
{"task_id": 386, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math \ndef func(n): \n    '''\n    Create a function that can determine the nth polite number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 1\nassert func(2) == 3\nassert func(3) == 6\nassert func(4) == 10\nassert func(5) == 15", "response_code": "assert func(1) == 1\nassert func(2) == 3\nassert func(3) == 6\nassert func(4) == 10\nassert func(5) == 15"}
{"task_id": 387, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l1):\n    '''\n    Create a function that loops through each pair of consecutive items in a provided list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4]) == [(1, 2), (2, 3), (3, 4)]\nassert func(['a', 'b', 'c']) == [('a', 'b'), ('b', 'c')]\nassert func([5, 10, 15, 20, 25]) == [(5, 10), (10, 15), (15, 20), (20, 25)]\nassert func([]) == []\nassert func([100]) == []\n```", "response_code": "\nassert func([1, 2, 3, 4]) == [(1, 2), (2, 3), (3, 4)]\nassert func(['a', 'b', 'c']) == [('a', 'b'), ('b', 'c')]\nassert func([5, 10, 15, 20, 25]) == [(5, 10), (10, 15), (15, 20), (20, 25)]\nassert func([]) == []\nassert func([100]) == []\n"}
{"task_id": 388, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr, sum):\n    '''\n    Create a Python function that calculates the quantity of pairs with a sum equal to 'sum'.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5], 5) == 2\nassert func([1, 2, 3, 4, 5], 10) == 2\nassert func([1, 2, 3, 4, 5], 7) == 2\nassert func([1, 2, 3, 4, 5], 8) == 2\nassert func([1, 2, 3, 4, 5], 6) == 2\n```", "response_code": "\nassert func([1, 2, 3, 4, 5], 5) == 2\nassert func([1, 2, 3, 4, 5], 10) == 2\nassert func([1, 2, 3, 4, 5], 7) == 2\nassert func([1, 2, 3, 4, 5], 8) == 2\nassert func([1, 2, 3, 4, 5], 6) == 2\n"}
{"task_id": 389, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(li1,li2):\n    '''\n    Create a Python function that calculates the variance between two lists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1,2,3],[4,5,6]) == 3.0\nassert func([10,20,30],[15,25,35]) == 25.0\nassert func([0,0,0],[0,0,0]) == 0.0\nassert func([1,2,3,4,5],[5,4,3,2,1]) == 2.5\nassert func([2,4,6,8,10],[1,3,5,7,9]) == 8.0", "response_code": "assert func([1,2,3],[4,5,6]) == 3.0\nassert func([10,20,30],[15,25,35]) == 25.0\nassert func([0,0,0],[0,0,0]) == 0.0\nassert func([1,2,3,4,5],[5,4,3,2,1]) == 2.5\nassert func([2,4,6,8,10],[1,3,5,7,9]) == 8.0"}
{"task_id": 390, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n) : \n    '''\n    Create a Python function that calculates the sum of the fourth power of the first n odd natural numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 17\nassert func(3) == 98\nassert func(4) == 354\nassert func(5) == 979\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 17\nassert func(3) == 98\nassert func(4) == 354\nassert func(5) == 979\n"}
{"task_id": 391, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from collections import deque\ndef func(exp):\n    '''\n    Create a function that determines whether the provided expression is balanced.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"()\") == True\nassert func(\"()[]{}\") == True\nassert func(\"(]\") == False\nassert func(\"([)]\") == False\nassert func(\"{[]}\") == True\n```", "response_code": "\nassert func(\"()\") == True\nassert func(\"()[]{}\") == True\nassert func(\"(]\") == False\nassert func(\"([)]\") == False\nassert func(\"{[]}\") == True\n"}
{"task_id": 392, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_str, K):\n    '''\n    Create a function that eliminates all words of a specific length from the provided string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello world\", 5) == \"Hello\"\nassert func(\"Python is awesome\", 2) == \"is\"\nassert func(\"Keep calm and code on\", 4) == \"Keep and on\"\nassert func(\"Testing the function\", 7) == \"Testing function\"\nassert func(\"This is a test\", 1) == \"is a\"\n```", "response_code": "\nassert func(\"Hello world\", 5) == \"Hello\"\nassert func(\"Python is awesome\", 2) == \"is\"\nassert func(\"Keep calm and code on\", 4) == \"Keep and on\"\nassert func(\"Testing the function\", 7) == \"Testing function\"\nassert func(\"This is a test\", 1) == \"is a\"\n"}
{"task_id": 393, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text,pattern):\n    '''\n    Create a function that identifies the location and frequency of substrings within a given string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"abababab\", \"ab\") == [(0, 2), (2, 2), (4, 2)]\nassert func(\"hellohellohello\", \"hello\") == [(0, 5), (5, 5), (10, 5)]\nassert func(\"aaaaa\", \"aa\") == [(0, 2), (2, 2), (4, 2)]\nassert func(\"abcabcabcabc\", \"abc\") == [(0, 3), (3, 3), (6, 3), (9, 3)]\nassert func(\"123123123\", \"123\") == [(0, 3), (3, 3), (6, 3)]\n```", "response_code": "\nassert func(\"abababab\", \"ab\") == [(0, 2), (2, 2), (4, 2)]\nassert func(\"hellohellohello\", \"hello\") == [(0, 5), (5, 5), (10, 5)]\nassert func(\"aaaaa\", \"aa\") == [(0, 2), (2, 2), (4, 2)]\nassert func(\"abcabcabcabc\", \"abc\") == [(0, 3), (3, 3), (6, 3), (9, 3)]\nassert func(\"123123123\", \"123\") == [(0, 3), (3, 3), (6, 3)]\n"}
{"task_id": 394, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a Python function that verifies if all odd indexes in a provided list contain odd numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == True\nassert func([2, 3, 6, 7, 8]) == False\nassert func([11, 22, 33, 44, 55]) == True\nassert func([2, 3, 6, 7, 8, 9]) == False\nassert func([1, 2, 3, 4, 5, 6, 7]) == True\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == True\nassert func([2, 3, 6, 7, 8]) == False\nassert func([11, 22, 33, 44, 55]) == True\nassert func([2, 3, 6, 7, 8, 9]) == False\nassert func([1, 2, 3, 4, 5, 6, 7]) == True\n"}
{"task_id": 395, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_str):\n    '''\n    Create a function that counts characters in a string that are surrounded by vowels.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"apple\") == 1\nassert func(\"banana\") == 0\nassert func(\"elephant\") == 3\nassert func(\"orange\") == 1\nassert func(\"watermelon\") == 2", "response_code": "assert func(\"apple\") == 1\nassert func(\"banana\") == 0\nassert func(\"elephant\") == 3\nassert func(\"orange\") == 1\nassert func(\"watermelon\") == 2"}
{"task_id": 396, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr): \n    '''\n    Create a Python function that calculates the sum of unique elements in a provided array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 15\nassert func([1, 2, 2, 3, 3, 4, 4, 5, 5]) == 15\nassert func([5, 5, 5, 5, 5]) == 5\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55\nassert func([1, 1, 1, 1, 1, 2, 2, 2, 2, 2]) == 3\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 15\nassert func([1, 2, 2, 3, 3, 4, 4, 5, 5]) == 15\nassert func([5, 5, 5, 5, 5]) == 5\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55\nassert func([1, 1, 1, 1, 1, 2, 2, 2, 2, 2]) == 3\n"}
{"task_id": 397, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from itertools import groupby\ndef func(list1):\n    '''\n    Create a function that groups consecutive duplicate elements of a list into sublists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 1, 2, 3, 3, 4, 4, 4]) == [[1, 1], [2], [3, 3], [4, 4, 4]]\nassert func([1, 1, 1, 1, 1]) == [[1, 1, 1, 1, 1]]\nassert func([1, 2, 3, 4, 5]) == [[1], [2], [3], [4], [5]]\nassert func([1, 1, 2, 2, 3, 3, 3, 4, 4]) == [[1, 1], [2, 2], [3, 3, 3], [4, 4]]\nassert func([]) == []\n```", "response_code": "\nassert func([1, 1, 2, 3, 3, 4, 4, 4]) == [[1, 1], [2], [3, 3], [4, 4, 4]]\nassert func([1, 1, 1, 1, 1]) == [[1, 1, 1, 1, 1]]\nassert func([1, 2, 3, 4, 5]) == [[1], [2], [3], [4], [5]]\nassert func([1, 1, 2, 2, 3, 3, 3, 4, 4]) == [[1, 1], [2, 2], [3, 3, 3], [4, 4]]\nassert func([]) == []\n"}
{"task_id": 398, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function that calculates the quantity of distinct lists in a given list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([]) == 0\nassert func([[], [], []]) == 1\nassert func([[1, 2], [3, 4], [1, 2]]) == 2\nassert func([[1, 2], [3, 4], [5, 6]]) == 3\nassert func([[1, 2], [2, 1], [1, 2]]) == 2\n```", "response_code": "\nassert func([]) == 0\nassert func([[], [], []]) == 1\nassert func([[1, 2], [3, 4], [1, 2]]) == 2\nassert func([[1, 2], [3, 4], [5, 6]]) == 3\nassert func([[1, 2], [2, 1], [1, 2]]) == 2\n"}
{"task_id": 399, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from itertools import combinations \ndef func(test_list):\n    '''\n    Create a function that calculates the combinations of sums using tuples from a specified list of tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (3, 4)]) == [(1, 2), (3, 4), (4, 5), (7, 8)]\nassert func([(2, 3), (4, 5), (6, 7)]) == [(2, 3), (4, 5), (6, 7), (8, 9), (10, 11), (12, 13)]\nassert func([(1, 1), (2, 2), (3, 3)]) == [(1, 1), (2, 2), (3, 3), (2, 2), (3, 3), (4, 4)]\nassert func([(1, 2, 3), (4, 5, 6)]) == [(1, 2, 3), (4, 5, 6), (5, 6, 7), (8, 9, 10)]\nassert func([(1, 2, 3, 4), (5, 6, 7, 8)]) == [(1, 2, 3, 4), (5, 6, 7, 8), (6, 7, 8, 9), (10, 11, 12, 13)]\n```", "response_code": "\nassert func([(1, 2), (3, 4)]) == [(1, 2), (3, 4), (4, 5), (7, 8)]\nassert func([(2, 3), (4, 5), (6, 7)]) == [(2, 3), (4, 5), (6, 7), (8, 9), (10, 11), (12, 13)]\nassert func([(1, 1), (2, 2), (3, 3)]) == [(1, 1), (2, 2), (3, 3), (2, 2), (3, 3), (4, 4)]\nassert func([(1, 2, 3), (4, 5, 6)]) == [(1, 2, 3), (4, 5, 6), (5, 6, 7), (8, 9, 10)]\nassert func([(1, 2, 3, 4), (5, 6, 7, 8)]) == [(1, 2, 3, 4), (5, 6, 7, 8), (6, 7, 8, 9), (10, 11, 12, 13)]\n"}
{"task_id": 400, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math \ndef func(n) : \n    '''\n    Create a Python function that determines if the number of divisors is odd or even.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(6) == 'even'\nassert func(7) == 'odd'\nassert func(12) == 'even'\nassert func(25) == 'odd'\nassert func(28) == 'even'\n```", "response_code": "\nassert func(6) == 'even'\nassert func(7) == 'odd'\nassert func(12) == 'even'\nassert func(25) == 'odd'\nassert func(28) == 'even'\n"}
{"task_id": 401, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):\n    '''\n    Create a Python function that calculates the total sum of subarrays with odd lengths.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == 48\nassert func([2, 4, 6, 8, 10]) == 0\nassert func([1, 3, 5, 7, 9]) == 135\nassert func([10, 20, 30, 40, 50]) == 0\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 220\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == 48\nassert func([2, 4, 6, 8, 10]) == 0\nassert func([1, 3, 5, 7, 9]) == 135\nassert func([10, 20, 30, 40, 50]) == 0\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 220\n"}
{"task_id": 402, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(r, g, b):\n    '''\n    Create a function that transforms an RGB color to an HSV color.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(255, 0, 0) == (0, 1, 1)  # Red RGB color should be transformed to HSV (0, 1, 1)\nassert func(0, 255, 0) == (120, 1, 1)  # Green RGB color should be transformed to HSV (120, 1, 1)\nassert func(0, 0, 255) == (240, 1, 1)  # Blue RGB color should be transformed to HSV (240, 1, 1)\nassert func(255, 255, 0) == (60, 1, 1)  # Yellow RGB color should be transformed to HSV (60, 1, 1)\nassert func(255, 0, 255) == (300, 1, 1)  # Magenta RGB color should be transformed to HSV (300, 1, 1)\n```", "response_code": "\nassert func(255, 0, 0) == (0, 1, 1)  # Red RGB color should be transformed to HSV (0, 1, 1)\nassert func(0, 255, 0) == (120, 1, 1)  # Green RGB color should be transformed to HSV (120, 1, 1)\nassert func(0, 0, 255) == (240, 1, 1)  # Blue RGB color should be transformed to HSV (240, 1, 1)\nassert func(255, 255, 0) == (60, 1, 1)  # Yellow RGB color should be transformed to HSV (60, 1, 1)\nassert func(255, 0, 255) == (300, 1, 1)  # Magenta RGB color should be transformed to HSV (300, 1, 1)\n"}
{"task_id": 403, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(list1):\n    '''\n    Create a function that calculates the product of the first even and odd numbers in a provided list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([2, 3, 4, 5, 6]) == 6  # First even number is 2, first odd number is 3, product is 6\nassert func([1, 2, 3, 4, 5]) == 2  # First even number is 2, first odd number is 1, product is 2\nassert func([6, 4, 2, 8, 10]) == 6  # First even number is 6, first odd number is not present, product is 6\nassert func([1, 3, 5, 7, 9]) == 3  # First even number is not present, first odd number is 3, product is 3\nassert func([2, 4, 6, 8, 10]) == 2  # First even number is 2, first odd number is not present, product is 2\n```", "response_code": "\nassert func([2, 3, 4, 5, 6]) == 6  # First even number is 2, first odd number is 3, product is 6\nassert func([1, 2, 3, 4, 5]) == 2  # First even number is 2, first odd number is 1, product is 2\nassert func([6, 4, 2, 8, 10]) == 6  # First even number is 6, first odd number is not present, product is 6\nassert func([1, 3, 5, 7, 9]) == 3  # First even number is not present, first odd number is 3, product is 3\nassert func([2, 4, 6, 8, 10]) == 2  # First even number is 2, first odd number is not present, product is 2\n"}
{"task_id": 404, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_str):\n    '''\n    Create a function that converts a tuple of strings to a tuple of integers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(('1', '2', '3')) == (1, 2, 3)\nassert func(('10', '20', '30')) == (10, 20, 30)\nassert func(('100', '200', '300')) == (100, 200, 300)\nassert func(('5', '15', '25')) == (5, 15, 25)\nassert func(('0', '0', '0')) == (0, 0, 0)", "response_code": "assert func(('1', '2', '3')) == (1, 2, 3)\nassert func(('10', '20', '30')) == (10, 20, 30)\nassert func(('100', '200', '300')) == (100, 200, 300)\nassert func(('5', '15', '25')) == (5, 15, 25)\nassert func(('0', '0', '0')) == (0, 0, 0)"}
{"task_id": 405, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import bisect\ndef func(a, x):\n    '''\n    Create a function that finds the correct position to insert a given value in a sorted list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 3, 5, 7], 4) == 2\nassert func([1, 3, 5, 7], 8) == 4\nassert func([1, 3, 5, 7], 0) == 0\nassert func([1, 3, 5, 7], 3) == 1\nassert func([1, 3, 5, 7], 6) == 3\n```", "response_code": "\nassert func([1, 3, 5, 7], 4) == 2\nassert func([1, 3, 5, 7], 8) == 4\nassert func([1, 3, 5, 7], 0) == 0\nassert func([1, 3, 5, 7], 3) == 1\nassert func([1, 3, 5, 7], 6) == 3\n"}
{"task_id": 406, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that identifies a string containing an 'a' followed by three 'b's.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"abbb\") == True\nassert func(\"aabbb\") == True\nassert func(\"abbbb\") == False\nassert func(\"abb\") == False\nassert func(\"bbb\") == False\n```", "response_code": "\nassert func(\"abbb\") == True\nassert func(\"aabbb\") == True\nassert func(\"abbbb\") == False\nassert func(\"abb\") == False\nassert func(\"bbb\") == False\n"}
{"task_id": 407, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_list, test_str):\n    '''\n    Create a function that generates a new tuple using the provided string and list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3], 'abc') == ([1, 2, 3], 'abc')\nassert func(['a', 'b', 'c'], '123') == (['a', 'b', 'c'], '123')\nassert func([], '') == ([], '')\nassert func([True, False], 'tf') == ([True, False], 'tf')\nassert func([4.5, 6.7], 'xy') == ([4.5, 6.7], 'xy')\n```", "response_code": "\nassert func([1, 2, 3], 'abc') == ([1, 2, 3], 'abc')\nassert func(['a', 'b', 'c'], '123') == (['a', 'b', 'c'], '123')\nassert func([], '') == ([], '')\nassert func([True, False], 'tf') == ([True, False], 'tf')\nassert func([4.5, 6.7], 'xy') == ([4.5, 6.7], 'xy')\n"}
{"task_id": 408, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a Python function that verifies if all even indexes in a provided list contain even numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([2, 3, 4, 5]) == True\nassert func([1, 2, 3, 4, 5, 6]) == False\nassert func([0, 2, 4, 6, 8]) == True\nassert func([1, 3, 5, 7, 9]) == True\nassert func([10, 20, 30, 40, 50]) == True\n```", "response_code": "\nassert func([2, 3, 4, 5]) == True\nassert func([1, 2, 3, 4, 5, 6]) == False\nassert func([0, 2, 4, 6, 8]) == True\nassert func([1, 3, 5, 7, 9]) == True\nassert func([10, 20, 30, 40, 50]) == True\n"}
{"task_id": 409, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup):\n    '''\n    Create a function that eliminates the nested record from the provided tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, (2, 3), 4)) == (1, 2, 3, 4)\nassert func((1, (2, (3, 4)), 5)) == (1, 2, 3, 4, 5)\nassert func((1, (2, (3, (4, 5))), 6)) == (1, 2, 3, 4, 5, 6)\nassert func((1, (2, (3, (4, (5, 6)))), 7)) == (1, 2, 3, 4, 5, 6, 7)\nassert func((1, (2, (3, (4, (5, (6, 7)))))) == (1, 2, 3, 4, 5, 6, 7)\n```", "response_code": "\nassert func((1, (2, 3), 4)) == (1, 2, 3, 4)\nassert func((1, (2, (3, 4)), 5)) == (1, 2, 3, 4, 5)\nassert func((1, (2, (3, (4, 5))), 6)) == (1, 2, 3, 4, 5, 6)\nassert func((1, (2, (3, (4, (5, 6)))), 7)) == (1, 2, 3, 4, 5, 6, 7)\nassert func((1, (2, (3, (4, (5, (6, 7)))))) == (1, 2, 3, 4, 5, 6, 7)\n"}
{"task_id": 410, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(input_list): \n    '''\n    Create a Python function that calculates the total number of lists within a specified set of lists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5], [6]]) == 3\nassert func([[1], [2], [3], [4], [5]]) == 5\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == 4\nassert func([[1, 2, 3, 4], [5, 6, 7], [8, 9]]) == 3\nassert func([[1, 2, 3], [4], [5, 6], [7, 8, 9]]) == 4\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5], [6]]) == 3\nassert func([[1], [2], [3], [4], [5]]) == 5\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == 4\nassert func([[1, 2, 3, 4], [5, 6, 7], [8, 9]]) == 3\nassert func([[1, 2, 3], [4], [5, 6], [7, 8, 9]]) == 4\n"}
{"task_id": 411, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr,x):\n    '''\n    Create a Python function that determines the final index of an element within an array that has been sorted.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 3, 5, 7, 9], 5) == 2\nassert func([1, 3, 5, 7, 9], 9) == 4\nassert func([1, 3, 5, 7, 9], 1) == 0\nassert func([1, 3, 5, 7, 9], 10) == -1\nassert func([1, 3, 5, 7, 9], 0) == -1\n```", "response_code": "\nassert func([1, 3, 5, 7, 9], 5) == 2\nassert func([1, 3, 5, 7, 9], 9) == 4\nassert func([1, 3, 5, 7, 9], 1) == 0\nassert func([1, 3, 5, 7, 9], 10) == -1\nassert func([1, 3, 5, 7, 9], 0) == -1\n"}
{"task_id": 412, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that identifies a string containing an 'a' followed by any character and ending with 'b'.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"acb\") == True\nassert func(\"azb\") == True\nassert func(\"a1b\") == True\nassert func(\"a!b\") == True\nassert func(\"a b\") == True\n```", "response_code": "\nassert func(\"acb\") == True\nassert func(\"azb\") == True\nassert func(\"a1b\") == True\nassert func(\"a!b\") == True\nassert func(\"a b\") == True\n"}
{"task_id": 413, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(dict):\n    '''\n    Create a function that calculates the total sum of all elements within the provided dictionary.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func({'a': 1, 'b': 2, 'c': 3}) == 6\nassert func({'x': 10, 'y': 20, 'z': 30}) == 60\nassert func({'p': 5, 'q': 5, 'r': 5}) == 15\nassert func({'m': -1, 'n': -2, 'o': -3}) == -6\nassert func({'apple': 2, 'banana': 3, 'cherry': 4}) == 9", "response_code": "assert func({'a': 1, 'b': 2, 'c': 3}) == 6\nassert func({'x': 10, 'y': 20, 'z': 30}) == 60\nassert func({'p': 5, 'q': 5, 'r': 5}) == 15\nassert func({'m': -1, 'n': -2, 'o': -3}) == -6\nassert func({'apple': 2, 'banana': 3, 'cherry': 4}) == 9"}
{"task_id": 414, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a Python function that calculates the total of all odd natural numbers between the given range l and r.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1, 5) == 9\nassert func(2, 10) == 24\nassert func(10, 20) == 75\nassert func(15, 25) == 90\nassert func(1, 100) == 2500\n```", "response_code": "\nassert func(1, 5) == 9\nassert func(2, 10) == 24\nassert func(10, 20) == 75\nassert func(15, 25) == 90\nassert func(1, 100) == 2500\n"}
{"task_id": 415, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):  \n    '''\n    Create a Python function that calculates the sum of an array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3]) == 6\nassert func([5, 10, 15, 20]) == 50\nassert func([0, 0, 0, 0, 0]) == 0\nassert func([-1, 1, -1, 1]) == 0\nassert func([2, 4, 6, 8, 10]) == 30", "response_code": "assert func([1, 2, 3]) == 6\nassert func([5, 10, 15, 20]) == 50\nassert func([0, 0, 0, 0, 0]) == 0\nassert func([-1, 1, -1, 1]) == 0\nassert func([2, 4, 6, 8, 10]) == 30"}
{"task_id": 416, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n,d):   \n    '''\n    Create a Python function that rotates the bits of a specified number to the left.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(5, 1) == 10\nassert func(5, 2) == 20\nassert func(10, 1) == 20\nassert func(10, 2) == 40\nassert func(0, 3) == 0\n```", "response_code": "\nassert func(5, 1) == 10\nassert func(5, 2) == 20\nassert func(10, 1) == 20\nassert func(10, 2) == 40\nassert func(0, 3) == 0\n"}
{"task_id": 417, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that eliminates all spaces from a given string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello world\") == \"helloworld\"\nassert func(\"  spaces  \") == \"spaces\"\nassert func(\"no_spaces\") == \"no_spaces\"\nassert func(\"\") == \"\"\nassert func(\"  multiple   spaces  \") == \"multiplespaces\"\n```", "response_code": "\nassert func(\"hello world\") == \"helloworld\"\nassert func(\"  spaces  \") == \"spaces\"\nassert func(\"no_spaces\") == \"no_spaces\"\nassert func(\"\") == \"\"\nassert func(\"  multiple   spaces  \") == \"multiplespaces\"\n"}
{"task_id": 418, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x,y,z):\n    '''\n    Create a Python function that calculates the quantity of identical numbers among three provided integers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1, 2, 3) == 0\nassert func(3, 3, 3) == 3\nassert func(5, 5, 6) == 2\nassert func(0, 0, 0) == 3\nassert func(7, 8, 9) == 0\n```", "response_code": "\nassert func(1, 2, 3) == 0\nassert func(3, 3, 3) == 3\nassert func(5, 5, 6) == 2\nassert func(0, 0, 0) == 3\nassert func(7, 8, 9) == 0\n"}
{"task_id": 419, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr):   \n    '''\n    Create a Python function that calculates the number of rotations needed to produce a sorted array.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([3, 4, 5, 1, 2]) == 3\nassert func([1, 2, 3, 4, 5]) == 0\nassert func([5, 1, 2, 3, 4]) == 1\nassert func([2, 3, 4, 5, 1]) == 4\nassert func([4, 5, 1, 2, 3]) == 2", "response_code": "assert func([3, 4, 5, 1, 2]) == 3\nassert func([1, 2, 3, 4, 5]) == 0\nassert func([5, 1, 2, 3, 4]) == 1\nassert func([2, 3, 4, 5, 1]) == 4\nassert func([4, 5, 1, 2, 3]) == 2"}
{"task_id": 420, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n) :\n    '''\n    Create a Python function that determines if a given number is a perfect square.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(16) == True\nassert func(25) == True\nassert func(10) == False\nassert func(0) == True\nassert func(1) == True", "response_code": "assert func(16) == True\nassert func(25) == True\nassert func(10) == False\nassert func(0) == True\nassert func(1) == True"}
{"task_id": 421, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr): \n    '''\n    Create a Python function that determines if the product of numbers is even.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([2, 4, 6]) == True\nassert func([1, 3, 5]) == False\nassert func([0, 2, 4]) == True\nassert func([1, 2, 3, 4, 5]) == True\nassert func([1, 1, 1, 1, 1]) == False", "response_code": "assert func([2, 4, 6]) == True\nassert func([1, 3, 5]) == False\nassert func([0, 2, 4]) == True\nassert func([1, 2, 3, 4, 5]) == True\nassert func([1, 1, 1, 1, 1]) == False"}
{"task_id": 422, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(lists):\n    '''\n    Create a function that identifies the list within a list of lists with the greatest sum of elements.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9]\nassert func([[10, 20, 30], [40, 50, 60], [70, 80, 90]]) == [70, 80, 90]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 20, 30]]) == [10, 20, 30]\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == [7, 8]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 20, 30], [40, 50, 60]]) == [40, 50, 60]\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9]\nassert func([[10, 20, 30], [40, 50, 60], [70, 80, 90]]) == [70, 80, 90]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 20, 30]]) == [10, 20, 30]\nassert func([[1, 2], [3, 4], [5, 6], [7, 8]]) == [7, 8]\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 20, 30], [40, 50, 60]]) == [40, 50, 60]\n"}
{"task_id": 423, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_str):\n    '''\n    Create a function that identifies the longest consecutive sequence of uppercase letters in a provided string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"aBcDEfGhIj\") == \"DE\"\nassert func(\"aBCDEFGHIJ\") == \"BCDEFGHIJ\"\nassert func(\"AbCdEfGhIj\") == \"G\"\nassert func(\"aBcDEfGhIJ\") == \"DE\"\nassert func(\"aBCDEfGhIj\") == \"BCDE\"\n```", "response_code": "\nassert func(\"aBcDEfGhIj\") == \"DE\"\nassert func(\"aBCDEFGHIJ\") == \"BCDEFGHIJ\"\nassert func(\"AbCdEfGhIj\") == \"G\"\nassert func(\"aBcDEfGhIJ\") == \"DE\"\nassert func(\"aBCDEfGhIj\") == \"BCDE\"\n"}
{"task_id": 424, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a Python function that identifies the initial odd number within a provided list of numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([2, 4, 6, 7, 8]) == 7\nassert func([1, 2, 3, 4, 5]) == 1\nassert func([10, 20, 30, 40, 50]) == None\nassert func([11, 22, 33, 44, 55]) == 11\nassert func([2, 4, 6, 8, 10]) == None", "response_code": "assert func([2, 4, 6, 7, 8]) == 7\nassert func([1, 2, 3, 4, 5]) == 1\nassert func([10, 20, 30, 40, 50]) == None\nassert func([11, 22, 33, 44, 55]) == 11\nassert func([2, 4, 6, 8, 10]) == None"}
{"task_id": 425, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup, K):\n    '''\n    Create a function that verifies whether the specified tuples include the element k.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), 2) == True\nassert func((4, 5, 6), 3) == False\nassert func(('a', 'b', 'c'), 'b') == True\nassert func(('x', 'y', 'z'), 'w') == False\nassert func((10, 20, 30), 10) == True\n```", "response_code": "\nassert func((1, 2, 3), 2) == True\nassert func((4, 5, 6), 3) == False\nassert func(('a', 'b', 'c'), 'b') == True\nassert func(('x', 'y', 'z'), 'w') == False\nassert func((10, 20, 30), 10) == True\n"}
{"task_id": 426, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function that verifies if every element in the second tuple is less than the element at the corresponding index in the first tuple.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (0, 1, 2)) == True\nassert func((5, 10, 15), (4, 9, 14)) == True\nassert func((100, 200, 300), (101, 201, 301)) == False\nassert func((0, 0, 0), (-1, -2, -3)) == False\nassert func((7, 8, 9), (6, 8, 10)) == False\n```", "response_code": "\nassert func((1, 2, 3), (0, 1, 2)) == True\nassert func((5, 10, 15), (4, 9, 14)) == True\nassert func((100, 200, 300), (101, 201, 301)) == False\nassert func((0, 0, 0), (-1, -2, -3)) == False\nassert func((7, 8, 9), (6, 8, 10)) == False\n"}
