{"task_id": 0, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function that identifies the common elements between two lists of tuples.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([(1, 2), (3, 4), (5, 6)], [(3, 4), (7, 8), (5, 6)]) == [(3, 4), (5, 6)]\nassert func([(1, 2), (3, 4), (5, 6)], [(7, 8), (9, 10), (11, 12)]) == []\nassert func([(1, 2), (3, 4), (5, 6)], [(1, 2), (3, 4), (5, 6)]) == [(1, 2), (3, 4), (5, 6)]\nassert func([(1, 2), (3, 4), (5, 6)], [(5, 6), (3, 4), (1, 2)]) == [(1, 2), (3, 4), (5, 6)]\nassert func([(1, 2), (3, 4), (5, 6)], [(7, 8), (3, 4), (5, 6)]) == [(3, 4), (5, 6)]\n```", "response_code": "\nassert func([(1, 2), (3, 4), (5, 6)], [(3, 4), (7, 8), (5, 6)]) == [(3, 4), (5, 6)]\nassert func([(1, 2), (3, 4), (5, 6)], [(7, 8), (9, 10), (11, 12)]) == []\nassert func([(1, 2), (3, 4), (5, 6)], [(1, 2), (3, 4), (5, 6)]) == [(1, 2), (3, 4), (5, 6)]\nassert func([(1, 2), (3, 4), (5, 6)], [(5, 6), (3, 4), (1, 2)]) == [(1, 2), (3, 4), (5, 6)]\nassert func([(1, 2), (3, 4), (5, 6)], [(7, 8), (3, 4), (5, 6)]) == [(3, 4), (5, 6)]\n"}
{"task_id": 1, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(n):\n    '''\n    Create a Python function that can detect numbers that are not prime.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(2) == False\nassert func(3) == False\nassert func(4) == True\nassert func(17) == False\nassert func(21) == True\n```", "response_code": "\nassert func(2) == False\nassert func(3) == False\nassert func(4) == True\nassert func(17) == False\nassert func(21) == True\n"}
{"task_id": 2, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import heapq as hq\ndef func(nums,n):\n    '''\n    Create a function that utilizes the heap queue algorithm to identify the highest integers within a provided list of numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 3) == [9, 6, 5]\nassert func([10, 20, 30, 40, 50], 2) == [50, 40]\nassert func([5, 5, 5, 5, 5], 1) == [5]\nassert func([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\nassert func([7, 6, 5, 4, 3, 2, 1], 4) == [7, 6, 5, 4]\n```", "response_code": "\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 3) == [9, 6, 5]\nassert func([10, 20, 30, 40, 50], 2) == [50, 40]\nassert func([5, 5, 5, 5, 5], 1) == [5]\nassert func([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\nassert func([7, 6, 5, 4, 3, 2, 1], 4) == [7, 6, 5, 4]\n"}
{"task_id": 3, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x): \n    '''\n    Create a Python function that determines if two numbers differ at only one bit position.\n    '''\n    pass\n\n# check the correctness of func \nassert "}], "response": "```python\nassert func(2, 3) == True\nassert func(5, 7) == True\nassert func(1, 2) == False\nassert func(0, 15) == False\nassert func(8, 9) == True\n```", "response_code": "\nassert func(2, 3) == True\nassert func(5, 7) == True\nassert func(1, 2) == False\nassert func(0, 15) == False\nassert func(8, 9) == True\n"}
{"task_id": 4, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that uses regex to identify all words in a string that contain a minimum of 4 characters.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello, this is a test\") == ['Hello', 'this', 'test']\nassert func(\"Python is a powerful language\") == ['Python', 'powerful', 'language']\nassert func(\"Regex is a useful tool for text processing\") == ['Regex', 'useful', 'tool', 'text', 'processing']\nassert func(\"1234 abcd 5678 efgh\") == ['1234', 'abcd', '5678', 'efgh']\nassert func(\"Short words like 'a', 'an', 'the' are excluded\") == ['Short', 'words', 'like', 'excluded']\n```", "response_code": "\nassert func(\"Hello, this is a test\") == ['Hello', 'this', 'test']\nassert func(\"Python is a powerful language\") == ['Python', 'powerful', 'language']\nassert func(\"Regex is a useful tool for text processing\") == ['Regex', 'useful', 'tool', 'text', 'processing']\nassert func(\"1234 abcd 5678 efgh\") == ['1234', 'abcd', '5678', 'efgh']\nassert func(\"Short words like 'a', 'an', 'the' are excluded\") == ['Short', 'words', 'like', 'excluded']\n"}
{"task_id": 5, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a lambda function to calculate the squares of each element in a list.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\nassert func([0, 10, 20, 30, 40]) == [0, 100, 400, 900, 1600]\nassert func([-1, -2, -3, -4, -5]) == [1, 4, 9, 16, 25]\nassert func([2, 4, 6, 8, 10]) == [4, 16, 36, 64, 100]\nassert func([3, 6, 9, 12, 15]) == [9, 36, 81, 144, 225]\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\nassert func([0, 10, 20, 30, 40]) == [0, 100, 400, 900, 1600]\nassert func([-1, -2, -3, -4, -5]) == [1, 4, 9, 16, 25]\nassert func([2, 4, 6, 8, 10]) == [4, 16, 36, 64, 100]\nassert func([3, 6, 9, 12, 15]) == [9, 36, 81, 144, 225]\n"}
{"task_id": 6, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str): \n    '''\n    Create a Python function that determines the minimum number of rotations needed to achieve the same string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\") == 5\nassert func(\"racecar\") == 0\nassert func(\"python\") == 6\nassert func(\"level\") == 0\nassert func(\"rotor\") == 0\n```", "response_code": "\nassert func(\"hello\") == 5\nassert func(\"racecar\") == 0\nassert func(\"python\") == 6\nassert func(\"level\") == 0\nassert func(\"rotor\") == 0\n"}
{"task_id": 7, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(s,ch): \n    '''\n    Create a Python function that eliminates the first and last instances of a specified character from a string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello world\", \"o\") == \"hell world\"\nassert func(\"banana\", \"a\") == \"bnn\"\nassert func(\"racecar\", \"r\") == \"aceca\"\nassert func(\"programming\", \"m\") == \"prograing\"\nassert func(\"apple\", \"p\") == \"ale\"\n```", "response_code": "\nassert func(\"hello world\", \"o\") == \"hell world\"\nassert func(\"banana\", \"a\") == \"bnn\"\nassert func(\"racecar\", \"r\") == \"aceca\"\nassert func(\"programming\", \"m\") == \"prograing\"\nassert func(\"apple\", \"p\") == \"ale\"\n"}
{"task_id": 8, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(M):\n    '''\n    Create a function that arranges a provided matrix in ascending order based on the sum of its rows.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert func([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\nassert func([[5, 2, 3], [1, 9, 6], [4, 7, 8]]) == [[2, 3, 5], [1, 6, 9], [4, 7, 8]]\nassert func([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == [[1, 1, 1], [2, 2, 2], [3, 3, 3]]\nassert func([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert func([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\nassert func([[5, 2, 3], [1, 9, 6], [4, 7, 8]]) == [[2, 3, 5], [1, 6, 9], [4, 7, 8]]\nassert func([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == [[1, 1, 1], [2, 2, 2], [3, 3, 3]]\nassert func([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\n"}
{"task_id": 9, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l,b,h) : \n    '''\n    Create a Python function that calculates the volume of a triangular prism.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 4, 5) == 30\nassert func(6, 8, 10) == 240\nassert func(1, 1, 1) == 0.4330127018922193\nassert func(0, 0, 0) == 0\nassert func(10, 10, 10) == 433.0127018922193\n```", "response_code": "\nassert func(3, 4, 5) == 30\nassert func(6, 8, 10) == 240\nassert func(1, 1, 1) == 0.4330127018922193\nassert func(0, 0, 0) == 0\nassert func(10, 10, 10) == 433.0127018922193\n"}
{"task_id": 10, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Create a function that identifies sequences of lowercase letters connected by an underscore.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello_world\") == [\"hello_world\"]\nassert func(\"python_is_cool\") == [\"python_is_cool\"]\nassert func(\"this_is_a_test\") == [\"this_is_a_test\"]\nassert func(\"abc_def_ghi\") == [\"abc_def_ghi\"]\nassert func(\"one_two_three\") == [\"one_two_three\"]\n```", "response_code": "\nassert func(\"hello_world\") == [\"hello_world\"]\nassert func(\"python_is_cool\") == [\"python_is_cool\"]\nassert func(\"this_is_a_test\") == [\"this_is_a_test\"]\nassert func(\"abc_def_ghi\") == [\"abc_def_ghi\"]\nassert func(\"one_two_three\") == [\"one_two_three\"]\n"}
{"task_id": 11, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a):\n    '''\n    Create a function that calculates the perimeter of a square.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(0) == 0\nassert func(1) == 4\nassert func(5) == 20\nassert func(10) == 40\nassert func(15) == 60\n```", "response_code": "\nassert func(0) == 0\nassert func(1) == 4\nassert func(5) == 20\nassert func(10) == 40\nassert func(15) == 60\n"}
{"task_id": 12, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "NO_OF_CHARS = 256\ndef func(string): \n    '''\n    Create a function that eliminates characters from the first string that are found in the second string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\", \"world\") == \"he\"\nassert func(\"apple\", \"pear\") == \"al\"\nassert func(\"python\", \"java\") == \"python\"\nassert func(\"abc123\", \"123\") == \"abc\"\nassert func(\"hello\", \"\") == \"hello\"\n```", "response_code": "\nassert func(\"hello\", \"world\") == \"he\"\nassert func(\"apple\", \"pear\") == \"al\"\nassert func(\"python\", \"java\") == \"python\"\nassert func(\"abc123\", \"123\") == \"abc\"\nassert func(\"hello\", \"\") == \"hello\"\n"}
{"task_id": 13, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arraynums):\n    '''\n    Create a function that determines if a provided array of integers has any duplicate elements.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == False\nassert func([1, 2, 3, 4, 1]) == True\nassert func([5, 5, 5, 5, 5]) == True\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\nassert func([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == True\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == False\nassert func([1, 2, 3, 4, 1]) == True\nassert func([5, 5, 5, 5, 5]) == True\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\nassert func([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == True\n"}
{"task_id": 14, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x): \n    '''\n    Create a function that determines whether the provided number is woodball.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(6) == True\nassert func(10) == False\nassert func(15) == False\nassert func(28) == True\nassert func(31) == False", "response_code": "assert func(6) == True\nassert func(10) == False\nassert func(15) == False\nassert func(28) == True\nassert func(31) == False"}
{"task_id": 15, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(num):    \n    '''\n    Create a Python function that verifies if a specified number is equal to one less than double its reverse.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(12) == True\nassert func(21) == True\nassert func(45) == False\nassert func(123) == True\nassert func(1001) == False\n```", "response_code": "\nassert func(12) == True\nassert func(21) == True\nassert func(45) == False\nassert func(123) == True\nassert func(1001) == False\n"}
{"task_id": 16, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr) : \n    '''\n    Create a Python function that determines the highest possible number using the provided digits.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func([1, 2, 3]) == 321\nassert func([4, 5, 6, 7]) == 7654\nassert func([9, 8, 7, 6, 5]) == 98765\nassert func([0, 1, 2, 3, 4, 5]) == 543210\nassert func([3, 3, 3, 3, 3]) == 33333", "response_code": "assert func([1, 2, 3]) == 321\nassert func([4, 5, 6, 7]) == 7654\nassert func([9, 8, 7, 6, 5]) == 98765\nassert func([0, 1, 2, 3, 4, 5]) == 543210\nassert func([3, 3, 3, 3, 3]) == 33333"}
{"task_id": 17, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x,y): \n    '''\n    Create a Python function that determines if two given integers have opposite signs.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(5, -3) == True\nassert func(-2, 8) == True\nassert func(0, 0) == False\nassert func(-10, -5) == False\nassert func(3, 3) == False", "response_code": "assert func(5, -3) == True\nassert func(-2, 8) == True\nassert func(0, 0) == False\nassert func(-10, -5) == False\nassert func(3, 3) == False"}
{"task_id": 18, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function that calculates the nth octagonal number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == 1\nassert func(2) == 8\nassert func(3) == 21\nassert func(4) == 40\nassert func(5) == 65\n```", "response_code": "\nassert func(1) == 1\nassert func(2) == 8\nassert func(3) == 21\nassert func(4) == 40\nassert func(5) == 65\n"}
{"task_id": 19, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from collections import defaultdict\ndef func(s):\n    '''\n    Create a Python function that calculates the number of substrings where the sum of the digits is equal to the length of the substring.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"12345\") == 9\nassert func(\"111\") == 6\nassert func(\"987654321\") == 15\nassert func(\"999\") == 4\nassert func(\"123456789\") == 15\n```", "response_code": "\nassert func(\"12345\") == 9\nassert func(\"111\") == 6\nassert func(\"987654321\") == 15\nassert func(\"999\") == 4\nassert func(\"123456789\") == 15\n"}
