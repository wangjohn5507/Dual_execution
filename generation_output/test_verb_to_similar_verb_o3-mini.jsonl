{"task_id": 0, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(test_tup1, test_tup2):\n    '''\n    Create a function to identify the matching elements from the provided two tuple lists.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func((1, 2, 3), (2, 3, 4)) == (2, 3)\nassert func(('a', 'b', 'c'), ('b', 'c', 'd')) == ('b', 'c')\nassert func((1, 2, 3), (4, 5, 6)) == ()\nassert func(('apple', 'banana', 'cherry'), ('banana', 'cherry', 'date')) == ('banana', 'cherry')\nassert func((), ()) == ()\n```", "response_code": "\nassert func((1, 2, 3), (2, 3, 4)) == (2, 3)\nassert func(('a', 'b', 'c'), ('b', 'c', 'd')) == ('b', 'c')\nassert func((1, 2, 3), (4, 5, 6)) == ()\nassert func(('apple', 'banana', 'cherry'), ('banana', 'cherry', 'date')) == ('banana', 'cherry')\nassert func((), ()) == ()\n"}
{"task_id": 1, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import math\ndef func(n):\n    '''\n    Create a python function to detect non-prime numbers.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(1) == False\nassert func(2) == True\nassert func(7) == True\nassert func(10) == False\nassert func(15) == False\n```", "response_code": "\nassert func(1) == False\nassert func(2) == True\nassert func(7) == True\nassert func(10) == False\nassert func(15) == False\n"}
{"task_id": 2, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import heapq as hq\ndef func(nums,n):\n    '''\n    Create a function to determine the highest integers from a provided list of numbers using the heap queue algorithm.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 3) == [9, 6, 5]\nassert func([10, 20, 30, 40, 50], 2) == [50, 40]\nassert func([5, 4, 3, 2, 1], 1) == [5]\nassert func([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\nassert func([7, 3, 9, 2, 8, 4, 6], 4) == [9, 8, 7, 6]\n```", "response_code": "\nassert func([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 3) == [9, 6, 5]\nassert func([10, 20, 30, 40, 50], 2) == [50, 40]\nassert func([5, 4, 3, 2, 1], 1) == [5]\nassert func([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\nassert func([7, 3, 9, 2, 8, 4, 6], 4) == [9, 8, 7, 6]\n"}
{"task_id": 3, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x): \n    '''\n    Compose a python function to verify if the two numbers vary at one bit position only or not.\n    '''\n    pass\n\n# check the correctness of func \nassert "}], "response": "```python\nassert func(2, 3) == True\nassert func(5, 7) == True\nassert func(1, 2) == False\nassert func(0, 15) == False\nassert func(8, 9) == True\n```", "response_code": "\nassert func(2, 3) == True\nassert func(5, 7) == True\nassert func(1, 2) == False\nassert func(0, 15) == False\nassert func(8, 9) == True\n"}
{"task_id": 4, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Compose a function to detect all words that are a minimum of 4 characters in length in a string by utilizing regex.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"Hello, this is a test\") == ['Hello', 'this', 'test']\nassert func(\"Python is a great programming language\") == ['Python', 'great', 'programming', 'language']\nassert func(\"1234 abcd 5678 efgh\") == ['abcd', '5678', 'efgh']\nassert func(\"Short words\") == ['Short', 'words']\nassert func(\"OnlyOneLongWord\") == ['OnlyOneLongWord']\n```", "response_code": "\nassert func(\"Hello, this is a test\") == ['Hello', 'this', 'test']\nassert func(\"Python is a great programming language\") == ['Python', 'great', 'programming', 'language']\nassert func(\"1234 abcd 5678 efgh\") == ['abcd', '5678', 'efgh']\nassert func(\"Short words\") == ['Short', 'words']\nassert func(\"OnlyOneLongWord\") == ['OnlyOneLongWord']\n"}
{"task_id": 5, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(nums):\n    '''\n    Create a function to calculate squares of individual elements in a list using a lambda function.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\nassert func([0, 10, 20, 30, 40]) == [0, 100, 400, 900, 1600]\nassert func([-1, -2, -3, -4, -5]) == [1, 4, 9, 16, 25]\nassert func([2, 4, 6, 8, 10]) == [4, 16, 36, 64, 100]\nassert func([3, 6, 9, 12, 15]) == [9, 36, 81, 144, 225]\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\nassert func([0, 10, 20, 30, 40]) == [0, 100, 400, 900, 1600]\nassert func([-1, -2, -3, -4, -5]) == [1, 4, 9, 16, 25]\nassert func([2, 4, 6, 8, 10]) == [4, 16, 36, 64, 100]\nassert func([3, 6, 9, 12, 15]) == [9, 36, 81, 144, 225]\n"}
{"task_id": 6, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(str): \n    '''\n    Compose a python function to determine the minimum number of rotations needed to achieve the identical string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"abc\") == 3\nassert func(\"aaa\") == 0\nassert func(\"abcd\") == 4\nassert func(\"racecar\") == 7\nassert func(\"hello\") == 5\n```", "response_code": "\nassert func(\"abc\") == 3\nassert func(\"aaa\") == 0\nassert func(\"abcd\") == 4\nassert func(\"racecar\") == 7\nassert func(\"hello\") == 5\n"}
{"task_id": 7, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(s,ch): \n    '''\n    Create a python function to delete first and last occurrence of a specified character from the string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(\"hello world\", \"o\") == \"hell world\"\nassert func(\"programming\", \"m\") == \"prograing\"\nassert func(\"banana\", \"a\") == \"bnn\"\nassert func(\"racecar\", \"r\") == \"aceca\"\nassert func(\"apple\", \"p\") == \"ale\"", "response_code": "assert func(\"hello world\", \"o\") == \"hell world\"\nassert func(\"programming\", \"m\") == \"prograing\"\nassert func(\"banana\", \"a\") == \"bnn\"\nassert func(\"racecar\", \"r\") == \"aceca\"\nassert func(\"apple\", \"p\") == \"ale\""}
{"task_id": 8, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(M):\n    '''\n    Create a function to arrange a given matrix in ascending order based on the total of its rows.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert func([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\nassert func([[5, 2, 3], [1, 8, 6], [4, 7, 9]]) == [[1, 8, 6], [4, 7, 9], [5, 2, 3]]\nassert func([[10, 20, 30], [40, 50, 60], [70, 80, 90]]) == [[10, 20, 30], [40, 50, 60], [70, 80, 90]]\nassert func([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\n```", "response_code": "\nassert func([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert func([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\nassert func([[5, 2, 3], [1, 8, 6], [4, 7, 9]]) == [[1, 8, 6], [4, 7, 9], [5, 2, 3]]\nassert func([[10, 20, 30], [40, 50, 60], [70, 80, 90]]) == [[10, 20, 30], [40, 50, 60], [70, 80, 90]]\nassert func([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\n"}
{"task_id": 9, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(l,b,h) : \n    '''\n    Compose a python function to determine the volume of a triangular prism.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(3, 4, 5) == 30\nassert func(2, 6, 8) == 48\nassert func(1, 1, 1) == 0.5\nassert func(10, 10, 10) == 500\nassert func(7, 3, 4) == 42\n```", "response_code": "\nassert func(3, 4, 5) == 30\nassert func(2, 6, 8) == 48\nassert func(1, 1, 1) == 0.5\nassert func(10, 10, 10) == 500\nassert func(7, 3, 4) == 42\n"}
{"task_id": 10, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "import re\ndef func(text):\n    '''\n    Compose a function to detect sequences of lowercase letters connected with an underscore.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello_world\") == True\nassert func(\"python_is_cool\") == True\nassert func(\"camelCase\") == False\nassert func(\"snake_case_is_fun\") == True\nassert func(\"123_abc\") == False\n```", "response_code": "\nassert func(\"hello_world\") == True\nassert func(\"python_is_cool\") == True\nassert func(\"camelCase\") == False\nassert func(\"snake_case_is_fun\") == True\nassert func(\"123_abc\") == False\n"}
{"task_id": 11, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(a):\n    '''\n    Compose a function to determine the perimeter of a square.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(0) == 0\nassert func(1) == 4\nassert func(5) == 20\nassert func(10) == 40\nassert func(15) == 60", "response_code": "assert func(0) == 0\nassert func(1) == 4\nassert func(5) == 20\nassert func(10) == 40\nassert func(15) == 60"}
{"task_id": 12, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "NO_OF_CHARS = 256\ndef func(string): \n    '''\n    Create a function to eliminate characters from the first string that exist in the second string.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"hello\", \"world\") == \"he\"\nassert func(\"abcde\", \"def\") == \"abc\"\nassert func(\"12345\", \"54321\") == \"\"\nassert func(\"apple\", \"banana\") == \"apple\"\nassert func(\"python\", \"java\") == \"python\"\n```", "response_code": "\nassert func(\"hello\", \"world\") == \"he\"\nassert func(\"abcde\", \"def\") == \"abc\"\nassert func(\"12345\", \"54321\") == \"\"\nassert func(\"apple\", \"banana\") == \"apple\"\nassert func(\"python\", \"java\") == \"python\"\n"}
{"task_id": 13, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arraynums):\n    '''\n    Create a function to determine if a provided array of integers includes any duplicate elements.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3, 4, 5]) == False\nassert func([1, 2, 3, 4, 1]) == True\nassert func([5, 5, 5, 5, 5]) == True\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\nassert func([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == True\n```", "response_code": "\nassert func([1, 2, 3, 4, 5]) == False\nassert func([1, 2, 3, 4, 1]) == True\nassert func([5, 5, 5, 5, 5]) == True\nassert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\nassert func([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == True\n"}
{"task_id": 14, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x): \n    '''\n    Compose a function to verify if the provided number is woodball or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(7) == False\nassert func(14) == True\nassert func(21) == False\nassert func(28) == True\nassert func(35) == False", "response_code": "assert func(7) == False\nassert func(14) == True\nassert func(21) == False\nassert func(28) == True\nassert func(35) == False"}
{"task_id": 15, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(num):    \n    '''\n    Create a python function to verify if a provided number is one less than double its reverse.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(12) == True\nassert func(21) == True\nassert func(45) == False\nassert func(100) == False\nassert func(1234) == True\n```", "response_code": "\nassert func(12) == True\nassert func(21) == True\nassert func(45) == False\nassert func(100) == False\nassert func(1234) == True\n"}
{"task_id": 16, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(arr) : \n    '''\n    Compose a python function to determine the greatest number that can be created with the provided digits.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func([1, 2, 3]) == 321\nassert func([4, 5, 6, 7]) == 7654\nassert func([9, 8, 7, 6, 5]) == 98765\nassert func([0, 0, 1, 2, 3]) == 32100\nassert func([3, 3, 3, 3]) == 3333\n```", "response_code": "\nassert func([1, 2, 3]) == 321\nassert func([4, 5, 6, 7]) == 7654\nassert func([9, 8, 7, 6, 5]) == 98765\nassert func([0, 0, 1, 2, 3]) == 32100\nassert func([3, 3, 3, 3]) == 3333\n"}
{"task_id": 17, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(x,y): \n    '''\n    Create a python function to verify if the provided two integers possess opposite signs or not.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(5, -3) == True\nassert func(-2, 8) == True\nassert func(0, 0) == False\nassert func(-10, -5) == False\nassert func(3, 3) == False", "response_code": "assert func(5, -3) == True\nassert func(-2, 8) == True\nassert func(0, 0) == False\nassert func(-10, -5) == False\nassert func(3, 3) == False"}
{"task_id": 18, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "def func(n): \n    '''\n    Create a function to determine the nth octagonal number.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "assert func(1) == 1\nassert func(2) == 8\nassert func(3) == 21\nassert func(4) == 40\nassert func(5) == 65", "response_code": "assert func(1) == 1\nassert func(2) == 8\nassert func(3) == 21\nassert func(4) == 40\nassert func(5) == 65"}
{"task_id": 19, "prompt": [{"role": "system", "content": "Complete the assertions with at least 5 test cases. Just return assertions with input and output."}, {"role": "user", "content": "from collections import defaultdict\ndef func(s):\n    '''\n    Create a python function to calculate the number of substrings with the sum of digits equal to their length.\n    '''\n    pass\n\n# check the correctness of func\nassert "}], "response": "```python\nassert func(\"123\") == 1\nassert func(\"1234\") == 4\nassert func(\"111\") == 6\nassert func(\"12345\") == 5\nassert func(\"999\") == 3\n```", "response_code": "\nassert func(\"123\") == 1\nassert func(\"1234\") == 4\nassert func(\"111\") == 6\nassert func(\"12345\") == 5\nassert func(\"999\") == 3\n"}
