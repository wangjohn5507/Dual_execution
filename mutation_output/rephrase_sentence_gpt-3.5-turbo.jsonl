{"task_id": 0, "original": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].", "mutation": "Create a function that determines the lowest cost path to reach the position (m, n) from (0, 0) using the provided cost matrix cost[][] and position (m, n) in cost[][]."}
{"task_id": 1, "original": "Write a function to find the similar elements from the given two tuple lists.", "mutation": "Create a function that identifies the common elements between two lists of tuples."}
{"task_id": 2, "original": "Write a python function to identify non-prime numbers.", "mutation": "Create a Python function that can detect numbers that are not prime."}
{"task_id": 3, "original": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.", "mutation": "Create a function that utilizes the heap queue algorithm to identify the highest integers within a provided list of numbers."}
{"task_id": 4, "original": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.", "mutation": "Create a function that calculates the possible arrangements of 2 x 1 dominoes on a 3 x n board."}
{"task_id": 5, "original": "Write a python function to check whether the two numbers differ at one bit position only or not.", "mutation": "Create a Python function that determines if two numbers differ at only one bit position."}
{"task_id": 6, "original": "Write a function to find all words which are at least 4 characters long in a string by using regex.", "mutation": "Create a function that uses regex to identify all words in a string that contain a minimum of 4 characters."}
{"task_id": 7, "original": "Write a function to find squares of individual elements in a list using lambda function.", "mutation": "Create a lambda function to calculate the squares of each element in a list."}
{"task_id": 8, "original": "Write a python function to find the minimum number of rotations required to get the same string.", "mutation": "Create a Python function that determines the minimum number of rotations needed to achieve the same string."}
{"task_id": 9, "original": "Write a function to get the n smallest items from a dataset.", "mutation": "Create a function that retrieves the n smallest items from a dataset."}
{"task_id": 10, "original": "Write a python function to remove first and last occurrence of a given character from the string.", "mutation": "Create a Python function that eliminates the first and last instances of a specified character from a string."}
{"task_id": 11, "original": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "mutation": "Create a function that arranges a provided matrix in ascending order based on the sum of its rows."}
{"task_id": 12, "original": "Write a function to count the most common words in a dictionary.", "mutation": "Create a function that tallies the most frequently occurring words in a dictionary."}
{"task_id": 13, "original": "Write a python function to find the volume of a triangular prism.", "mutation": "Create a Python function that calculates the volume of a triangular prism."}
{"task_id": 14, "original": "Write a function to split a string at lowercase letters.", "mutation": "Create a function that divides a string at lowercase characters."}
{"task_id": 15, "original": "Write a function to find sequences of lowercase letters joined with an underscore.", "mutation": "Create a function that identifies sequences of lowercase letters connected by an underscore."}
{"task_id": 16, "original": "Write a function to find the perimeter of a square.", "mutation": "Create a function that calculates the perimeter of a square."}
{"task_id": 17, "original": "Write a function to remove characters from the first string which are present in the second string.", "mutation": "Create a function that eliminates characters from the first string that are found in the second string."}
{"task_id": 18, "original": "Write a function to find whether a given array of integers contains any duplicate element.", "mutation": "Create a function that determines if a provided array of integers has any duplicate elements."}
{"task_id": 19, "original": "Write a function to check if the given number is woodball or not.", "mutation": "Create a function that determines whether the provided number is woodball."}
{"task_id": 20, "original": "Write a function to find m number of multiples of n.", "mutation": "Create a function that calculates m multiples of n."}
{"task_id": 21, "original": "Write a function to find the first duplicate element in a given array of integers.", "mutation": "Create a function that identifies the initial duplicate element within a provided array of integers."}
{"task_id": 22, "original": "Write a python function to find the maximum sum of elements of list in a list of lists.", "mutation": "Create a Python function that can determine the highest sum of elements within a list of lists."}
{"task_id": 23, "original": "Write a function to convert the given binary number to its decimal equivalent.", "mutation": "Create a function that will change the provided binary number into its decimal form."}
{"task_id": 24, "original": "Write a python function to find the product of non-repeated elements in a given array.", "mutation": "Create a Python function that calculates the product of unique elements in a provided array."}
{"task_id": 25, "original": "Write a function to check if the given tuple list has all k elements.", "mutation": "Create a function that verifies whether all k elements are present in the provided tuple list."}
{"task_id": 26, "original": "Write a python function to remove all digits from a list of strings.", "mutation": "Create a Python function that eliminates all numbers from a list of strings."}
{"task_id": 27, "original": "Write a python function to find binomial co-efficient.", "mutation": "Create a Python function that calculates the binomial coefficient."}
{"task_id": 28, "original": "Write a python function to find the element occurring odd number of times.", "mutation": "Create a Python function that identifies the element that appears an odd number of times."}
{"task_id": 29, "original": "Write a python function to count all the substrings starting and ending with same characters.", "mutation": "Create a Python function that calculates the total number of substrings that begin and end with the same character."}
{"task_id": 30, "original": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.", "mutation": "Create a function that utilizes the heap queue algorithm to identify the k integers with the highest frequency from sorted and unique integer lists."}
{"task_id": 31, "original": "Write a python function to find the largest prime factor of a given number.", "mutation": "Create a Python function that identifies the greatest prime factor of a specified number."}
{"task_id": 32, "original": "Write a python function to convert a decimal number to binary number.", "mutation": "Create a Python function that converts a decimal number into a binary number."}
{"task_id": 33, "original": "Write a python function to find the missing number in a sorted array.", "mutation": "Create a Python function that identifies the absent number in an ordered array."}
{"task_id": 34, "original": "Write a function to find the n-th rectangular number.", "mutation": "Create a function that calculates the n-th square number."}
{"task_id": 35, "original": "Write a python function to find the nth digit in the proper fraction of two given numbers.", "mutation": "Create a Python function that determines the nth digit in the decimal representation of the fraction resulting from dividing two specified numbers."}
{"task_id": 36, "original": "Write a function to sort a given mixed list of integers and strings.", "mutation": "Create a function that can organize a list containing both integers and strings."}
{"task_id": 37, "original": "Write a function to find the division of first even and odd number of a given list.", "mutation": "Create a function that calculates the division of the first even and odd numbers in a provided list."}
{"task_id": 38, "original": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.", "mutation": "Create a function that determines if it is possible to rearrange the letters of a given string in such a way that no two adjacent characters are the same."}
{"task_id": 39, "original": "Write a function to find frequency of the elements in a given list of lists using collections module.", "mutation": "Create a function that utilizes the collections module to determine the frequency of elements within a specified list of lists."}
{"task_id": 40, "original": "Write a function to filter even numbers using lambda function.", "mutation": "Create a lambda function to filter out odd numbers."}
{"task_id": 41, "original": "Write a python function to find the sum of repeated elements in a given array.", "mutation": "Create a Python function that calculates the total of duplicate elements in a provided array."}
{"task_id": 42, "original": "Write a function to find sequences of lowercase letters joined with an underscore using regex.", "mutation": "Create a function that uses regex to identify sequences of lowercase letters connected by an underscore."}
{"task_id": 43, "original": "Write a function that matches a word at the beginning of a string.", "mutation": "Create a function that identifies a word located at the start of a string."}
{"task_id": 44, "original": "Write a function to find the gcd of the given array elements.", "mutation": "Create a function that calculates the greatest common divisor of the elements in the provided array."}
{"task_id": 45, "original": "Write a python function to determine whether all the numbers are different from each other are not.", "mutation": "Create a Python function to check if all numbers in a list are unique."}
{"task_id": 46, "original": "Write a python function to find the last digit when factorial of a divides factorial of b.", "mutation": "Create a Python function that determines the last digit of the factorial of a number that divides the factorial of another number."}
{"task_id": 47, "original": "Write a python function to set all odd bits of a given number.", "mutation": "Create a Python function that will set the value of all odd bits in a specified number."}
{"task_id": 48, "original": "Write a function to extract every first or specified element from a given two-dimensional list.", "mutation": "Create a function that retrieves the first or specified element from each sublist in a given two-dimensional list."}
{"task_id": 49, "original": "Write a function to find the list with minimum length using lambda function.", "mutation": "Create a lambda function to determine the list with the shortest length."}
{"task_id": 50, "original": "Write a function to print check if the triangle is equilateral or not.", "mutation": "Create a function that checks if a triangle is equilateral and prints the result."}
{"task_id": 51, "original": "Write a function to caluclate area of a parallelogram.", "mutation": "Create a function that calculates the area of a parallelogram."}
{"task_id": 52, "original": "Write a python function to check whether the first and last characters of a given string are equal or not.", "mutation": "Create a Python function that verifies if the first and last characters of a provided string are the same."}
{"task_id": 53, "original": "Write a function to sort the given array by using counting sort.", "mutation": "Create a function that utilizes counting sort to arrange the provided array."}
{"task_id": 54, "original": "Write a function to find t-nth term of geometric series.", "mutation": "Create a function that calculates the t-nth term of a geometric series."}
{"task_id": 55, "original": "Write a python function to check if a given number is one less than twice its reverse.", "mutation": "Create a Python function that verifies if a specified number is equal to one less than double its reverse."}
{"task_id": 56, "original": "Write a python function to find the largest number that can be formed with the given digits.", "mutation": "Create a Python function that determines the highest possible number using the provided digits."}
{"task_id": 57, "original": "Write a python function to check whether the given two integers have opposite sign or not.", "mutation": "Create a Python function that determines if two given integers have opposite signs."}
{"task_id": 58, "original": "Write a function to find the nth octagonal number.", "mutation": "Create a function that calculates the nth octagonal number."}
{"task_id": 59, "original": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.", "mutation": "Create a function that determines the longest subsequence length with a difference between adjacent elements in a given array."}
{"task_id": 60, "original": "Write a python function to count number of substrings with the sum of digits equal to their length.", "mutation": "Create a Python function that calculates the number of substrings where the sum of the digits is equal to the length of the substring."}
{"task_id": 61, "original": "Write a python function to find smallest number in a list.", "mutation": "Create a Python function that identifies the smallest number within a given list."}
{"task_id": 62, "original": "Write a function to find the maximum difference between available pairs in the given tuple list.", "mutation": "Create a function that can determine the largest difference between pairs within a provided list of tuples."}
{"task_id": 63, "original": "Write a function to sort a list of tuples using lambda.", "mutation": "Create a lambda function to sort a list of tuples."}
{"task_id": 64, "original": "Write a function of recursion list sum.", "mutation": "Create a recursive function that calculates the sum of a list."}
{"task_id": 65, "original": "Write a python function to count positive numbers in a list.", "mutation": "Create a Python function that calculates the number of positive numbers in a given list."}
{"task_id": 66, "original": "Write a function to find the number of ways to partition a set of bell numbers.", "mutation": "Create a function that calculates the possible partitions of a set of bell numbers."}
{"task_id": 67, "original": "Write a python function to check whether the given array is monotonic or not.", "mutation": "Create a Python function that determines if the provided array is monotonic."}
{"task_id": 68, "original": "Write a function to check whether a list contains the given sublist or not.", "mutation": "Create a function that determines if a sublist is present in a list."}
{"task_id": 69, "original": "Write a function to find whether all the given tuples have equal length or not.", "mutation": "Create a function that determines if all the provided tuples are of the same length."}
{"task_id": 70, "original": "Write a function to sort a list of elements using comb sort.", "mutation": "Create a function that implements comb sort to arrange a list of elements."}
{"task_id": 71, "original": "Write a python function to check whether the given number can be represented as difference of two squares or not.", "mutation": "Create a Python function that determines if a given number can be expressed as the difference of two squares."}
{"task_id": 72, "original": "Write a function to split the given string with multiple delimiters by using regex.", "mutation": "Create a function that uses regex to split a string with multiple delimiters."}
{"task_id": 73, "original": "Write a function to check whether it follows the sequence given in the patterns array.", "mutation": "Create a function that verifies if it adheres to the sequence provided in the patterns array."}
{"task_id": 74, "original": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.", "mutation": "Create a function that identifies tuples in a list where all elements are divisible by k."}
{"task_id": 75, "original": "Write a python function to count the number of squares in a rectangle.", "mutation": "Create a Python function that calculates the quantity of squares within a rectangle."}
{"task_id": 76, "original": "Write a python function to find the difference between sum of even and odd digits.", "mutation": "Create a Python function that calculates the difference between the sum of even digits and the sum of odd digits."}
{"task_id": 77, "original": "Write a python function to find number of integers with odd number of set bits.", "mutation": "Create a Python function that determines the count of integers with an odd number of set bits."}
{"task_id": 78, "original": "Write a python function to check whether the length of the word is odd or not.", "mutation": "Create a Python function that determines if the length of a word is odd."}
{"task_id": 79, "original": "Write a function to find the nth tetrahedral number.", "mutation": "Create a function that calculates the nth tetrahedral number."}
{"task_id": 80, "original": "Write a function to zip the two given tuples.", "mutation": "Create a function that zips two provided tuples."}
{"task_id": 81, "original": "Write a function to find the volume of a sphere.", "mutation": "Create a function that calculates the volume of a sphere."}
{"task_id": 82, "original": "Write a python function to find the character made by adding all the characters of the given string.", "mutation": "Create a Python function that calculates the character resulting from adding all the characters in the provided string."}
{"task_id": 83, "original": "Write a function to find the n-th number in newman conway sequence.", "mutation": "Create a function that determines the n-th number in the Newman Conway sequence."}
{"task_id": 84, "original": "Write a function to find the surface area of a sphere.", "mutation": "Create a function that calculates the surface area of a sphere."}
{"task_id": 85, "original": "Write a function to find nth centered hexagonal number.", "mutation": "Create a function that calculates the nth centered hexagonal number."}
{"task_id": 86, "original": "Write a function to merge three dictionaries into a single expression.", "mutation": "Create a function that combines three dictionaries into one."}
{"task_id": 87, "original": "Write a function to get the frequency of the elements in a list.", "mutation": "Create a function that calculates the frequency of each element in a given list."}
{"task_id": 88, "original": "Write a function to find the closest smaller number than n.", "mutation": "Create a function that identifies the nearest number smaller than n."}
{"task_id": 89, "original": "Write a python function to find the length of the longest word.", "mutation": "Create a Python function that determines the longest word's length."}
{"task_id": 90, "original": "Write a function to check if a substring is present in a given list of string values.", "mutation": "Create a function that verifies the existence of a substring within a provided list of strings."}
{"task_id": 91, "original": "Write a function to check whether the given number is undulating or not.", "mutation": "Create a function that determines if the provided number is undulating."}
{"task_id": 92, "original": "Write a function to calculate the value of 'a' to the power 'b'.", "mutation": "Create a function that computes the result of raising 'a' to the power of 'b'."}
{"task_id": 93, "original": "Write a function to extract the index minimum value record from the given tuples.", "mutation": "Create a function that retrieves the index of the smallest value in the provided tuples."}
{"task_id": 94, "original": "Write a python function to find the minimum length of sublist.", "mutation": "Create a Python function that determines the shortest length of a sublist."}
{"task_id": 95, "original": "Write a python function to find the number of divisors of a given integer.", "mutation": "Create a Python function that calculates the quantity of divisors for a specified integer."}
{"task_id": 96, "original": "Write a function to find frequency count of list of lists.", "mutation": "Create a function that calculates the frequency of each element in a list of lists."}
{"task_id": 97, "original": "Write a function to multiply all the numbers in a list and divide with the length of the list.", "mutation": "Create a function that multiplies all the numbers in a list and then divides the result by the length of the list."}
{"task_id": 98, "original": "Write a function to convert the given decimal number to its binary equivalent.", "mutation": "Create a function that will convert the provided decimal number into binary form."}
{"task_id": 99, "original": "Write a function to find the next smallest palindrome of a specified number.", "mutation": "Create a function that determines the next smallest palindrome for a given number."}
{"task_id": 100, "original": "Write a function to find the kth element in the given array.", "mutation": "Create a function that locates the kth element within the provided array."}
{"task_id": 101, "original": "Write a function to convert snake case string to camel case string.", "mutation": "Create a function that transforms a snake case string into a camel case string."}
{"task_id": 102, "original": "Write a function to find eulerian number a(n, m).", "mutation": "Create a function that calculates the Eulerian number a(n, m)."}
{"task_id": 103, "original": "Write a function to sort each sublist of strings in a given list of lists using lambda function.", "mutation": "Create a lambda function to sort the strings within each sublist of a given list of lists."}
{"task_id": 104, "original": "Write a python function to count true booleans in the given list.", "mutation": "Create a Python function that counts the number of true boolean values in a provided list."}
{"task_id": 105, "original": "Write a function to add the given list to the given tuples.", "mutation": "Create a function that combines the provided list with the provided tuples."}
{"task_id": 106, "original": "Write a python function to count hexadecimal numbers for a given range.", "mutation": "Create a Python function that calculates the number of hexadecimal numbers within a specified range."}
{"task_id": 107, "original": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.", "mutation": "Create a function that uses the heap queue algorithm to combine several sorted inputs into one sorted iterator."}
{"task_id": 108, "original": "Write a python function to find the count of rotations of a binary string with odd value.", "mutation": "Create a Python function that calculates the number of rotations of a binary string that has an odd value."}
{"task_id": 109, "original": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.", "mutation": "Create a function that identifies the missing ranges within a list, based on specified start and end range values."}
{"task_id": 110, "original": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item", "mutation": "Create a function that identifies common elements within nested lists."}
{"task_id": 111, "original": "Write a python function to find the perimeter of a cylinder.", "mutation": "Create a Python function that calculates the perimeter of a cylinder."}
{"task_id": 112, "original": "Write a function to check if a string represents an integer or not.", "mutation": "Create a function that verifies whether a given string is an integer or not."}
{"task_id": 113, "original": "Write a function to assign frequency to each tuple in the given tuple list.", "mutation": "Create a function that assigns a frequency to every tuple in the provided list of tuples."}
{"task_id": 114, "original": "Write a function to check whether all dictionaries in a list are empty or not.", "mutation": "Create a function that verifies if all dictionaries within a list are either empty or not."}
{"task_id": 115, "original": "Write a function to convert a given tuple of positive integers into an integer.", "mutation": "Create a function that transforms a tuple of positive integers into a single integer."}
{"task_id": 116, "original": "Write a function to convert all possible convertible elements in the list to float.", "mutation": "Create a function that changes any elements in the list that can be converted to float."}
{"task_id": 117, "original": "Write a function to convert a string to a list.", "mutation": "Create a function that transforms a string into a list."}
{"task_id": 118, "original": "Write a python function to find the element that appears only once in a sorted array.", "mutation": "Create a Python function that identifies the element that occurs only once in a sorted array."}
{"task_id": 119, "original": "Write a function to find the maximum product from the pairs of tuples within a given list.", "mutation": "Create a function that determines the highest product from pairs of tuples in a specified list."}
{"task_id": 120, "original": "Write a function to find the triplet with sum of the given array", "mutation": "Create a function that identifies the triplet in the array that adds up to a specified sum."}
{"task_id": 121, "original": "Write a function to find n\u2019th smart number.", "mutation": "Create a function that can determine the nth smart number."}
{"task_id": 122, "original": "Write a function to sum all amicable numbers from 1 to a specified number.", "mutation": "Create a function that calculates the sum of all amicable numbers within a given range starting from 1."}
{"task_id": 123, "original": "Write a function to get the angle of a complex number.", "mutation": "Create a function that calculates the angle of a complex number."}
{"task_id": 124, "original": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.", "mutation": "Create a function that determines the largest difference between the count of 0s and 1s in any substring of the provided binary string."}
{"task_id": 125, "original": "Write a python function to find the sum of common divisors of two given numbers.", "mutation": "Create a Python function that calculates the total of shared divisors between two specified numbers."}
{"task_id": 126, "original": "Write a function to multiply two integers without using the * operator in python.", "mutation": "Create a function in Python that multiplies two integers without utilizing the * operator."}
{"task_id": 127, "original": "Write a function to shortlist words that are longer than n from a given list of words.", "mutation": "Create a function that filters out words from a list that are longer than a specified length, n."}
{"task_id": 128, "original": "Write a function to calculate magic square.", "mutation": "Create a function that can determine a magic square."}
{"task_id": 129, "original": "Write a function to find the item with maximum frequency in a given list.", "mutation": "Create a function that identifies the item in a given list that appears most frequently."}
{"task_id": 130, "original": "Write a python function to reverse only the vowels of a given string.", "mutation": "Create a Python function that reverses the vowels in a given string."}
{"task_id": 131, "original": "Write a function to convert tuple to a string.", "mutation": "Create a function that changes a tuple into a string."}
{"task_id": 132, "original": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.", "mutation": "Create a lambda function that calculates the sum of the negative numbers in a provided list of numbers."}
{"task_id": 133, "original": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.", "mutation": "Create a Python function that determines if the last element of a given array is even or odd after applying a certain operation p times."}
{"task_id": 134, "original": "Write a function to find the nth hexagonal number.", "mutation": "Create a function that calculates the nth hexagonal number."}
{"task_id": 135, "original": "Write a function to calculate electricity bill.", "mutation": "Create a function that computes the electricity bill."}
{"task_id": 136, "original": "Write a function to find the ration of zeroes in an array of integers.", "mutation": "Create a function that calculates the proportion of zeros in an array of whole numbers."}
{"task_id": 137, "original": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.", "mutation": "Create a Python function that determines if a given number can be expressed as the sum of non-zero powers of 2."}
{"task_id": 138, "original": "Write a function to find the circumference of a circle.", "mutation": "Create a function that calculates the circumference of a circle."}
{"task_id": 139, "original": "Write a function to extract elements that occur singly in the given tuple list.", "mutation": "Create a function that retrieves elements that appear only once in the provided list of tuples."}
{"task_id": 140, "original": "Write a function to sort a list of elements using pancake sort.", "mutation": "Create a function that utilizes pancake sort to arrange a list of elements."}
{"task_id": 141, "original": "Write a function to count the same pair in three given lists.", "mutation": "Create a function that counts the occurrences of identical pairs in three provided lists."}
{"task_id": 142, "original": "Write a function to find number of lists present in the given tuple.", "mutation": "Create a function that determines the quantity of lists within the provided tuple."}
{"task_id": 143, "original": "Write a python function to find the sum of absolute differences in all pairs of the given array.", "mutation": "Create a Python function that calculates the total sum of absolute differences between each pair of elements in the provided array."}
{"task_id": 144, "original": "Write a python function to find the maximum difference between any two elements in a given array.", "mutation": "Create a Python function that determines the largest difference between two elements within a provided array."}
{"task_id": 145, "original": "Write a function to find the ascii value of total characters in a string.", "mutation": "Create a function that calculates the ASCII value of all characters in a given string."}
{"task_id": 146, "original": "Write a function to find the maximum total path sum in the given triangle.", "mutation": "Create a function that can determine the highest possible sum of paths in the provided triangle."}
{"task_id": 147, "original": "Write a function to divide a number into two parts such that the sum of digits is maximum.", "mutation": "Create a function that splits a number into two parts in order to maximize the sum of their digits."}
{"task_id": 148, "original": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.", "mutation": "Create a function that identifies the longest subsequence in a given array where the adjacent elements have a difference of one."}
{"task_id": 149, "original": "Write a python function to find whether the given number is present in the infinite sequence or not.", "mutation": "Create a Python function to determine if a given number is in an infinite sequence."}
{"task_id": 150, "original": "Write a python function to check whether the given number is co-prime or not.", "mutation": "Create a Python function that determines if the provided number is co-prime."}
{"task_id": 151, "original": "Write a function to sort the given array by using merge sort.", "mutation": "Create a function that utilizes merge sort to arrange the provided array."}
{"task_id": 152, "original": "Write a function to find the vertex of a parabola.", "mutation": "Create a function that determines the vertex of a parabola."}
{"task_id": 153, "original": "Write a function to extract every specified element from a given two dimensional list.", "mutation": "Create a function that retrieves each specified element from a provided two-dimensional list."}
{"task_id": 154, "original": "Write a python function to toggle all even bits of a given number.", "mutation": "Create a Python function that switches the state of all even bits in a specified number."}
{"task_id": 155, "original": "Write a function to convert a tuple of string values to a tuple of integer values.", "mutation": "Create a function that changes a tuple containing string values into a tuple containing integer values."}
{"task_id": 156, "original": "Write a function to reflect the run-length encoding from a list.", "mutation": "Create a function that converts a list into its run-length encoding."}
{"task_id": 157, "original": "Write a python function to find k number of operations required to make all elements equal.", "mutation": "Create a Python function that determines the minimum number of operations needed to make all elements equal to each other."}
{"task_id": 158, "original": "Write a function to print the season for the given month and day.", "mutation": "Create a function that will display the season based on the provided month and day."}
{"task_id": 159, "original": "Write a function to find x and y that satisfies ax + by = n.", "mutation": "Create a function that determines the values of x and y which satisfy the equation ax + by = n."}
{"task_id": 160, "original": "Write a function to remove all elements from a given list present in another list.", "mutation": "Create a function that eliminates any elements from a specified list that are also found in a separate list."}
{"task_id": 161, "original": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).", "mutation": "Create a function that computes the sum of positive integers starting from n and decreasing by 2 until the result is less than or equal to 0."}
{"task_id": 162, "original": "Write a function to calculate the area of a regular polygon.", "mutation": "Create a function that computes the area of a regular polygon."}
{"task_id": 163, "original": "Write a python function to check whether the sum of divisors are same or not.", "mutation": "Create a Python function that verifies if the sum of divisors is equal or not."}
{"task_id": 164, "original": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.", "mutation": "Create a Python function that counts the number of characters in a given string that are in the same position in the English alphabet, regardless of case."}
{"task_id": 165, "original": "Write a python function to count the pairs with xor as an even number.", "mutation": "Create a Python function that calculates the number of pairs with an even XOR."}
{"task_id": 166, "original": "Write a python function to find smallest power of 2 greater than or equal to n.", "mutation": "Create a Python function that determines the smallest power of 2 that is greater than or equal to n."}
{"task_id": 167, "original": "Write a python function to find the frequency of a number in a given array.", "mutation": "Create a Python function that calculates the occurrence of a specific number within a provided array."}
{"task_id": 168, "original": "Write a function to calculate the nth pell number.", "mutation": "Create a function that computes the pell number at position n."}
{"task_id": 169, "original": "Write a function to find sum of the numbers in a list between the indices of a specified range.", "mutation": "Create a function that calculates the total of the numbers within a list based on a specified range of indices."}
{"task_id": 170, "original": "Write a function to find the perimeter of a pentagon.", "mutation": "Create a function that calculates the perimeter of a pentagon."}
{"task_id": 171, "original": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item", "mutation": "Create a function that counts the number of times the characters 'std' appear in the provided string."}
{"task_id": 172, "original": "Write a function to remove everything except alphanumeric characters from a string.", "mutation": "Create a function that eliminates all non-alphanumeric characters from a string."}
{"task_id": 173, "original": "Write a function to group a sequence of key-value pairs into a dictionary of lists.", "mutation": "Create a function that organizes a series of key-value pairs into a dictionary containing lists."}
{"task_id": 174, "original": "Write a function to verify validity of a string of parentheses.", "mutation": "Create a function that checks if a string of parentheses is valid."}
{"task_id": 175, "original": "Write a function to find the perimeter of a triangle.", "mutation": "Create a function that calculates the perimeter of a triangle."}
{"task_id": 176, "original": "Write a python function to find two distinct numbers such that their lcm lies within the given range.", "mutation": "Create a Python function that identifies two different numbers whose least common multiple falls within a specified range."}
{"task_id": 177, "original": "Write a function to search some literals strings in a string.", "mutation": "Create a function that searches for specific literal strings within a given string."}
{"task_id": 178, "original": "Write a function to find if the given number is a keith number or not.", "mutation": "Create a function that determines whether a given number is a keith number."}
{"task_id": 179, "original": "Write a function to calculate distance between two points using latitude and longitude.", "mutation": "Create a function that computes the distance between two points based on their latitude and longitude coordinates."}
{"task_id": 180, "original": "Write a function to find the longest common prefix in the given set of strings.", "mutation": "Create a function that identifies the longest common prefix among a group of strings."}
{"task_id": 181, "original": "Write a function to find uppercase, lowercase, special character and numeric values using regex.", "mutation": "Create a function that uses regex to identify uppercase letters, lowercase letters, special characters, and numeric values."}
{"task_id": 182, "original": "Write a function to count all the distinct pairs having a difference of k in any array.", "mutation": "Create a function that calculates the total number of unique pairs with a specific difference in any given array."}
{"task_id": 183, "original": "Write a function to find all the values in a list that are greater than a specified number.", "mutation": "Create a function that identifies all values in a list that exceed a given number."}
{"task_id": 184, "original": "Write a function to find the focus of a parabola.", "mutation": "Create a function that determines the focal point of a parabola."}
{"task_id": 185, "original": "Write a function to search some literals strings in a string by using regex.", "mutation": "Create a function that uses regex to search for specific literal strings within a given string."}
{"task_id": 186, "original": "Write a function to find the longest common subsequence for the given two sequences.", "mutation": "Create a function that identifies the longest common subsequence between two given sequences."}
{"task_id": 187, "original": "Write a python function to check whether the given number can be represented by product of two squares or not.", "mutation": "Create a Python function that determines if a given number can be expressed as the product of two squares."}
{"task_id": 188, "original": "Write a python function to find the first missing positive number.", "mutation": "Create a Python function that identifies the initial positive integer that is absent."}
{"task_id": 189, "original": "Write a python function to count the number of integral co-ordinates that lie inside a square.", "mutation": "Create a Python function that calculates the quantity of whole number coordinates within a square."}
{"task_id": 190, "original": "Write a function to check whether the given month name contains 30 days or not.", "mutation": "Create a function that determines if the specified month has 30 days."}
{"task_id": 191, "original": "Write a python function to check whether a string has atleast one letter and one number.", "mutation": "Create a Python function that verifies if a string contains both a letter and a number."}
{"task_id": 192, "original": "Write a function to remove the duplicates from the given tuple.", "mutation": "Create a function that eliminates any duplicate elements from the provided tuple."}
{"task_id": 193, "original": "Write a python function to convert octal number to decimal number.", "mutation": "Create a Python function that converts an octal number to a decimal number."}
{"task_id": 194, "original": "Write a python function to find the first position of an element in a sorted array.", "mutation": "Create a Python function that locates the initial occurrence of an element within a sorted array."}
{"task_id": 195, "original": "Write a function to remove all the tuples with length k.", "mutation": "Create a function that eliminates all tuples of a specified length, k."}
{"task_id": 196, "original": "Write a function to perform the exponentiation of the given two tuples.", "mutation": "Create a function that calculates the exponentiation of two given tuples."}
{"task_id": 197, "original": "Write a function to find the largest triangle that can be inscribed in an ellipse.", "mutation": "Create a function that determines the largest triangle that can fit inside an ellipse."}
{"task_id": 198, "original": "Write a python function to find highest power of 2 less than or equal to given number.", "mutation": "Create a Python function that determines the largest power of 2 that is less than or equal to a specified number."}
{"task_id": 199, "original": "Write a function to find all index positions of the maximum values in a given list.", "mutation": "Create a function that identifies the index positions of all maximum values within a provided list."}
{"task_id": 200, "original": "Write a python function to check whether the elements in a list are same or not.", "mutation": "Create a Python function that verifies if all elements in a list are identical."}
{"task_id": 201, "original": "Write a function to remove even characters in a string.", "mutation": "Create a function that eliminates characters at even positions in a string."}
{"task_id": 202, "original": "Write a python function to find the hamming distance between given two integers.", "mutation": "Create a Python function that calculates the Hamming distance between two given integers."}
{"task_id": 203, "original": "Write a python function to count the occurrence of a given character in a string.", "mutation": "Create a Python function that calculates the frequency of a specified character in a string."}
{"task_id": 204, "original": "Write a function to find the inversions of tuple elements in the given tuple list.", "mutation": "Create a function that identifies the inversions of elements within a tuple list."}
{"task_id": 205, "original": "Write a function to perform the adjacent element concatenation in the given tuples.", "mutation": "Create a function that concatenates adjacent elements in the provided tuples."}
{"task_id": 206, "original": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.", "mutation": "Create a function that calculates the longest repeating subsequences where the two subsequences do not contain the same characters in the same positions."}
{"task_id": 207, "original": "Write a function to check the given decimal with a precision of 2 by using regex.", "mutation": "Create a function that uses regex to verify the provided decimal with a precision of 2."}
{"task_id": 208, "original": "Write a function to delete the smallest element from the given heap and then insert a new item.", "mutation": "Create a function that removes the smallest element from the provided heap and adds a new item."}
{"task_id": 209, "original": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.", "mutation": "Create a function that uses regex to verify if the provided string consists solely of specific characters (such as a-z, A-Z, and 0-9)."}
{"task_id": 210, "original": "Write a python function to count numbers whose oth and nth bits are set.", "mutation": "Create a Python function that counts the numbers with both the oth and nth bits set."}
{"task_id": 211, "original": "Write a python function to find the sum of fourth power of n natural numbers.", "mutation": "Create a Python function that calculates the sum of the fourth power of the first n natural numbers."}
{"task_id": 212, "original": "Write a function to perform the concatenation of two string tuples.", "mutation": "Create a function that concatenates two tuples of strings."}
{"task_id": 213, "original": "Write a function to convert radians to degrees.", "mutation": "Create a function that converts radians to degrees."}
{"task_id": 214, "original": "Write a function to decode a run-length encoded given list.", "mutation": "Create a function that can decode a list that has been encoded using run-length encoding."}
{"task_id": 215, "original": "Write a function to check if a nested list is a subset of another nested list.", "mutation": "Create a function that verifies if a nested list is contained within another nested list."}
{"task_id": 216, "original": "Write a python function to find the first repeated character in a given string.", "mutation": "Create a Python function that identifies the initial repeated character in a provided string."}
{"task_id": 217, "original": "Write a python function to find the minimum operations required to make two numbers equal.", "mutation": "Create a Python function that determines the minimum number of operations needed to make two numbers the same."}
{"task_id": 218, "original": "Write a function to extract maximum and minimum k elements in the given tuple.", "mutation": "Create a function that retrieves the top k maximum and minimum elements from the provided tuple."}
{"task_id": 219, "original": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.", "mutation": "Create a function that replaces up to n instances of spaces, commas, or dots with a colon."}
{"task_id": 220, "original": "Write a python function to find the first even number in a given list of numbers.", "mutation": "Create a Python function that identifies the initial even number within a provided list of numbers."}
{"task_id": 221, "original": "Write a function to check if all the elements in tuple have same data type or not.", "mutation": "Create a function that verifies whether all elements in a tuple share the same data type."}
{"task_id": 222, "original": "Write a function to check for majority element in the given sorted array.", "mutation": "Create a function that verifies the presence of a majority element in the provided sorted array."}
{"task_id": 223, "original": "Write a python function to count set bits of a given number.", "mutation": "Create a Python function that calculates the number of set bits in a given number."}
{"task_id": 224, "original": "Write a python function to find the minimum element in a sorted and rotated array.", "mutation": "Create a Python function that can determine the smallest element in an array that has been both sorted and rotated."}
{"task_id": 225, "original": "Write a python function to remove the characters which have odd index values of a given string.", "mutation": "Create a Python function that eliminates characters with odd index values from a specified string."}
{"task_id": 226, "original": "Write a function to find minimum of three numbers.", "mutation": "Create a function that determines the smallest value among three numbers."}
{"task_id": 227, "original": "Write a python function to check whether all the bits are unset in the given range or not.", "mutation": "Create a Python function that verifies if all bits within a specified range are not set."}
{"task_id": 228, "original": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.", "mutation": "Create a function that organizes the elements of the provided array so that negative elements come before positive ones."}
{"task_id": 229, "original": "Write a function to replace blank spaces with any character in a string.", "mutation": "Create a function that replaces empty spaces with a specified character in a given string."}
{"task_id": 230, "original": "Write a function to find the maximum sum in the given right triangle of numbers.", "mutation": "Create a function that can determine the highest sum within a specified right triangle of numerical values."}
{"task_id": 231, "original": "Write a function to get the n largest items from a dataset.", "mutation": "Create a function that retrieves the n largest items from a dataset."}
{"task_id": 232, "original": "Write a function to find the lateral surface area of a cylinder.", "mutation": "Create a function that calculates the lateral surface area of a cylinder."}
{"task_id": 233, "original": "Write a function to find the volume of a cube.", "mutation": "Create a function that calculates the volume of a cube."}
{"task_id": 234, "original": "Write a python function to set all even bits of a given number.", "mutation": "Create a Python function that will modify all even bits of a specified number."}
{"task_id": 235, "original": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.", "mutation": "Create a Python function that calculates the maximum number of equilateral triangles that can fit inside a given equilateral triangle."}
{"task_id": 236, "original": "Write a function to check the occurrences of records which occur similar times in the given tuples.", "mutation": "Create a function that checks for the frequency of records that occur the same number of times in the provided tuples."}
{"task_id": 237, "original": "Write a python function to count number of non-empty substrings of a given string.", "mutation": "Create a Python function that calculates the total number of non-empty substrings in a provided string."}
{"task_id": 238, "original": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.", "mutation": "Create a function that calculates the number of potential sequences of length n, where each subsequent element is at least double the previous element but no greater than m."}
{"task_id": 239, "original": "Write a function to replace the last element of the list with another list.", "mutation": "Create a function that swaps the final element of a list with a different list."}
{"task_id": 240, "original": "Write a function to generate a 3d array having each element as '*'.", "mutation": "Create a function that produces a three-dimensional array with every element being '*'."}
{"task_id": 241, "original": "Write a function to count total characters in a string.", "mutation": "Create a function that calculates the total number of characters in a given string."}
{"task_id": 242, "original": "Write a function to sort the given list based on the occurrence of first element of tuples.", "mutation": "Create a function that sorts the provided list according to the frequency of the first element in each tuple."}
{"task_id": 243, "original": "Write a python function to find the next perfect square greater than a given number.", "mutation": "Create a Python function that determines the next perfect square larger than a specified number."}
{"task_id": 244, "original": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.", "mutation": "Create a function that can determine the highest sum of a bi-tonic sub-sequence within a provided array."}
{"task_id": 245, "original": "Write a function for computing square roots using the babylonian method.", "mutation": "Create a function that calculates square roots using the Babylonian algorithm."}
{"task_id": 246, "original": "Write a function to find the longest palindromic subsequence in the given string.", "mutation": "Create a function that identifies the longest palindromic subsequence within a provided string."}
{"task_id": 247, "original": "Write a function to calculate the harmonic sum of n-1.", "mutation": "Create a function that computes the sum of the reciprocals of the integers from 1 to n."}
{"task_id": 248, "original": "Write a function to find the intersection of two arrays using lambda function.", "mutation": "Create a lambda function to determine the common elements between two arrays."}
{"task_id": 249, "original": "Write a python function to count the occcurences of an element in a tuple.", "mutation": "Create a Python function that counts the number of times an element appears in a tuple."}
{"task_id": 250, "original": "Write a function to insert an element before each element of a list.", "mutation": "Create a function that inserts an element before every element in a list."}
{"task_id": 251, "original": "Write a python function to convert complex numbers to polar coordinates.", "mutation": "Create a Python function that transforms complex numbers into polar coordinates."}
{"task_id": 252, "original": "Write a python function to count integers from a given list.", "mutation": "Create a Python function that counts the number of integers in a specified list."}
{"task_id": 253, "original": "Write a function to find all words starting with 'a' or 'e' in a given string.", "mutation": "Create a function that identifies all words in a given string that begin with either 'a' or 'e'."}
{"task_id": 254, "original": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.", "mutation": "Create a function that selects a specified number of colors from a pool of three different colors and generates all possible combinations with repetitions."}
{"task_id": 255, "original": "Write a python function to count the number of prime numbers less than a given non-negative number.", "mutation": "Create a Python function that calculates the quantity of prime numbers that are smaller than a specified non-negative number."}
{"task_id": 256, "original": "Write a function to swap two numbers.", "mutation": "Create a function that exchanges the values of two numbers."}
{"task_id": 257, "original": "Write a function to find number of odd elements in the given list using lambda function.", "mutation": "Create a lambda function to determine the count of odd elements in the provided list."}
{"task_id": 258, "original": "Write a function to maximize the given two tuples.", "mutation": "Create a function that maximizes two given tuples."}
{"task_id": 259, "original": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.", "mutation": "Create a function that identifies the nth Newman\u2013Shanks\u2013Williams prime."}
{"task_id": 260, "original": "Write a function to perform mathematical division operation across the given tuples.", "mutation": "Create a function that divides the tuples provided using mathematical operations."}
{"task_id": 261, "original": "Write a function to split a given list into two parts where the length of the first part of the list is given.", "mutation": "Create a function that divides a specified list into two parts, with the length of the first part predetermined."}
{"task_id": 262, "original": "Write a function to merge two dictionaries.", "mutation": "Create a function that combines two dictionaries."}
{"task_id": 263, "original": "Write a function to calculate a dog's age in dog's years.", "mutation": "Create a function that determines a dog's age in terms of dog years."}
{"task_id": 264, "original": "Write a function to split a list for every nth element.", "mutation": "Create a function that divides a list into sublists containing every nth element."}
{"task_id": 265, "original": "Write a function to find the lateral surface area of a cube.", "mutation": "Create a function that calculates the lateral surface area of a cube."}
{"task_id": 266, "original": "Write a python function to find the sum of squares of first n odd natural numbers.", "mutation": "Create a Python function that calculates the sum of the squares of the first n odd natural numbers."}
{"task_id": 267, "original": "Write a function to find the n'th star number.", "mutation": "Create a function that calculates the nth star number."}
{"task_id": 268, "original": "Write a function to find the ascii value of a character.", "mutation": "Create a function that determines the ASCII value of a character."}
{"task_id": 269, "original": "Write a python function to find the sum of even numbers at even positions.", "mutation": "Create a Python function that calculates the total of even numbers located at even indexes."}
{"task_id": 270, "original": "Write a python function to find the sum of fifth power of first n even natural numbers.", "mutation": "Create a Python function that calculates the sum of the fifth power of the first n even natural numbers."}
{"task_id": 271, "original": "Write a function to perfom the rear element extraction from list of tuples records.", "mutation": "Create a function that extracts the last element from a list of tuple records."}
{"task_id": 272, "original": "Write a function to substract the contents of one tuple with corresponding index of other tuple.", "mutation": "Create a function that subtracts the values of one tuple from the values of another tuple at the same index."}
{"task_id": 273, "original": "Write a python function to find sum of even index binomial coefficients.", "mutation": "Create a Python function that calculates the sum of binomial coefficients at even indices."}
{"task_id": 274, "original": "Write a python function to find the position of the last removed element from the given array.", "mutation": "Create a Python function that determines the index of the most recently removed element from a provided array."}
{"task_id": 275, "original": "Write a function to find the volume of a cylinder.", "mutation": "Create a function that calculates the volume of a cylinder."}
{"task_id": 276, "original": "Write a function to filter a dictionary based on values.", "mutation": "Create a function that will sort a dictionary based on its values."}
{"task_id": 277, "original": "Write a function to find the element count that occurs before the record in the given tuple.", "mutation": "Create a function that determines the number of occurrences of an element before a specified record in the provided tuple."}
{"task_id": 278, "original": "Write a function to find the nth decagonal number.", "mutation": "Create a function that calculates the decagonal number at position n."}
{"task_id": 279, "original": "Write a function to search an element in the given array by using sequential search.", "mutation": "Create a function that uses sequential search to find an element in the provided array."}
{"task_id": 280, "original": "Write a python function to check if the elements of a given list are unique or not.", "mutation": "Create a Python function that verifies whether the elements in a provided list are distinct."}
{"task_id": 281, "original": "Write a function to substaract two lists using map and lambda function.", "mutation": "Create a function that subtracts two lists using the map and lambda functions."}
{"task_id": 282, "original": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.", "mutation": "Create a Python function that verifies if the frequency of each digit is not greater than the digit itself."}
{"task_id": 283, "original": "Write a function to check whether all items of a list are equal to a given string.", "mutation": "Create a function that verifies if all elements in a list match a specified string."}
{"task_id": 284, "original": "Write a function that matches a string that has an a followed by two to three 'b'.", "mutation": "Create a function that identifies a string containing an 'a' followed by two or three 'b'."}
{"task_id": 285, "original": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.", "mutation": "Create a function that identifies the highest sum of consecutive elements in an array that has been repeated k times."}
{"task_id": 286, "original": "Write a python function to find the sum of squares of first n even natural numbers.", "mutation": "Create a Python function that calculates the sum of the squares of the first n even natural numbers."}
{"task_id": 287, "original": "Write a function to count array elements having modular inverse under given prime number p equal to itself.", "mutation": "Create a function that counts the number of elements in an array that have a modular inverse under a given prime number p that is equal to the element itself."}
{"task_id": 288, "original": "Write a python function to calculate the number of odd days in a given year.", "mutation": "Create a Python function that determines the amount of odd days in a specified year."}
{"task_id": 289, "original": "Write a function to find the list of lists with maximum length.", "mutation": "Create a function that identifies the list of lists with the longest length."}
{"task_id": 290, "original": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.", "mutation": "Create a function that calculates the number of possible ways to paint a fence with n posts and k colors, ensuring that no more than 2 adjacent posts have the same color."}
{"task_id": 291, "original": "Write a python function to find quotient of two numbers.", "mutation": "Create a Python function that calculates the quotient of two numbers."}
{"task_id": 292, "original": "Write a function to find the third side of a right angled triangle.", "mutation": "Create a function that calculates the length of the third side in a right-angled triangle."}
{"task_id": 293, "original": "Write a function to find the maximum value in a given heterogeneous list.", "mutation": "Create a function that can determine the highest value within a list containing different data types."}
{"task_id": 294, "original": "Write a function to return the sum of all divisors of a number.", "mutation": "Create a function that calculates the total sum of a number's divisors."}
{"task_id": 295, "original": "Write a python function to count inversions in an array.", "mutation": "Create a Python function that calculates the number of inversions in an array."}
{"task_id": 296, "original": "Write a function to flatten a given nested list structure.", "mutation": "Create a function that can flatten a nested list structure."}
{"task_id": 297, "original": "Write a function to find the nested list elements which are present in another list.", "mutation": "Create a function that identifies the nested list elements that exist in a separate list."}
{"task_id": 298, "original": "Write a function to calculate the maximum aggregate from the list of tuples.", "mutation": "Create a function that calculates the highest total value from a list of tuples."}
{"task_id": 299, "original": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.", "mutation": "Create a function that calculates the number of binary sequences with a length of 2n where the sum of the first n bits is equal to the sum of the last n bits."}
{"task_id": 300, "original": "Write a function to find the depth of a dictionary.", "mutation": "Create a function that determines the depth of a dictionary."}
{"task_id": 301, "original": "Write a python function to find the most significant bit number which is also a set bit.", "mutation": "Create a Python function that identifies the highest set bit in a number."}
{"task_id": 302, "original": "Write a python function to check whether the count of inversion of two types are same or not.", "mutation": "Create a Python function that determines if the counts of inversions for two types are equal."}
{"task_id": 303, "original": "Write a python function to find element at a given index after number of rotations.", "mutation": "Create a Python function that can determine the element at a specified index after a certain number of rotations."}
{"task_id": 304, "original": "Write a function to match two words from a list of words starting with letter 'p'.", "mutation": "Create a function that compares two words from a list of words that all begin with the letter 'p'."}
{"task_id": 305, "original": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .", "mutation": "Create a function that calculates the maximum sum of an increasing subsequence from the beginning up to the ith index, including a specified kth element that comes after i (where k > i)."}
{"task_id": 306, "original": "Write a function to get a colon of a tuple.", "mutation": "Create a function that retrieves the colon of a tuple."}
{"task_id": 307, "original": "Write a function to find the specified number of largest products from two given lists.", "mutation": "Create a function that identifies the specified number of highest products from two provided lists."}
{"task_id": 308, "original": "Write a python function to find the maximum of two numbers.", "mutation": "Create a Python function that determines the larger of two numbers."}
{"task_id": 309, "original": "Write a function to convert a given string to a tuple.", "mutation": "Create a function that transforms a provided string into a tuple."}
{"task_id": 310, "original": "Write a python function to set the left most unset bit.", "mutation": "Create a Python function that will identify and set the leftmost bit that is not currently set."}
{"task_id": 311, "original": "Write a function to find the volume of a cone.", "mutation": "Create a function that calculates the volume of a cone."}
{"task_id": 312, "original": "Write a python function to print positive numbers in a list.", "mutation": "Create a Python function that displays the positive numbers within a list."}
{"task_id": 313, "original": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.", "mutation": "Create a function that calculates the maximum sum possible by selecting numbers from a 2 x n rectangular grid, ensuring that no two chosen numbers are next to each other."}
{"task_id": 314, "original": "Write a python function to find the first maximum length of even word.", "mutation": "Create a Python function that identifies the longest even word in a given list."}
{"task_id": 315, "original": "Write a function to find the index of the last occurrence of a given number in a sorted array.", "mutation": "Create a function that determines the index of the final instance of a specified number within an array that has been sorted."}
{"task_id": 316, "original": "Write a function to reflect the modified run-length encoding from a list.", "mutation": "Create a function that generates the updated run-length encoding based on a given list."}
{"task_id": 317, "original": "Write a python function to find the maximum volume of a cuboid with given sum of sides.", "mutation": "Create a Python function that calculates the maximum volume of a cuboid when given the sum of its sides."}
{"task_id": 318, "original": "Write a function to find all five characters long word in the given string by using regex.", "mutation": "Create a function that uses regex to identify all words in the provided string that are five characters in length."}
{"task_id": 319, "original": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.", "mutation": "Create a function that finds the difference between the sum of the squares of the first n natural numbers and the square of the sum of the first n natural numbers."}
{"task_id": 320, "original": "Write a function to find the demlo number for the given number.", "mutation": "Create a function that calculates the demlo number corresponding to a given input."}
{"task_id": 321, "original": "Write a function to find all index positions of the minimum values in a given list.", "mutation": "Create a function that identifies the index positions of all minimum values in a provided list."}
{"task_id": 322, "original": "Write a function to re-arrange the given array in alternating positive and negative items.", "mutation": "Create a function that organizes the provided array so that positive and negative items alternate."}
{"task_id": 323, "original": "Write a function to extract the sum of alternate chains of tuples.", "mutation": "Create a function that calculates the sum of every other chain of tuples."}
{"task_id": 324, "original": "Write a python function to find the minimum number of squares whose sum is equal to a given number.", "mutation": "Create a Python function that determines the smallest amount of squares needed to add up to a specified number."}
{"task_id": 325, "original": "Write a function to get the word with most number of occurrences in the given strings list.", "mutation": "Create a function that retrieves the word that appears most frequently in a list of strings."}
{"task_id": 326, "original": "Write a function to print check if the triangle is isosceles or not.", "mutation": "Create a function that checks if the triangle is isosceles or not and prints the result."}
{"task_id": 327, "original": "Write a function to rotate a given list by specified number of items to the left direction.", "mutation": "Create a function that rotates a given list to the left by a specified number of items."}
{"task_id": 328, "original": "Write a python function to count negative numbers in a list.", "mutation": "Create a Python function that calculates the number of negative numbers in a given list."}
{"task_id": 329, "original": "Write a function to find all three, four, five characters long words in the given string by using regex.", "mutation": "Create a function that uses regex to identify words in the given string that are three, four, or five characters long."}
{"task_id": 330, "original": "Write a python function to count unset bits of a given number.", "mutation": "Create a Python function that calculates the number of unset bits in a given number."}
{"task_id": 331, "original": "Write a function to count character frequency of a given string.", "mutation": "Create a function that calculates the frequency of each character in a given string."}
{"task_id": 332, "original": "Write a python function to sort a list according to the second element in sublist.", "mutation": "Create a Python function that sorts a list based on the second element in each sublist."}
{"task_id": 333, "original": "Write a python function to check whether the triangle is valid or not if sides are given.", "mutation": "Create a Python function that determines the validity of a triangle based on the given side lengths."}
{"task_id": 334, "original": "Write a function to find the sum of arithmetic progression.", "mutation": "Create a function that calculates the total of an arithmetic sequence."}
{"task_id": 335, "original": "Write a function to check whether the given month name contains 28 days or not.", "mutation": "Create a function that determines if the specified month has 28 days."}
{"task_id": 336, "original": "Write a function that matches a word at the end of a string, with optional punctuation.", "mutation": "Create a function that identifies a word at the conclusion of a string, which may include punctuation."}
{"task_id": 337, "original": "Write a python function to count the number of substrings with same first and last characters.", "mutation": "Create a Python function that calculates the quantity of substrings that have identical first and last characters."}
{"task_id": 338, "original": "Write a python function to find the maximum occuring divisor in an interval.", "mutation": "Create a Python function that identifies the highest occurring divisor within a specified range."}
{"task_id": 339, "original": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.", "mutation": "Create a Python function that calculates the sum of the three smallest positive numbers in a provided list."}
{"task_id": 340, "original": "Write a function to convert the given set into ordered tuples.", "mutation": "Create a function that transforms the provided set into ordered tuples."}
{"task_id": 341, "original": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.", "mutation": "Create a function that determines the smallest range containing at least one element from each of the provided arrays."}
{"task_id": 342, "original": "Write a function to calculate the number of digits and letters in a string.", "mutation": "Create a function that determines the count of digits and letters within a given string."}
{"task_id": 343, "original": "Write a python function to find number of elements with odd factors in a given range.", "mutation": "Create a Python function that calculates the quantity of elements within a specified range that have odd factors."}
{"task_id": 344, "original": "Write a function to find the difference between two consecutive numbers in a given list.", "mutation": "Create a function that calculates the variance between two adjacent numbers in a provided list."}
{"task_id": 345, "original": "Write a function to find entringer number e(n, k).", "mutation": "Create a function that calculates the entringer number e(n, k)."}
{"task_id": 346, "original": "Write a python function to count the number of squares in a rectangle.", "mutation": "Create a Python function that calculates the quantity of squares within a rectangle."}
{"task_id": 347, "original": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.", "mutation": "Create a function that calculates the number of sequences with a specified length that have non-negative prefix sums and can be generated using given values."}
{"task_id": 348, "original": "Write a python function to check whether the given string is a binary string or not.", "mutation": "Create a Python function that verifies if the provided string is a binary string."}
{"task_id": 349, "original": "Write a python function to minimize the length of the string by removing occurrence of only one character.", "mutation": "Create a Python function that reduces the length of a string by eliminating just one character."}
{"task_id": 350, "original": "Write a python function to find the first element occurring k times in a given array.", "mutation": "Create a Python function that identifies the first element that appears k times in a provided array."}
{"task_id": 351, "original": "Write a python function to check whether all the characters in a given string are unique.", "mutation": "Create a Python function that verifies if all the characters in a provided string are distinct."}
{"task_id": 352, "original": "Write a function to remove a specified column from a given nested list.", "mutation": "Create a function that deletes a specified column from a nested list."}
{"task_id": 353, "original": "Write a function to find t-nth term of arithemetic progression.", "mutation": "Create a function that calculates the t-nth term of an arithmetic progression."}
{"task_id": 354, "original": "Write a python function to count the number of rectangles in a circle of radius r.", "mutation": "Create a Python function that calculates the quantity of rectangles within a circle with a radius of r."}
{"task_id": 355, "original": "Write a function to find the third angle of a triangle using two angles.", "mutation": "Create a function that calculates the third angle of a triangle based on the measurements of two angles."}
{"task_id": 356, "original": "Write a function to find the maximum element of all the given tuple records.", "mutation": "Create a function that identifies the highest element within a set of tuple records."}
{"task_id": 357, "original": "Write a function to find modulo division of two lists using map and lambda function.", "mutation": "Create a function that uses map and lambda to calculate the modulo division of two lists."}
{"task_id": 358, "original": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.", "mutation": "Create a Python function that determines if one root of a quadratic equation is double the other."}
{"task_id": 359, "original": "Write a function to find the n\u2019th carol number.", "mutation": "Create a function that calculates the nth Carol number."}
{"task_id": 360, "original": "Write a function to remove empty lists from a given list of lists.", "mutation": "Create a function that eliminates any empty lists within a list of lists."}
{"task_id": 361, "original": "Write a python function to find the item with maximum occurrences in a given list.", "mutation": "Create a Python function that identifies the item in a given list that appears most frequently."}
{"task_id": 362, "original": "Write a function to add the k elements to each element in the tuple.", "mutation": "Create a function that adds k to each element in the tuple."}
{"task_id": 363, "original": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.", "mutation": "Create a function that determines the number of flips needed to transform the provided binary string into a sequence of alternating characters."}
{"task_id": 364, "original": "Write a python function to count the number of digits of a given number.", "mutation": "Create a Python function that calculates the number of digits in a specified number."}
{"task_id": 365, "original": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.", "mutation": "Create a Python function that identifies the highest product of adjacent elements within a provided list of integers."}
{"task_id": 366, "original": "Write a function to check if a binary tree is balanced or not.", "mutation": "Create a function that determines whether a binary tree is balanced or not."}
{"task_id": 367, "original": "Write a function to repeat the given tuple n times.", "mutation": "Create a function that duplicates the provided tuple n times."}
{"task_id": 368, "original": "Write a function to find the lateral surface area of cuboid", "mutation": "Create a function that calculates the lateral surface area of a cuboid."}
{"task_id": 369, "original": "Write a function to sort a tuple by its float element.", "mutation": "Create a function that arranges a tuple based on its floating point element."}
{"task_id": 370, "original": "Write a function to find the smallest missing element in a sorted array.", "mutation": "Create a function that identifies the smallest missing element in an array that is already sorted."}
{"task_id": 371, "original": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.", "mutation": "Create a function that utilizes the heap queue algorithm to arrange a provided list of elements in ascending order."}
{"task_id": 372, "original": "Write a function to find the volume of a cuboid.", "mutation": "Create a function that calculates the volume of a rectangular prism."}
{"task_id": 373, "original": "Write a function to print all permutations of a given string including duplicates.", "mutation": "Create a function that outputs all possible permutations of a given string, even if there are duplicates."}
{"task_id": 374, "original": "Write a function to round the given number to the nearest multiple of a specific number.", "mutation": "Create a function that will round the provided number to the closest multiple of a specified number."}
{"task_id": 375, "original": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.", "mutation": "Create a function that eliminates duplicate tuple elements and replaces them with a specified value."}
{"task_id": 376, "original": "Write a python function to remove all occurrences of a character in a given string.", "mutation": "Create a Python function that eliminates every instance of a specific character from a provided string."}
{"task_id": 377, "original": "Write a python function to shift last element to first position in the given list.", "mutation": "Create a Python function that moves the last element of a given list to the first position."}
{"task_id": 378, "original": "Write a function to find the surface area of a cuboid.", "mutation": "Create a function that calculates the surface area of a cuboid."}
{"task_id": 379, "original": "Write a function to generate a two-dimensional array.", "mutation": "Create a function that produces a two-dimensional array."}
{"task_id": 380, "original": "Write a function to sort a list of lists by a given index of the inner list.", "mutation": "Create a function that organizes a list of lists based on a specified index within each inner list."}
{"task_id": 381, "original": "Write a function to find the number of rotations in a circularly sorted array.", "mutation": "Create a function that determines the amount of rotations in an array that is sorted in a circular manner."}
{"task_id": 382, "original": "Write a python function to toggle all odd bits of a given number.", "mutation": "Create a Python function that switches the state of all odd bits in a specified number."}
{"task_id": 383, "original": "Write a python function to find the frequency of the smallest value in a given array.", "mutation": "Create a Python function that calculates the occurrence of the smallest value in a provided array."}
{"task_id": 384, "original": "Write a function to find the n'th perrin number using recursion.", "mutation": "Create a recursive function that calculates the nth Perrin number."}
{"task_id": 385, "original": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.", "mutation": "Create a function that determines the minimum number of swaps needed to balance the brackets in the provided string."}
{"task_id": 386, "original": "Write a python function to check whether the hexadecimal number is even or odd.", "mutation": "Create a Python function that determines if a hexadecimal number is even or odd."}
{"task_id": 387, "original": "Write a python function to find the highest power of 2 that is less than or equal to n.", "mutation": "Create a Python function that determines the largest power of 2 that is less than or equal to n."}
{"task_id": 388, "original": "Write a function to find the n'th lucas number.", "mutation": "Create a function that calculates the nth Lucas number."}
{"task_id": 389, "original": "Write a function to insert a given string at the beginning of all items in a list.", "mutation": "Create a function that adds a specified string to the start of each item in a list."}
{"task_id": 390, "original": "Write a function to convert more than one list to nested dictionary.", "mutation": "Create a function that converts multiple lists into a nested dictionary."}
{"task_id": 391, "original": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).", "mutation": "Create a function that calculates the highest sum achievable by utilizing the equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)."}
{"task_id": 392, "original": "Write a function to find the list with maximum length using lambda function.", "mutation": "Create a lambda function to determine the list with the longest length."}
{"task_id": 393, "original": "Write a function to check if given tuple is distinct or not.", "mutation": "Create a function that determines whether a given tuple is unique or not."}
{"task_id": 394, "original": "Write a python function to find the first non-repeated character in a given string.", "mutation": "Create a Python function that identifies the initial character in a provided string that does not repeat."}
{"task_id": 395, "original": "Write a function to check whether the given string starts and ends with the same character or not using regex.", "mutation": "Create a function that uses regex to determine if a string begins and ends with the same character."}
{"task_id": 396, "original": "Write a function to find the median of three specific numbers.", "mutation": "Create a function that calculates the median of three given numbers."}
{"task_id": 397, "original": "Write a function to compute the sum of digits of each number of a given list.", "mutation": "Create a function that calculates the total of all the digits in each number within a specified list."}
{"task_id": 398, "original": "Write a function to perform the mathematical bitwise xor operation across the given tuples.", "mutation": "Create a function that calculates the bitwise xor operation on the provided tuples."}
{"task_id": 399, "original": "Write a function to extract the frequency of unique tuples in the given list order irrespective.", "mutation": "Create a function that retrieves the occurrence of distinct tuples in the provided list without considering the order."}
{"task_id": 400, "original": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.", "mutation": "Create a function that adds the elements of two nested tuples together based on their indexes."}
{"task_id": 401, "original": "Write a function to compute the value of ncr%p.", "mutation": "Create a function that calculates the value of ncr%p."}
{"task_id": 402, "original": "Write a function to check if a url is valid or not using regex.", "mutation": "Create a function that uses regex to determine if a given URL is valid."}
{"task_id": 403, "original": "Write a python function to find the minimum of two numbers.", "mutation": "Create a Python function that determines the smaller of two numbers."}
{"task_id": 404, "original": "Write a function to check whether an element exists within a tuple.", "mutation": "Create a function that verifies if an element is present in a tuple."}
{"task_id": 405, "original": "Write a python function to find the parity of a given number.", "mutation": "Create a Python function that determines the parity of a specified number."}
{"task_id": 406, "original": "Write a function to create the next bigger number by rearranging the digits of a given number.", "mutation": "Create a function that rearranges the digits of a given number to find the next largest number."}
{"task_id": 407, "original": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.", "mutation": "Create a function that identifies k pairs, each containing one element from the first array and one element from the second array."}
{"task_id": 408, "original": "Write a function to find the minimum product from the pairs of tuples within a given list.", "mutation": "Create a function that determines the smallest product from pairs of tuples in a specified list."}
{"task_id": 409, "original": "Write a function to find the minimum value in a given heterogeneous list.", "mutation": "Create a function that can determine the smallest value within a list containing different data types."}
{"task_id": 410, "original": "Write a function to convert the given snake case string to camel case string by using regex.", "mutation": "Create a function that uses regex to transform the provided snake case string into camel case."}
{"task_id": 411, "original": "Write a python function to remove odd numbers from a given list.", "mutation": "Create a Python function that eliminates odd numbers from a provided list."}
{"task_id": 412, "original": "Write a function to extract the nth element from a given list of tuples.", "mutation": "Create a function that retrieves the nth element from a provided list of tuples."}
{"task_id": 413, "original": "Write a python function to check whether the value exists in a sequence or not.", "mutation": "Create a Python function that verifies if a value is present in a sequence."}
{"task_id": 414, "original": "Write a python function to find a pair with highest product from a given array of integers.", "mutation": "Create a Python function that identifies the pair of integers with the highest product from a given array."}
{"task_id": 415, "original": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.", "mutation": "Create a function that recursively divides a number into three parts and calculates the maximum sum that can be obtained by summing them together."}
{"task_id": 416, "original": "Write a function to find common first element in given list of tuple.", "mutation": "Create a function that identifies the first element that is common among all tuples in a given list."}
{"task_id": 417, "original": "Write a python function to find the sublist having maximum length.", "mutation": "Create a Python function that identifies the sublist with the longest length."}
{"task_id": 418, "original": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.", "mutation": "Create a function that rounds each number in a specified list, then calculates the total sum of the rounded numbers multiplied by the length of the list."}
{"task_id": 419, "original": "Write a python function to find the cube sum of first n even natural numbers.", "mutation": "Create a Python function that calculates the sum of the cubes of the first n even natural numbers."}
{"task_id": 420, "original": "Write a function to concatenate each element of tuple by the delimiter.", "mutation": "Create a function that combines each element of a tuple using a specified delimiter."}
{"task_id": 421, "original": "Write a python function to find the average of cubes of first n natural numbers.", "mutation": "Create a Python function that calculates the average of the cubes of the first n natural numbers."}
{"task_id": 422, "original": "Write a function to solve gold mine problem.", "mutation": "Create a function that can solve the gold mine problem."}
{"task_id": 423, "original": "Write a function to extract only the rear index element of each string in the given tuple.", "mutation": "Create a function that retrieves the last element of each string in the provided tuple."}
{"task_id": 424, "original": "Write a function to count the number of sublists containing a particular element.", "mutation": "Create a function that calculates the quantity of sublists that include a specific element."}
{"task_id": 425, "original": "Write a function to filter odd numbers using lambda function.", "mutation": "Create a lambda function to filter out odd numbers."}
{"task_id": 426, "original": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.", "mutation": "Create a function that uses regex to change a date from yyyy-mm-dd format to dd-mm-yyyy format."}
{"task_id": 427, "original": "Write a function to sort the given array by using shell sort.", "mutation": "Create a function that utilizes shell sort to arrange the provided array."}
{"task_id": 428, "original": "Write a function to extract the elementwise and tuples from the given two tuples.", "mutation": "Create a function that retrieves the individual elements and pairs from two given tuples."}
{"task_id": 429, "original": "Write a function to find the directrix of a parabola.", "mutation": "Create a function that determines the directrix of a parabola."}
{"task_id": 430, "original": "Write a function that takes two lists and returns true if they have at least one common element.", "mutation": "Create a function that accepts two lists and outputs true if they share at least one element."}
{"task_id": 431, "original": "Write a function to find the median of a trapezium.", "mutation": "Create a function that calculates the median of a trapezium."}
{"task_id": 432, "original": "Write a function to check whether the entered number is greater than the elements of the given array.", "mutation": "Create a function that determines if the input number is larger than any of the elements in the provided array."}
{"task_id": 433, "original": "Write a function that matches a string that has an a followed by one or more b's.", "mutation": "Create a function that identifies a string containing an 'a' followed by one or more 'b's."}
{"task_id": 434, "original": "Write a python function to find the last digit of a given number.", "mutation": "Create a Python function that determines the final digit of a specified number."}
{"task_id": 435, "original": "Write a python function to print negative numbers in a list.", "mutation": "Create a Python function that displays negative numbers from a list."}
{"task_id": 436, "original": "Write a function to remove odd characters in a string.", "mutation": "Create a function that eliminates characters with odd indexes in a string."}
{"task_id": 437, "original": "Write a function to count bidirectional tuple pairs.", "mutation": "Create a function that counts pairs of tuples that are bidirectional."}
{"task_id": 438, "original": "Write a function to convert a list of multiple integers into a single integer.", "mutation": "Create a function that transforms a list of several integers into a singular integer."}
{"task_id": 439, "original": "Write a function to find all adverbs and their positions in a given sentence.", "mutation": "Create a function that identifies all adverbs and their locations within a provided sentence."}
{"task_id": 440, "original": "Write a function to find the surface area of a cube.", "mutation": "Create a function that calculates the surface area of a cube."}
{"task_id": 441, "original": "Write a function to find the ration of positive numbers in an array of integers.", "mutation": "Create a function that calculates the proportion of positive numbers in an array of integers."}
{"task_id": 442, "original": "Write a python function to find the largest negative number from the given list.", "mutation": "Create a Python function that identifies the largest negative number in a provided list."}
{"task_id": 443, "original": "Write a function to trim each tuple by k in the given tuple list.", "mutation": "Create a function that trims each tuple by k in the provided list of tuples."}
{"task_id": 444, "original": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.", "mutation": "Create a function that multiplies the elements of two tuples together based on their corresponding indices."}
{"task_id": 445, "original": "Write a python function to count the occurence of all elements of list in a tuple.", "mutation": "Create a Python function that counts the frequency of each element in a list within a tuple."}
{"task_id": 446, "original": "Write a function to find cubes of individual elements in a list using lambda function.", "mutation": "Create a lambda function to calculate the cube of each element in a list."}
{"task_id": 447, "original": "Write a function to calculate the sum of perrin numbers.", "mutation": "Create a function that computes the total of Perrin numbers."}
{"task_id": 448, "original": "Write a python function to check whether the triangle is valid or not if 3 points are given.", "mutation": "Create a Python function that determines the validity of a triangle based on the coordinates of three points."}
{"task_id": 449, "original": "Write a function to extract specified size of strings from a give list of string values.", "mutation": "Create a function that retrieves strings of a specific size from a provided list of strings."}
{"task_id": 450, "original": "Write a function to remove all whitespaces from the given string using regex.", "mutation": "Create a function that utilizes regex to eliminate all spaces from the provided string."}
{"task_id": 451, "original": "Write a function that gives loss amount if the given amount has loss else return none.", "mutation": "Create a function that returns the loss amount if the specified amount incurs a loss, otherwise return none."}
{"task_id": 452, "original": "Write a python function to find the sum of even factors of a number.", "mutation": "Create a Python function that calculates the total of even factors for a given number."}
{"task_id": 453, "original": "Write a function that matches a word containing 'z'.", "mutation": "Create a function that identifies a word with the letter 'z'."}
{"task_id": 454, "original": "Write a function to check whether the given month number contains 31 days or not.", "mutation": "Create a function that determines if the specified month has 31 days."}
{"task_id": 455, "original": "Write a function to reverse strings in a given list of string values.", "mutation": "Create a function that reverses strings within a list of string values."}
{"task_id": 456, "original": "Write a python function to find the sublist having minimum length.", "mutation": "Create a Python function that identifies the sublist with the shortest length."}
{"task_id": 457, "original": "Write a function to find the area of a rectangle.", "mutation": "Create a function that calculates the area of a rectangle."}
{"task_id": 458, "original": "Write a function to remove uppercase substrings from a given string by using regex.", "mutation": "Create a function that utilizes regex to eliminate uppercase portions of a provided string."}
{"task_id": 459, "original": "Write a python function to get the first element of each sublist.", "mutation": "Create a Python function that retrieves the initial element from every sub-list."}
{"task_id": 460, "original": "Write a python function to count the upper case characters in a given string.", "mutation": "Create a Python function that calculates the number of uppercase letters in a provided string."}
{"task_id": 461, "original": "Write a function to find all possible combinations of the elements of a given list.", "mutation": "Create a function that generates all potential combinations of the items in a specified list."}
{"task_id": 462, "original": "Write a function to find the maximum product subarray of the given array.", "mutation": "Create a function that can identify the largest product subarray within a provided array."}
{"task_id": 463, "original": "Write a function to check if all values are same in a dictionary.", "mutation": "Create a function that verifies if all values in a dictionary are identical."}
{"task_id": 464, "original": "Write a function to drop empty items from a given dictionary.", "mutation": "Create a function that removes any empty items from a provided dictionary."}
{"task_id": 465, "original": "Write a function to find the peak element in the given array.", "mutation": "Create a function that identifies the peak element within the provided array."}
{"task_id": 466, "original": "Write a python function to convert decimal number to octal number.", "mutation": "Create a Python function that converts a decimal number to an octal number."}
{"task_id": 467, "original": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.", "mutation": "Create a function that calculates the highest possible product by multiplying numbers from a subset of the array that is in ascending order."}
{"task_id": 468, "original": "Write a function to find the maximum profit earned from a maximum of k stock transactions", "mutation": "Create a function that calculates the highest profit possible from up to k stock transactions."}
{"task_id": 469, "original": "Write a function to find the pairwise addition of the elements of the given tuples.", "mutation": "Create a function that calculates the sum of each pair of elements in the provided tuples."}
{"task_id": 470, "original": "Write a python function to find remainder of array multiplication divided by n.", "mutation": "Create a Python function that calculates the remainder of the product of an array divided by n."}
{"task_id": 471, "original": "Write a python function to check whether the given list contains consecutive numbers or not.", "mutation": "Create a Python function that determines if a list contains consecutive numbers."}
{"task_id": 472, "original": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.", "mutation": "Create a function that can identify the common elements in a list of tuples, regardless of their order."}
{"task_id": 473, "original": "Write a function to replace characters in a string.", "mutation": "Create a function that can substitute characters within a given string."}
{"task_id": 474, "original": "Write a function to sort counter by value.", "mutation": "Create a function that organizes a counter based on its values."}
{"task_id": 475, "original": "Write a python function to find the sum of the largest and smallest value in a given array.", "mutation": "Create a Python function that calculates the sum of the highest and lowest values in a provided array."}
{"task_id": 476, "original": "Write a python function to convert the given string to lower case.", "mutation": "Create a Python function that changes the provided string to lowercase."}
{"task_id": 477, "original": "Write a function to remove lowercase substrings from a given string.", "mutation": "Create a function that eliminates lowercase sections from a provided string."}
{"task_id": 478, "original": "Write a python function to find the first digit of a given number.", "mutation": "Create a Python function that identifies the initial digit of a provided number."}
{"task_id": 479, "original": "Write a python function to find the maximum occurring character in a given string.", "mutation": "Create a Python function that identifies the character that occurs most frequently in a given string."}
{"task_id": 480, "original": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.", "mutation": "Create a function that checks if there exists a subset within the provided set that adds up to the specified sum."}
{"task_id": 481, "original": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.", "mutation": "Create a function that uses regex to identify sequences in a given string where one uppercase letter is followed by lowercase letters."}
{"task_id": 482, "original": "Write a python function to find the first natural number whose factorial is divisible by x.", "mutation": "Create a Python function that identifies the smallest natural number for which the factorial is a multiple of x."}
{"task_id": 483, "original": "Write a function to remove the matching tuples from the given two tuples.", "mutation": "Create a function that eliminates the identical tuples from the provided two tuples."}
{"task_id": 484, "original": "Write a function to find the largest palindromic number in the given array.", "mutation": "Create a function that identifies the biggest palindrome in the provided array."}
{"task_id": 485, "original": "Write a function to compute binomial probability for the given number.", "mutation": "Create a function that calculates the binomial probability for a specified number."}
{"task_id": 486, "original": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.", "mutation": "Create a function that arranges a list of tuples in ascending order based on the last element in each tuple."}
{"task_id": 487, "original": "Write a function to find the area of a pentagon.", "mutation": "Create a function that calculates the area of a pentagon."}
{"task_id": 488, "original": "Write a python function to find the frequency of the largest value in a given array.", "mutation": "Create a Python function that calculates the occurrence of the highest value in a provided array."}
{"task_id": 489, "original": "Write a function to extract all the pairs which are symmetric in the given tuple list.", "mutation": "Create a function that retrieves all symmetric pairs from the provided list of tuples."}
{"task_id": 490, "original": "Write a function to find the sum of geometric progression series.", "mutation": "Create a function that calculates the total of a geometric progression sequence."}
{"task_id": 491, "original": "Write a function to search an element in the given array by using binary search.", "mutation": "Create a function that utilizes binary search to find an element within a specified array."}
{"task_id": 492, "original": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.", "mutation": "Create a function that generates a grid of hexagon coordinates, returning a list of lists with each containing 6 tuples representing x and y point coordinates."}
{"task_id": 493, "original": "Write a function to convert the given binary tuple to integer.", "mutation": "Create a function that will change the provided binary tuple into an integer."}
{"task_id": 494, "original": "Write a function to remove lowercase substrings from a given string by using regex.", "mutation": "Create a function that utilizes regex to eliminate lowercase substrings from a provided string."}
{"task_id": 495, "original": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.", "mutation": "Create a function that utilizes the heap queue algorithm to identify the smallest integers within a provided list of numbers."}
{"task_id": 496, "original": "Write a function to find the surface area of a cone.", "mutation": "Create a function that calculates the surface area of a cone."}
{"task_id": 497, "original": "Write a python function to find gcd of two positive integers.", "mutation": "Create a Python function that calculates the greatest common divisor of two positive integers."}
{"task_id": 498, "original": "Write a function to find the diameter of a circle.", "mutation": "Create a function that calculates the diameter of a circle."}
{"task_id": 499, "original": "Write a function to concatenate all elements of the given list into a string.", "mutation": "Create a function that combines all elements from the provided list into a single string."}
{"task_id": 500, "original": "Write a python function to find common divisor between two numbers in a given pair.", "mutation": "Create a Python function that identifies the common divisors of two numbers within a specified pair."}
{"task_id": 501, "original": "Write a python function to find remainder of two numbers.", "mutation": "Create a Python function that calculates the remainder of two numbers."}
{"task_id": 502, "original": "Write a function to add consecutive numbers of a given list.", "mutation": "Create a function that adds up consecutive numbers in a provided list."}
{"task_id": 503, "original": "Write a python function to find the cube sum of first n natural numbers.", "mutation": "Create a Python function that calculates the sum of the cubes of the first n natural numbers."}
{"task_id": 504, "original": "Write a function to move all zeroes to the end of the given array.", "mutation": "Create a function that shifts all zeros to the end of the provided array."}
{"task_id": 505, "original": "Write a function to calculate the permutation coefficient of given p(n, k).", "mutation": "Create a function that computes the permutation coefficient for a given p(n, k) value."}
{"task_id": 506, "original": "Write a function to remove specific words from a given list.", "mutation": "Create a function that eliminates certain words from a provided list."}
{"task_id": 507, "original": "Write a function to check if the common elements between two given lists are in the same order or not.", "mutation": "Create a function that determines whether the common elements in two provided lists are in the same sequence."}
{"task_id": 508, "original": "Write a python function to find the average of odd numbers till a given odd number.", "mutation": "Create a Python function that calculates the average of all odd numbers up to a specified odd number."}
{"task_id": 509, "original": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.", "mutation": "Create a function that calculates the quantity of subsequences with a product less than k for a given array of non-negative numbers."}
{"task_id": 510, "original": "Write a python function to find minimum sum of factors of a given number.", "mutation": "Create a Python function that calculates the smallest sum of factors for a specified number."}
{"task_id": 511, "original": "Write a function to count the element frequency in the mixed nested tuple.", "mutation": "Create a function that calculates the frequency of elements in a nested tuple containing a mix of data types."}
{"task_id": 512, "original": "Write a function to convert tuple into list by adding the given string after every element.", "mutation": "Create a function that transforms a tuple into a list by appending the specified string after each element."}
{"task_id": 513, "original": "Write a function to find the summation of tuple elements in the given tuple list.", "mutation": "Create a function that calculates the total sum of elements within each tuple in a provided list of tuples."}
{"task_id": 514, "original": "Write a function to check if there is a subset with sum divisible by m.", "mutation": "Create a function that verifies the existence of a subset whose sum is divisible by m."}
{"task_id": 515, "original": "Write a function to sort a list of elements using radix sort.", "mutation": "Create a function that implements radix sort to sort a list of elements."}
{"task_id": 516, "original": "Write a python function to find the largest postive number from the given list.", "mutation": "Create a Python function that identifies the highest positive number in a provided list."}
{"task_id": 517, "original": "Write a function to find the square root of a perfect number.", "mutation": "Create a function that calculates the square root of a perfect number."}
{"task_id": 518, "original": "Write a function to calculate volume of a tetrahedron.", "mutation": "Create a function that computes the volume of a tetrahedron."}
{"task_id": 519, "original": "Write a function to find the lcm of the given array elements.", "mutation": "Create a function that calculates the least common multiple of the elements in the provided array."}
{"task_id": 520, "original": "Write a function to print check if the triangle is scalene or not.", "mutation": "Create a function that checks if a triangle is scalene or not and prints the result."}
{"task_id": 521, "original": "Write a function to find the longest bitonic subsequence for the given array.", "mutation": "Create a function that can determine the longest bitonic subsequence in a given array."}
{"task_id": 522, "original": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.", "mutation": "Create a lambda function that checks if a given string contains at least one uppercase letter, one lowercase letter, one number, and has a specified length."}
{"task_id": 523, "original": "Write a function to find the sum of maximum increasing subsequence of the given array.", "mutation": "Create a function that calculates the total of the largest increasing subsequence within the provided array."}
{"task_id": 524, "original": "Write a python function to check whether two given lines are parallel or not.", "mutation": "Create a Python function that determines if two specified lines are parallel."}
{"task_id": 525, "original": "Write a python function to capitalize first and last letters of each word of a given string.", "mutation": "Create a Python function that capitalizes the first and last letters of every word in a provided string."}
{"task_id": 526, "original": "Write a function to find all pairs in an integer array whose sum is equal to a given number.", "mutation": "Create a function that identifies all pairs within an array of integers that add up to a specified number."}
{"task_id": 527, "original": "Write a function to find the list of lists with minimum length.", "mutation": "Create a function that identifies the list of lists with the shortest length."}
{"task_id": 528, "original": "Write a function to find the nth jacobsthal-lucas number.", "mutation": "Create a function that calculates the nth Jacobsthal-Lucas number."}
{"task_id": 529, "original": "Write a function to find the ration of negative numbers in an array of integers.", "mutation": "Create a function that calculates the proportion of negative numbers in an array of integers."}
{"task_id": 530, "original": "Write a function to find minimum number of coins that make a given value.", "mutation": "Create a function that determines the smallest number of coins needed to reach a specified value."}
{"task_id": 531, "original": "Write a function to check if the two given strings are permutations of each other.", "mutation": "Create a function that determines if two provided strings are permutations of one another."}
{"task_id": 532, "original": "Write a function to remove particular data type elements from the given tuple.", "mutation": "Create a function that eliminates elements of a specific data type from the provided tuple."}
{"task_id": 533, "original": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.", "mutation": "Create a function that searches for a specific string within another string and returns the position where the string is found."}
{"task_id": 534, "original": "Write a function to find the top or bottom surface area of a cylinder.", "mutation": "Create a function that calculates the surface area of either the top or bottom of a cylinder."}
{"task_id": 535, "original": "Write a function to select the nth items of a list.", "mutation": "Create a function that chooses the nth element from a list."}
{"task_id": 536, "original": "Write a python function to find the first repeated word in a given string.", "mutation": "Create a Python function that identifies the initial occurrence of a repeated word within a provided string."}
{"task_id": 537, "original": "Write a python function to convert a given string list to a tuple.", "mutation": "Create a Python function that transforms a provided list of strings into a tuple."}
{"task_id": 538, "original": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.", "mutation": "Create a function that uses the map function to generate a list of numbers raised to the power of their corresponding index."}
{"task_id": 539, "original": "Write a python function to find the difference between highest and least frequencies in a given array.", "mutation": "Create a Python function that calculates the variance between the maximum and minimum frequencies in a provided array."}
{"task_id": 540, "original": "Write a function to find if the given number is abundant or not.", "mutation": "Create a function that determines whether the provided number is abundant or not."}
{"task_id": 541, "original": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.", "mutation": "Create a function that uses regex to replace any spaces, commas, or dots in the provided string with a colon."}
{"task_id": 542, "original": "Write a function to add two numbers and print number of digits of sum.", "mutation": "Create a function that adds two numbers together and then prints the number of digits in the sum."}
{"task_id": 543, "original": "Write a function to flatten the tuple list to a string.", "mutation": "Create a function that converts a list of tuples into a single string."}
{"task_id": 544, "original": "Write a python function to toggle only first and last bits of a given number.", "mutation": "Create a Python function that switches the first and last bits of a specified number."}
{"task_id": 545, "original": "Write a function to find the last occurrence of a character in a string.", "mutation": "Create a function that locates the final instance of a specific character within a given string."}
{"task_id": 546, "original": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.", "mutation": "Create a Python function that calculates the total Hamming distance between all pairs of consecutive numbers from 0 to n."}
{"task_id": 547, "original": "Write a function to find the length of the longest increasing subsequence of the given sequence.", "mutation": "Create a function that determines the longest increasing subsequence length within a provided sequence."}
{"task_id": 548, "original": "Write a python function to find the sum of fifth power of first n odd natural numbers.", "mutation": "Create a Python function that calculates the sum of the fifth power of the first n odd natural numbers."}
{"task_id": 549, "original": "Write a python function to find the maximum element in a sorted and rotated array.", "mutation": "Create a Python function that can determine the highest value in an array that has been both sorted and rotated."}
{"task_id": 550, "original": "Write a function to extract a specified column from a given nested list.", "mutation": "Create a function that retrieves a specific column from a nested list."}
{"task_id": 551, "original": "Write a python function to check whether a given sequence is linear or not.", "mutation": "Create a python function that determines if a provided sequence is linear."}
{"task_id": 552, "original": "Write a function to convert the given tuple to a floating-point number.", "mutation": "Create a function that changes the provided tuple into a decimal number."}
{"task_id": 553, "original": "Write a python function to find odd numbers from a mixed list.", "mutation": "Create a Python function that identifies odd numbers within a list containing both odd and even numbers."}
{"task_id": 554, "original": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.", "mutation": "Create a Python function that calculates the difference between the sum of the cubes of the first n natural numbers and the sum of the first n natural numbers."}
{"task_id": 555, "original": "Write a python function to count the pairs with xor as an odd number.", "mutation": "Create a Python function that calculates the number of pairs with an odd XOR."}
{"task_id": 556, "original": "Write a function to toggle characters case in a string.", "mutation": "Create a function that switches the case of characters in a string."}
{"task_id": 557, "original": "Write a python function to find the digit distance between two integers.", "mutation": "Create a Python function that calculates the digit distance between two integers."}
{"task_id": 558, "original": "Write a function to find the largest sum of contiguous subarray in the given array.", "mutation": "Create a function that can determine the maximum sum of a continuous subarray within a provided array."}
{"task_id": 559, "original": "Write a function to find the union of elements of the given tuples.", "mutation": "Create a function that determines the combined elements of the provided tuples."}
{"task_id": 560, "original": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.", "mutation": "Create a function that pairs each element with its corresponding elements from other similar pairs in the provided tuple."}
{"task_id": 561, "original": "Write a python function to find the maximum length of sublist.", "mutation": "Create a Python function that determines the longest length of a sublist."}
{"task_id": 562, "original": "Write a function to extract values between quotation marks of a string.", "mutation": "Create a function that retrieves values enclosed in quotation marks from a string."}
{"task_id": 563, "original": "Write a python function to count unequal element pairs from the given array.", "mutation": "Create a Python function that counts the number of pairs of unequal elements in a given array."}
{"task_id": 564, "original": "Write a python function to split a string into characters.", "mutation": "Create a Python function that separates a string into individual characters."}
{"task_id": 565, "original": "Write a function to get the sum of a non-negative integer.", "mutation": "Create a function that calculates the total of a non-negative whole number."}
{"task_id": 566, "original": "Write a function to check whether a specified list is sorted or not.", "mutation": "Create a function that determines if a given list is in sorted order or not."}
{"task_id": 567, "original": "Write a function to create a list of empty dictionaries.", "mutation": "Create a function that generates a list containing empty dictionaries."}
{"task_id": 568, "original": "Write a function to sort each sublist of strings in a given list of lists.", "mutation": "Create a function that sorts the strings within each sublist of a given list of lists."}
{"task_id": 569, "original": "Write a function to remove words from a given list of strings containing a character or string.", "mutation": "Create a function that eliminates words from a list of strings if they contain a specific character or string."}
{"task_id": 570, "original": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.", "mutation": "Create a function that can determine the highest sum achievable by disjoint pairs in a given array of integers and a specified number k."}
{"task_id": 571, "original": "Write a python function to remove two duplicate numbers from a given number of lists.", "mutation": "Create a Python function that eliminates two duplicate numbers from a set of lists."}
{"task_id": 572, "original": "Write a python function to calculate the product of the unique numbers of a given list.", "mutation": "Create a Python function that finds the product of the distinct numbers in a provided list."}
{"task_id": 573, "original": "Write a function to find the surface area of a cylinder.", "mutation": "Create a function that calculates the surface area of a cylinder."}
{"task_id": 574, "original": "Write a python function to find nth number in a sequence which is not a multiple of a given number.", "mutation": "Create a Python function that identifies the nth number in a sequence that is not divisible by a specified number."}
{"task_id": 575, "original": "Write a python function to check whether an array is subarray of another or not.", "mutation": "Create a Python function that determines if an array is a subarray of another array."}
{"task_id": 576, "original": "Write a python function to find the last digit in factorial of a given number.", "mutation": "Create a Python function that determines the last digit of the factorial of a specified number."}
{"task_id": 577, "original": "Write a function to interleave lists of the same length.", "mutation": "Create a function that interleaves lists of equal length."}
{"task_id": 578, "original": "Write a function to find the dissimilar elements in the given two tuples.", "mutation": "Create a function that identifies the unique elements in two given tuples."}
{"task_id": 579, "original": "Write a function to extract the even elements in the nested mixed tuple.", "mutation": "Create a function that retrieves the even elements from a mixed tuple that contains nested tuples."}
{"task_id": 580, "original": "Write a python function to find the surface area of the square pyramid.", "mutation": "Create a Python function that calculates the surface area of a square pyramid."}
{"task_id": 581, "original": "Write a function to check if a dictionary is empty or not.", "mutation": "Create a function that determines whether a dictionary is empty or not."}
{"task_id": 582, "original": "Write a function for nth catalan number.", "mutation": "Create a function that calculates the nth Catalan number."}
{"task_id": 583, "original": "Write a function to find all adverbs and their positions in a given sentence by using regex.", "mutation": "Create a function that uses regex to identify all adverbs and their locations within a provided sentence."}
{"task_id": 584, "original": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.", "mutation": "Create a function that uses the heap queue algorithm to identify the n most costly items in a provided dataset."}
{"task_id": 585, "original": "Write a python function to split the array and add the first part to the end.", "mutation": "Create a Python function that divides the array and appends the initial portion to the end."}
{"task_id": 586, "original": "Write a function to convert a list to a tuple.", "mutation": "Create a function that transforms a list into a tuple."}
{"task_id": 587, "original": "Write a python function to find the difference between largest and smallest value in a given array.", "mutation": "Create a Python function that calculates the difference between the largest and smallest values in a provided array."}
{"task_id": 588, "original": "Write a function to find perfect squares between two given numbers.", "mutation": "Create a function that identifies all perfect squares within a specified range of numbers."}
{"task_id": 589, "original": "Write a function to convert polar coordinates to rectangular coordinates.", "mutation": "Create a function that transforms polar coordinates into rectangular coordinates."}
{"task_id": 590, "original": "Write a python function to interchange the first and last elements in a list.", "mutation": "Create a Python function that swaps the first and last elements of a list."}
{"task_id": 591, "original": "Write a python function to find sum of product of binomial co-efficients.", "mutation": "Create a Python function that calculates the sum of the products of binomial coefficients."}
{"task_id": 592, "original": "Write a function to remove leading zeroes from an ip address.", "mutation": "Create a function that eliminates any leading zeros from an IP address."}
{"task_id": 593, "original": "Write a function to find the difference of first even and odd number of a given list.", "mutation": "Create a function that calculates the difference between the first even and odd numbers in a provided list."}
{"task_id": 594, "original": "Write a python function to count minimum number of swaps required to convert one binary string to another.", "mutation": "Create a Python function that calculates the minimum number of swaps needed to transform one binary string into another."}
{"task_id": 595, "original": "Write a function to find the size of the given tuple.", "mutation": "Create a function that determines the length of the provided tuple."}
{"task_id": 596, "original": "Write a function to find kth element from the given two sorted arrays.", "mutation": "Create a function that determines the kth element in two sorted arrays."}
{"task_id": 597, "original": "Write a function to check whether the given number is armstrong or not.", "mutation": "Create a function that determines if a given number is an Armstrong number."}
{"task_id": 598, "original": "Write a function to find sum and average of first n natural numbers.", "mutation": "Create a function that calculates the sum and average of the first n natural numbers."}
{"task_id": 599, "original": "Write a python function to check whether the given number is even or not using bitwise operator.", "mutation": "Create a Python function that uses a bitwise operator to determine if a given number is even."}
{"task_id": 600, "original": "Write a function to find the longest chain which can be formed from the given set of pairs.", "mutation": "Create a function that identifies the longest chain that can be created using a provided set of pairs."}
{"task_id": 601, "original": "Write a python function to find the first repeated character in a given string.", "mutation": "Create a Python function that identifies the initial repeated character in a provided string."}
{"task_id": 602, "original": "Write a function to get a lucid number smaller than or equal to n.", "mutation": "Create a function that retrieves a lucid number that is less than or equal to n."}
{"task_id": 603, "original": "Write a function to reverse words in a given string.", "mutation": "Create a function that reverses the order of words in a provided string."}
{"task_id": 604, "original": "Write a function to check if the given integer is a prime number.", "mutation": "Create a function that determines whether the provided integer is a prime number."}
{"task_id": 605, "original": "Write a function to convert degrees to radians.", "mutation": "Create a function that converts degrees to radians."}
{"task_id": 606, "original": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.", "mutation": "Create a function that uses regex to search for a specific string within another string and determine the location of the pattern within the original string."}
{"task_id": 607, "original": "Write a python function to find nth bell number.", "mutation": "Create a Python function that calculates the nth Bell number."}
{"task_id": 608, "original": "Write a python function to find minimum possible value for the given periodic function.", "mutation": "Create a Python function that determines the smallest possible value for the provided periodic function."}
{"task_id": 609, "original": "Write a python function to remove the k'th element from a given list.", "mutation": "Create a Python function that deletes the element at index k from a specified list."}
{"task_id": 610, "original": "Write a function to find the maximum of nth column from the given tuple list.", "mutation": "Create a function that can determine the highest value in the nth column of a provided list of tuples."}
{"task_id": 611, "original": "Write a python function to merge the first and last elements separately in a list of lists.", "mutation": "Create a Python function that combines the first and last elements of each sublist in a list."}
{"task_id": 612, "original": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.", "mutation": "Create a function that identifies the highest value within a list of tuples, where the value is stored as an attribute within each tuple."}
{"task_id": 613, "original": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.", "mutation": "Create a function that calculates the total sum of all values in a given list of tuples."}
{"task_id": 614, "original": "Write a function to find average value of the numbers in a given tuple of tuples.", "mutation": "Create a function that calculates the average value of the numbers within a tuple containing multiple tuples."}
{"task_id": 615, "original": "Write a function to perfom the modulo of tuple elements in the given two tuples.", "mutation": "Create a function that calculates the modulo of elements in two tuples."}
{"task_id": 616, "original": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.", "mutation": "Create a function that determines the number of jumps needed to reach a point (d, 0) from the origin in a 2D plane, given a specific jump length."}
{"task_id": 617, "original": "Write a function to divide two lists using map and lambda function.", "mutation": "Create a function that uses map and lambda to divide two lists."}
{"task_id": 618, "original": "Write a function to move all the numbers in it to the given string.", "mutation": "Create a function that transfers all the numbers from the input to the specified string."}
{"task_id": 619, "original": "Write a function to find the largest subset where each pair is divisible.", "mutation": "Create a function that identifies the largest subset in which every pair of elements is divisible."}
{"task_id": 620, "original": "Write a function to increment the numeric values in the given strings by k.", "mutation": "Create a function that adds k to the numerical values in the provided strings."}
{"task_id": 621, "original": "Write a function to find the median of two sorted arrays of same size.", "mutation": "Create a function that calculates the median of two sorted arrays that are the same size."}
{"task_id": 622, "original": "Write a function to find the n-th power of individual elements in a list using lambda function.", "mutation": "Create a lambda function that calculates the n-th power of each element in a list."}
{"task_id": 623, "original": "Write a python function to convert the given string to upper case.", "mutation": "Create a Python function that changes the provided string to uppercase."}
{"task_id": 624, "original": "Write a python function to interchange first and last elements in a given list.", "mutation": "Create a Python function that swaps the first and last elements of a provided list."}
{"task_id": 625, "original": "Write a python function to find the largest triangle that can be inscribed in the semicircle.", "mutation": "Create a Python function that determines the largest triangle that can fit inside a semicircle."}
{"task_id": 626, "original": "Write a python function to find the smallest missing number from the given array.", "mutation": "Create a Python function that identifies the smallest missing number in a provided array."}
{"task_id": 627, "original": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.", "mutation": "Create a function that replaces all spaces in the provided string with the characters '%20'."}
{"task_id": 628, "original": "Write a python function to find even numbers from a mixed list.", "mutation": "Create a Python function that identifies even numbers within a list containing a mix of numbers."}
{"task_id": 629, "original": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.", "mutation": "Create a function that retrieves all neighboring coordinates of a specified coordinate tuple."}
{"task_id": 630, "original": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.", "mutation": "Create a function that uses regex to swap whitespaces with underscores and vice versa in a provided string."}
{"task_id": 631, "original": "Write a python function to move all zeroes to the end of the given list.", "mutation": "Create a Python function that shifts all zeros to the end of a provided list."}
{"task_id": 632, "original": "Write a python function to find the sum of xor of all pairs of numbers in the given array.", "mutation": "Create a Python function that calculates the sum of the XOR of all pairs of numbers in the provided array."}
{"task_id": 633, "original": "Write a python function to find the sum of fourth power of first n even natural numbers.", "mutation": "Create a Python function that calculates the sum of the fourth power of the first n even natural numbers."}
{"task_id": 634, "original": "Write a function to push all values into a heap and then pop off the smallest values one at a time.", "mutation": "Create a function that adds all values to a heap and then removes the smallest values individually."}
{"task_id": 635, "original": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.", "mutation": "Create a Python function that determines whether the roots of a quadratic equation are reciprocals of each other."}
{"task_id": 636, "original": "Write a function to check whether the given amount has no profit and no loss", "mutation": "Create a function that determines if the specified amount results in neither profit nor loss."}
{"task_id": 637, "original": "Write a function to calculate wind chill index.", "mutation": "Create a function that computes the wind chill index."}
{"task_id": 638, "original": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.", "mutation": "Create a function that calculates the total length of names in a list after excluding those that begin with a lowercase letter."}
{"task_id": 639, "original": "Write a function to remove the parenthesis area in a string.", "mutation": "Create a function that eliminates the content within parentheses in a given string."}
{"task_id": 640, "original": "Write a function to find the nth nonagonal number.", "mutation": "Create a function that calculates the nonagonal number at position n."}
{"task_id": 641, "original": "Write a function to remove similar rows from the given tuple matrix.", "mutation": "Create a function that eliminates duplicate rows from the provided tuple matrix."}
{"task_id": 642, "original": "Write a function that matches a word containing 'z', not at the start or end of the word.", "mutation": "Create a function that identifies a word with the letter 'z' in the middle, not at the beginning or end."}
{"task_id": 643, "original": "Write a python function to reverse an array upto a given position.", "mutation": "Create a Python function that reverses an array up to a specified position."}
{"task_id": 644, "original": "Write a function to find the product of it\u2019s kth index in the given tuples.", "mutation": "Create a function that calculates the product of the kth index in the provided tuples."}
{"task_id": 645, "original": "Write a python function to count number of cubes of size k in a cube of size n.", "mutation": "Create a Python function that calculates the quantity of k-sized cubes within an n-sized cube."}
{"task_id": 646, "original": "Write a function to split a string at uppercase letters.", "mutation": "Create a function that divides a string at capital letters."}
{"task_id": 647, "original": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.", "mutation": "Create a function that swaps the position of every nth value with the (n+1)th value and vice versa in a provided list."}
{"task_id": 648, "original": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.", "mutation": "Create a Python function that computes the total of the numbers within a list based on a specified range of indices."}
{"task_id": 649, "original": "Write a python function to check whether the given two arrays are equal or not.", "mutation": "Create a Python function that verifies if the two provided arrays are identical."}
{"task_id": 650, "original": "Write a function to check if one tuple is a subset of another tuple.", "mutation": "Create a function that determines if one tuple is contained within another tuple."}
{"task_id": 651, "original": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.", "mutation": "Create a function that transforms the provided tuple matrix into a list of tuples, where each tuple corresponds to a column."}
{"task_id": 652, "original": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.", "mutation": "Create a function that uses the collections module to organize a series of key-value pairs into a dictionary containing lists."}
{"task_id": 653, "original": "Write a function to find the perimeter of a rectangle.", "mutation": "Create a function that calculates the perimeter of a rectangle."}
{"task_id": 654, "original": "Write a python function to find the sum of fifth power of n natural numbers.", "mutation": "Create a Python function that calculates the sum of the fifth power of the first n natural numbers."}
{"task_id": 655, "original": "Write a python function to find the minimum sum of absolute differences of two arrays.", "mutation": "Create a Python function that calculates the smallest sum of absolute differences between two arrays."}
{"task_id": 656, "original": "Write a python function to find the first digit in factorial of a given number.", "mutation": "Create a Python function that identifies the initial digit in the factorial of a specified number."}
{"task_id": 657, "original": "Write a function to find the item with maximum occurrences in a given list.", "mutation": "Create a function that identifies the item in a given list that appears most frequently."}
{"task_id": 658, "original": "Write a python function to print duplicants from a list of integers.", "mutation": "Create a Python function that prints duplicates from a list of integers."}
{"task_id": 659, "original": "Write a python function to choose points from two ranges such that no point lies in both the ranges.", "mutation": "Create a Python function that selects points from two ranges in a way that no point is shared between the two ranges."}
{"task_id": 660, "original": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.", "mutation": "Create a function that calculates the highest possible sum without including any three consecutive elements."}
{"task_id": 661, "original": "Write a function to sort a list in a dictionary.", "mutation": "Create a function that organizes a list within a dictionary."}
{"task_id": 662, "original": "Write a function to find the largest possible value of k such that k modulo x is y.", "mutation": "Create a function that determines the maximum value of k where the remainder of k divided by x is equal to y."}
{"task_id": 663, "original": "Write a python function to find the average of even numbers till a given even number.", "mutation": "Create a Python function that calculates the average of all even numbers up to a specified even number."}
{"task_id": 664, "original": "Write a python function to shift first element to the end of given list.", "mutation": "Create a Python function that moves the first element of a given list to the end."}
{"task_id": 665, "original": "Write a function to count occurrence of a character in a string.", "mutation": "Create a function that calculates the number of times a specific character appears in a given string."}
{"task_id": 666, "original": "Write a python function to count number of vowels in the string.", "mutation": "Create a Python function that calculates the total number of vowels in a given string."}
{"task_id": 667, "original": "Write a python function to replace multiple occurence of character by single.", "mutation": "Create a Python function that replaces multiple occurrences of a character with a single occurrence."}
{"task_id": 668, "original": "Write a function to check whether the given ip address is valid or not using regex.", "mutation": "Create a function that uses regex to determine if the provided IP address is valid."}
{"task_id": 669, "original": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.", "mutation": "Create a Python function that determines if a sequence of numbers exhibits a decreasing pattern."}
{"task_id": 670, "original": "Write a python function to set the right most unset bit.", "mutation": "Create a Python function that will identify and set the rightmost bit that is not currently set."}
{"task_id": 671, "original": "Write a function to find maximum of three numbers.", "mutation": "Create a function that determines the highest value among three numbers."}
{"task_id": 672, "original": "Write a python function to convert a list of multiple integers into a single integer.", "mutation": "Create a Python function that combines a list of integers into a single integer."}
{"task_id": 673, "original": "Write a function to remove duplicate words from a given string using collections module.", "mutation": "Create a function that utilizes the collections module to eliminate repeated words in a provided string."}
{"task_id": 674, "original": "Write a function to add two integers. however, if the sum is between the given range it will return 20.", "mutation": "Create a function that adds two integers, but returns 20 if the sum falls within a specified range."}
{"task_id": 675, "original": "Write a function to remove everything except alphanumeric characters from the given string by using regex.", "mutation": "Create a function that utilizes regex to eliminate any non-alphanumeric characters from the provided string."}
{"task_id": 676, "original": "Write a function to check if the triangle is valid or not.", "mutation": "Create a function that determines the validity of a triangle."}
{"task_id": 677, "original": "Write a python function to remove spaces from a given string.", "mutation": "Create a Python function that eliminates spaces from a provided string."}
{"task_id": 678, "original": "Write a function to access dictionary key\u2019s element by index.", "mutation": "Create a function that retrieves an element from a dictionary key using an index."}
{"task_id": 679, "original": "Write a python function to check whether a sequence of numbers has an increasing trend or not.", "mutation": "Create a Python function that determines if a sequence of numbers exhibits an upward trend."}
{"task_id": 680, "original": "Write a python function to find the smallest prime divisor of a number.", "mutation": "Create a Python function that identifies the smallest prime factor of a given number."}
{"task_id": 681, "original": "Write a function to multiply two lists using map and lambda function.", "mutation": "Create a function that uses map and lambda to multiply two lists."}
{"task_id": 682, "original": "Write a python function to check whether the given number can be represented by sum of two squares or not.", "mutation": "Create a Python function that determines if a given number can be expressed as the sum of two squares."}
{"task_id": 683, "original": "Write a python function to count occurences of a character in a repeated string.", "mutation": "Create a Python function that counts the occurrences of a character in a string that is repeated."}
{"task_id": 684, "original": "Write a python function to find sum of prime numbers between 1 to n.", "mutation": "Create a Python function that calculates the sum of prime numbers from 1 to n."}
{"task_id": 685, "original": "Write a function to find the frequency of each element in the given list.", "mutation": "Create a function that determines the occurrence of each element in the provided list."}
{"task_id": 686, "original": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.", "mutation": "Create a recursive function that calculates the greatest common divisor (gcd) of two integers."}
{"task_id": 687, "original": "Write a function to get the length of a complex number.", "mutation": "Create a function that calculates the magnitude of a complex number."}
{"task_id": 688, "original": "Write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block", "mutation": "Create a function that calculates the minimum number of jumps needed to reach the end of an array of integers, where each element represents the maximum number of steps that can be taken forward from that element."}
{"task_id": 689, "original": "Write a function to multiply consecutive numbers of a given list.", "mutation": "Create a function that multiplies consecutive numbers in a provided list."}
{"task_id": 690, "original": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.", "mutation": "Create a function that organizes the first elements of a tuple list based on the second elements."}
{"task_id": 691, "original": "Write a python function to find the last two digits in factorial of a given number.", "mutation": "Create a Python function that calculates the last two digits of the factorial of a specified number."}
{"task_id": 692, "original": "Write a function to remove multiple spaces in a string by using regex.", "mutation": "Create a function that utilizes regex to eliminate multiple spaces within a string."}
{"task_id": 693, "original": "Write a function to extract unique values from the given dictionary values.", "mutation": "Create a function that retrieves distinct values from the provided dictionary."}
{"task_id": 694, "original": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.", "mutation": "Create a function that verifies if every element in the second tuple is larger than its corresponding index in the first tuple."}
{"task_id": 695, "original": "Write a function to zip two given lists of lists.", "mutation": "Create a function that zips two provided lists of lists."}
{"task_id": 696, "original": "Write a function to find number of even elements in the given list using lambda function.", "mutation": "Create a lambda function to determine the count of even elements in the provided list."}
{"task_id": 697, "original": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.", "mutation": "Create a function that sorts the items of a dictionary based on the product of the keys in the tuples for the given dictionary with tuple keys."}
{"task_id": 698, "original": "Write a python function to find the minimum number of swaps required to convert one binary string to another.", "mutation": "Create a Python function that determines the minimum number of swaps needed to change one binary string into another."}
{"task_id": 699, "original": "Write a function to count the number of elements in a list which are within a specific range.", "mutation": "Create a function that calculates the quantity of elements within a defined range in a list."}
{"task_id": 700, "original": "Write a function to find the equilibrium index of the given array.", "mutation": "Create a function that can determine the equilibrium index of a provided array."}
{"task_id": 701, "original": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.", "mutation": "Create a function that determines the minimum number of elements that need to be removed in order to satisfy the condition amax-amin<=k."}
{"task_id": 702, "original": "Write a function to check whether the given key is present in the dictionary or not.", "mutation": "Create a function that verifies if the specified key exists in the dictionary."}
{"task_id": 703, "original": "Write a function to calculate the harmonic sum of n-1.", "mutation": "Create a function that computes the sum of the reciprocals of the integers from 1 to n."}
{"task_id": 704, "original": "Write a function to sort a list of lists by length and value.", "mutation": "Create a function that organizes a collection of lists based on their length and content."}
{"task_id": 705, "original": "Write a function to find whether an array is subset of another array.", "mutation": "Create a function that determines if one array is a subset of another array."}
{"task_id": 706, "original": "Write a python function to count the total set bits from 1 to n.", "mutation": "Create a Python function that calculates the total number of set bits from 1 to n."}
{"task_id": 707, "original": "Write a python function to convert a string to a list.", "mutation": "Create a Python function that transforms a string into a list."}
{"task_id": 708, "original": "Write a function to count unique keys for each value present in the tuple.", "mutation": "Create a function that counts the number of unique keys for each value in the tuple."}
{"task_id": 709, "original": "Write a function to access the initial and last data of the given tuple record.", "mutation": "Create a function that retrieves the first and last elements of a specified tuple record."}
{"task_id": 710, "original": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.", "mutation": "Create a Python function that verifies if the product of the digits at even and odd positions in a number are the same."}
{"task_id": 711, "original": "Write a function to remove duplicates from a list of lists.", "mutation": "Create a function that eliminates duplicate elements from a list containing multiple lists."}
{"task_id": 712, "original": "Write a function to check if the given tuple contains all valid values or not.", "mutation": "Create a function that verifies whether the provided tuple includes only valid values."}
{"task_id": 713, "original": "Write a python function to count the number of distinct power of prime factor of given number.", "mutation": "Create a Python function that calculates the count of unique prime factors of a given number."}
{"task_id": 714, "original": "Write a function to convert the given string of integers into a tuple.", "mutation": "Create a function that transforms the provided string of integers into a tuple."}
{"task_id": 715, "original": "Write a function to find the perimeter of a rombus.", "mutation": "Create a function that calculates the perimeter of a rhombus."}
{"task_id": 716, "original": "Write a function to calculate the standard deviation.", "mutation": "Create a function that computes the standard deviation."}
{"task_id": 717, "original": "Write a function to create a list taking alternate elements from another given list.", "mutation": "Create a function that generates a list by selecting every other element from a provided list."}
{"task_id": 718, "original": "Write a function that matches a string that has an a followed by zero or more b's.", "mutation": "Create a function that identifies a string containing an 'a' followed by any number of 'b's."}
{"task_id": 719, "original": "Write a function to add a dictionary to the tuple.", "mutation": "Create a function that adds a dictionary to a tuple."}
{"task_id": 720, "original": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.", "mutation": "Create a function that determines the path with the highest average among all paths in a square matrix of size n*n."}
{"task_id": 721, "original": "Write a function to filter the height and width of students which are stored in a dictionary.", "mutation": "Create a function that filters the height and width values of students stored in a dictionary."}
{"task_id": 722, "original": "Write a function to count the same pair in two given lists using map function.", "mutation": "Create a function that uses the map function to count identical pairs in two provided lists."}
{"task_id": 723, "original": "Write a function to calculate the sum of all digits of the base to the specified power.", "mutation": "Create a function that adds up all the digits of the base raised to the given power."}
{"task_id": 724, "original": "Write a function to extract values between quotation marks of the given string by using regex.", "mutation": "Create a function that uses regex to retrieve values enclosed in quotation marks from a provided string."}
{"task_id": 725, "original": "Write a function to multiply the adjacent elements of the given tuple.", "mutation": "Create a function that multiplies the neighboring elements in the provided tuple."}
{"task_id": 726, "original": "Write a function to remove all characters except letters and numbers using regex", "mutation": "Create a function that uses regex to eliminate any characters that are not letters or numbers."}
{"task_id": 727, "original": "Write a function to sum elements in two lists.", "mutation": "Create a function that adds up the elements in two lists."}
{"task_id": 728, "original": "Write a function to add two lists using map and lambda function.", "mutation": "Create a function that uses map and lambda to combine two lists."}
{"task_id": 729, "original": "Write a function to remove consecutive duplicates of a given list.", "mutation": "Create a function that eliminates consecutive duplicates from a provided list."}
{"task_id": 730, "original": "Write a function to find the lateral surface area of a cone.", "mutation": "Create a function that calculates the lateral surface area of a cone."}
{"task_id": 731, "original": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.", "mutation": "Create a function that replaces any instances of spaces, commas, or dots with a colon."}
{"task_id": 732, "original": "Write a function to find the index of the first occurrence of a given number in a sorted array.", "mutation": "Create a function that determines the position of the first instance of a specified number in an array that has been sorted."}
{"task_id": 733, "original": "Write a python function to find sum of products of all possible subarrays.", "mutation": "Create a Python function that calculates the sum of the products of all potential subarrays."}
{"task_id": 734, "original": "Write a python function to toggle bits of the number except the first and the last bit.", "mutation": "Create a Python function that switches the bits of a number, excluding the first and last bits."}
{"task_id": 735, "original": "Write a function to locate the left insertion point for a specified value in sorted order.", "mutation": "Create a function that finds the index where a specified value should be inserted in a sorted list."}
{"task_id": 736, "original": "Write a function to check whether the given string is starting with a vowel or not using regex.", "mutation": "Create a function that uses regex to determine if a given string begins with a vowel."}
{"task_id": 737, "original": "Write a function to calculate the geometric sum of n-1.", "mutation": "Create a function that computes the geometric sum up to n-1."}
{"task_id": 738, "original": "Write a python function to find the index of smallest triangular number with n digits.", "mutation": "Create a Python function that determines the index of the smallest triangular number with n digits."}
{"task_id": 739, "original": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.", "mutation": "Create a function that transforms the provided tuple into a dictionary with key-value pairs using consecutive elements."}
{"task_id": 740, "original": "Write a python function to check whether all the characters are same or not.", "mutation": "Create a Python function that verifies if all characters are identical or not."}
{"task_id": 741, "original": "Write a function to caluclate the area of a tetrahedron.", "mutation": "Create a function that calculates the area of a tetrahedron."}
{"task_id": 742, "original": "Write a function to rotate a given list by specified number of items to the right direction.", "mutation": "Create a function that rotates a given list to the right by a specified number of items."}
{"task_id": 743, "original": "Write a function to check if the given tuple has any none value or not.", "mutation": "Create a function that verifies whether the provided tuple contains any null values."}
{"task_id": 744, "original": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.", "mutation": "Create a function that identifies numbers in a specified range that are divisible by each of their individual digits."}
{"task_id": 745, "original": "Write a function to find area of a sector.", "mutation": "Create a function that calculates the area of a sector."}
{"task_id": 746, "original": "Write a function to find the longest common subsequence for the given three string sequence.", "mutation": "Create a function that identifies the longest common subsequence among three given strings."}
{"task_id": 747, "original": "Write a function to put spaces between words starting with capital letters in a given string by using regex.", "mutation": "Create a function that uses regex to insert spaces between words that begin with capital letters in a provided string."}
{"task_id": 748, "original": "Write a function to sort a given list of strings of numbers numerically.", "mutation": "Create a function that sorts a list of strings containing numbers in numerical order."}
{"task_id": 749, "original": "Write a function to add the given tuple to the given list.", "mutation": "Create a function that appends the provided tuple to the provided list."}
{"task_id": 750, "original": "Write a function to check if the given array represents min heap or not.", "mutation": "Create a function that determines whether the provided array is a minimum heap or not."}
{"task_id": 751, "original": "Write a function to find the nth jacobsthal number.", "mutation": "Create a function that calculates the nth Jacobsthal number."}
{"task_id": 752, "original": "Write a function to find minimum k records from tuple list.", "mutation": "Create a function that retrieves the smallest k records from a list of tuples."}
{"task_id": 753, "original": "Write a function to find common index elements from three lists.", "mutation": "Create a function that identifies the common elements at the same index position in three lists."}
{"task_id": 754, "original": "Write a function to find the second smallest number in a list.", "mutation": "Create a function that identifies the second smallest number within a given list."}
{"task_id": 755, "original": "Write a function that matches a string that has an a followed by zero or one 'b'.", "mutation": "Create a function that identifies a string containing an 'a' followed by either zero or one 'b'."}
{"task_id": 756, "original": "Write a function to count the pairs of reverse strings in the given string list.", "mutation": "Create a function that counts the number of pairs of strings in a list that are reverse of each other."}
{"task_id": 757, "original": "Write a function to count number of unique lists within a list.", "mutation": "Create a function that calculates the total number of distinct lists in a given list."}
{"task_id": 758, "original": "Write a function to check a decimal with a precision of 2.", "mutation": "Create a function that verifies a decimal number with a precision of 2."}
{"task_id": 759, "original": "Write a python function to check whether an array contains only one distinct element or not.", "mutation": "Create a Python function that determines if an array has only one unique element or not."}
{"task_id": 760, "original": "Write a function to caluclate arc length of an angle.", "mutation": "Create a function that calculates the arc length of a given angle."}
{"task_id": 761, "original": "Write a function to check whether the given month number contains 30 days or not.", "mutation": "Create a function that determines if a given month number has 30 days."}
{"task_id": 762, "original": "Write a python function to find the minimum difference between any two elements in a given array.", "mutation": "Create a Python function that determines the smallest difference between two elements within a specified array."}
{"task_id": 763, "original": "Write a python function to count numeric values in a given string.", "mutation": "Create a Python function that calculates the number of numerical values in a provided string."}
{"task_id": 764, "original": "Write a function to find nth polite number.", "mutation": "Create a function that can determine the nth polite number."}
{"task_id": 765, "original": "Write a function to iterate over all pairs of consecutive items in a given list.", "mutation": "Create a function that loops through each pair of consecutive items in a provided list."}
{"task_id": 766, "original": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.", "mutation": "Create a Python function that calculates the quantity of pairs with a sum equal to 'sum'."}
{"task_id": 767, "original": "Write a python function to check for odd parity of a given number.", "mutation": "Create a python function that verifies if a given number has odd parity."}
{"task_id": 768, "original": "Write a python function to get the difference between two lists.", "mutation": "Create a Python function that calculates the variance between two lists."}
{"task_id": 769, "original": "Write a python function to find the sum of fourth power of first n odd natural numbers.", "mutation": "Create a Python function that calculates the sum of the fourth power of the first n odd natural numbers."}
{"task_id": 770, "original": "Write a function to check if the given expression is balanced or not.", "mutation": "Create a function that determines whether the provided expression is balanced."}
{"task_id": 771, "original": "Write a function to remove all the words with k length in the given string.", "mutation": "Create a function that eliminates all words of a specific length from the provided string."}
{"task_id": 772, "original": "Write a function to find the occurrence and position of the substrings within a string.", "mutation": "Create a function that identifies the location and frequency of substrings within a given string."}
{"task_id": 773, "original": "Write a function to check if the string is a valid email address or not using regex.", "mutation": "Create a function that uses regex to determine if a given string is a valid email address."}
{"task_id": 774, "original": "Write a python function to check whether every odd index contains odd numbers of a given list.", "mutation": "Create a Python function that verifies if all odd indexes in a provided list contain odd numbers."}
{"task_id": 775, "original": "Write a function to count those characters which have vowels as their neighbors in the given string.", "mutation": "Create a function that counts characters in a string that are surrounded by vowels."}
{"task_id": 776, "original": "Write a python function to find the sum of non-repeated elements in a given array.", "mutation": "Create a Python function that calculates the sum of unique elements in a provided array."}
{"task_id": 777, "original": "Write a function to pack consecutive duplicates of a given list elements into sublists.", "mutation": "Create a function that groups consecutive duplicate elements of a list into sublists."}
{"task_id": 778, "original": "Write a function to count the number of unique lists within a list.", "mutation": "Create a function that calculates the quantity of distinct lists in a given list."}
{"task_id": 779, "original": "Write a function to find the combinations of sums with tuples in the given tuple list.", "mutation": "Create a function that calculates the combinations of sums using tuples from a specified list of tuples."}
{"task_id": 780, "original": "Write a python function to check whether the count of divisors is even or odd.", "mutation": "Create a Python function that determines if the number of divisors is odd or even."}
{"task_id": 781, "original": "Write a python function to find the sum of all odd length subarrays.", "mutation": "Create a Python function that calculates the total sum of subarrays with odd lengths."}
{"task_id": 782, "original": "Write a function to convert rgb color to hsv color.", "mutation": "Create a function that transforms an RGB color to an HSV color."}
{"task_id": 783, "original": "Write a function to find the product of first even and odd number of a given list.", "mutation": "Create a function that calculates the product of the first even and odd numbers in a provided list."}
{"task_id": 784, "original": "Write a function to convert tuple string to integer tuple.", "mutation": "Create a function that converts a tuple of strings to a tuple of integers."}
{"task_id": 785, "original": "Write a function to locate the right insertion point for a specified value in sorted order.", "mutation": "Create a function that finds the correct position to insert a given value in a sorted list."}
{"task_id": 786, "original": "Write a function that matches a string that has an a followed by three 'b'.", "mutation": "Create a function that identifies a string containing an 'a' followed by three 'b's."}
{"task_id": 787, "original": "Write a function to create a new tuple from the given string and list.", "mutation": "Create a function that generates a new tuple using the provided string and list."}
{"task_id": 788, "original": "Write a function to calculate the perimeter of a regular polygon.", "mutation": "Create a function that computes the perimeter of a regular polygon."}
{"task_id": 789, "original": "Write a python function to check whether every even index contains even numbers of a given list.", "mutation": "Create a Python function that verifies if all even indexes in a provided list contain even numbers."}
{"task_id": 790, "original": "Write a function to remove the nested record from the given tuple.", "mutation": "Create a function that eliminates the nested record from the provided tuple."}
{"task_id": 791, "original": "Write a python function to count the number of lists in a given number of lists.", "mutation": "Create a Python function that calculates the total number of lists within a specified set of lists."}
{"task_id": 792, "original": "Write a python function to find the last position of an element in a sorted array.", "mutation": "Create a Python function that determines the final index of an element within an array that has been sorted."}
{"task_id": 793, "original": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.", "mutation": "Create a function that identifies a string containing an 'a' followed by any character and ending with 'b'."}
{"task_id": 794, "original": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.", "mutation": "Create a function that uses the heap queue algorithm to identify the n items with the lowest prices in a given dataset."}
{"task_id": 795, "original": "Write a function to find the sum of all items in the given dictionary.", "mutation": "Create a function that calculates the total sum of all elements within the provided dictionary."}
{"task_id": 796, "original": "Write a python function to find the sum of all odd natural numbers within the range l and r.", "mutation": "Create a Python function that calculates the total of all odd natural numbers between the given range l and r."}
{"task_id": 797, "original": "Write a python function to find the sum of an array.", "mutation": "Create a Python function that calculates the sum of an array."}
{"task_id": 798, "original": "Write a python function to left rotate the bits of a given number.", "mutation": "Create a Python function that rotates the bits of a specified number to the left."}
{"task_id": 799, "original": "Write a function to remove all whitespaces from a string.", "mutation": "Create a function that eliminates all spaces from a given string."}
{"task_id": 800, "original": "Write a python function to count the number of equal numbers from three given integers.", "mutation": "Create a Python function that calculates the quantity of identical numbers among three provided integers."}
{"task_id": 801, "original": "Write a python function to count the number of rotations required to generate a sorted array.", "mutation": "Create a Python function that calculates the number of rotations needed to produce a sorted array."}
{"task_id": 802, "original": "Write a python function to check whether the given number is a perfect square or not.", "mutation": "Create a Python function that determines if a given number is a perfect square."}
{"task_id": 803, "original": "Write a python function to check whether the product of numbers is even or not.", "mutation": "Create a Python function that determines if the product of numbers is even."}
{"task_id": 804, "original": "Write a function to find the list in a list of lists whose sum of elements is the highest.", "mutation": "Create a function that identifies the list within a list of lists with the greatest sum of elements."}
{"task_id": 805, "original": "Write a function to find maximum run of uppercase characters in the given string.", "mutation": "Create a function that identifies the longest consecutive sequence of uppercase letters in a provided string."}
{"task_id": 806, "original": "Write a python function to find the first odd number in a given list of numbers.", "mutation": "Create a Python function that identifies the initial odd number within a provided list of numbers."}
{"task_id": 807, "original": "Write a function to check if the given tuples contain the k or not.", "mutation": "Create a function that verifies whether the specified tuples include the element k."}
{"task_id": 808, "original": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.", "mutation": "Create a function that verifies if every element in the second tuple is less than the element at the corresponding index in the first tuple."}
{"task_id": 809, "original": "Write a function to iterate over elements repeating each as many times as its count.", "mutation": "Create a function that loops through elements and repeats each element based on its count."}
{"task_id": 810, "original": "Write a function to check if two lists of tuples are identical or not.", "mutation": "Create a function that determines whether two lists of tuples are the same or not."}
{"task_id": 811, "original": "Write a function to abbreviate 'road' as 'rd.' in a given string.", "mutation": "Create a function that shortens the word 'road' to 'rd.' in a specified string."}
{"task_id": 812, "original": "Write a function to find length of the string.", "mutation": "Create a function that determines the length of a given string."}
{"task_id": 813, "original": "Write a function to find the area of a rombus.", "mutation": "Create a function that calculates the area of a rhombus."}
{"task_id": 814, "original": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.", "mutation": "Create a function that organizes the provided array containing only 0, 1, and 2 without utilizing any sorting algorithms."}
{"task_id": 815, "original": "Write a function to clear the values of the given tuples.", "mutation": "Create a function that will erase the values from the provided tuples."}
{"task_id": 816, "original": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.", "mutation": "Create a lambda function to identify numbers in a list that are divisible by either m or n."}
{"task_id": 817, "original": "Write a python function to count lower case letters in a given string.", "mutation": "Create a Python function that calculates the number of lowercase letters in a provided string."}
{"task_id": 818, "original": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.", "mutation": "Create a function that calculates the occurrence of consecutive duplicate elements in a provided list of numbers."}
{"task_id": 819, "original": "Write a function to check whether the given month number contains 28 days or not.", "mutation": "Create a function that determines if the specified month has 28 days."}
{"task_id": 820, "original": "Write a function to merge two dictionaries into a single expression.", "mutation": "Create a function that combines two dictionaries into one."}
{"task_id": 821, "original": "Write a function to return true if the password is valid.", "mutation": "Create a function that will return true if the password meets the criteria for validity."}
{"task_id": 822, "original": "Write a function to check if the given string starts with a substring using regex.", "mutation": "Create a function that uses regex to determine if a given string begins with a specific substring."}
{"task_id": 823, "original": "Write a python function to remove even numbers from a given list.", "mutation": "Create a Python function that eliminates all even numbers from a provided list."}
{"task_id": 824, "original": "Write a python function to access multiple elements of specified index from a given list.", "mutation": "Create a Python function that retrieves multiple elements at specified indices from a provided list."}
{"task_id": 825, "original": "Write a python function to find the type of triangle from the given sides.", "mutation": "Create a Python function that determines the type of triangle based on the provided side lengths."}
{"task_id": 826, "original": "Write a function to sum a specific column of a list in a given list of lists.", "mutation": "Create a function that adds up the values in a particular column of a list within a list of lists."}
{"task_id": 827, "original": "Write a function to count alphabets,digits and special charactes in a given string.", "mutation": "Create a function that calculates the number of alphabets, digits, and special characters in a provided string."}
{"task_id": 828, "original": "Write a function to find out the second most repeated (or frequent) string in the given sequence.", "mutation": "Create a function that identifies the second most commonly occurring string in the provided sequence."}
{"task_id": 829, "original": "Write a function to round up a number to specific digits.", "mutation": "Create a function that will round a number to a specified number of digits."}
{"task_id": 830, "original": "Write a python function to count equal element pairs from the given array.", "mutation": "Create a Python function that counts pairs of equal elements in a given array."}
{"task_id": 831, "original": "Write a function to extract the maximum numeric value from a string by using regex.", "mutation": "Create a function that uses regex to find and extract the highest numerical value from a given string."}
{"task_id": 832, "original": "Write a function to get dictionary keys as a list.", "mutation": "Create a function that returns a list of keys from a dictionary."}
{"task_id": 833, "original": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.", "mutation": "Create a function that produces a square matrix containing numbers from 1 to n squared, arranged in a spiral pattern."}
{"task_id": 834, "original": "Write a python function to find the slope of a line.", "mutation": "Create a Python function that calculates the slope of a line."}
{"task_id": 835, "original": "Write a function to find length of the subarray having maximum sum.", "mutation": "Create a function that determines the length of the subarray with the highest sum."}
{"task_id": 836, "original": "Write a python function to find the cube sum of first n odd natural numbers.", "mutation": "Create a Python function that calculates the sum of the cubes of the first n odd natural numbers."}
{"task_id": 837, "original": "Write a python function to find minimum number swaps required to make two binary strings equal.", "mutation": "Create a Python function that determines the minimum number of swaps needed to make two binary strings identical."}
{"task_id": 838, "original": "Write a function to sort the tuples alphabetically by the first item of each tuple.", "mutation": "Create a function that arranges the tuples in alphabetical order based on the first element of each tuple."}
{"task_id": 839, "original": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.", "mutation": "Create a Python function that determines if the roots of a quadratic equation are equal in magnitude but opposite in sign."}
{"task_id": 840, "original": "Write a function to count the number of inversions in the given array.", "mutation": "Create a function that calculates the total number of inversions present in the provided array."}
{"task_id": 841, "original": "Write a function to find the number which occurs for odd number of times in the given array.", "mutation": "Create a function that identifies the number that appears an odd number of times in the provided array."}
{"task_id": 842, "original": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.", "mutation": "Create a function that uses the heap queue algorithm to determine the nth super ugly number from a specified list of k prime numbers."}
{"task_id": 843, "original": "Write a python function to find the kth element in an array containing odd elements first and then even elements.", "mutation": "Create a Python function that locates the kth element in an array where odd elements come before even elements."}
{"task_id": 844, "original": "Write a python function to count the number of digits in factorial of a given number.", "mutation": "Create a Python function that calculates the number of digits in the factorial of a specified number."}
{"task_id": 845, "original": "Write a function to find the minimum number of platforms required for a railway/bus station.", "mutation": "Create a function that determines the minimum number of platforms needed for a railway or bus station."}
{"task_id": 846, "original": "Write a python function to copy a list from a singleton tuple.", "mutation": "Create a Python function that copies a list from a tuple containing only one element."}
{"task_id": 847, "original": "Write a function to find the area of a trapezium.", "mutation": "Create a function that calculates the area of a trapezium."}
{"task_id": 848, "original": "Write a python function to find sum of all prime divisors of a given number.", "mutation": "Create a Python function that calculates the total sum of the prime factors of a specified number."}
{"task_id": 849, "original": "Write a function to check if a triangle of positive area is possible with the given angles.", "mutation": "Create a function that determines if it is possible to form a triangle with positive area using the provided angles."}
{"task_id": 850, "original": "Write a python function to find sum of inverse of divisors.", "mutation": "Create a Python function that calculates the sum of the reciprocals of divisors."}
{"task_id": 851, "original": "Write a python function to remove negative numbers from a list.", "mutation": "Create a Python function that eliminates negative numbers from a list."}
{"task_id": 852, "original": "Write a python function to find sum of odd factors of a number.", "mutation": "Create a Python function that calculates the sum of the odd factors of a given number."}
{"task_id": 853, "original": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.", "mutation": "Create a function that takes any list as input and transforms it into a heap using the heap queue algorithm."}
{"task_id": 854, "original": "Write a python function to check for even parity of a given number.", "mutation": "Create a python function that verifies if a given number has even parity."}
{"task_id": 855, "original": "Write a python function to find minimum adjacent swaps required to sort binary array.", "mutation": "Create a Python function that determines the minimum number of adjacent swaps needed to sort a binary array."}
{"task_id": 856, "original": "Write a function to list out the list of given strings individually using map function.", "mutation": "Create a function that uses the map function to display each string in a given list separately."}
{"task_id": 857, "original": "Write a function to count number of lists in a given list of lists and square the count.", "mutation": "Create a function that calculates the square of the total number of lists within a given list of lists."}
{"task_id": 858, "original": "Write a function to generate all sublists of a given list.", "mutation": "Create a function that generates all possible sublists of a specified list."}
{"task_id": 859, "original": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.", "mutation": "Create a function that uses regex to determine if the provided string ends with only alphanumeric characters."}
{"task_id": 860, "original": "Write a function to find all anagrams of a string in a given list of strings using lambda function.", "mutation": "Create a lambda function that can be used to identify all anagrams of a specific string within a provided list of strings."}
{"task_id": 861, "original": "Write a function to find the occurrences of n most common words in a given text.", "mutation": "Create a function that identifies the frequency of the top n most common words in a provided text."}
{"task_id": 862, "original": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.", "mutation": "Create a function that determines the longest subsequence length where the elements are consecutive integers."}
{"task_id": 863, "original": "Write a function to find palindromes in a given list of strings using lambda function.", "mutation": "Create a lambda function to identify palindromes within a provided list of strings."}
{"task_id": 864, "original": "Write a function to print n-times a list using map function.", "mutation": "Create a function that uses the map function to print a list n times."}
{"task_id": 865, "original": "Write a function to check whether the given month name contains 31 days or not.", "mutation": "Create a function that determines if the specified month has 31 days."}
{"task_id": 866, "original": "Write a python function to add a minimum number such that the sum of array becomes even.", "mutation": "Create a Python function that adds the smallest possible number to an array in order to make the sum of the array even."}
{"task_id": 867, "original": "Write a python function to find the length of the last word in a given string.", "mutation": "Create a Python function that determines the length of the final word in a provided string."}
{"task_id": 868, "original": "Write a function to remove sublists from a given list of lists, which are outside a given range.", "mutation": "Create a function that eliminates sublists from a list of lists that fall outside a specified range."}
{"task_id": 869, "original": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.", "mutation": "Create a lambda function that calculates the sum of the positive numbers in a provided list of numbers."}
{"task_id": 870, "original": "Write a python function to check whether the given strings are rotations of each other or not.", "mutation": "Create a Python function that determines if two given strings are rotations of one another."}
{"task_id": 871, "original": "Write a function to check if a nested list is a subset of another nested list.", "mutation": "Create a function that verifies if a nested list is contained within another nested list."}
{"task_id": 872, "original": "Write a function to solve the fibonacci sequence using recursion.", "mutation": "Create a recursive function that can solve the Fibonacci sequence."}
{"task_id": 873, "original": "Write a python function to check if the string is a concatenation of another string.", "mutation": "Create a Python function that verifies whether a string is a combination of another string."}
{"task_id": 874, "original": "Write a function to find the minimum difference in the tuple pairs of given tuples.", "mutation": "Create a function that calculates the smallest difference between pairs of tuples."}
{"task_id": 875, "original": "Write a python function to find lcm of two positive integers.", "mutation": "Create a Python function that calculates the least common multiple of two positive integers."}
{"task_id": 876, "original": "Write a python function to sort the given string.", "mutation": "Create a Python function that sorts the provided string."}
{"task_id": 877, "original": "Write a function to check if the given tuple contains only k elements.", "mutation": "Create a function that verifies whether the provided tuple consists of exactly k elements."}
{"task_id": 878, "original": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.", "mutation": "Create a function using regex to identify a string containing an 'a' followed by any character and ending with 'b'."}
{"task_id": 879, "original": "Write a python function to find number of solutions in quadratic equation.", "mutation": "Create a Python function that calculates the number of solutions in a quadratic equation."}
{"task_id": 880, "original": "Write a function to find the sum of first even and odd number of a given list.", "mutation": "Create a function that calculates the sum of the first even and odd numbers in a provided list."}
{"task_id": 881, "original": "Write a function to caluclate perimeter of a parallelogram.", "mutation": "Create a function that calculates the perimeter of a parallelogram."}
{"task_id": 882, "original": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.", "mutation": "Create a lambda function to identify numbers in a list that are divisible by both m and n."}
{"task_id": 883, "original": "Write a python function to check whether all the bits are within a given range or not.", "mutation": "Create a Python function that verifies if all the bits fall within a specified range."}
{"task_id": 884, "original": "Write a python function to check whether the two given strings are isomorphic to each other or not.", "mutation": "Create a Python function that determines if two given strings are isomorphic."}
{"task_id": 885, "original": "Write a function to add all the numbers in a list and divide it with the length of the list.", "mutation": "Create a function that calculates the average of all the numbers in a list by adding them together and dividing by the length of the list."}
{"task_id": 886, "original": "Write a python function to check whether the given number is odd or not using bitwise operator.", "mutation": "Create a Python function that uses a bitwise operator to determine if a given number is odd."}
{"task_id": 887, "original": "Write a function to substract the elements of the given nested tuples.", "mutation": "Create a function that subtracts the elements within the provided nested tuples."}
{"task_id": 888, "original": "Write a function to reverse each list in a given list of lists.", "mutation": "Create a function that reverses every list within a list of lists."}
{"task_id": 889, "original": "Write a python function to find the index of an extra element present in one sorted array.", "mutation": "Create a Python function that identifies the index of an additional element in a single sorted array."}
{"task_id": 890, "original": "Write a python function to check whether the given two numbers have same number of digits or not.", "mutation": "Create a Python function that determines if two given numbers have the same number of digits."}
{"task_id": 891, "original": "Write a function to remove multiple spaces in a string.", "mutation": "Create a function that eliminates extra spaces in a string."}
{"task_id": 892, "original": "Write a python function to get the last element of each sublist.", "mutation": "Create a Python function that retrieves the final element from every sub-list."}
{"task_id": 893, "original": "Write a function to convert the given string of float type into tuple.", "mutation": "Create a function that transforms the provided float string into a tuple."}
{"task_id": 894, "original": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.", "mutation": "Create a function that can determine the highest possible sum of subsequences within a given array, ensuring that no adjacent elements are included."}
{"task_id": 895, "original": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.", "mutation": "Create a function that arranges a list in ascending order based on the last element in each tuple from a provided list of tuples that are not empty."}
{"task_id": 896, "original": "Write a python function to check whether the word is present in a given sentence or not.", "mutation": "Create a Python function that verifies if a word is contained within a specified sentence."}
{"task_id": 897, "original": "Write a function to extract specified number of elements from a given list, which follow each other continuously.", "mutation": "Create a function that retrieves a specified number of consecutive elements from a provided list."}
{"task_id": 898, "original": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.", "mutation": "Create a Python function that determines if an array can be sorted by selecting only the elements at the corners."}
{"task_id": 899, "original": "Write a function where a string will start with a specific number.", "mutation": "Create a function that ensures a string begins with a particular number."}
{"task_id": 900, "original": "Write a function to find the smallest multiple of the first n numbers.", "mutation": "Create a function that determines the smallest multiple of the first n numbers."}
{"task_id": 901, "original": "Write a function to combine two dictionaries by adding values for common keys.", "mutation": "Create a function that merges two dictionaries by summing the values of matching keys."}
{"task_id": 902, "original": "Write a python function to count the total unset bits from 1 to n.", "mutation": "Create a Python function that calculates the sum of all unset bits from 1 to n."}
{"task_id": 903, "original": "Write a function to return true if the given number is even else return false.", "mutation": "Create a function that will return true if the provided number is even, otherwise return false."}
{"task_id": 904, "original": "Write a python function to find the sum of squares of binomial co-efficients.", "mutation": "Create a Python function that calculates the sum of squares of binomial coefficients."}
{"task_id": 905, "original": "Write a function to extract year, month and date from a url by using regex.", "mutation": "Create a function that uses regex to extract the year, month, and date from a URL."}
{"task_id": 906, "original": "Write a function to print the first n lucky numbers.", "mutation": "Create a function that displays the initial n lucky numbers."}
{"task_id": 907, "original": "Write a function to find the fixed point in the given array.", "mutation": "Create a function that identifies the fixed point within the provided array."}
{"task_id": 908, "original": "Write a function to find the previous palindrome of a specified number.", "mutation": "Create a function that determines the closest palindrome number that comes before a given number."}
{"task_id": 909, "original": "Write a function to validate a gregorian date.", "mutation": "Create a function that checks if a date is in the Gregorian calendar."}
{"task_id": 910, "original": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.", "mutation": "Create a function that uses the heap queue algorithm to calculate the highest possible product of three numbers from a given array of integers."}
{"task_id": 911, "original": "Write a function to find ln, m lobb number.", "mutation": "Create a function that calculates the natural logarithm of the mth lobb number."}
{"task_id": 912, "original": "Write a function to check for a number at the end of a string.", "mutation": "Create a function that verifies if a string ends with a number."}
{"task_id": 913, "original": "Write a python function to check whether the given string is made up of two alternating characters or not.", "mutation": "Create a Python function that determines if a given string consists of two alternating characters."}
{"task_id": 914, "original": "Write a function to rearrange positive and negative numbers in a given array using lambda function.", "mutation": "Create a lambda function to rearrange positive and negative numbers in a given array."}
{"task_id": 915, "original": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.", "mutation": "Create a function that determines if there exists a triplet in the array where the sum of the elements equals a specified value."}
{"task_id": 916, "original": "Write a function to find the sequences of one upper case letter followed by lower case letters.", "mutation": "Create a function that identifies sequences consisting of one uppercase letter followed by lowercase letters."}
{"task_id": 917, "original": "Write a function to count coin change.", "mutation": "Create a function that calculates the number of coins needed for change."}
{"task_id": 918, "original": "Write a python function to multiply all items in the list.", "mutation": "Create a Python function that multiplies all elements in a given list."}
{"task_id": 919, "original": "Write a function to remove all tuples with all none values in the given tuple list.", "mutation": "Create a function that eliminates any tuples containing only null values from the provided list of tuples."}
{"task_id": 920, "original": "Write a function to perform chunking of tuples each of size n.", "mutation": "Create a function that chunks tuples into groups of size n."}
{"task_id": 921, "original": "Write a function to find a pair with the highest product from a given array of integers.", "mutation": "Create a function that identifies the pair of integers with the greatest product from a provided array."}
{"task_id": 922, "original": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.", "mutation": "Create a function that determines the shortest length of a string containing both str1 and str2 as subsequences."}
{"task_id": 923, "original": "Write a function to find maximum of two numbers.", "mutation": "Create a function that determines the larger of two numbers."}
{"task_id": 924, "original": "Write a python function to calculate the product of all the numbers of a given tuple.", "mutation": "Create a Python function that computes the product of all the numbers in a specified tuple."}
{"task_id": 925, "original": "Write a function to find n-th rencontres number.", "mutation": "Create a function that calculates the n-th rencontres number."}
{"task_id": 926, "original": "Write a function to calculate the height of the given binary tree.", "mutation": "Create a function that computes the height of the specified binary tree."}
{"task_id": 927, "original": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.", "mutation": "Create a function that changes the format of a date from yyyy-mm-dd to dd-mm-yyyy."}
{"task_id": 928, "original": "Write a function to count repeated items of a tuple.", "mutation": "Create a function that counts the occurrences of duplicate items in a tuple."}
{"task_id": 929, "original": "Write a function that matches a string that has an a followed by zero or more b's by using regex.", "mutation": "Create a function using regex to find a string containing an 'a' followed by any number of 'b's."}
{"task_id": 930, "original": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.", "mutation": "Create a function that computes the sum of the series 1 cubed plus 2 cubed plus 3 cubed, and so on, up to n cubed."}
{"task_id": 931, "original": "Write a function to remove duplicate words from a given list of strings.", "mutation": "Create a function that eliminates repeated words from a provided list of strings."}
{"task_id": 932, "original": "Write a function to convert camel case string to snake case string by using regex.", "mutation": "Create a function that uses regex to transform a camel case string into a snake case string."}
{"task_id": 933, "original": "Write a function to find the nth delannoy number.", "mutation": "Create a function that calculates the nth Delannoy number."}
{"task_id": 934, "original": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.", "mutation": "Create a function that computes the sum of the series of squares from 1 to n."}
{"task_id": 935, "original": "Write a function to re-arrange the given tuples based on the given ordered list.", "mutation": "Create a function that organizes the provided tuples according to the specified list order."}
{"task_id": 936, "original": "Write a function to count the most common character in a given string.", "mutation": "Create a function that calculates the frequency of the most common character in a provided string."}
{"task_id": 937, "original": "Write a function to find three closest elements from three sorted arrays.", "mutation": "Create a function that identifies the three elements that are closest in value from three arrays that are already sorted."}
{"task_id": 938, "original": "Write a function to sort a list of dictionaries using lambda function.", "mutation": "Create a lambda function to sort a list of dictionaries."}
{"task_id": 939, "original": "Write a function to sort the given array by using heap sort.", "mutation": "Create a function that utilizes heap sort to arrange the provided array."}
{"task_id": 940, "original": "Write a function to count the elements in a list until an element is a tuple.", "mutation": "Create a function that counts the elements in a list until a tuple is encountered."}
{"task_id": 941, "original": "Write a function to check if any list element is present in the given list.", "mutation": "Create a function that verifies if any element in a list is included in the provided list."}
{"task_id": 942, "original": "Write a function to combine two given sorted lists using heapq module.", "mutation": "Create a function that merges two sorted lists using the heapq module."}
{"task_id": 943, "original": "Write a function to separate and print the numbers and their position of a given string.", "mutation": "Create a function that extracts and displays the numbers along with their positions from a provided string."}
{"task_id": 944, "original": "Write a function to convert the given tuples into set.", "mutation": "Create a function that transforms the provided tuples into a set."}
{"task_id": 945, "original": "Write a function to find the most common elements and their counts of a specified text.", "mutation": "Create a function that identifies the most frequently occurring elements and their frequencies in a given text."}
{"task_id": 946, "original": "Write a python function to find the length of the shortest word.", "mutation": "Create a Python function that determines the length of the shortest word."}
{"task_id": 947, "original": "Write a function to get an item of a tuple.", "mutation": "Create a function that retrieves an element from a tuple."}
{"task_id": 948, "original": "Write a function to sort the given tuple list basis the total digits in tuple.", "mutation": "Create a function that sorts the list of tuples based on the total number of digits in each tuple."}
{"task_id": 949, "original": "Write a function to display sign of the chinese zodiac for given year.", "mutation": "Create a function that shows the sign of the Chinese zodiac based on a specified year."}
{"task_id": 950, "original": "Write a function to find the maximum of similar indices in two lists of tuples.", "mutation": "Create a function that identifies the highest value among corresponding indices in two lists of tuples."}
{"task_id": 951, "original": "Write a function to compute the value of ncr mod p.", "mutation": "Create a function that calculates the value of ncr modulo p."}
{"task_id": 952, "original": "Write a python function to find the minimun number of subsets with distinct elements.", "mutation": "Create a Python function that determines the smallest number of subsets containing unique elements."}
{"task_id": 953, "original": "Write a function that gives profit amount if the given amount has profit else return none.", "mutation": "Create a function that calculates the profit amount if there is profit for the given amount; otherwise, return \"none\"."}
{"task_id": 954, "original": "Write a function to find out, if the given number is abundant.", "mutation": "Create a function that determines whether a given number is abundant."}
{"task_id": 955, "original": "Write a function to split the given string at uppercase letters by using regex.", "mutation": "Create a function that uses regex to split the provided string at uppercase letters."}
{"task_id": 956, "original": "Write a python function to get the position of rightmost set bit.", "mutation": "Create a Python function that retrieves the position of the rightmost set bit."}
{"task_id": 957, "original": "Write a function to convert an integer into a roman numeral.", "mutation": "Create a function that transforms a whole number into its corresponding Roman numeral."}
{"task_id": 958, "original": "Write a python function to find the average of a list.", "mutation": "Create a Python function that calculates the average of a given list."}
{"task_id": 959, "original": "Write a function to solve tiling problem.", "mutation": "Create a function that can solve the tiling problem."}
{"task_id": 960, "original": "Write a function to convert a roman numeral to an integer.", "mutation": "Create a function that can transform a Roman numeral into an integer."}
{"task_id": 961, "original": "Write a python function to find the sum of all even natural numbers within the range l and r.", "mutation": "Create a Python function that calculates the total of all even natural numbers between the given range l and r."}
{"task_id": 962, "original": "Write a function to calculate the discriminant value.", "mutation": "Create a function that computes the discriminant."}
{"task_id": 963, "original": "Write a python function to check whether the length of the word is even or not.", "mutation": "Create a Python function that determines if a word has an even length."}
{"task_id": 964, "original": "Write a function to convert camel case string to snake case string.", "mutation": "Create a function that transforms a camel case string into a snake case string."}
{"task_id": 965, "original": "Write a function to remove an empty tuple from a list of tuples.", "mutation": "Create a function that eliminates any empty tuples from a list containing tuples."}
{"task_id": 966, "original": "Write a python function to accept the strings which contains all vowels.", "mutation": "Create a Python function that takes in strings containing all vowels."}
{"task_id": 967, "original": "Write a python function to find maximum possible value for the given periodic function.", "mutation": "Create a Python function that determines the highest achievable value for the specified periodic function."}
{"task_id": 968, "original": "Write a function to join the tuples if they have similar initial elements.", "mutation": "Create a function that combines tuples with matching first elements."}
{"task_id": 969, "original": "Write a function to find minimum of two numbers.", "mutation": "Create a function that determines the smaller of two numbers."}
{"task_id": 970, "original": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.", "mutation": "Create a function that determines the highest number of segments with lengths a, b, and c that can be created from n."}
{"task_id": 971, "original": "Write a function to concatenate the given two tuples to a nested tuple.", "mutation": "Create a function that combines the two given tuples into a nested tuple."}
{"task_id": 972, "original": "Write a python function to left rotate the string.", "mutation": "Create a Python function that rotates the string to the left."}
{"task_id": 973, "original": "Write a function to find the minimum total path sum in the given triangle.", "mutation": "Create a function that calculates the smallest possible sum of paths in the provided triangle."}
