{"task_id": 0, "original": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].", "mutation": "Create a function to determine the lowest cost route to arrive at (m, n) from (0, 0) for the specified cost matrix cost[][] and a location (m, n) in cost[][]."}
{"task_id": 1, "original": "Write a function to find the similar elements from the given two tuple lists.", "mutation": "Create a function to identify the matching elements from the provided two tuple lists."}
{"task_id": 2, "original": "Write a python function to identify non-prime numbers.", "mutation": "Create a python function to detect non-prime numbers."}
{"task_id": 3, "original": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.", "mutation": "Create a function to determine the highest integers from a provided list of numbers using the heap queue algorithm."}
{"task_id": 4, "original": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.", "mutation": "Create a function to determine the quantity of methods to populate it with 2 x 1 dominoes for the specified 3 x n board."}
{"task_id": 5, "original": "Write a python function to check whether the two numbers differ at one bit position only or not.", "mutation": "Compose a python function to verify if the two numbers vary at one bit position only or not."}
{"task_id": 6, "original": "Write a function to find all words which are at least 4 characters long in a string by using regex.", "mutation": "Compose a function to detect all words that are a minimum of 4 characters in length in a string by utilizing regex."}
{"task_id": 7, "original": "Write a function to find squares of individual elements in a list using lambda function.", "mutation": "Create a function to calculate squares of individual elements in a list using a lambda function."}
{"task_id": 8, "original": "Write a python function to find the minimum number of rotations required to get the same string.", "mutation": "Compose a python function to determine the minimum number of rotations needed to achieve the identical string."}
{"task_id": 9, "original": "Write a function to get the n smallest items from a dataset.", "mutation": "Compose a function to retrieve the n smallest items from a dataset."}
{"task_id": 10, "original": "Write a python function to remove first and last occurrence of a given character from the string.", "mutation": "Create a python function to delete first and last occurrence of a specified character from the string."}
{"task_id": 11, "original": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "mutation": "Create a function to arrange a given matrix in ascending order based on the total of its rows."}
{"task_id": 12, "original": "Write a function to count the most common words in a dictionary.", "mutation": "Compose a function to tally the most frequent words in a dictionary."}
{"task_id": 13, "original": "Write a python function to find the volume of a triangular prism.", "mutation": "Compose a python function to determine the volume of a triangular prism."}
{"task_id": 14, "original": "Write a function to split a string at lowercase letters.", "mutation": "Compose a function to divide a string at lowercase letters."}
{"task_id": 15, "original": "Write a function to find sequences of lowercase letters joined with an underscore.", "mutation": "Compose a function to detect sequences of lowercase letters connected with an underscore."}
{"task_id": 16, "original": "Write a function to find the perimeter of a square.", "mutation": "Compose a function to determine the perimeter of a square."}
{"task_id": 17, "original": "Write a function to remove characters from the first string which are present in the second string.", "mutation": "Create a function to eliminate characters from the first string that exist in the second string."}
{"task_id": 18, "original": "Write a function to find whether a given array of integers contains any duplicate element.", "mutation": "Create a function to determine if a provided array of integers includes any duplicate elements."}
{"task_id": 19, "original": "Write a function to check if the given number is woodball or not.", "mutation": "Compose a function to verify if the provided number is woodball or not."}
{"task_id": 20, "original": "Write a function to find m number of multiples of n.", "mutation": "Create a function to determine m amount of factors of n."}
{"task_id": 21, "original": "Write a function to find the first duplicate element in a given array of integers.", "mutation": "Create a function to locate the initial duplicate element in a provided array of integers."}
{"task_id": 22, "original": "Write a python function to find the maximum sum of elements of list in a list of lists.", "mutation": "Create a python function to determine the highest total of elements in a list within a list of lists."}
{"task_id": 23, "original": "Write a function to convert the given binary number to its decimal equivalent.", "mutation": "Compose a function to transform the provided binary number to its decimal equivalent."}
{"task_id": 24, "original": "Write a python function to find the product of non-repeated elements in a given array.", "mutation": "Compose a python function to determine the product of unique elements in a provided array."}
{"task_id": 25, "original": "Write a function to check if the given tuple list has all k elements.", "mutation": "Create a function to verify if the provided tuple list contains all k elements."}
{"task_id": 26, "original": "Write a python function to remove all digits from a list of strings.", "mutation": "Create a python function to eliminate all digits from a list of strings."}
{"task_id": 27, "original": "Write a python function to find binomial co-efficient.", "mutation": "Create a python function to calculate binomial co-efficient."}
{"task_id": 28, "original": "Write a python function to find the element occurring odd number of times.", "mutation": "Create a python function to determine the element that appears an odd number of times."}
{"task_id": 29, "original": "Write a python function to count all the substrings starting and ending with same characters.", "mutation": "Create a python function to calculate all the substrings beginning and ending with identical characters."}
{"task_id": 30, "original": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.", "mutation": "Create a function to determine the top k integers that are most commonly found in lists of sorted and unique integers using the heap queue algorithm."}
{"task_id": 31, "original": "Write a python function to find the largest prime factor of a given number.", "mutation": "Compose a python function to determine the greatest prime factor of a specified number."}
{"task_id": 32, "original": "Write a python function to convert a decimal number to binary number.", "mutation": "Compose a python function to transform a decimal number to binary number."}
{"task_id": 33, "original": "Write a python function to find the missing number in a sorted array.", "mutation": "Compose a python function to detect the absent number in a sorted array."}
{"task_id": 34, "original": "Write a function to find the n-th rectangular number.", "mutation": "Compose a function to determine the n-th square number."}
{"task_id": 35, "original": "Write a python function to find the nth digit in the proper fraction of two given numbers.", "mutation": "Compose a python function to determine the nth digit in the proper fraction of two specified numbers."}
{"task_id": 36, "original": "Write a function to sort a given mixed list of integers and strings.", "mutation": "Compose a function to arrange a provided mixed list of integers and strings."}
{"task_id": 37, "original": "Write a function to find the division of first even and odd number of a given list.", "mutation": "Create a function to determine the quotient of the initial even and odd number in a provided list."}
{"task_id": 38, "original": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.", "mutation": "Compose a function to verify if the letters of a provided string can be rearranged so that two characters that are next to each other are distinct."}
{"task_id": 39, "original": "Write a function to find frequency of the elements in a given list of lists using collections module.", "mutation": "Create a function to determine the occurrence of the elements in a provided list of lists using the collections module."}
{"task_id": 40, "original": "Write a function to filter even numbers using lambda function.", "mutation": "Compose a function to sift through even numbers using lambda function."}
{"task_id": 41, "original": "Write a python function to find the sum of repeated elements in a given array.", "mutation": "Compose a python function to determine the total of duplicate elements in a provided array."}
{"task_id": 42, "original": "Write a function to find sequences of lowercase letters joined with an underscore using regex.", "mutation": "Compose a function to detect sequences of lowercase letters connected with an underscore using regex."}
{"task_id": 43, "original": "Write a function that matches a word at the beginning of a string.", "mutation": "Compose a function that identifies a word at the start of a string."}
{"task_id": 44, "original": "Write a function to find the gcd of the given array elements.", "mutation": "Create a function to determine the gcd of the provided array elements."}
{"task_id": 45, "original": "Write a python function to determine whether all the numbers are different from each other are not.", "mutation": "Create a python function to ascertain if all the numbers are distinct from each other or not."}
{"task_id": 46, "original": "Write a python function to find the last digit when factorial of a divides factorial of b.", "mutation": "Create a python function to determine the final digit when the factorial of a divides the factorial of b."}
{"task_id": 47, "original": "Write a python function to set all odd bits of a given number.", "mutation": "Create a python function to assign all odd bits of a given number."}
{"task_id": 48, "original": "Write a function to extract every first or specified element from a given two-dimensional list.", "mutation": "Compose a function to retrieve every initial or designated element from a provided two-dimensional list."}
{"task_id": 49, "original": "Write a function to find the list with minimum length using lambda function.", "mutation": "Create a function to determine the list with the shortest length using a lambda function."}
{"task_id": 50, "original": "Write a function to print check if the triangle is equilateral or not.", "mutation": "Create a function to determine if the triangle is equilateral or not."}
{"task_id": 51, "original": "Write a function to caluclate area of a parallelogram.", "mutation": "Compose a function to determine the area of a parallelogram."}
{"task_id": 52, "original": "Write a python function to check whether the first and last characters of a given string are equal or not.", "mutation": "Create a python function to verify if the initial and final characters of a provided string are identical or not."}
{"task_id": 53, "original": "Write a function to sort the given array by using counting sort.", "mutation": "Create a function to arrange the provided array using counting sort."}
{"task_id": 54, "original": "Write a function to find t-nth term of geometric series.", "mutation": "Compose a function to determine the t-nth term of geometric series."}
{"task_id": 55, "original": "Write a python function to check if a given number is one less than twice its reverse.", "mutation": "Create a python function to verify if a provided number is one less than double its reverse."}
{"task_id": 56, "original": "Write a python function to find the largest number that can be formed with the given digits.", "mutation": "Compose a python function to determine the greatest number that can be created with the provided digits."}
{"task_id": 57, "original": "Write a python function to check whether the given two integers have opposite sign or not.", "mutation": "Create a python function to verify if the provided two integers possess opposite signs or not."}
{"task_id": 58, "original": "Write a function to find the nth octagonal number.", "mutation": "Create a function to determine the nth octagonal number."}
{"task_id": 59, "original": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.", "mutation": "Create a function to determine the maximum length of the subsequence with difference between adjacent elements for the provided array."}
{"task_id": 60, "original": "Write a python function to count number of substrings with the sum of digits equal to their length.", "mutation": "Create a python function to calculate the number of substrings with the sum of digits equal to their length."}
{"task_id": 61, "original": "Write a python function to find smallest number in a list.", "mutation": "Compose a python function to determine the smallest number in a list."}
{"task_id": 62, "original": "Write a function to find the maximum difference between available pairs in the given tuple list.", "mutation": "Create a function to determine the largest difference between pairs in the provided tuple list."}
{"task_id": 63, "original": "Write a function to sort a list of tuples using lambda.", "mutation": "Compose a function to arrange a list of tuples using lambda."}
{"task_id": 64, "original": "Write a function of recursion list sum.", "mutation": "Create a function for recursively adding a list."}
{"task_id": 65, "original": "Write a python function to count positive numbers in a list.", "mutation": "Compose a python function to tally positive numbers in a list."}
{"task_id": 66, "original": "Write a function to find the number of ways to partition a set of bell numbers.", "mutation": "Compose a function to determine the quantity of methods to divide a group of bell numbers."}
{"task_id": 67, "original": "Write a python function to check whether the given array is monotonic or not.", "mutation": "Create a python function to verify if the provided array is monotonic or not."}
{"task_id": 68, "original": "Write a function to check whether a list contains the given sublist or not.", "mutation": "Compose a function to verify if a list includes the specified sublist or not."}
{"task_id": 69, "original": "Write a function to find whether all the given tuples have equal length or not.", "mutation": "Compose a function to determine if all the provided tuples possess identical lengths or not."}
{"task_id": 70, "original": "Write a function to sort a list of elements using comb sort.", "mutation": "Create a function to arrange a list of elements using comb sort."}
{"task_id": 71, "original": "Write a python function to check whether the given number can be represented as difference of two squares or not.", "mutation": "Compose a python function to verify if the provided number can be expressed as the subtraction of two squares or not."}
{"task_id": 72, "original": "Write a function to split the given string with multiple delimiters by using regex.", "mutation": "Create a function to separate the provided string with various delimiters using regex."}
{"task_id": 73, "original": "Write a function to check whether it follows the sequence given in the patterns array.", "mutation": "Create a function to verify if it adheres to the sequence provided in the patterns array."}
{"task_id": 74, "original": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.", "mutation": "Create a function to identify tuples that contain elements divisible by k from the provided list of tuples."}
{"task_id": 75, "original": "Write a python function to count the number of squares in a rectangle.", "mutation": "Compose a python function to calculate the quantity of squares in a rectangle."}
{"task_id": 76, "original": "Write a python function to find the difference between sum of even and odd digits.", "mutation": "Compose a python function to determine the disparity between the total of even and odd digits."}
{"task_id": 77, "original": "Write a python function to find number of integers with odd number of set bits.", "mutation": "Create a python function to determine the count of integers with an odd number of set bits."}
{"task_id": 78, "original": "Write a python function to check whether the length of the word is odd or not.", "mutation": "Compose a python function to verify if the length of the word is odd or not."}
{"task_id": 79, "original": "Write a function to find the nth tetrahedral number.", "mutation": "Compose a function to determine the nth tetrahedral number."}
{"task_id": 80, "original": "Write a function to zip the two given tuples.", "mutation": "Create a function to combine the two given tuples."}
{"task_id": 81, "original": "Write a function to find the volume of a sphere.", "mutation": "Compose a function to determine the volume of a sphere."}
{"task_id": 82, "original": "Write a python function to find the character made by adding all the characters of the given string.", "mutation": "Compose a python function to determine the character created by combining all the characters of the provided string."}
{"task_id": 83, "original": "Write a function to find the n-th number in newman conway sequence.", "mutation": "Create a function to determine the n-th number in the newman conway sequence."}
{"task_id": 84, "original": "Write a function to find the surface area of a sphere.", "mutation": "Compose a function to determine the surface area of a sphere."}
{"task_id": 85, "original": "Write a function to find nth centered hexagonal number.", "mutation": "Compose a function to determine the nth centered hexagonal number."}
{"task_id": 86, "original": "Write a function to merge three dictionaries into a single expression.", "mutation": "Compose a function to combine three dictionaries into a single expression."}
{"task_id": 87, "original": "Write a function to get the frequency of the elements in a list.", "mutation": "Compose a function to obtain the frequency of the elements in a list."}
{"task_id": 88, "original": "Write a function to find the closest smaller number than n.", "mutation": "Compose a function to determine the nearest lesser number to n."}
{"task_id": 89, "original": "Write a python function to find the length of the longest word.", "mutation": "Compose a python function to determine the length of the longest word."}
{"task_id": 90, "original": "Write a function to check if a substring is present in a given list of string values.", "mutation": "Compose a function to verify if a substring exists in a provided list of string values."}
{"task_id": 91, "original": "Write a function to check whether the given number is undulating or not.", "mutation": "Compose a function to verify if the provided number is undulating or not."}
{"task_id": 92, "original": "Write a function to calculate the value of 'a' to the power 'b'.", "mutation": "Compose a function to determine the result of raising 'a' to the exponent 'b'."}
{"task_id": 93, "original": "Write a function to extract the index minimum value record from the given tuples.", "mutation": "Compose a function to retrieve the index minimum value record from the provided tuples."}
{"task_id": 94, "original": "Write a python function to find the minimum length of sublist.", "mutation": "Compose a python function to determine the smallest length of sublist."}
{"task_id": 95, "original": "Write a python function to find the number of divisors of a given integer.", "mutation": "Create a python function to determine the quantity of divisors for a specified integer."}
{"task_id": 96, "original": "Write a function to find frequency count of list of lists.", "mutation": "Compose a function to determine the frequency count of a list of lists."}
{"task_id": 97, "original": "Write a function to multiply all the numbers in a list and divide with the length of the list.", "mutation": "Create a function to calculate the product of all the numbers in a list and then divide by the number of elements in the list."}
{"task_id": 98, "original": "Write a function to convert the given decimal number to its binary equivalent.", "mutation": "Compose a function to transform the provided decimal number into its binary equivalent."}
{"task_id": 99, "original": "Write a function to find the next smallest palindrome of a specified number.", "mutation": "Compose a function to determine the subsequent smallest palindrome of a specified number."}
{"task_id": 100, "original": "Write a function to find the kth element in the given array.", "mutation": "Create a function to locate the kth element in the provided array."}
{"task_id": 101, "original": "Write a function to convert snake case string to camel case string.", "mutation": "Create a function to transform snake case string to camel case string."}
{"task_id": 102, "original": "Write a function to find eulerian number a(n, m).", "mutation": "Create a function to determine the eulerian number a(n, m)."}
{"task_id": 103, "original": "Write a function to sort each sublist of strings in a given list of lists using lambda function.", "mutation": "Create a function to arrange each sublist of strings in a provided list of lists using a lambda function."}
{"task_id": 104, "original": "Write a python function to count true booleans in the given list.", "mutation": "Compose a python function to tally true booleans in the provided list."}
{"task_id": 105, "original": "Write a function to add the given list to the given tuples.", "mutation": "Compose a function to append the provided list to the provided tuples."}
{"task_id": 106, "original": "Write a python function to count hexadecimal numbers for a given range.", "mutation": "Create a python function to calculate hexadecimal numbers for a specified range."}
{"task_id": 107, "original": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.", "mutation": "Compose a function to combine multiple sorted inputs into a single sorted iterator using the heap queue algorithm."}
{"task_id": 108, "original": "Write a python function to find the count of rotations of a binary string with odd value.", "mutation": "Create a python function to determine the number of rotations of a binary string with an odd value."}
{"task_id": 109, "original": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.", "mutation": "Compose a function to identify the ranges that are absent from the provided list using the specified start range and end range values."}
{"task_id": 110, "original": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item", "mutation": "Create a function to identify shared elements in provided nested lists."}
{"task_id": 111, "original": "Write a python function to find the perimeter of a cylinder.", "mutation": "Compose a python function to determine the perimeter of a cylinder."}
{"task_id": 112, "original": "Write a function to check if a string represents an integer or not.", "mutation": "Compose a function to verify if a string symbolizes an integer or not."}
{"task_id": 113, "original": "Write a function to assign frequency to each tuple in the given tuple list.", "mutation": "Create a function to allocate frequency to each tuple in the provided tuple list."}
{"task_id": 114, "original": "Write a function to check whether all dictionaries in a list are empty or not.", "mutation": "Create a function to verify if all dictionaries in a list are empty or not."}
{"task_id": 115, "original": "Write a function to convert a given tuple of positive integers into an integer.", "mutation": "Compose a function to transform a provided tuple of positive integers into an integer."}
{"task_id": 116, "original": "Write a function to convert all possible convertible elements in the list to float.", "mutation": "Create a function to transform all potential convertible elements in the list to float."}
{"task_id": 117, "original": "Write a function to convert a string to a list.", "mutation": "Compose a function to transform a string into a list."}
{"task_id": 118, "original": "Write a python function to find the element that appears only once in a sorted array.", "mutation": "Compose a python function to detect the element that occurs singularly in a sorted array."}
{"task_id": 119, "original": "Write a function to find the maximum product from the pairs of tuples within a given list.", "mutation": "Create a function to determine the highest product from the pairs of tuples in a specified list."}
{"task_id": 120, "original": "Write a function to find the triplet with sum of the given array", "mutation": "Create a function to determine the triplet with sum of the provided array"}
{"task_id": 121, "original": "Write a function to find n\u2019th smart number.", "mutation": "Create a function to determine the n\u2019th intelligent number."}
{"task_id": 122, "original": "Write a function to sum all amicable numbers from 1 to a specified number.", "mutation": "Create a function to calculate the total of all amicable numbers from 1 to a specified number."}
{"task_id": 123, "original": "Write a function to get the angle of a complex number.", "mutation": "Create a function to obtain the angle of a complex number."}
{"task_id": 124, "original": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.", "mutation": "Create a function to determine the maximum difference between the count of 0s and count of 1s in any sub-string of the provided binary string."}
{"task_id": 125, "original": "Write a python function to find the sum of common divisors of two given numbers.", "mutation": "Create a python function to calculate the total of shared divisors of two specified numbers."}
{"task_id": 126, "original": "Write a function to multiply two integers without using the * operator in python.", "mutation": "Create a function to calculate the product of two integers without using the * operator in python."}
{"task_id": 127, "original": "Write a function to shortlist words that are longer than n from a given list of words.", "mutation": "Compose a function to filter words that exceed a length of n from a provided list of words."}
{"task_id": 128, "original": "Write a function to calculate magic square.", "mutation": "Create a function to compute magic square."}
{"task_id": 129, "original": "Write a function to find the item with maximum frequency in a given list.", "mutation": "Compose a function to determine the item with highest frequency in a provided list."}
{"task_id": 130, "original": "Write a python function to reverse only the vowels of a given string.", "mutation": "Compose a python function to invert only the vowels of a provided string."}
{"task_id": 131, "original": "Write a function to convert tuple to a string.", "mutation": "Compose a function to transform tuple to a string."}
{"task_id": 132, "original": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.", "mutation": "Create a function to determine the total of the negative numbers in a provided list of numbers using a lambda function."}
{"task_id": 133, "original": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.", "mutation": "Create a python function to verify if the final element of the provided array is even or odd after executing an operation p times."}
{"task_id": 134, "original": "Write a function to find the nth hexagonal number.", "mutation": "Compose a function to determine the nth hexagonal number."}
{"task_id": 135, "original": "Write a function to calculate electricity bill.", "mutation": "Compose a function to determine electricity bill."}
{"task_id": 136, "original": "Write a function to find the ration of zeroes in an array of integers.", "mutation": "Compose a function to determine the proportion of zeroes in an array of integers."}
{"task_id": 137, "original": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.", "mutation": "Create a python function to verify if the provided number is able to be expressed as the sum of non-zero powers of 2 or not."}
{"task_id": 138, "original": "Write a function to find the circumference of a circle.", "mutation": "Compose a function to determine the circumference of a circle."}
{"task_id": 139, "original": "Write a function to extract elements that occur singly in the given tuple list.", "mutation": "Compose a function to retrieve elements that appear individually in the provided tuple list."}
{"task_id": 140, "original": "Write a function to sort a list of elements using pancake sort.", "mutation": "Compose a function to arrange a list of elements using pancake sort."}
{"task_id": 141, "original": "Write a function to count the same pair in three given lists.", "mutation": "Compose a function to tally the identical pair in three provided lists."}
{"task_id": 142, "original": "Write a function to find number of lists present in the given tuple.", "mutation": "Create a function to determine the quantity of lists within the provided tuple."}
{"task_id": 143, "original": "Write a python function to find the sum of absolute differences in all pairs of the given array.", "mutation": "Create a python function to calculate the total of absolute variances in all pairs of the provided array."}
{"task_id": 144, "original": "Write a python function to find the maximum difference between any two elements in a given array.", "mutation": "Create a python function to determine the largest difference between any two elements in a provided array."}
{"task_id": 145, "original": "Write a function to find the ascii value of total characters in a string.", "mutation": "Compose a function to determine the ascii value of all characters in a string."}
{"task_id": 146, "original": "Write a function to find the maximum total path sum in the given triangle.", "mutation": "Compose a function to determine the highest overall path sum in the provided triangle."}
{"task_id": 147, "original": "Write a function to divide a number into two parts such that the sum of digits is maximum.", "mutation": "Create a function to split a number into two parts such that the total of digits is highest."}
{"task_id": 148, "original": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.", "mutation": "Compose a function to determine the longest subsequence where the gap between adjacent elements is one for the provided array."}
{"task_id": 149, "original": "Write a python function to find whether the given number is present in the infinite sequence or not.", "mutation": "Compose a python function to determine if the provided number exists in the endless sequence or not."}
{"task_id": 150, "original": "Write a python function to check whether the given number is co-prime or not.", "mutation": "Create a python function to verify if the provided number is co-prime or not."}
{"task_id": 151, "original": "Write a function to sort the given array by using merge sort.", "mutation": "Compose a function to arrange the provided array by employing merge sort."}
{"task_id": 152, "original": "Write a function to find the vertex of a parabola.", "mutation": "Compose a function to determine the vertex of a parabola."}
{"task_id": 153, "original": "Write a function to extract every specified element from a given two dimensional list.", "mutation": "Compose a function to retrieve every specified element from a provided two dimensional list."}
{"task_id": 154, "original": "Write a python function to toggle all even bits of a given number.", "mutation": "Create a python function to switch all even bits of a given number."}
{"task_id": 155, "original": "Write a function to convert a tuple of string values to a tuple of integer values.", "mutation": "Create a function to transform a tuple of string values into a tuple of integer values."}
{"task_id": 156, "original": "Write a function to reflect the run-length encoding from a list.", "mutation": "Create a function to mirror the run-length encoding from a list."}
{"task_id": 157, "original": "Write a python function to find k number of operations required to make all elements equal.", "mutation": "Compose a python function to determine k number of operations needed to achieve uniformity among all elements."}
{"task_id": 158, "original": "Write a function to print the season for the given month and day.", "mutation": "Compose a function to display the season for the provided month and day."}
{"task_id": 159, "original": "Write a function to find x and y that satisfies ax + by = n.", "mutation": "Create a function to determine x and y that fulfills ax + by = n."}
{"task_id": 160, "original": "Write a function to remove all elements from a given list present in another list.", "mutation": "Create a function to delete all elements from a specified list found in another list."}
{"task_id": 161, "original": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).", "mutation": "Create a function to determine the total of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0)."}
{"task_id": 162, "original": "Write a function to calculate the area of a regular polygon.", "mutation": "Compose a function to determine the area of a regular polygon."}
{"task_id": 163, "original": "Write a python function to check whether the sum of divisors are same or not.", "mutation": "Create a python function to verify if the total of divisors is equal or not."}
{"task_id": 164, "original": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.", "mutation": "Compose a python function to tally characters at identical position in a provided string (lower and uppercase characters) as in english alphabet."}
{"task_id": 165, "original": "Write a python function to count the pairs with xor as an even number.", "mutation": "Create a python function to calculate the pairs with xor as an even number."}
{"task_id": 166, "original": "Write a python function to find smallest power of 2 greater than or equal to n.", "mutation": "Create a python function to determine the smallest power of 2 that is greater than or equal to n."}
{"task_id": 167, "original": "Write a python function to find the frequency of a number in a given array.", "mutation": "Create a python function to determine the occurrence of a number in a provided array."}
{"task_id": 168, "original": "Write a function to calculate the nth pell number.", "mutation": "Compose a function to determine the nth pell number."}
{"task_id": 169, "original": "Write a function to find sum of the numbers in a list between the indices of a specified range.", "mutation": "Compose a function to determine the total of the numbers in a list within the boundaries of a specified range."}
{"task_id": 170, "original": "Write a function to find the perimeter of a pentagon.", "mutation": "Compose a function to determine the perimeter of a pentagon."}
{"task_id": 171, "original": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item", "mutation": "Create a function to locate the presence of characters 'std' in the provided string."}
{"task_id": 172, "original": "Write a function to remove everything except alphanumeric characters from a string.", "mutation": "Create a function to eliminate all non-alphanumeric characters from a string."}
{"task_id": 173, "original": "Write a function to group a sequence of key-value pairs into a dictionary of lists.", "mutation": "Compose a function to categorize a sequence of key-value pairs into a dictionary of lists."}
{"task_id": 174, "original": "Write a function to verify validity of a string of parentheses.", "mutation": "Compose a function to confirm the correctness of a string of parentheses."}
{"task_id": 175, "original": "Write a function to find the perimeter of a triangle.", "mutation": "Compose a function to determine the perimeter of a triangle."}
{"task_id": 176, "original": "Write a python function to find two distinct numbers such that their lcm lies within the given range.", "mutation": "Compose a python function to discover two unique numbers such that their lcm falls within the specified range."}
{"task_id": 177, "original": "Write a function to search some literals strings in a string.", "mutation": "Compose a function to locate certain literal strings within a string."}
{"task_id": 178, "original": "Write a function to find if the given number is a keith number or not.", "mutation": "Create a function to determine if the provided number is a keith number or not."}
{"task_id": 179, "original": "Write a function to calculate distance between two points using latitude and longitude.", "mutation": "Compose a function to determine distance between two points using latitude and longitude."}
{"task_id": 180, "original": "Write a function to find the longest common prefix in the given set of strings.", "mutation": "Compose a function to determine the longest common prefix in the provided set of strings."}
{"task_id": 181, "original": "Write a function to find uppercase, lowercase, special character and numeric values using regex.", "mutation": "Create a function to locate uppercase, lowercase, special character, and numeric values using regex."}
{"task_id": 182, "original": "Write a function to count all the distinct pairs having a difference of k in any array.", "mutation": "Create a function to calculate all the unique pairs with a difference of k in any array."}
{"task_id": 183, "original": "Write a function to find all the values in a list that are greater than a specified number.", "mutation": "Create a function to identify all the values in a list that exceed a specified number."}
{"task_id": 184, "original": "Write a function to find the focus of a parabola.", "mutation": "Compose a function to determine the focus of a parabola."}
{"task_id": 185, "original": "Write a function to search some literals strings in a string by using regex.", "mutation": "Compose a function to locate certain literal strings within a string using regex."}
{"task_id": 186, "original": "Write a function to find the longest common subsequence for the given two sequences.", "mutation": "Compose a function to determine the longest common subsequence for the provided two sequences."}
{"task_id": 187, "original": "Write a python function to check whether the given number can be represented by product of two squares or not.", "mutation": "Compose a python function to verify if the provided number is capable of being expressed as the product of two squares or not."}
{"task_id": 188, "original": "Write a python function to find the first missing positive number.", "mutation": "Create a python function to locate the initial absent positive number."}
{"task_id": 189, "original": "Write a python function to count the number of integral co-ordinates that lie inside a square.", "mutation": "Compose a python function to calculate the quantity of whole co-ordinates that are situated within a square."}
{"task_id": 190, "original": "Write a function to check whether the given month name contains 30 days or not.", "mutation": "Compose a function to verify if the provided month name includes 30 days or not."}
{"task_id": 191, "original": "Write a python function to check whether a string has atleast one letter and one number.", "mutation": "Create a python function to verify if a string contains at least one letter and one number."}
{"task_id": 192, "original": "Write a function to remove the duplicates from the given tuple.", "mutation": "Create a function to eliminate the duplicates from the provided tuple."}
{"task_id": 193, "original": "Write a python function to convert octal number to decimal number.", "mutation": "Create a python function to transform octal number to decimal number."}
{"task_id": 194, "original": "Write a python function to find the first position of an element in a sorted array.", "mutation": "Compose a python function to determine the initial location of an element in a sorted array."}
{"task_id": 195, "original": "Write a function to remove all the tuples with length k.", "mutation": "Create a function to eliminate all the tuples with length k."}
{"task_id": 196, "original": "Write a function to perform the exponentiation of the given two tuples.", "mutation": "Create a function to execute the exponentiation of the provided two tuples."}
{"task_id": 197, "original": "Write a function to find the largest triangle that can be inscribed in an ellipse.", "mutation": "Compose a function to determine the largest triangle that can be enclosed in an ellipse."}
{"task_id": 198, "original": "Write a python function to find highest power of 2 less than or equal to given number.", "mutation": "Create a python function to determine the highest power of 2 that is less than or equal to a given number."}
{"task_id": 199, "original": "Write a function to find all index positions of the maximum values in a given list.", "mutation": "Compose a function to locate all index positions of the maximum values in a provided list."}
{"task_id": 200, "original": "Write a python function to check whether the elements in a list are same or not.", "mutation": "Compose a python function to verify if the elements in a list are identical or not."}
{"task_id": 201, "original": "Write a function to remove even characters in a string.", "mutation": "Compose a function to eliminate even characters in a string."}
{"task_id": 202, "original": "Write a python function to find the hamming distance between given two integers.", "mutation": "Compose a python function to determine the hamming distance between two given integers."}
{"task_id": 203, "original": "Write a python function to count the occurrence of a given character in a string.", "mutation": "Compose a python function to calculate the frequency of a specified character in a string."}
{"task_id": 204, "original": "Write a function to find the inversions of tuple elements in the given tuple list.", "mutation": "Create a function to determine the inversions of tuple elements in the provided tuple list."}
{"task_id": 205, "original": "Write a function to perform the adjacent element concatenation in the given tuples.", "mutation": "Compose a function to execute the neighboring element merging in the provided tuples."}
{"task_id": 206, "original": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.", "mutation": "Create a function to calculate the longest recurring subsequences in such a way that the two subsequences do not contain identical characters in the same positions."}
{"task_id": 207, "original": "Write a function to check the given decimal with a precision of 2 by using regex.", "mutation": "Create a function to verify the provided decimal with a precision of 2 using regex."}
{"task_id": 208, "original": "Write a function to delete the smallest element from the given heap and then insert a new item.", "mutation": "Create a function to remove the smallest element from the provided heap and then add a new item."}
{"task_id": 209, "original": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.", "mutation": "Create a function to verify that the provided string consists solely of a specific group of characters (in this instance a-z, A-Z, and 0-9) using regex."}
{"task_id": 210, "original": "Write a python function to count numbers whose oth and nth bits are set.", "mutation": "Create a python function to calculate numbers whose oth and nth bits are enabled."}
{"task_id": 211, "original": "Write a python function to find the sum of fourth power of n natural numbers.", "mutation": "Create a python function to calculate the total of fourth power of n natural numbers."}
{"task_id": 212, "original": "Write a function to perform the concatenation of two string tuples.", "mutation": "Compose a function to execute the merging of two string tuples."}
{"task_id": 213, "original": "Write a function to convert radians to degrees.", "mutation": "Create a function to transform radians to degrees."}
{"task_id": 214, "original": "Write a function to decode a run-length encoded given list.", "mutation": "Compose a function to decipher a run-length encoded provided list."}
{"task_id": 215, "original": "Write a function to check if a nested list is a subset of another nested list.", "mutation": "Create a function to verify if a nested list is a subset of another nested list."}
{"task_id": 216, "original": "Write a python function to find the first repeated character in a given string.", "mutation": "Compose a python function to detect the initial duplicated character in a provided string."}
{"task_id": 217, "original": "Write a python function to find the minimum operations required to make two numbers equal.", "mutation": "Compose a python function to determine the minimum operations needed to achieve equality between two numbers."}
{"task_id": 218, "original": "Write a function to extract maximum and minimum k elements in the given tuple.", "mutation": "Create a function to retrieve the highest and lowest k elements in the provided tuple."}
{"task_id": 219, "original": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.", "mutation": "Create a function to substitute maximum n instances of spaces, commas, or dots with a colon."}
{"task_id": 220, "original": "Write a python function to find the first even number in a given list of numbers.", "mutation": "Compose a python function to locate the initial even number in a provided list of numbers."}
{"task_id": 221, "original": "Write a function to check if all the elements in tuple have same data type or not.", "mutation": "Create a function to verify if all the elements in tuple possess the same data type or not."}
{"task_id": 222, "original": "Write a function to check for majority element in the given sorted array.", "mutation": "Create a function to verify the presence of a majority element in the provided sorted array."}
{"task_id": 223, "original": "Write a python function to count set bits of a given number.", "mutation": "Create a python function to calculate set bits of a provided number."}
{"task_id": 224, "original": "Write a python function to find the minimum element in a sorted and rotated array.", "mutation": "Create a python function to determine the smallest element in a sorted and rotated array."}
{"task_id": 225, "original": "Write a python function to remove the characters which have odd index values of a given string.", "mutation": "Create a python function to eliminate the characters with odd index values of a provided string."}
{"task_id": 226, "original": "Write a function to find minimum of three numbers.", "mutation": "Create a function to determine the minimum of three numbers."}
{"task_id": 227, "original": "Write a python function to check whether all the bits are unset in the given range or not.", "mutation": "Create a python function to verify if all the bits are clear in the specified range or not."}
{"task_id": 228, "original": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.", "mutation": "Create a function to rearrange the elements of the provided array so that all negative elements precede positive ones."}
{"task_id": 229, "original": "Write a function to replace blank spaces with any character in a string.", "mutation": "Create a function to substitute blank spaces with any character in a string."}
{"task_id": 230, "original": "Write a function to find the maximum sum in the given right triangle of numbers.", "mutation": "Compose a function to determine the highest total in the provided right triangle of numbers."}
{"task_id": 231, "original": "Write a function to get the n largest items from a dataset.", "mutation": "Compose a function to retrieve the n largest items from a dataset."}
{"task_id": 232, "original": "Write a function to find the lateral surface area of a cylinder.", "mutation": "Compose a function to determine the lateral surface area of a cylinder."}
{"task_id": 233, "original": "Write a function to find the volume of a cube.", "mutation": "Compose a function to determine the volume of a cube."}
{"task_id": 234, "original": "Write a python function to set all even bits of a given number.", "mutation": "Create a python function to assign all even bits of a given number."}
{"task_id": 235, "original": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.", "mutation": "Create a python function to determine the maximum number of equilateral triangles that can be constructed within a specified equilateral triangle."}
{"task_id": 236, "original": "Write a function to check the occurrences of records which occur similar times in the given tuples.", "mutation": "Create a function to verify the instances of records that happen at the same time in the provided tuples."}
{"task_id": 237, "original": "Write a python function to count number of non-empty substrings of a given string.", "mutation": "Create a python function to calculate the quantity of non-empty substrings of a provided string."}
{"task_id": 238, "original": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.", "mutation": "Create a function to determine the quantity of potential sequences of length n where each subsequent element is greater than or equal to double the previous element but less than or equal to m."}
{"task_id": 239, "original": "Write a function to replace the last element of the list with another list.", "mutation": "Compose a function to substitute the final element of the list with a different list."}
{"task_id": 240, "original": "Write a function to generate a 3d array having each element as '*'.", "mutation": "Create a function to produce a 3d array with each element as '*'."}
{"task_id": 241, "original": "Write a function to count total characters in a string.", "mutation": "Compose a function to calculate the total characters in a string."}
{"task_id": 242, "original": "Write a function to sort the given list based on the occurrence of first element of tuples.", "mutation": "Create a function to arrange the provided list according to the frequency of the first element of tuples."}
{"task_id": 243, "original": "Write a python function to find the next perfect square greater than a given number.", "mutation": "Compose a python function to determine the subsequent perfect square larger than a specified number."}
{"task_id": 244, "original": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.", "mutation": "Create a function to determine the highest total of a bi-tonic sub-sequence for the provided array."}
{"task_id": 245, "original": "Write a function for computing square roots using the babylonian method.", "mutation": "Compose a function for calculating square roots using the Babylonian method."}
{"task_id": 246, "original": "Write a function to find the longest palindromic subsequence in the given string.", "mutation": "Compose a function to determine the longest palindromic subsequence in the provided string."}
{"task_id": 247, "original": "Write a function to calculate the harmonic sum of n-1.", "mutation": "Compose a function to determine the harmonic sum of n-1."}
{"task_id": 248, "original": "Write a function to find the intersection of two arrays using lambda function.", "mutation": "Create a function to determine the intersection of two arrays using a lambda function."}
{"task_id": 249, "original": "Write a python function to count the occcurences of an element in a tuple.", "mutation": "Compose a python function to tally the instances of an element in a tuple."}
{"task_id": 250, "original": "Write a function to insert an element before each element of a list.", "mutation": "Create a function to add an element before each element of a list."}
{"task_id": 251, "original": "Write a python function to convert complex numbers to polar coordinates.", "mutation": "Compose a python function to transform complex numbers into polar coordinates."}
{"task_id": 252, "original": "Write a python function to count integers from a given list.", "mutation": "Compose a python function to tally integers from a provided list."}
{"task_id": 253, "original": "Write a function to find all words starting with 'a' or 'e' in a given string.", "mutation": "Compose a function to locate all words beginning with 'a' or 'e' in a provided string."}
{"task_id": 254, "original": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.", "mutation": "Create a function to select a specified number of colors from three different colors and produce all the combinations with repetitions."}
{"task_id": 255, "original": "Write a python function to count the number of prime numbers less than a given non-negative number.", "mutation": "Compose a python function to calculate the quantity of prime numbers below a specified non-negative number."}
{"task_id": 256, "original": "Write a function to swap two numbers.", "mutation": "Compose a function to exchange two numbers."}
{"task_id": 257, "original": "Write a function to find number of odd elements in the given list using lambda function.", "mutation": "Create a function to determine the quantity of odd elements in the provided list using a lambda function."}
{"task_id": 258, "original": "Write a function to maximize the given two tuples.", "mutation": "Create a function to optimize the provided two tuples."}
{"task_id": 259, "original": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.", "mutation": "Create a function to locate the nth newman\u2013shanks\u2013williams prime number."}
{"task_id": 260, "original": "Write a function to perform mathematical division operation across the given tuples.", "mutation": "Compose a function to execute mathematical division operation across the provided tuples."}
{"task_id": 261, "original": "Write a function to split a given list into two parts where the length of the first part of the list is given.", "mutation": "Create a function to divide a given list into two parts where the length of the first part of the list is specified."}
{"task_id": 262, "original": "Write a function to merge two dictionaries.", "mutation": "Compose a function to combine two dictionaries."}
{"task_id": 263, "original": "Write a function to calculate a dog's age in dog's years.", "mutation": "Compose a function to determine a dog's age in dog's years."}
{"task_id": 264, "original": "Write a function to split a list for every nth element.", "mutation": "Create a function to divide a list for every nth element."}
{"task_id": 265, "original": "Write a function to find the lateral surface area of a cube.", "mutation": "Compose a function to determine the lateral surface area of a cube."}
{"task_id": 266, "original": "Write a python function to find the sum of squares of first n odd natural numbers.", "mutation": "Create a python function to calculate the total of squares of initial n odd natural numbers."}
{"task_id": 267, "original": "Write a function to find the n'th star number.", "mutation": "Compose a function to determine the n'th star number."}
{"task_id": 268, "original": "Write a function to find the ascii value of a character.", "mutation": "Compose a function to determine the ascii value of a character."}
{"task_id": 269, "original": "Write a python function to find the sum of even numbers at even positions.", "mutation": "Compose a python function to determine the total of even numbers at even positions."}
{"task_id": 270, "original": "Write a python function to find the sum of fifth power of first n even natural numbers.", "mutation": "Create a python function to calculate the total of fifth power of initial n even natural numbers."}
{"task_id": 271, "original": "Write a function to perfom the rear element extraction from list of tuples records.", "mutation": "Create a function to execute the rear element extraction from a list of tuples records."}
{"task_id": 272, "original": "Write a function to substract the contents of one tuple with corresponding index of other tuple.", "mutation": "Create a function to deduct the values of one tuple with the corresponding index of another tuple."}
{"task_id": 273, "original": "Write a python function to find sum of even index binomial coefficients.", "mutation": "Create a python function to calculate the total of even index binomial coefficients."}
{"task_id": 274, "original": "Write a python function to find the position of the last removed element from the given array.", "mutation": "Compose a python function to determine the location of the final eliminated element from the provided array."}
{"task_id": 275, "original": "Write a function to find the volume of a cylinder.", "mutation": "Compose a function to determine the volume of a cylinder."}
{"task_id": 276, "original": "Write a function to filter a dictionary based on values.", "mutation": "Compose a function to sift through a dictionary based on values."}
{"task_id": 277, "original": "Write a function to find the element count that occurs before the record in the given tuple.", "mutation": "Compose a function to determine the number of occurrences of the element before the entry in the provided tuple."}
{"task_id": 278, "original": "Write a function to find the nth decagonal number.", "mutation": "Compose a function to determine the nth decagonal number."}
{"task_id": 279, "original": "Write a function to search an element in the given array by using sequential search.", "mutation": "Create a function to locate an element in the provided array using sequential search."}
{"task_id": 280, "original": "Write a python function to check if the elements of a given list are unique or not.", "mutation": "Create a python function to verify if the elements of a provided list are distinct or not."}
{"task_id": 281, "original": "Write a function to substaract two lists using map and lambda function.", "mutation": "Create a function to deduct two lists using map and lambda function."}
{"task_id": 282, "original": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.", "mutation": "Create a python function to verify if the occurrence of each digit is not more than the digit itself."}
{"task_id": 283, "original": "Write a function to check whether all items of a list are equal to a given string.", "mutation": "Create a function to verify if all elements of a list match a specified string."}
{"task_id": 284, "original": "Write a function that matches a string that has an a followed by two to three 'b'.", "mutation": "Create a function that identifies a string containing an 'a' followed by two to three 'b'."}
{"task_id": 285, "original": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.", "mutation": "Create a function to determine the highest total of consecutive elements in the adjusted array that is created by duplicating the original array k times."}
{"task_id": 286, "original": "Write a python function to find the sum of squares of first n even natural numbers.", "mutation": "Create a python function to calculate the total of squares of initial n even natural numbers."}
{"task_id": 287, "original": "Write a function to count array elements having modular inverse under given prime number p equal to itself.", "mutation": "Create a function to calculate the number of array elements with a modular inverse under a specified prime number p that is equal to itself."}
{"task_id": 288, "original": "Write a python function to calculate the number of odd days in a given year.", "mutation": "Compose a python function to determine the quantity of odd days in a specified year."}
{"task_id": 289, "original": "Write a function to find the list of lists with maximum length.", "mutation": "Compose a function to determine the list of lists with the greatest length."}
{"task_id": 290, "original": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.", "mutation": "Create a function to determine the quantity of ways to paint the fence so that no more than 2 neighboring posts share the same color for the specified fence with n posts and k colors."}
{"task_id": 291, "original": "Write a python function to find quotient of two numbers.", "mutation": "Compose a python function to determine the quotient of two numbers."}
{"task_id": 292, "original": "Write a function to find the third side of a right angled triangle.", "mutation": "Compose a function to determine the third side of a right angled triangle."}
{"task_id": 293, "original": "Write a function to find the maximum value in a given heterogeneous list.", "mutation": "Compose a function to determine the highest value in a provided diverse list."}
{"task_id": 294, "original": "Write a function to return the sum of all divisors of a number.", "mutation": "Compose a function to calculate the total of all divisors of a number."}
{"task_id": 295, "original": "Write a python function to count inversions in an array.", "mutation": "Create a python function to calculate inversions in an array."}
{"task_id": 296, "original": "Write a function to flatten a given nested list structure.", "mutation": "Compose a function to compress a provided nested list structure."}
{"task_id": 297, "original": "Write a function to find the nested list elements which are present in another list.", "mutation": "Compose a function to locate the nested list elements that exist in a different list."}
{"task_id": 298, "original": "Write a function to calculate the maximum aggregate from the list of tuples.", "mutation": "Create a function to determine the highest total from the list of tuples."}
{"task_id": 299, "original": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.", "mutation": "Create a function to determine the quantity of all binary sequences of length 2n where the total of the initial n bits equals the total of the final n bits."}
{"task_id": 300, "original": "Write a function to find the depth of a dictionary.", "mutation": "Compose a function to determine the depth of a dictionary."}
{"task_id": 301, "original": "Write a python function to find the most significant bit number which is also a set bit.", "mutation": "Create a python function to determine the highest significant bit number that is also a set bit."}
{"task_id": 302, "original": "Write a python function to check whether the count of inversion of two types are same or not.", "mutation": "Create a python function to verify if the number of inversions of two types are equal or not."}
{"task_id": 303, "original": "Write a python function to find element at a given index after number of rotations.", "mutation": "Compose a python function to locate element at a specified index after a certain number of rotations."}
{"task_id": 304, "original": "Write a function to match two words from a list of words starting with letter 'p'.", "mutation": "Create a function to compare two words from a list of words beginning with the letter 'p'."}
{"task_id": 305, "original": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .", "mutation": "Create a function to determine the highest total of an ascending subsequence from the beginning up to the ith index, while also incorporating a specified kth element that comes after i, meaning k is greater than i."}
{"task_id": 306, "original": "Write a function to get a colon of a tuple.", "mutation": "Create a function to retrieve a colon of a tuple."}
{"task_id": 307, "original": "Write a function to find the specified number of largest products from two given lists.", "mutation": "Compose a function to determine the designated quantity of highest products from two provided lists."}
{"task_id": 308, "original": "Write a python function to find the maximum of two numbers.", "mutation": "Create a python function to determine the highest of two numbers."}
{"task_id": 309, "original": "Write a function to convert a given string to a tuple.", "mutation": "Compose a function to transform a provided string into a tuple."}
{"task_id": 310, "original": "Write a python function to set the left most unset bit.", "mutation": "Create a python function to establish the leftmost unassigned bit."}
{"task_id": 311, "original": "Write a function to find the volume of a cone.", "mutation": "Compose a function to determine the volume of a cone."}
{"task_id": 312, "original": "Write a python function to print positive numbers in a list.", "mutation": "Create a python function to display positive numbers in a list."}
{"task_id": 313, "original": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.", "mutation": "Create a function to determine the maximum sum without selecting two adjacent numbers for the provided rectangular grid with dimensions 2 x n."}
{"task_id": 314, "original": "Write a python function to find the first maximum length of even word.", "mutation": "Create a python function to determine the initial maximum length of an even word."}
{"task_id": 315, "original": "Write a function to find the index of the last occurrence of a given number in a sorted array.", "mutation": "Compose a function to determine the position of the final instance of a specified number in an ordered array."}
{"task_id": 316, "original": "Write a function to reflect the modified run-length encoding from a list.", "mutation": "Compose a function to mirror the adjusted run-length encoding from a list."}
{"task_id": 317, "original": "Write a python function to find the maximum volume of a cuboid with given sum of sides.", "mutation": "Create a python function to determine the maximum volume of a cuboid with a specified sum of sides."}
{"task_id": 318, "original": "Write a function to find all five characters long word in the given string by using regex.", "mutation": "Compose a function to detect all five characters long word in the provided string by utilizing regex."}
{"task_id": 319, "original": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.", "mutation": "Compose a function to determine the disparity between the squared total of the initial n natural numbers and the total of squared initial n natural numbers."}
{"task_id": 320, "original": "Write a function to find the demlo number for the given number.", "mutation": "Compose a function to determine the demlo number for the provided number."}
{"task_id": 321, "original": "Write a function to find all index positions of the minimum values in a given list.", "mutation": "Compose a function to locate all index positions of the minimum values in a provided list."}
{"task_id": 322, "original": "Write a function to re-arrange the given array in alternating positive and negative items.", "mutation": "Create a function to rearrange the provided array in alternating positive and negative items."}
{"task_id": 323, "original": "Write a function to extract the sum of alternate chains of tuples.", "mutation": "Compose a function to retrieve the total of alternating sequences of tuples."}
{"task_id": 324, "original": "Write a python function to find the minimum number of squares whose sum is equal to a given number.", "mutation": "Compose a python function to determine the minimum number of squares that add up to a specified number."}
{"task_id": 325, "original": "Write a function to get the word with most number of occurrences in the given strings list.", "mutation": "Create a function to retrieve the word with the highest number of appearances in the provided list of strings."}
{"task_id": 326, "original": "Write a function to print check if the triangle is isosceles or not.", "mutation": "Create a function to determine if the triangle is isosceles or not."}
{"task_id": 327, "original": "Write a function to rotate a given list by specified number of items to the left direction.", "mutation": "Create a function to shift a given list by a specified number of items to the left direction."}
{"task_id": 328, "original": "Write a python function to count negative numbers in a list.", "mutation": "Create a python function to tally negative numbers in a list."}
{"task_id": 329, "original": "Write a function to find all three, four, five characters long words in the given string by using regex.", "mutation": "Compose a function to locate all three, four, five characters long words in the provided string by utilizing regex."}
{"task_id": 330, "original": "Write a python function to count unset bits of a given number.", "mutation": "Create a python function to calculate unset bits of a given number."}
{"task_id": 331, "original": "Write a function to count character frequency of a given string.", "mutation": "Compose a function to calculate character frequency of a provided string."}
{"task_id": 332, "original": "Write a python function to sort a list according to the second element in sublist.", "mutation": "Create a python function to arrange a list based on the second element in sublist."}
{"task_id": 333, "original": "Write a python function to check whether the triangle is valid or not if sides are given.", "mutation": "Create a python function to verify whether the triangle is valid or not if sides are provided."}
{"task_id": 334, "original": "Write a function to find the sum of arithmetic progression.", "mutation": "Compose a function to determine the total of an arithmetic progression."}
{"task_id": 335, "original": "Write a function to check whether the given month name contains 28 days or not.", "mutation": "Compose a function to verify if the provided month name includes 28 days or not."}
{"task_id": 336, "original": "Write a function that matches a word at the end of a string, with optional punctuation.", "mutation": "Create a function that identifies a word at the conclusion of a string, with the possibility of punctuation."}
{"task_id": 337, "original": "Write a python function to count the number of substrings with same first and last characters.", "mutation": "Compose a python function to calculate the quantity of substrings with identical initial and final characters."}
{"task_id": 338, "original": "Write a python function to find the maximum occuring divisor in an interval.", "mutation": "Compose a python function to determine the highest occurring divisor in a range."}
{"task_id": 339, "original": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.", "mutation": "Compose a python function to determine the total of the three smallest positive numbers from a provided list of numbers."}
{"task_id": 340, "original": "Write a function to convert the given set into ordered tuples.", "mutation": "Compose a function to transform the provided set into ordered tuples."}
{"task_id": 341, "original": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.", "mutation": "Create a function to determine the smallest range that contains at least one element from each of the provided arrays."}
{"task_id": 342, "original": "Write a function to calculate the number of digits and letters in a string.", "mutation": "Compose a function to determine the quantity of digits and letters in a string."}
{"task_id": 343, "original": "Write a python function to find number of elements with odd factors in a given range.", "mutation": "Create a python function to determine the quantity of elements with odd factors within a specified range."}
{"task_id": 344, "original": "Write a function to find the difference between two consecutive numbers in a given list.", "mutation": "Compose a function to determine the variance between two successive numbers in a provided list."}
{"task_id": 345, "original": "Write a function to find entringer number e(n, k).", "mutation": "Create a function to determine the entringer number e(n, k)."}
{"task_id": 346, "original": "Write a python function to count the number of squares in a rectangle.", "mutation": "Compose a python function to calculate the quantity of squares in a rectangle."}
{"task_id": 347, "original": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.", "mutation": "Create a function to calculate sequences of specified length with non-negative prefix sums that can be produced by provided values."}
{"task_id": 348, "original": "Write a python function to check whether the given string is a binary string or not.", "mutation": "Create a python function to verify if the provided string is a binary string or not."}
{"task_id": 349, "original": "Write a python function to minimize the length of the string by removing occurrence of only one character.", "mutation": "Compose a python function to reduce the length of the string by eliminating occurrence of just one character."}
{"task_id": 350, "original": "Write a python function to find the first element occurring k times in a given array.", "mutation": "Create a python function to locate the initial element appearing k times in a provided array."}
{"task_id": 351, "original": "Write a python function to check whether all the characters in a given string are unique.", "mutation": "Create a python function to verify if all the characters in a provided string are distinct."}
{"task_id": 352, "original": "Write a function to remove a specified column from a given nested list.", "mutation": "Create a function to delete a specified column from a given nested list."}
{"task_id": 353, "original": "Write a function to find t-nth term of arithemetic progression.", "mutation": "Create a function to determine the t-nth term of an arithmetic progression."}
{"task_id": 354, "original": "Write a python function to count the number of rectangles in a circle of radius r.", "mutation": "Create a python function to calculate the quantity of rectangles in a circle of radius r."}
{"task_id": 355, "original": "Write a function to find the third angle of a triangle using two angles.", "mutation": "Create a function to determine the third angle of a triangle based on two given angles."}
{"task_id": 356, "original": "Write a function to find the maximum element of all the given tuple records.", "mutation": "Compose a function to determine the highest element of all the provided tuple records."}
{"task_id": 357, "original": "Write a function to find modulo division of two lists using map and lambda function.", "mutation": "Create a function to calculate modulo division of two lists using map and lambda function."}
{"task_id": 358, "original": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.", "mutation": "Create a python function to verify if one root of the quadratic equation is double the other or not."}
{"task_id": 359, "original": "Write a function to find the n\u2019th carol number.", "mutation": "Compose a function to determine the n\u2019th carol number."}
{"task_id": 360, "original": "Write a function to remove empty lists from a given list of lists.", "mutation": "Create a function to eliminate empty lists from a provided list of lists."}
{"task_id": 361, "original": "Write a python function to find the item with maximum occurrences in a given list.", "mutation": "Create a python function to determine the item with the highest frequency in a provided list."}
{"task_id": 362, "original": "Write a function to add the k elements to each element in the tuple.", "mutation": "Create a function to append the k elements to each element in the tuple."}
{"task_id": 363, "original": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.", "mutation": "Compose a function to determine the amount of flips needed to transform the provided binary string into a series of alternating characters."}
{"task_id": 364, "original": "Write a python function to count the number of digits of a given number.", "mutation": "Compose a python function to calculate the quantity of digits of a provided number."}
{"task_id": 365, "original": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.", "mutation": "Compose a python function to determine the greatest product of the pair of neighboring elements from a provided list of integers."}
{"task_id": 366, "original": "Write a function to check if a binary tree is balanced or not.", "mutation": "Create a function to determine if a binary tree is balanced or not."}
{"task_id": 367, "original": "Write a function to repeat the given tuple n times.", "mutation": "Create a function to replicate the provided tuple n times."}
{"task_id": 368, "original": "Write a function to find the lateral surface area of cuboid", "mutation": "Create a function to determine the lateral surface area of a cuboid."}
{"task_id": 369, "original": "Write a function to sort a tuple by its float element.", "mutation": "Compose a function to arrange a tuple by its float element."}
{"task_id": 370, "original": "Write a function to find the smallest missing element in a sorted array.", "mutation": "Compose a function to determine the smallest absent element in a sorted array."}
{"task_id": 371, "original": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.", "mutation": "Create a function to arrange a given list of elements in ascending order using heap queue algorithm."}
{"task_id": 372, "original": "Write a function to find the volume of a cuboid.", "mutation": "Compose a function to determine the volume of a cuboid."}
{"task_id": 373, "original": "Write a function to print all permutations of a given string including duplicates.", "mutation": "Create a function to display all permutations of a given string including duplicates."}
{"task_id": 374, "original": "Write a function to round the given number to the nearest multiple of a specific number.", "mutation": "Compose a function to approximate the provided number to the closest multiple of a particular number."}
{"task_id": 375, "original": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.", "mutation": "Create a function to eliminate tuple elements that are duplicated and substitute the duplicates with a custom value."}
{"task_id": 376, "original": "Write a python function to remove all occurrences of a character in a given string.", "mutation": "Compose a python function to eliminate all instances of a character in a provided string."}
{"task_id": 377, "original": "Write a python function to shift last element to first position in the given list.", "mutation": "Create a python function to move the last element to the first position in the provided list."}
{"task_id": 378, "original": "Write a function to find the surface area of a cuboid.", "mutation": "Compose a function to determine the surface area of a cuboid."}
{"task_id": 379, "original": "Write a function to generate a two-dimensional array.", "mutation": "Compose a function to create a two-dimensional array."}
{"task_id": 380, "original": "Write a function to sort a list of lists by a given index of the inner list.", "mutation": "Compose a function to arrange a list of lists by a specified index of the inner list."}
{"task_id": 381, "original": "Write a function to find the number of rotations in a circularly sorted array.", "mutation": "Create a function to determine the amount of rotations in a circularly arranged array."}
{"task_id": 382, "original": "Write a python function to toggle all odd bits of a given number.", "mutation": "Create a python function to switch all odd bits of a given number."}
{"task_id": 383, "original": "Write a python function to find the frequency of the smallest value in a given array.", "mutation": "Compose a python function to determine the occurrence of the lowest value in a provided array."}
{"task_id": 384, "original": "Write a function to find the n'th perrin number using recursion.", "mutation": "Compose a function to determine the n'th perrin number using recursion."}
{"task_id": 385, "original": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.", "mutation": "Create a function to determine the minimum number of exchanges needed for bracket balancing in the provided string."}
{"task_id": 386, "original": "Write a python function to check whether the hexadecimal number is even or odd.", "mutation": "Create a python function to verify if the hexadecimal number is even or odd."}
{"task_id": 387, "original": "Write a python function to find the highest power of 2 that is less than or equal to n.", "mutation": "Compose a python function to determine the greatest power of 2 that is lower than or equal to n."}
{"task_id": 388, "original": "Write a function to find the n'th lucas number.", "mutation": "Compose a function to determine the n'th lucas number."}
{"task_id": 389, "original": "Write a function to insert a given string at the beginning of all items in a list.", "mutation": "Create a function to add a specified string at the start of all elements in a list."}
{"task_id": 390, "original": "Write a function to convert more than one list to nested dictionary.", "mutation": "Compose a function to transform multiple lists into a nested dictionary."}
{"task_id": 391, "original": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).", "mutation": "Create a function to determine the highest sum achievable by utilizing the provided equation f(n) = maximum( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)."}
{"task_id": 392, "original": "Write a function to find the list with maximum length using lambda function.", "mutation": "Create a function to determine the list with the longest length using a lambda function."}
{"task_id": 393, "original": "Write a function to check if given tuple is distinct or not.", "mutation": "Create a function to verify if the provided tuple is unique or not."}
{"task_id": 394, "original": "Write a python function to find the first non-repeated character in a given string.", "mutation": "Compose a python function to locate the initial non-duplicated character in a provided string."}
{"task_id": 395, "original": "Write a function to check whether the given string starts and ends with the same character or not using regex.", "mutation": "Create a function to verify if the provided string begins and concludes with the same character or not using regex."}
{"task_id": 396, "original": "Write a function to find the median of three specific numbers.", "mutation": "Compose a function to determine the median of three specific numbers."}
{"task_id": 397, "original": "Write a function to compute the sum of digits of each number of a given list.", "mutation": "Compose a function to calculate the total of digits of each number in a provided list."}
{"task_id": 398, "original": "Write a function to perform the mathematical bitwise xor operation across the given tuples.", "mutation": "Create a function to execute the mathematical bitwise xor operation on the provided tuples."}
{"task_id": 399, "original": "Write a function to extract the frequency of unique tuples in the given list order irrespective.", "mutation": "Compose a function to retrieve the occurrence of distinct tuples in the provided list sequence regardless."}
{"task_id": 400, "original": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.", "mutation": "Create a function to execute index wise addition of tuple elements in the provided two nested tuples."}
{"task_id": 401, "original": "Write a function to compute the value of ncr%p.", "mutation": "Create a function to calculate the value of ncr%p."}
{"task_id": 402, "original": "Write a function to check if a url is valid or not using regex.", "mutation": "Create a function to verify if a url is valid or not using regex."}
{"task_id": 403, "original": "Write a python function to find the minimum of two numbers.", "mutation": "Compose a python function to determine the minimum of two numbers."}
{"task_id": 404, "original": "Write a function to check whether an element exists within a tuple.", "mutation": "Compose a function to verify if an element is present within a tuple."}
{"task_id": 405, "original": "Write a python function to find the parity of a given number.", "mutation": "Compose a python function to determine the parity of a provided number."}
{"task_id": 406, "original": "Write a function to create the next bigger number by rearranging the digits of a given number.", "mutation": "Compose a function to generate the next larger number by rearranging the digits of a provided number."}
{"task_id": 407, "original": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.", "mutation": "Compose a function to determine k number of pairs which include one element from the first array and one element from the second array."}
{"task_id": 408, "original": "Write a function to find the minimum product from the pairs of tuples within a given list.", "mutation": "Create a function to determine the smallest product from the pairs of tuples in a provided list."}
{"task_id": 409, "original": "Write a function to find the minimum value in a given heterogeneous list.", "mutation": "Compose a function to determine the smallest value in a provided diverse list."}
{"task_id": 410, "original": "Write a function to convert the given snake case string to camel case string by using regex.", "mutation": "Create a function to transform the provided snake case string into camel case string using regex."}
{"task_id": 411, "original": "Write a python function to remove odd numbers from a given list.", "mutation": "Create a python function to eliminate odd numbers from a provided list."}
{"task_id": 412, "original": "Write a function to extract the nth element from a given list of tuples.", "mutation": "Compose a function to retrieve the nth element from a provided list of tuples."}
{"task_id": 413, "original": "Write a python function to check whether the value exists in a sequence or not.", "mutation": "Create a python function to verify if the value is present in a sequence or not."}
{"task_id": 414, "original": "Write a python function to find a pair with highest product from a given array of integers.", "mutation": "Create a python function to determine a pair with the greatest product from a provided array of integers."}
{"task_id": 415, "original": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.", "mutation": "Create a function to determine the highest total we can achieve by dividing a number into three parts repeatedly and adding them together for the specified number."}
{"task_id": 416, "original": "Write a function to find common first element in given list of tuple.", "mutation": "Create a function to determine the shared initial element in a provided list of tuples."}
{"task_id": 417, "original": "Write a python function to find the sublist having maximum length.", "mutation": "Create a python function to determine the sublist with the longest length."}
{"task_id": 418, "original": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.", "mutation": "Create a function to round each number in a provided list of numbers and display the total sum multiplied by the number of elements in the list."}
{"task_id": 419, "original": "Write a python function to find the cube sum of first n even natural numbers.", "mutation": "Create a python function to calculate the sum of cubes of the initial n even natural numbers."}
{"task_id": 420, "original": "Write a function to concatenate each element of tuple by the delimiter.", "mutation": "Compose a function to combine each element of tuple with the delimiter."}
{"task_id": 421, "original": "Write a python function to find the average of cubes of first n natural numbers.", "mutation": "Compose a python function to determine the mean of cubes of initial n natural numbers."}
{"task_id": 422, "original": "Write a function to solve gold mine problem.", "mutation": "Create a function to solve the gold mine problem."}
{"task_id": 423, "original": "Write a function to extract only the rear index element of each string in the given tuple.", "mutation": "Compose a function to retrieve only the last index element of each string in the provided tuple."}
{"task_id": 424, "original": "Write a function to count the number of sublists containing a particular element.", "mutation": "Compose a function to tally the quantity of sublists including a specific element."}
{"task_id": 425, "original": "Write a function to filter odd numbers using lambda function.", "mutation": "Create a function to sort odd numbers using lambda function."}
{"task_id": 426, "original": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.", "mutation": "Create a function to transform a date from yyyy-mm-dd format to dd-mm-yyyy format using regex."}
{"task_id": 427, "original": "Write a function to sort the given array by using shell sort.", "mutation": "Compose a function to arrange the provided array by employing shell sort."}
{"task_id": 428, "original": "Write a function to extract the elementwise and tuples from the given two tuples.", "mutation": "Compose a function to retrieve the elementwise and tuples from the provided two tuples."}
{"task_id": 429, "original": "Write a function to find the directrix of a parabola.", "mutation": "Compose a function to determine the directrix of a parabola."}
{"task_id": 430, "original": "Write a function that takes two lists and returns true if they have at least one common element.", "mutation": "Create a function that accepts two lists and outputs true if they share at least one common element."}
{"task_id": 431, "original": "Write a function to find the median of a trapezium.", "mutation": "Compose a function to determine the median of a trapezium."}
{"task_id": 432, "original": "Write a function to check whether the entered number is greater than the elements of the given array.", "mutation": "Compose a function to verify if the inputted number exceeds the elements of the provided array."}
{"task_id": 433, "original": "Write a function that matches a string that has an a followed by one or more b's.", "mutation": "Create a function that identifies a string containing an a followed by one or more b's."}
{"task_id": 434, "original": "Write a python function to find the last digit of a given number.", "mutation": "Compose a python function to determine the final digit of a provided number."}
{"task_id": 435, "original": "Write a python function to print negative numbers in a list.", "mutation": "Create a python function to display negative numbers in a list."}
{"task_id": 436, "original": "Write a function to remove odd characters in a string.", "mutation": "Create a function to eliminate odd characters in a string."}
{"task_id": 437, "original": "Write a function to count bidirectional tuple pairs.", "mutation": "Create a function to calculate bidirectional tuple pairs."}
{"task_id": 438, "original": "Write a function to convert a list of multiple integers into a single integer.", "mutation": "Compose a function to transform a list of multiple integers into a single integer."}
{"task_id": 439, "original": "Write a function to find all adverbs and their positions in a given sentence.", "mutation": "Compose a function to locate all adverbs and their positions in a provided sentence."}
{"task_id": 440, "original": "Write a function to find the surface area of a cube.", "mutation": "Compose a function to determine the surface area of a cube."}
{"task_id": 441, "original": "Write a function to find the ration of positive numbers in an array of integers.", "mutation": "Compose a function to determine the proportion of positive numbers in an array of integers."}
{"task_id": 442, "original": "Write a python function to find the largest negative number from the given list.", "mutation": "Compose a python function to determine the greatest negative number from the provided list."}
{"task_id": 443, "original": "Write a function to trim each tuple by k in the given tuple list.", "mutation": "Create a function to shorten each tuple by k in the provided tuple list."}
{"task_id": 444, "original": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.", "mutation": "Create a function to execute index wise multiplication of tuple elements in the provided two tuples."}
{"task_id": 445, "original": "Write a python function to count the occurence of all elements of list in a tuple.", "mutation": "Create a python function to tally the presence of all elements of list in a tuple."}
{"task_id": 446, "original": "Write a function to find cubes of individual elements in a list using lambda function.", "mutation": "Create a function to calculate cubes of individual elements in a list using lambda function."}
{"task_id": 447, "original": "Write a function to calculate the sum of perrin numbers.", "mutation": "Compose a function to determine the total of perrin numbers."}
{"task_id": 448, "original": "Write a python function to check whether the triangle is valid or not if 3 points are given.", "mutation": "Create a python function to verify whether the triangle is valid or not if 3 points are provided."}
{"task_id": 449, "original": "Write a function to extract specified size of strings from a give list of string values.", "mutation": "Compose a function to retrieve specified size of strings from a provided list of string values."}
{"task_id": 450, "original": "Write a function to remove all whitespaces from the given string using regex.", "mutation": "Create a function to eliminate all whitespaces from the provided string using regex."}
{"task_id": 451, "original": "Write a function that gives loss amount if the given amount has loss else return none.", "mutation": "Create a function that calculates the loss amount if the provided amount incurs a loss, otherwise return null."}
{"task_id": 452, "original": "Write a python function to find the sum of even factors of a number.", "mutation": "Compose a python function to determine the total of even factors of a number."}
{"task_id": 453, "original": "Write a function that matches a word containing 'z'.", "mutation": "Create a function that identifies a word containing 'z'."}
{"task_id": 454, "original": "Write a function to check whether the given month number contains 31 days or not.", "mutation": "Create a function to determine if the provided month number includes 31 days or not."}
{"task_id": 455, "original": "Write a function to reverse strings in a given list of string values.", "mutation": "Compose a function to invert strings in a provided list of string values."}
{"task_id": 456, "original": "Write a python function to find the sublist having minimum length.", "mutation": "Compose a python function to determine the sublist with the shortest length."}
{"task_id": 457, "original": "Write a function to find the area of a rectangle.", "mutation": "Compose a function to determine the area of a rectangle."}
{"task_id": 458, "original": "Write a function to remove uppercase substrings from a given string by using regex.", "mutation": "Create a function to eliminate uppercase substrings from a provided string using regex."}
{"task_id": 459, "original": "Write a python function to get the first element of each sublist.", "mutation": "Compose a python function to retrieve the initial element of every sublist."}
{"task_id": 460, "original": "Write a python function to count the upper case characters in a given string.", "mutation": "Compose a python function to tally the uppercase characters in a provided string."}
{"task_id": 461, "original": "Write a function to find all possible combinations of the elements of a given list.", "mutation": "Compose a function to determine all potential permutations of the elements of a provided list."}
{"task_id": 462, "original": "Write a function to find the maximum product subarray of the given array.", "mutation": "Create a function to determine the highest product subarray of the provided array."}
{"task_id": 463, "original": "Write a function to check if all values are same in a dictionary.", "mutation": "Create a function to verify if all values are identical in a dictionary."}
{"task_id": 464, "original": "Write a function to drop empty items from a given dictionary.", "mutation": "Create a function to remove empty items from a provided dictionary."}
{"task_id": 465, "original": "Write a function to find the peak element in the given array.", "mutation": "Create a function to locate the peak element in the provided array."}
{"task_id": 466, "original": "Write a python function to convert decimal number to octal number.", "mutation": "Compose a python function to transform decimal number to octal number."}
{"task_id": 467, "original": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.", "mutation": "Compose a function to determine the highest product created by multiplying numbers of a growing subsequence of that array."}
{"task_id": 468, "original": "Write a function to find the maximum profit earned from a maximum of k stock transactions", "mutation": "Create a function to determine the highest profit gained from a maximum of k stock transactions."}
{"task_id": 469, "original": "Write a function to find the pairwise addition of the elements of the given tuples.", "mutation": "Create a function to calculate the pairwise sum of the elements in the provided tuples."}
{"task_id": 470, "original": "Write a python function to find remainder of array multiplication divided by n.", "mutation": "Create a python function to determine the modulus of array multiplication divided by n."}
{"task_id": 471, "original": "Write a python function to check whether the given list contains consecutive numbers or not.", "mutation": "Create a python function to verify if the provided list includes sequential numbers or not."}
{"task_id": 472, "original": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.", "mutation": "Create a function to determine the tuple intersection of elements in the provided tuple list regardless of their order."}
{"task_id": 473, "original": "Write a function to replace characters in a string.", "mutation": "Compose a function to substitute characters in a string."}
{"task_id": 474, "original": "Write a function to sort counter by value.", "mutation": "Compose a function to arrange counter by value."}
{"task_id": 475, "original": "Write a python function to find the sum of the largest and smallest value in a given array.", "mutation": "Create a python function to determine the total of the highest and lowest value in a provided array."}
{"task_id": 476, "original": "Write a python function to convert the given string to lower case.", "mutation": "Compose a python function to transform the provided string to lower case."}
{"task_id": 477, "original": "Write a function to remove lowercase substrings from a given string.", "mutation": "Create a function to eliminate lowercase substrings from a provided string."}
{"task_id": 478, "original": "Write a python function to find the first digit of a given number.", "mutation": "Compose a python function to determine the initial digit of a provided number."}
{"task_id": 479, "original": "Write a python function to find the maximum occurring character in a given string.", "mutation": "Compose a python function to determine the highest occurring character in a provided string."}
{"task_id": 480, "original": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.", "mutation": "Compose a function to ascertain if there exists a subset of the provided set with a sum equivalent to the specified sum."}
{"task_id": 481, "original": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.", "mutation": "Compose a function to detect patterns of one capital letter followed by lowercase letters in the provided string using regex."}
{"task_id": 482, "original": "Write a python function to find the first natural number whose factorial is divisible by x.", "mutation": "Compose a python function to determine the initial natural number that has a factorial divisible by x."}
{"task_id": 483, "original": "Write a function to remove the matching tuples from the given two tuples.", "mutation": "Create a function to delete the matching tuples from the provided two tuples."}
{"task_id": 484, "original": "Write a function to find the largest palindromic number in the given array.", "mutation": "Create a function to locate the biggest palindromic number in the provided array."}
{"task_id": 485, "original": "Write a function to compute binomial probability for the given number.", "mutation": "Compose a function to calculate binomial probability for the provided number."}
{"task_id": 486, "original": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.", "mutation": "Compose a function to arrange a list of tuples in ascending order by the final element in each tuple."}
{"task_id": 487, "original": "Write a function to find the area of a pentagon.", "mutation": "Compose a function to determine the area of a pentagon."}
{"task_id": 488, "original": "Write a python function to find the frequency of the largest value in a given array.", "mutation": "Compose a python function to determine the occurrence of the highest value in a provided array."}
{"task_id": 489, "original": "Write a function to extract all the pairs which are symmetric in the given tuple list.", "mutation": "Compose a function to retrieve all the pairs that exhibit symmetry in the provided tuple list."}
{"task_id": 490, "original": "Write a function to find the sum of geometric progression series.", "mutation": "Compose a function to determine the total of geometric progression series."}
{"task_id": 491, "original": "Write a function to search an element in the given array by using binary search.", "mutation": "Create a function to locate an element in the provided array using binary search."}
{"task_id": 492, "original": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.", "mutation": "Create a function to compute a grid of hexagon coordinates where the function outputs a list of lists containing 6 tuples of x, y point coordinates."}
{"task_id": 493, "original": "Write a function to convert the given binary tuple to integer.", "mutation": "Create a function to transform the provided binary tuple into an integer."}
{"task_id": 494, "original": "Write a function to remove lowercase substrings from a given string by using regex.", "mutation": "Create a function to eliminate lowercase substrings from a provided string using regex."}
{"task_id": 495, "original": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.", "mutation": "Create a function to determine the smallest integers from a provided list of numbers utilizing the heap queue algorithm."}
{"task_id": 496, "original": "Write a function to find the surface area of a cone.", "mutation": "Compose a function to determine the surface area of a cone."}
{"task_id": 497, "original": "Write a python function to find gcd of two positive integers.", "mutation": "Create a python function to determine gcd of two positive integers."}
{"task_id": 498, "original": "Write a function to find the diameter of a circle.", "mutation": "Compose a function to determine the diameter of a circle."}
{"task_id": 499, "original": "Write a function to concatenate all elements of the given list into a string.", "mutation": "Compose a function to combine all elements of the provided list into a string."}
{"task_id": 500, "original": "Write a python function to find common divisor between two numbers in a given pair.", "mutation": "Create a python function to determine common divisor between two numbers in a given pair."}
{"task_id": 501, "original": "Write a python function to find remainder of two numbers.", "mutation": "Create a python function to calculate the remainder of two numbers."}
{"task_id": 502, "original": "Write a function to add consecutive numbers of a given list.", "mutation": "Compose a function to sum consecutive numbers of a provided list."}
{"task_id": 503, "original": "Write a python function to find the cube sum of first n natural numbers.", "mutation": "Compose a python function to determine the cube sum of initial n natural numbers."}
{"task_id": 504, "original": "Write a function to move all zeroes to the end of the given array.", "mutation": "Create a function to shift all zeroes to the end of the provided array."}
{"task_id": 505, "original": "Write a function to calculate the permutation coefficient of given p(n, k).", "mutation": "Create a function to determine the permutation coefficient of a specified p(n, k)."}
{"task_id": 506, "original": "Write a function to remove specific words from a given list.", "mutation": "Compose a function to eliminate particular words from a provided list."}
{"task_id": 507, "original": "Write a function to check if the common elements between two given lists are in the same order or not.", "mutation": "Compose a function to verify if the shared elements between two provided lists maintain their original sequence or not."}
{"task_id": 508, "original": "Write a python function to find the average of odd numbers till a given odd number.", "mutation": "Create a python function to calculate the mean of odd numbers up to a specified odd number."}
{"task_id": 509, "original": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.", "mutation": "Create a function to determine the quantity of subsequences with a product less than k for the provided non-negative array."}
{"task_id": 510, "original": "Write a python function to find minimum sum of factors of a given number.", "mutation": "Create a python function to determine the smallest sum of factors of a specified number."}
{"task_id": 511, "original": "Write a function to count the element frequency in the mixed nested tuple.", "mutation": "Compose a function to calculate the element frequency in the mixed nested tuple."}
{"task_id": 512, "original": "Write a function to convert tuple into list by adding the given string after every element.", "mutation": "Create a function to transform tuple into list by appending the specified string after each element."}
{"task_id": 513, "original": "Write a function to find the summation of tuple elements in the given tuple list.", "mutation": "Compose a function to determine the total of tuple elements in the provided tuple list."}
{"task_id": 514, "original": "Write a function to check if there is a subset with sum divisible by m.", "mutation": "Create a function to verify if there exists a subset with a sum that can be divided by m."}
{"task_id": 515, "original": "Write a function to sort a list of elements using radix sort.", "mutation": "Compose a function to arrange a list of elements using radix sort."}
{"task_id": 516, "original": "Write a python function to find the largest postive number from the given list.", "mutation": "Compose a python function to determine the greatest positive number from the provided list."}
{"task_id": 517, "original": "Write a function to find the square root of a perfect number.", "mutation": "Compose a function to determine the square root of a perfect number."}
{"task_id": 518, "original": "Write a function to calculate volume of a tetrahedron.", "mutation": "Create a function to determine the volume of a tetrahedron."}
{"task_id": 519, "original": "Write a function to find the lcm of the given array elements.", "mutation": "Create a function to determine the lcm of the provided array elements."}
{"task_id": 520, "original": "Write a function to print check if the triangle is scalene or not.", "mutation": "Create a function to determine whether the triangle is scalene or not."}
{"task_id": 521, "original": "Write a function to find the longest bitonic subsequence for the given array.", "mutation": "Create a function to determine the longest bitonic subsequence for the provided array."}
{"task_id": 522, "original": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.", "mutation": "Create a function to verify if a provided string contains a capital letter, a lowercase letter, a digit, and a specific length using a lambda function."}
{"task_id": 523, "original": "Write a function to find the sum of maximum increasing subsequence of the given array.", "mutation": "Create a function to determine the total of the highest increasing subsequence in the provided array."}
{"task_id": 524, "original": "Write a python function to check whether two given lines are parallel or not.", "mutation": "Create a python function to determine if two given lines are parallel or not."}
{"task_id": 525, "original": "Write a python function to capitalize first and last letters of each word of a given string.", "mutation": "Create a python function to capitalize the first and last letters of each word in a provided string."}
{"task_id": 526, "original": "Write a function to find all pairs in an integer array whose sum is equal to a given number.", "mutation": "Create a function to identify all pairs in an integer array that add up to a specified number."}
{"task_id": 527, "original": "Write a function to find the list of lists with minimum length.", "mutation": "Compose a function to discover the collection of lists with the smallest length."}
{"task_id": 528, "original": "Write a function to find the nth jacobsthal-lucas number.", "mutation": "Create a function to determine the nth jacobsthal-lucas number."}
{"task_id": 529, "original": "Write a function to find the ration of negative numbers in an array of integers.", "mutation": "Compose a function to determine the proportion of negative numbers in an array of integers."}
{"task_id": 530, "original": "Write a function to find minimum number of coins that make a given value.", "mutation": "Compose a function to determine the minimum number of coins needed to reach a specified value."}
{"task_id": 531, "original": "Write a function to check if the two given strings are permutations of each other.", "mutation": "Compose a function to verify if the two provided strings are permutations of each other."}
{"task_id": 532, "original": "Write a function to remove particular data type elements from the given tuple.", "mutation": "Create a function to eliminate specific data type elements from the provided tuple."}
{"task_id": 533, "original": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.", "mutation": "Create a function to locate a literal string within another string and determine the position of the pattern within the original string."}
{"task_id": 534, "original": "Write a function to find the top or bottom surface area of a cylinder.", "mutation": "Compose a function to determine the top or bottom surface area of a cylinder."}
{"task_id": 535, "original": "Write a function to select the nth items of a list.", "mutation": "Compose a function to choose the nth elements of a list."}
{"task_id": 536, "original": "Write a python function to find the first repeated word in a given string.", "mutation": "Compose a python function to detect the initial duplicated word in a provided string."}
{"task_id": 537, "original": "Write a python function to convert a given string list to a tuple.", "mutation": "Compose a python function to transform a provided string list into a tuple."}
{"task_id": 538, "original": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.", "mutation": "Compose a function to generate a list containing the exponentiation of the given number in bases elevated to the respective number in the index using the map function."}
{"task_id": 539, "original": "Write a python function to find the difference between highest and least frequencies in a given array.", "mutation": "Create a python function to determine the variance between the maximum and minimum frequencies in a provided array."}
{"task_id": 540, "original": "Write a function to find if the given number is abundant or not.", "mutation": "Compose a function to determine if the provided number is abundant or not."}
{"task_id": 541, "original": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.", "mutation": "Create a function to substitute all instances of spaces, commas, or dots with a colon in the provided string using regex."}
{"task_id": 542, "original": "Write a function to add two numbers and print number of digits of sum.", "mutation": "Create a function to sum two numbers and display the number of digits in the result."}
{"task_id": 543, "original": "Write a function to flatten the tuple list to a string.", "mutation": "Compose a function to compress the tuple list into a string."}
{"task_id": 544, "original": "Write a python function to toggle only first and last bits of a given number.", "mutation": "Create a python function to switch only the first and last bits of a given number."}
{"task_id": 545, "original": "Write a function to find the last occurrence of a character in a string.", "mutation": "Compose a function to locate the final instance of a character in a string."}
{"task_id": 546, "original": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.", "mutation": "Create a python function to calculate the total of hamming distances of all sequential numbers from 0 to n."}
{"task_id": 547, "original": "Write a function to find the length of the longest increasing subsequence of the given sequence.", "mutation": "Compose a function to determine the length of the longest increasing subsequence of the provided sequence."}
{"task_id": 548, "original": "Write a python function to find the sum of fifth power of first n odd natural numbers.", "mutation": "Create a python function to calculate the total of fifth power of initial n odd natural numbers."}
{"task_id": 549, "original": "Write a python function to find the maximum element in a sorted and rotated array.", "mutation": "Create a python function to determine the highest element in a sorted and rotated array."}
{"task_id": 550, "original": "Write a function to extract a specified column from a given nested list.", "mutation": "Compose a function to retrieve a specified column from a provided nested list."}
{"task_id": 551, "original": "Write a python function to check whether a given sequence is linear or not.", "mutation": "Compose a python function to verify if a provided sequence is linear or not."}
{"task_id": 552, "original": "Write a function to convert the given tuple to a floating-point number.", "mutation": "Compose a function to transform the provided tuple into a floating-point number."}
{"task_id": 553, "original": "Write a python function to find odd numbers from a mixed list.", "mutation": "Compose a python function to detect odd numbers from a mixed list."}
{"task_id": 554, "original": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.", "mutation": "Create a python function to calculate the disparity between the total of cubes of initial n natural numbers and the total of initial n natural numbers."}
{"task_id": 555, "original": "Write a python function to count the pairs with xor as an odd number.", "mutation": "Compose a python function to calculate the pairs with xor as an odd number."}
{"task_id": 556, "original": "Write a function to toggle characters case in a string.", "mutation": "Create a function to switch characters case in a string."}
{"task_id": 557, "original": "Write a python function to find the digit distance between two integers.", "mutation": "Compose a python function to determine the digit difference between two integers."}
{"task_id": 558, "original": "Write a function to find the largest sum of contiguous subarray in the given array.", "mutation": "Compose a function to determine the greatest total of consecutive subarray in the provided array."}
{"task_id": 559, "original": "Write a function to find the union of elements of the given tuples.", "mutation": "Create a function to determine the combination of elements in the provided tuples."}
{"task_id": 560, "original": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.", "mutation": "Create a function to match each element with its corresponding elements from other similar pairs in the provided tuple."}
{"task_id": 561, "original": "Write a python function to find the maximum length of sublist.", "mutation": "Create a python function to determine the maximum length of sublist."}
{"task_id": 562, "original": "Write a function to extract values between quotation marks of a string.", "mutation": "Compose a function to retrieve values between quotation marks of a string."}
{"task_id": 563, "original": "Write a python function to count unequal element pairs from the given array.", "mutation": "Create a python function to calculate different element pairs from the provided array."}
{"task_id": 564, "original": "Write a python function to split a string into characters.", "mutation": "Compose a python function to divide a string into characters."}
{"task_id": 565, "original": "Write a function to get the sum of a non-negative integer.", "mutation": "Compose a function to obtain the total of a non-negative integer."}
{"task_id": 566, "original": "Write a function to check whether a specified list is sorted or not.", "mutation": "Create a function to determine if a given list is arranged or not."}
{"task_id": 567, "original": "Write a function to create a list of empty dictionaries.", "mutation": "Compose a function to generate a list of vacant dictionaries."}
{"task_id": 568, "original": "Write a function to sort each sublist of strings in a given list of lists.", "mutation": "Compose a function to arrange each sublist of strings in a provided list of lists."}
{"task_id": 569, "original": "Write a function to remove words from a given list of strings containing a character or string.", "mutation": "Create a function to eliminate words from a provided list of strings that include a character or string."}
{"task_id": 570, "original": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.", "mutation": "Create a function to determine the highest possible sum of non-overlapping pairs for the provided array of numbers and a value k."}
{"task_id": 571, "original": "Write a python function to remove two duplicate numbers from a given number of lists.", "mutation": "Create a python function to eliminate two duplicate numbers from a provided set of lists."}
{"task_id": 572, "original": "Write a python function to calculate the product of the unique numbers of a given list.", "mutation": "Compose a python function to determine the product of the distinct numbers in a provided list."}
{"task_id": 573, "original": "Write a function to find the surface area of a cylinder.", "mutation": "Compose a function to determine the surface area of a cylinder."}
{"task_id": 574, "original": "Write a python function to find nth number in a sequence which is not a multiple of a given number.", "mutation": "Create a python function to locate the nth number in a sequence that is not a factor of a specified number."}
{"task_id": 575, "original": "Write a python function to check whether an array is subarray of another or not.", "mutation": "Create a python function to verify if an array is a subarray of another or not."}
{"task_id": 576, "original": "Write a python function to find the last digit in factorial of a given number.", "mutation": "Compose a python function to determine the final digit in the factorial of a specified number."}
{"task_id": 577, "original": "Write a function to interleave lists of the same length.", "mutation": "Compose a function to alternate lists of the same length."}
{"task_id": 578, "original": "Write a function to find the dissimilar elements in the given two tuples.", "mutation": "Compose a function to detect the distinct elements in the provided two tuples."}
{"task_id": 579, "original": "Write a function to extract the even elements in the nested mixed tuple.", "mutation": "Create a function to retrieve the even elements in the nested mixed tuple."}
{"task_id": 580, "original": "Write a python function to find the surface area of the square pyramid.", "mutation": "Create a python function to calculate the surface area of the square pyramid."}
{"task_id": 581, "original": "Write a function to check if a dictionary is empty or not.", "mutation": "Compose a function to verify if a dictionary is empty or not."}
{"task_id": 582, "original": "Write a function for nth catalan number.", "mutation": "Create a function for the nth catalan number."}
{"task_id": 583, "original": "Write a function to find all adverbs and their positions in a given sentence by using regex.", "mutation": "Compose a function to locate all adverbs and their positions in a provided sentence using regex."}
{"task_id": 584, "original": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.", "mutation": "Create a function to locate the n - costly price items from a provided dataset using heap queue algorithm."}
{"task_id": 585, "original": "Write a python function to split the array and add the first part to the end.", "mutation": "Create a python function to divide the array and append the initial part to the end."}
{"task_id": 586, "original": "Write a function to convert a list to a tuple.", "mutation": "Compose a function to transform a list into a tuple."}
{"task_id": 587, "original": "Write a python function to find the difference between largest and smallest value in a given array.", "mutation": "Create a python function to determine the variance between the highest and lowest value in a provided array."}
{"task_id": 588, "original": "Write a function to find perfect squares between two given numbers.", "mutation": "Compose a function to identify perfect squares within two specified numbers."}
{"task_id": 589, "original": "Write a function to convert polar coordinates to rectangular coordinates.", "mutation": "Compose a function to transform polar coordinates to rectangular coordinates."}
{"task_id": 590, "original": "Write a python function to interchange the first and last elements in a list.", "mutation": "Compose a python function to swap the initial and final elements in a list."}
{"task_id": 591, "original": "Write a python function to find sum of product of binomial co-efficients.", "mutation": "Create a python function to calculate the total of the product of binomial coefficients."}
{"task_id": 592, "original": "Write a function to remove leading zeroes from an ip address.", "mutation": "Create a function to eliminate leading zeroes from an ip address."}
{"task_id": 593, "original": "Write a function to find the difference of first even and odd number of a given list.", "mutation": "Create a function to determine the distinction between the initial even and odd number in a provided list."}
{"task_id": 594, "original": "Write a python function to count minimum number of swaps required to convert one binary string to another.", "mutation": "Create a python function to calculate the minimum number of exchanges needed to transform one binary string to another."}
{"task_id": 595, "original": "Write a function to find the size of the given tuple.", "mutation": "Create a function to determine the size of the provided tuple."}
{"task_id": 596, "original": "Write a function to find kth element from the given two sorted arrays.", "mutation": "Create a function to locate the kth element from the provided two sorted arrays."}
{"task_id": 597, "original": "Write a function to check whether the given number is armstrong or not.", "mutation": "Create a function to determine if the provided number is armstrong or not."}
{"task_id": 598, "original": "Write a function to find sum and average of first n natural numbers.", "mutation": "Compose a function to determine the total and mean of initial n natural numbers."}
{"task_id": 599, "original": "Write a python function to check whether the given number is even or not using bitwise operator.", "mutation": "Create a python function to verify if the provided number is even or not using bitwise operator."}
{"task_id": 600, "original": "Write a function to find the longest chain which can be formed from the given set of pairs.", "mutation": "Compose a function to determine the longest chain that can be created from the provided set of pairs."}
{"task_id": 601, "original": "Write a python function to find the first repeated character in a given string.", "mutation": "Compose a python function to detect the initial duplicated character in a provided string."}
{"task_id": 602, "original": "Write a function to get a lucid number smaller than or equal to n.", "mutation": "Compose a function to obtain a clear number less than or equal to n."}
{"task_id": 603, "original": "Write a function to reverse words in a given string.", "mutation": "Compose a function to invert words in a provided string."}
{"task_id": 604, "original": "Write a function to check if the given integer is a prime number.", "mutation": "Compose a function to verify if the provided integer is a prime number."}
{"task_id": 605, "original": "Write a function to convert degrees to radians.", "mutation": "Compose a function to transform degrees to radians."}
{"task_id": 606, "original": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.", "mutation": "Create a function to locate a literal string within a string and determine the position within the original string where the pattern is found using regex."}
{"task_id": 607, "original": "Write a python function to find nth bell number.", "mutation": "Create a python function to determine the nth bell number."}
{"task_id": 608, "original": "Write a python function to find minimum possible value for the given periodic function.", "mutation": "Create a python function to determine the smallest possible value for the provided periodic function."}
{"task_id": 609, "original": "Write a python function to remove the k'th element from a given list.", "mutation": "Create a python function to delete the k'th element from a given list."}
{"task_id": 610, "original": "Write a function to find the maximum of nth column from the given tuple list.", "mutation": "Create a function to determine the highest value in the nth column from the provided tuple list."}
{"task_id": 611, "original": "Write a python function to merge the first and last elements separately in a list of lists.", "mutation": "Create a python function to combine the initial and final elements individually in a list of lists."}
{"task_id": 612, "original": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.", "mutation": "Create a function to determine the highest value in the record list as a tuple attribute within the provided tuple list."}
{"task_id": 613, "original": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.", "mutation": "Create a function to calculate the total sum of all the values that exist in the provided tuple list."}
{"task_id": 614, "original": "Write a function to find average value of the numbers in a given tuple of tuples.", "mutation": "Compose a function to determine the average value of the numbers in a provided tuple of tuples."}
{"task_id": 615, "original": "Write a function to perfom the modulo of tuple elements in the given two tuples.", "mutation": "Create a function to calculate the modulo of tuple elements in the provided two tuples."}
{"task_id": 616, "original": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.", "mutation": "Create a function to verify the number of leaps needed of specified length to arrive at a point of form (d, 0) from the origin in a 2d plane."}
{"task_id": 617, "original": "Write a function to divide two lists using map and lambda function.", "mutation": "Compose a function to separate two lists using map and lambda function."}
{"task_id": 618, "original": "Write a function to move all the numbers in it to the given string.", "mutation": "Compose a function to transfer all the numbers in it to the provided string."}
{"task_id": 619, "original": "Write a function to find the largest subset where each pair is divisible.", "mutation": "Create a function to determine the largest subset where every pair is divisible."}
{"task_id": 620, "original": "Write a function to increment the numeric values in the given strings by k.", "mutation": "Create a function to increase the numeric values in the provided strings by k."}
{"task_id": 621, "original": "Write a function to find the median of two sorted arrays of same size.", "mutation": "Compose a function to determine the median of two sorted arrays of equal size."}
{"task_id": 622, "original": "Write a function to find the n-th power of individual elements in a list using lambda function.", "mutation": "Create a function to calculate the n-th power of each element in a list using a lambda function."}
{"task_id": 623, "original": "Write a python function to convert the given string to upper case.", "mutation": "Compose a python function to transform the provided string to upper case."}
{"task_id": 624, "original": "Write a python function to interchange first and last elements in a given list.", "mutation": "Create a python function to swap first and last elements in a given list."}
{"task_id": 625, "original": "Write a python function to find the largest triangle that can be inscribed in the semicircle.", "mutation": "Compose a python function to determine the largest triangle that can be enclosed in the semicircle."}
{"task_id": 626, "original": "Write a python function to find the smallest missing number from the given array.", "mutation": "Compose a python function to determine the smallest absent number from the provided array."}
{"task_id": 627, "original": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.", "mutation": "Create a function to substitute all spaces in the provided string with the character * list item * list item * list item * list item '%20'."}
{"task_id": 628, "original": "Write a python function to find even numbers from a mixed list.", "mutation": "Compose a python function to discover even numbers from a mixed list."}
{"task_id": 629, "original": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.", "mutation": "Compose a function to retrieve all the neighboring coordinates of the provided coordinate tuple."}
{"task_id": 630, "original": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.", "mutation": "Create a function to substitute whitespaces with an underscore and vice versa in a provided string using regex."}
{"task_id": 631, "original": "Write a python function to move all zeroes to the end of the given list.", "mutation": "Create a python function to shift all zeroes to the end of the provided list."}
{"task_id": 632, "original": "Write a python function to find the sum of xor of all pairs of numbers in the given array.", "mutation": "Create a python function to calculate the total of xor of all pairs of numbers in the provided array."}
{"task_id": 633, "original": "Write a python function to find the sum of fourth power of first n even natural numbers.", "mutation": "Create a python function to calculate the total of the fourth power of the initial n even natural numbers."}
{"task_id": 634, "original": "Write a function to push all values into a heap and then pop off the smallest values one at a time.", "mutation": "Create a function to insert all values into a heap and then remove the smallest values one by one."}
{"task_id": 635, "original": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.", "mutation": "Create a python function to verify if roots of a quadratic equation are inverses of each other or not."}
{"task_id": 636, "original": "Write a function to check whether the given amount has no profit and no loss", "mutation": "Create a function to verify if the provided amount results in neither profit nor loss."}
{"task_id": 637, "original": "Write a function to calculate wind chill index.", "mutation": "Compose a function to determine wind chill index."}
{"task_id": 638, "original": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.", "mutation": "Create a function to calculate the total length of the names in a provided list of names after excluding the names that begin with a lowercase letter."}
{"task_id": 639, "original": "Write a function to remove the parenthesis area in a string.", "mutation": "Compose a function to eliminate the parenthesis region in a string."}
{"task_id": 640, "original": "Write a function to find the nth nonagonal number.", "mutation": "Compose a function to determine the nth nonagonal number."}
{"task_id": 641, "original": "Write a function to remove similar rows from the given tuple matrix.", "mutation": "Create a function to eliminate identical rows from the provided tuple matrix."}
{"task_id": 642, "original": "Write a function that matches a word containing 'z', not at the start or end of the word.", "mutation": "Compose a function that identifies a word containing 'z', not at the beginning or end of the word."}
{"task_id": 643, "original": "Write a python function to reverse an array upto a given position.", "mutation": "Compose a python function to invert an array up to a specified position."}
{"task_id": 644, "original": "Write a function to find the product of it\u2019s kth index in the given tuples.", "mutation": "Create a function to determine the result of its kth index in the provided tuples."}
{"task_id": 645, "original": "Write a python function to count number of cubes of size k in a cube of size n.", "mutation": "Create a python function to calculate the quantity of cubes of size k in a cube of size n."}
{"task_id": 646, "original": "Write a function to split a string at uppercase letters.", "mutation": "Compose a function to divide a string at uppercase letters."}
{"task_id": 647, "original": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.", "mutation": "Create a function to swap the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a provided list."}
{"task_id": 648, "original": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.", "mutation": "Compose a python function to determine the total of the numbers in a list within the boundaries of a specified range."}
{"task_id": 649, "original": "Write a python function to check whether the given two arrays are equal or not.", "mutation": "Create a python function to verify whether the provided two arrays are identical or not."}
{"task_id": 650, "original": "Write a function to check if one tuple is a subset of another tuple.", "mutation": "Compose a function to verify if one tuple is a subset of another tuple."}
{"task_id": 651, "original": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.", "mutation": "Create a function to compress the provided tuple matrix into the tuple list with each tuple representing each column."}
{"task_id": 652, "original": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.", "mutation": "Compose a function to categorize a series of key-value pairs into a dictionary of lists using the collections module."}
{"task_id": 653, "original": "Write a function to find the perimeter of a rectangle.", "mutation": "Compose a function to determine the perimeter of a rectangle."}
{"task_id": 654, "original": "Write a python function to find the sum of fifth power of n natural numbers.", "mutation": "Create a python function to calculate the total of fifth power of n natural numbers."}
{"task_id": 655, "original": "Write a python function to find the minimum sum of absolute differences of two arrays.", "mutation": "Compose a python function to determine the smallest sum of absolute variances between two arrays."}
{"task_id": 656, "original": "Write a python function to find the first digit in factorial of a given number.", "mutation": "Compose a python function to determine the initial digit in the factorial of a specified number."}
{"task_id": 657, "original": "Write a function to find the item with maximum occurrences in a given list.", "mutation": "Compose a function to determine the item with the highest frequency in a provided list."}
{"task_id": 658, "original": "Write a python function to print duplicants from a list of integers.", "mutation": "Create a python function to display duplicates from a list of integers."}
{"task_id": 659, "original": "Write a python function to choose points from two ranges such that no point lies in both the ranges.", "mutation": "Create a python function to select points from two ranges so that no point exists in both ranges."}
{"task_id": 660, "original": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.", "mutation": "Create a function to determine the maximum sum that can be achieved without having three consecutive elements included."}
{"task_id": 661, "original": "Write a function to sort a list in a dictionary.", "mutation": "Compose a function to arrange a list in a dictionary."}
{"task_id": 662, "original": "Write a function to find the largest possible value of k such that k modulo x is y.", "mutation": "Create a function to determine the highest potential value of k so that k divided by x equals y."}
{"task_id": 663, "original": "Write a python function to find the average of even numbers till a given even number.", "mutation": "Compose a python function to determine the mean of even numbers up to a specified even number."}
{"task_id": 664, "original": "Write a python function to shift first element to the end of given list.", "mutation": "Create a python function to move the initial element to the end of the provided list."}
{"task_id": 665, "original": "Write a function to count occurrence of a character in a string.", "mutation": "Compose a function to tally the frequency of a character in a string."}
{"task_id": 666, "original": "Write a python function to count number of vowels in the string.", "mutation": "Compose a python function to calculate the quantity of vowels in the string."}
{"task_id": 667, "original": "Write a python function to replace multiple occurence of character by single.", "mutation": "Create a python function to substitute multiple instances of a character with a single one."}
{"task_id": 668, "original": "Write a function to check whether the given ip address is valid or not using regex.", "mutation": "Create a function to verify if the provided ip address is valid or not using regex."}
{"task_id": 669, "original": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.", "mutation": "Compose a python function to verify if a sequence of numbers exhibits a declining pattern or not."}
{"task_id": 670, "original": "Write a python function to set the right most unset bit.", "mutation": "Create a python function to assign the right most unassigned bit."}
{"task_id": 671, "original": "Write a function to find maximum of three numbers.", "mutation": "Create a function to determine the highest of three numbers."}
{"task_id": 672, "original": "Write a python function to convert a list of multiple integers into a single integer.", "mutation": "Compose a python function to transform a list of multiple integers into a single integer."}
{"task_id": 673, "original": "Write a function to remove duplicate words from a given string using collections module.", "mutation": "Create a function to eliminate duplicate words from a provided string using the collections module."}
{"task_id": 674, "original": "Write a function to add two integers. however, if the sum is between the given range it will return 20.", "mutation": "Compose a function to combine two integers. However, if the total falls within the specified range, it will yield 20."}
{"task_id": 675, "original": "Write a function to remove everything except alphanumeric characters from the given string by using regex.", "mutation": "Create a function to eliminate all non-alphanumeric characters from the provided string using regex."}
{"task_id": 676, "original": "Write a function to check if the triangle is valid or not.", "mutation": "Compose a function to verify if the triangle is valid or not."}
{"task_id": 677, "original": "Write a python function to remove spaces from a given string.", "mutation": "Compose a python function to eliminate spaces from a provided string."}
{"task_id": 678, "original": "Write a function to access dictionary key\u2019s element by index.", "mutation": "Create a function to retrieve dictionary key's element by index."}
{"task_id": 679, "original": "Write a python function to check whether a sequence of numbers has an increasing trend or not.", "mutation": "Compose a python function to verify if a sequence of numbers displays an ascending pattern or not."}
{"task_id": 680, "original": "Write a python function to find the smallest prime divisor of a number.", "mutation": "Compose a python function to determine the smallest prime divisor of a number."}
{"task_id": 681, "original": "Write a function to multiply two lists using map and lambda function.", "mutation": "Compose a function to multiply two lists using map and lambda function."}
{"task_id": 682, "original": "Write a python function to check whether the given number can be represented by sum of two squares or not.", "mutation": "Compose a python function to verify if the provided number can be expressed as the sum of two squares or not."}
{"task_id": 683, "original": "Write a python function to count occurences of a character in a repeated string.", "mutation": "Compose a python function to tally instances of a character in a duplicated string."}
{"task_id": 684, "original": "Write a python function to find sum of prime numbers between 1 to n.", "mutation": "Compose a python function to determine the total of prime numbers within the range of 1 to n."}
{"task_id": 685, "original": "Write a function to find the frequency of each element in the given list.", "mutation": "Compose a function to determine the occurrence of each element in the provided list."}
{"task_id": 686, "original": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.", "mutation": "Compose a function to determine the highest common factor (hcf) of two integers through recursion."}
{"task_id": 687, "original": "Write a function to get the length of a complex number.", "mutation": "Compose a function to determine the magnitude of a complex number."}
{"task_id": 688, "original": "Write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block", "mutation": "Create a function to determine the minimum number of leaps needed to reach the end of the array for the provided array of integers where each element signifies the maximum number of steps that can be taken forward from that element."}
{"task_id": 689, "original": "Write a function to multiply consecutive numbers of a given list.", "mutation": "Create a function to calculate the product of consecutive numbers in a provided list."}
{"task_id": 690, "original": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.", "mutation": "Create a function to categorize the first elements based on the second elements in the provided tuple list."}
{"task_id": 691, "original": "Write a python function to find the last two digits in factorial of a given number.", "mutation": "Compose a python function to determine the final two digits in the factorial of a specified number."}
{"task_id": 692, "original": "Write a function to remove multiple spaces in a string by using regex.", "mutation": "Compose a function to eliminate multiple spaces in a string by utilizing regex."}
{"task_id": 693, "original": "Write a function to extract unique values from the given dictionary values.", "mutation": "Compose a function to retrieve distinct values from the provided dictionary values."}
{"task_id": 694, "original": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.", "mutation": "Compose a function to verify if each element of the second tuple surpasses its corresponding index in the first tuple."}
{"task_id": 695, "original": "Write a function to zip two given lists of lists.", "mutation": "Create a function to combine two given lists of lists."}
{"task_id": 696, "original": "Write a function to find number of even elements in the given list using lambda function.", "mutation": "Create a function to determine the quantity of even elements in the provided list using a lambda function."}
{"task_id": 697, "original": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.", "mutation": "Create a function to arrange dictionary items by the product of keys in tuples for the provided dictionary with tuple keys."}
{"task_id": 698, "original": "Write a python function to find the minimum number of swaps required to convert one binary string to another.", "mutation": "Create a python function to determine the minimum number of exchanges needed to transform one binary string to another."}
{"task_id": 699, "original": "Write a function to count the number of elements in a list which are within a specific range.", "mutation": "Compose a function to calculate the quantity of elements in a list that fall within a particular range."}
{"task_id": 700, "original": "Write a function to find the equilibrium index of the given array.", "mutation": "Create a function to determine the equilibrium index of the provided array."}
{"task_id": 701, "original": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.", "mutation": "Create a function to determine the minimum number of elements that need to be eliminated so that amax-amin<=k."}
{"task_id": 702, "original": "Write a function to check whether the given key is present in the dictionary or not.", "mutation": "Compose a function to verify if the provided key exists in the dictionary or not."}
{"task_id": 703, "original": "Write a function to calculate the harmonic sum of n-1.", "mutation": "Compose a function to determine the harmonic sum of n-1."}
{"task_id": 704, "original": "Write a function to sort a list of lists by length and value.", "mutation": "Compose a function to arrange a list of lists by length and value."}
{"task_id": 705, "original": "Write a function to find whether an array is subset of another array.", "mutation": "Create a function to determine if an array is a subset of another array."}
{"task_id": 706, "original": "Write a python function to count the total set bits from 1 to n.", "mutation": "Create a python function to calculate the total set bits from 1 to n."}
{"task_id": 707, "original": "Write a python function to convert a string to a list.", "mutation": "Compose a python function to transform a string into a list."}
{"task_id": 708, "original": "Write a function to count unique keys for each value present in the tuple.", "mutation": "Create a function to calculate unique keys for each value found in the tuple."}
{"task_id": 709, "original": "Write a function to access the initial and last data of the given tuple record.", "mutation": "Create a function to retrieve the first and final data of the provided tuple record."}
{"task_id": 710, "original": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.", "mutation": "Compose a python function to verify if the multiplication of digits of a number at even and odd places is equivalent or not."}
{"task_id": 711, "original": "Write a function to remove duplicates from a list of lists.", "mutation": "Create a function to eliminate duplicates from a list of lists."}
{"task_id": 712, "original": "Write a function to check if the given tuple contains all valid values or not.", "mutation": "Create a function to verify if the provided tuple includes all valid values or not."}
{"task_id": 713, "original": "Write a python function to count the number of distinct power of prime factor of given number.", "mutation": "Create a python function to calculate the quantity of unique power of prime factor of provided number."}
{"task_id": 714, "original": "Write a function to convert the given string of integers into a tuple.", "mutation": "Compose a function to transform the provided string of integers into a tuple."}
{"task_id": 715, "original": "Write a function to find the perimeter of a rombus.", "mutation": "Compose a function to determine the perimeter of a rhombus."}
{"task_id": 716, "original": "Write a function to calculate the standard deviation.", "mutation": "Compose a function to determine the standard deviation."}
{"task_id": 717, "original": "Write a function to create a list taking alternate elements from another given list.", "mutation": "Compose a function to generate a list extracting alternate elements from another provided list."}
{"task_id": 718, "original": "Write a function that matches a string that has an a followed by zero or more b's.", "mutation": "Create a function that identifies a string containing an a followed by zero or more b's."}
{"task_id": 719, "original": "Write a function to add a dictionary to the tuple.", "mutation": "Create a function to append a dictionary to the tuple."}
{"task_id": 720, "original": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.", "mutation": "Create a function to determine a path with the highest average among all available paths for the provided square matrix of size n*n."}
{"task_id": 721, "original": "Write a function to filter the height and width of students which are stored in a dictionary.", "mutation": "Create a function to sort the height and width of students which are stored in a dictionary."}
{"task_id": 722, "original": "Write a function to count the same pair in two given lists using map function.", "mutation": "Create a function to tally the identical pair in two provided lists using the map function."}
{"task_id": 723, "original": "Write a function to calculate the sum of all digits of the base to the specified power.", "mutation": "Compose a function to determine the total of all digits of the base raised to the specified power."}
{"task_id": 724, "original": "Write a function to extract values between quotation marks of the given string by using regex.", "mutation": "Compose a function to retrieve values between quotation marks of the provided string by utilizing regex."}
{"task_id": 725, "original": "Write a function to multiply the adjacent elements of the given tuple.", "mutation": "Compose a function to calculate the adjacent elements of the provided tuple."}
{"task_id": 726, "original": "Write a function to remove all characters except letters and numbers using regex", "mutation": "Create a function to eliminate all characters except letters and numbers using regex"}
{"task_id": 727, "original": "Write a function to sum elements in two lists.", "mutation": "Compose a function to add elements in two lists."}
{"task_id": 728, "original": "Write a function to add two lists using map and lambda function.", "mutation": "Create a function to combine two lists using map and lambda function."}
{"task_id": 729, "original": "Write a function to remove consecutive duplicates of a given list.", "mutation": "Create a function to eliminate consecutive repetitions of a provided list."}
{"task_id": 730, "original": "Write a function to find the lateral surface area of a cone.", "mutation": "Create a function to determine the lateral surface area of a cone."}
{"task_id": 731, "original": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.", "mutation": "Create a function to substitute all instances of spaces, commas, or dots with a colon."}
{"task_id": 732, "original": "Write a function to find the index of the first occurrence of a given number in a sorted array.", "mutation": "Compose a function to determine the position of the initial instance of a specified number in an organized array."}
{"task_id": 733, "original": "Write a python function to find sum of products of all possible subarrays.", "mutation": "Compose a python function to determine the total of products of all potential subarrays."}
{"task_id": 734, "original": "Write a python function to toggle bits of the number except the first and the last bit.", "mutation": "Create a python function to switch bits of the number except the first and the last bit."}
{"task_id": 735, "original": "Write a function to locate the left insertion point for a specified value in sorted order.", "mutation": "Create a function to find the left insertion point for a specified value in sorted order."}
{"task_id": 736, "original": "Write a function to check whether the given string is starting with a vowel or not using regex.", "mutation": "Create a function to determine if the provided string begins with a vowel or not using regex."}
{"task_id": 737, "original": "Write a function to calculate the geometric sum of n-1.", "mutation": "Create a function to determine the geometric sum of n-1."}
{"task_id": 738, "original": "Write a python function to find the index of smallest triangular number with n digits.", "mutation": "Compose a python function to determine the position of the smallest triangular number with n digits."}
{"task_id": 739, "original": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.", "mutation": "Create a function to transform the provided tuple into a key-value dictionary by utilizing neighboring elements."}
{"task_id": 740, "original": "Write a python function to check whether all the characters are same or not.", "mutation": "Create a python function to verify if all the characters are identical or not."}
{"task_id": 741, "original": "Write a function to caluclate the area of a tetrahedron.", "mutation": "Create a function to determine the area of a tetrahedron."}
{"task_id": 742, "original": "Write a function to rotate a given list by specified number of items to the right direction.", "mutation": "Create a function to shift a given list by a specified number of items to the right direction."}
{"task_id": 743, "original": "Write a function to check if the given tuple has any none value or not.", "mutation": "Create a function to verify if the provided tuple contains any null value or not."}
{"task_id": 744, "original": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.", "mutation": "Compose a function to locate numbers within a specified range where each number can be evenly divided by each digit it includes."}
{"task_id": 745, "original": "Write a function to find area of a sector.", "mutation": "Compose a function to determine the area of a sector."}
{"task_id": 746, "original": "Write a function to find the longest common subsequence for the given three string sequence.", "mutation": "Compose a function to determine the longest common subsequence for the provided three string sequence."}
{"task_id": 747, "original": "Write a function to put spaces between words starting with capital letters in a given string by using regex.", "mutation": "Create a function to insert spaces between words beginning with capital letters in a provided string using regex."}
{"task_id": 748, "original": "Write a function to sort a given list of strings of numbers numerically.", "mutation": "Compose a function to arrange a provided list of numeric string values in numerical order."}
{"task_id": 749, "original": "Write a function to add the given tuple to the given list.", "mutation": "Compose a function to append the provided tuple to the provided list."}
{"task_id": 750, "original": "Write a function to check if the given array represents min heap or not.", "mutation": "Create a function to verify if the provided array signifies a min heap or not."}
{"task_id": 751, "original": "Write a function to find the nth jacobsthal number.", "mutation": "Create a function to determine the nth jacobsthal number."}
{"task_id": 752, "original": "Write a function to find minimum k records from tuple list.", "mutation": "Create a function to locate the smallest k records from a list of tuples."}
{"task_id": 753, "original": "Write a function to find common index elements from three lists.", "mutation": "Compose a function to discover shared index elements from three lists."}
{"task_id": 754, "original": "Write a function to find the second smallest number in a list.", "mutation": "Compose a function to locate the second smallest number in a list."}
{"task_id": 755, "original": "Write a function that matches a string that has an a followed by zero or one 'b'.", "mutation": "Create a function that identifies a string containing an a followed by either zero or one 'b'."}
{"task_id": 756, "original": "Write a function to count the pairs of reverse strings in the given string list.", "mutation": "Compose a function to tally the pairs of inverted strings in the provided string list."}
{"task_id": 757, "original": "Write a function to count number of unique lists within a list.", "mutation": "Compose a function to calculate the quantity of distinct lists within a list."}
{"task_id": 758, "original": "Write a function to check a decimal with a precision of 2.", "mutation": "Create a function to verify a decimal with a precision of 2."}
{"task_id": 759, "original": "Write a python function to check whether an array contains only one distinct element or not.", "mutation": "Create a python function to verify if an array consists of only one unique element or not."}
{"task_id": 760, "original": "Write a function to caluclate arc length of an angle.", "mutation": "Compose a function to determine the arc length of an angle."}
{"task_id": 761, "original": "Write a function to check whether the given month number contains 30 days or not.", "mutation": "Create a function to verify if the provided month number includes 30 days or not."}
{"task_id": 762, "original": "Write a python function to find the minimum difference between any two elements in a given array.", "mutation": "Create a python function to determine the smallest difference between any two elements in a provided array."}
{"task_id": 763, "original": "Write a python function to count numeric values in a given string.", "mutation": "Compose a python function to tally numeric values in a provided string."}
{"task_id": 764, "original": "Write a function to find nth polite number.", "mutation": "Create a function to determine the nth polite number."}
{"task_id": 765, "original": "Write a function to iterate over all pairs of consecutive items in a given list.", "mutation": "Create a function to loop through all pairs of consecutive items in a provided list."}
{"task_id": 766, "original": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.", "mutation": "Create a python function to calculate the quantity of pairs whose total is equivalent to 'sum'."}
{"task_id": 767, "original": "Write a python function to check for odd parity of a given number.", "mutation": "Create a python function to verify odd parity of a specified number."}
{"task_id": 768, "original": "Write a python function to get the difference between two lists.", "mutation": "Create a python function to calculate the variance between two lists."}
{"task_id": 769, "original": "Write a python function to find the sum of fourth power of first n odd natural numbers.", "mutation": "Create a python function to calculate the total of the fourth power of the initial n odd natural numbers."}
{"task_id": 770, "original": "Write a function to check if the given expression is balanced or not.", "mutation": "Compose a function to verify if the provided expression is balanced or not."}
{"task_id": 771, "original": "Write a function to remove all the words with k length in the given string.", "mutation": "Create a function to eliminate all the words with k length in the provided string."}
{"task_id": 772, "original": "Write a function to find the occurrence and position of the substrings within a string.", "mutation": "Compose a function to locate the frequency and location of the substrings within a string."}
{"task_id": 773, "original": "Write a function to check if the string is a valid email address or not using regex.", "mutation": "Create a function to verify if the string is a valid email address or not using regex."}
{"task_id": 774, "original": "Write a python function to check whether every odd index contains odd numbers of a given list.", "mutation": "Create a python function to verify if each odd index includes odd numbers from a provided list."}
{"task_id": 775, "original": "Write a function to count those characters which have vowels as their neighbors in the given string.", "mutation": "Compose a function to tally those characters which possess vowels as their adjacent characters in the provided string."}
{"task_id": 776, "original": "Write a python function to find the sum of non-repeated elements in a given array.", "mutation": "Compose a python function to determine the total of unique elements in a provided array."}
{"task_id": 777, "original": "Write a function to pack consecutive duplicates of a given list elements into sublists.", "mutation": "Compose a function to group consecutive duplicates of a provided list elements into sublists."}
{"task_id": 778, "original": "Write a function to count the number of unique lists within a list.", "mutation": "Compose a function to calculate the quantity of distinct lists within a list."}
{"task_id": 779, "original": "Write a function to find the combinations of sums with tuples in the given tuple list.", "mutation": "Create a function to determine the combinations of sums with tuples in the provided tuple list."}
{"task_id": 780, "original": "Write a python function to check whether the count of divisors is even or odd.", "mutation": "Create a python function to determine if the number of divisors is even or odd."}
{"task_id": 781, "original": "Write a python function to find the sum of all odd length subarrays.", "mutation": "Compose a python function to determine the total of all odd length subarrays."}
{"task_id": 782, "original": "Write a function to convert rgb color to hsv color.", "mutation": "Compose a function to transform rgb color to hsv color."}
{"task_id": 783, "original": "Write a function to find the product of first even and odd number of a given list.", "mutation": "Create a function to determine the result of the initial even and odd numbers in a provided list."}
{"task_id": 784, "original": "Write a function to convert tuple string to integer tuple.", "mutation": "Compose a function to transform tuple string to integer tuple."}
{"task_id": 785, "original": "Write a function to locate the right insertion point for a specified value in sorted order.", "mutation": "Compose a function to find the correct insertion point for a specified value in sorted order."}
{"task_id": 786, "original": "Write a function that matches a string that has an a followed by three 'b'.", "mutation": "Create a function that identifies a string containing an a followed by three 'b'."}
{"task_id": 787, "original": "Write a function to create a new tuple from the given string and list.", "mutation": "Compose a function to generate a new tuple from the provided string and list."}
{"task_id": 788, "original": "Write a function to calculate the perimeter of a regular polygon.", "mutation": "Compose a function to determine the perimeter of a regular polygon."}
{"task_id": 789, "original": "Write a python function to check whether every even index contains even numbers of a given list.", "mutation": "Create a python function to verify if each even index includes even numbers from a provided list."}
{"task_id": 790, "original": "Write a function to remove the nested record from the given tuple.", "mutation": "Create a function to eliminate the nested record from the provided tuple."}
{"task_id": 791, "original": "Write a python function to count the number of lists in a given number of lists.", "mutation": "Compose a python function to calculate the quantity of lists in a specified number of lists."}
{"task_id": 792, "original": "Write a python function to find the last position of an element in a sorted array.", "mutation": "Compose a python function to determine the final location of an element in a sorted array."}
{"task_id": 793, "original": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.", "mutation": "Create a function that identifies a string containing an 'a' followed by any character, concluding with 'b'."}
{"task_id": 794, "original": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.", "mutation": "Create a function to locate the n - inexpensive items from a provided dataset using heap queue algorithm."}
{"task_id": 795, "original": "Write a function to find the sum of all items in the given dictionary.", "mutation": "Compose a function to determine the total of all items in the provided dictionary."}
{"task_id": 796, "original": "Write a python function to find the sum of all odd natural numbers within the range l and r.", "mutation": "Create a python function to calculate the total of all odd natural numbers between the limits l and r."}
{"task_id": 797, "original": "Write a python function to find the sum of an array.", "mutation": "Compose a python function to determine the total of an array."}
{"task_id": 798, "original": "Write a python function to left rotate the bits of a given number.", "mutation": "Create a python function to shift the bits of a given number to the left."}
{"task_id": 799, "original": "Write a function to remove all whitespaces from a string.", "mutation": "Compose a function to eliminate all whitespaces from a string."}
{"task_id": 800, "original": "Write a python function to count the number of equal numbers from three given integers.", "mutation": "Create a python function to calculate the quantity of identical numbers from three provided integers."}
{"task_id": 801, "original": "Write a python function to count the number of rotations required to generate a sorted array.", "mutation": "Compose a python function to determine the quantity of rotations needed to produce a sorted array."}
{"task_id": 802, "original": "Write a python function to check whether the given number is a perfect square or not.", "mutation": "Create a python function to verify if the provided number is a perfect square or not."}
{"task_id": 803, "original": "Write a python function to check whether the product of numbers is even or not.", "mutation": "Compose a python function to verify if the product of numbers is even or not."}
{"task_id": 804, "original": "Write a function to find the list in a list of lists whose sum of elements is the highest.", "mutation": "Compose a function to determine the list in a list of lists whose total of elements is the greatest."}
{"task_id": 805, "original": "Write a function to find maximum run of uppercase characters in the given string.", "mutation": "Create a function to determine the longest sequence of uppercase characters in the provided string."}
{"task_id": 806, "original": "Write a python function to find the first odd number in a given list of numbers.", "mutation": "Create a python function to locate the initial odd number in a provided list of numbers."}
{"task_id": 807, "original": "Write a function to check if the given tuples contain the k or not.", "mutation": "Create a function to verify if the provided tuples include the k or not."}
{"task_id": 808, "original": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.", "mutation": "Create a function to verify if every element of the second tuple is less than its corresponding index in the first tuple."}
{"task_id": 809, "original": "Write a function to iterate over elements repeating each as many times as its count.", "mutation": "Compose a function to loop through elements duplicating each as many times as its quantity."}
{"task_id": 810, "original": "Write a function to check if two lists of tuples are identical or not.", "mutation": "Create a function to verify if two lists of tuples are the same or not."}
{"task_id": 811, "original": "Write a function to abbreviate 'road' as 'rd.' in a given string.", "mutation": "Compose a function to shorten 'road' to 'rd.' in a provided string."}
{"task_id": 812, "original": "Write a function to find length of the string.", "mutation": "Compose a function to determine the length of the string."}
{"task_id": 813, "original": "Write a function to find the area of a rombus.", "mutation": "Compose a function to determine the area of a rhombus."}
{"task_id": 814, "original": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.", "mutation": "Create a function to arrange the provided array without utilizing any sorting algorithm. The provided array comprises only 0, 1, and 2."}
{"task_id": 815, "original": "Write a function to clear the values of the given tuples.", "mutation": "Create a function to erase the values of the provided tuples."}
{"task_id": 816, "original": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.", "mutation": "Create a function to locate numbers divisible by m or n from a list of numbers using a lambda function."}
{"task_id": 817, "original": "Write a python function to count lower case letters in a given string.", "mutation": "Compose a python function to tally lowercase letters in a provided string."}
{"task_id": 818, "original": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.", "mutation": "Compose a function to calculate the occurrence of consecutive repeated elements in a provided list of numbers."}
{"task_id": 819, "original": "Write a function to check whether the given month number contains 28 days or not.", "mutation": "Compose a function to verify if the provided month number includes 28 days or not."}
{"task_id": 820, "original": "Write a function to merge two dictionaries into a single expression.", "mutation": "Compose a function to combine two dictionaries into a single expression."}
{"task_id": 821, "original": "Write a function to return true if the password is valid.", "mutation": "Compose a function to return true if the password is valid."}
{"task_id": 822, "original": "Write a function to check if the given string starts with a substring using regex.", "mutation": "Create a function to verify if the provided string begins with a substring using regex."}
{"task_id": 823, "original": "Write a python function to remove even numbers from a given list.", "mutation": "Create a python function to eliminate even numbers from a provided list."}
{"task_id": 824, "original": "Write a python function to access multiple elements of specified index from a given list.", "mutation": "Compose a python function to retrieve multiple elements of specified index from a given list."}
{"task_id": 825, "original": "Write a python function to find the type of triangle from the given sides.", "mutation": "Create a python function to determine the classification of triangle based on the provided sides."}
{"task_id": 826, "original": "Write a function to sum a specific column of a list in a given list of lists.", "mutation": "Create a function to add up a specific column of a list in a provided list of lists."}
{"task_id": 827, "original": "Write a function to count alphabets,digits and special charactes in a given string.", "mutation": "Create a function to calculate alphabets, digits and special characters in a provided string."}
{"task_id": 828, "original": "Write a function to find out the second most repeated (or frequent) string in the given sequence.", "mutation": "Compose a function to determine the second most recurring (or common) string in the provided sequence."}
{"task_id": 829, "original": "Write a function to round up a number to specific digits.", "mutation": "Compose a function to approximate a number to specific digits."}
{"task_id": 830, "original": "Write a python function to count equal element pairs from the given array.", "mutation": "Create a python function to calculate equal element pairs from the provided array."}
{"task_id": 831, "original": "Write a function to extract the maximum numeric value from a string by using regex.", "mutation": "Compose a function to retrieve the highest numeric value from a string by utilizing regex."}
{"task_id": 832, "original": "Write a function to get dictionary keys as a list.", "mutation": "Compose a function to retrieve dictionary keys as a list."}
{"task_id": 833, "original": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.", "mutation": "Create a function to produce a square matrix filled with elements from 1 to n squared in spiral order."}
{"task_id": 834, "original": "Write a python function to find the slope of a line.", "mutation": "Create a python function to determine the slope of a line."}
{"task_id": 835, "original": "Write a function to find length of the subarray having maximum sum.", "mutation": "Compose a function to determine the length of the subarray with the highest sum."}
{"task_id": 836, "original": "Write a python function to find the cube sum of first n odd natural numbers.", "mutation": "Compose a python function to determine the cube sum of initial n odd natural numbers."}
{"task_id": 837, "original": "Write a python function to find minimum number swaps required to make two binary strings equal.", "mutation": "Create a python function to determine the minimum number of swaps needed to ensure two binary strings are identical."}
{"task_id": 838, "original": "Write a function to sort the tuples alphabetically by the first item of each tuple.", "mutation": "Compose a function to arrange the tuples alphabetically by the initial item of each tuple."}
{"task_id": 839, "original": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.", "mutation": "Compose a python function to verify if the roots of a quadratic equation are numerically identical but have opposite signs or not."}
{"task_id": 840, "original": "Write a function to count the number of inversions in the given array.", "mutation": "Compose a function to calculate the quantity of inversions in the provided array."}
{"task_id": 841, "original": "Write a function to find the number which occurs for odd number of times in the given array.", "mutation": "Create a function to determine the integer that appears an odd number of times in the provided array."}
{"task_id": 842, "original": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.", "mutation": "Create a function to determine the nth super ugly number from a provided prime list of size k using the heap queue algorithm."}
{"task_id": 843, "original": "Write a python function to find the kth element in an array containing odd elements first and then even elements.", "mutation": "Create a python function to locate the kth element in an array containing odd elements first and then even elements."}
{"task_id": 844, "original": "Write a python function to count the number of digits in factorial of a given number.", "mutation": "Compose a python function to calculate the quantity of digits in the factorial of a specified number."}
{"task_id": 845, "original": "Write a function to find the minimum number of platforms required for a railway/bus station.", "mutation": "Compose a function to determine the minimum number of platforms needed for a railway/bus station."}
{"task_id": 846, "original": "Write a python function to copy a list from a singleton tuple.", "mutation": "Create a python function to duplicate a list from a singleton tuple."}
{"task_id": 847, "original": "Write a function to find the area of a trapezium.", "mutation": "Compose a function to determine the area of a trapezium."}
{"task_id": 848, "original": "Write a python function to find sum of all prime divisors of a given number.", "mutation": "Create a python function to calculate the total of all prime divisors of a specified number."}
{"task_id": 849, "original": "Write a function to check if a triangle of positive area is possible with the given angles.", "mutation": "Compose a function to verify if a triangle of positive area can be formed with the provided angles."}
{"task_id": 850, "original": "Write a python function to find sum of inverse of divisors.", "mutation": "Create a python function to calculate the total of reciprocal of divisors."}
{"task_id": 851, "original": "Write a python function to remove negative numbers from a list.", "mutation": "Create a python function to eliminate negative numbers from a list."}
{"task_id": 852, "original": "Write a python function to find sum of odd factors of a number.", "mutation": "Compose a python function to determine the total of odd factors of a number."}
{"task_id": 853, "original": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.", "mutation": "Create a function that takes in any list and transforms it into a heap using the heap queue algorithm."}
{"task_id": 854, "original": "Write a python function to check for even parity of a given number.", "mutation": "Create a python function to verify even parity of a provided number."}
{"task_id": 855, "original": "Write a python function to find minimum adjacent swaps required to sort binary array.", "mutation": "Create a python function to determine the minimum adjacent exchanges needed to arrange binary array in order."}
{"task_id": 856, "original": "Write a function to list out the list of given strings individually using map function.", "mutation": "Compose a function to display the list of provided strings separately using the map function."}
{"task_id": 857, "original": "Write a function to count number of lists in a given list of lists and square the count.", "mutation": "Create a function to calculate the quantity of lists in a provided list of lists and then square the result."}
{"task_id": 858, "original": "Write a function to generate all sublists of a given list.", "mutation": "Create a function to produce all sublists of a provided list."}
{"task_id": 859, "original": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.", "mutation": "Create a function to verify if the provided string ends with solely alphanumeric characters or not using regex."}
{"task_id": 860, "original": "Write a function to find all anagrams of a string in a given list of strings using lambda function.", "mutation": "Create a function to identify all anagrams of a string in a provided list of strings using a lambda function."}
{"task_id": 861, "original": "Write a function to find the occurrences of n most common words in a given text.", "mutation": "Compose a function to determine the instances of n most frequent words in a provided text."}
{"task_id": 862, "original": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.", "mutation": "Create a function to determine the length of the longest sub-sequence where elements in the subsequences are consecutive integers."}
{"task_id": 863, "original": "Write a function to find palindromes in a given list of strings using lambda function.", "mutation": "Create a function to detect palindromes in a provided list of strings using a lambda function."}
{"task_id": 864, "original": "Write a function to print n-times a list using map function.", "mutation": "Create a function to display a list n times using the map function."}
{"task_id": 865, "original": "Write a function to check whether the given month name contains 31 days or not.", "mutation": "Compose a function to verify if the provided month name includes 31 days or not."}
{"task_id": 866, "original": "Write a python function to add a minimum number such that the sum of array becomes even.", "mutation": "Create a python function to include a minimum number so that the total of the array becomes even."}
{"task_id": 867, "original": "Write a python function to find the length of the last word in a given string.", "mutation": "Compose a python function to determine the size of the final word in a provided string."}
{"task_id": 868, "original": "Write a function to remove sublists from a given list of lists, which are outside a given range.", "mutation": "Create a function to eliminate sublists from a provided list of lists, which fall outside a specified range."}
{"task_id": 869, "original": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.", "mutation": "Create a function to determine the total of the positive numbers in a provided list of numbers using a lambda function."}
{"task_id": 870, "original": "Write a python function to check whether the given strings are rotations of each other or not.", "mutation": "Create a python function to verify if the provided strings are rotations of each other or not."}
{"task_id": 871, "original": "Write a function to check if a nested list is a subset of another nested list.", "mutation": "Create a function to verify if a nested list is a subset of another nested list."}
{"task_id": 872, "original": "Write a function to solve the fibonacci sequence using recursion.", "mutation": "Compose a function to determine the fibonacci sequence using recursion."}
{"task_id": 873, "original": "Write a python function to check if the string is a concatenation of another string.", "mutation": "Create a python function to verify if the string is a combination of another string."}
{"task_id": 874, "original": "Write a function to find the minimum difference in the tuple pairs of given tuples.", "mutation": "Create a function to determine the smallest variance in the tuple pairs of provided tuples."}
{"task_id": 875, "original": "Write a python function to find lcm of two positive integers.", "mutation": "Create a python function to determine the least common multiple of two positive integers."}
{"task_id": 876, "original": "Write a python function to sort the given string.", "mutation": "Compose a python function to arrange the provided string."}
{"task_id": 877, "original": "Write a function to check if the given tuple contains only k elements.", "mutation": "Create a function to verify if the provided tuple consists of only k elements."}
{"task_id": 878, "original": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.", "mutation": "Create a function that identifies a string containing an 'a' followed by any character, concluding with 'b' using regex."}
{"task_id": 879, "original": "Write a python function to find number of solutions in quadratic equation.", "mutation": "Compose a python function to determine the quantity of solutions in quadratic equation."}
{"task_id": 880, "original": "Write a function to find the sum of first even and odd number of a given list.", "mutation": "Create a function to calculate the total of the initial even and odd number in a provided list."}
{"task_id": 881, "original": "Write a function to caluclate perimeter of a parallelogram.", "mutation": "Create a function to determine the perimeter of a parallelogram."}
{"task_id": 882, "original": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.", "mutation": "Create a function to locate numbers that can be divided by m and n from a list of numbers using a lambda function."}
{"task_id": 883, "original": "Write a python function to check whether all the bits are within a given range or not.", "mutation": "Create a python function to verify if all the bits fall within a specified range or not."}
{"task_id": 884, "original": "Write a python function to check whether the two given strings are isomorphic to each other or not.", "mutation": "Create a python function to verify if the two provided strings are isomorphic to each other or not."}
{"task_id": 885, "original": "Write a function to add all the numbers in a list and divide it with the length of the list.", "mutation": "Compose a function to sum all the numbers in a list and then divide it by the length of the list."}
{"task_id": 886, "original": "Write a python function to check whether the given number is odd or not using bitwise operator.", "mutation": "Create a python function to verify if the provided number is odd or not using bitwise operator."}
{"task_id": 887, "original": "Write a function to substract the elements of the given nested tuples.", "mutation": "Create a function to deduct the elements of the provided nested tuples."}
{"task_id": 888, "original": "Write a function to reverse each list in a given list of lists.", "mutation": "Create a function to invert each list in a provided list of lists."}
{"task_id": 889, "original": "Write a python function to find the index of an extra element present in one sorted array.", "mutation": "Create a python function to determine the position of an additional element existing in one sorted array."}
{"task_id": 890, "original": "Write a python function to check whether the given two numbers have same number of digits or not.", "mutation": "Create a python function to verify if the provided two numbers possess the same number of digits or not."}
{"task_id": 891, "original": "Write a function to remove multiple spaces in a string.", "mutation": "Compose a function to eliminate multiple spaces in a string."}
{"task_id": 892, "original": "Write a python function to get the last element of each sublist.", "mutation": "Compose a python function to retrieve the final element of every sublist."}
{"task_id": 893, "original": "Write a function to convert the given string of float type into tuple.", "mutation": "Create a function to transform the provided string of float type into a tuple."}
{"task_id": 894, "original": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.", "mutation": "Create a function to determine the highest total of subsequences in a provided array without neighboring elements."}
{"task_id": 895, "original": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.", "mutation": "Create a function to arrange a list in ascending order based on the last element in each tuple from a provided list of non-empty tuples."}
{"task_id": 896, "original": "Write a python function to check whether the word is present in a given sentence or not.", "mutation": "Compose a python function to verify if the word exists in a provided sentence or not."}
{"task_id": 897, "original": "Write a function to extract specified number of elements from a given list, which follow each other continuously.", "mutation": "Compose a function to retrieve a specified number of elements from a provided list, which are consecutive."}
{"task_id": 898, "original": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.", "mutation": "Create a python function to determine if an array is sortable by selecting only the corner elements."}
{"task_id": 899, "original": "Write a function where a string will start with a specific number.", "mutation": "Compose a function where a string will commence with a particular number."}
{"task_id": 900, "original": "Write a function to find the smallest multiple of the first n numbers.", "mutation": "Compose a function to determine the smallest multiple of the initial n numbers."}
{"task_id": 901, "original": "Write a function to combine two dictionaries by adding values for common keys.", "mutation": "Compose a function to merge two dictionaries by summing values for shared keys."}
{"task_id": 902, "original": "Write a python function to count the total unset bits from 1 to n.", "mutation": "Create a python function to calculate the overall unassigned bits from 1 to n."}
{"task_id": 903, "original": "Write a function to return true if the given number is even else return false.", "mutation": "Create a function to determine if the provided number is even or odd and return the result."}
{"task_id": 904, "original": "Write a python function to find the sum of squares of binomial co-efficients.", "mutation": "Compose a python function to determine the total of squares of binomial co-efficients."}
{"task_id": 905, "original": "Write a function to extract year, month and date from a url by using regex.", "mutation": "Compose a function to retrieve year, month and date from a url by utilizing regex."}
{"task_id": 906, "original": "Write a function to print the first n lucky numbers.", "mutation": "Compose a function to display the initial n lucky numbers."}
{"task_id": 907, "original": "Write a function to find the fixed point in the given array.", "mutation": "Create a function to locate the fixed point in the provided array."}
{"task_id": 908, "original": "Write a function to find the previous palindrome of a specified number.", "mutation": "Compose a function to determine the preceding palindrome of a specified number."}
{"task_id": 909, "original": "Write a function to validate a gregorian date.", "mutation": "Compose a function to authenticate a gregorian date."}
{"task_id": 910, "original": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.", "mutation": "Create a function to calculate the highest product of three numbers from a provided array of integers using the heap queue algorithm."}
{"task_id": 911, "original": "Write a function to find ln, m lobb number.", "mutation": "Create a function to determine the natural logarithm of the m lobb number."}
{"task_id": 912, "original": "Write a function to check for a number at the end of a string.", "mutation": "Compose a function to verify the presence of a number at the end of a string."}
{"task_id": 913, "original": "Write a python function to check whether the given string is made up of two alternating characters or not.", "mutation": "Create a python function to verify if the provided string consists of two alternating characters or not."}
{"task_id": 914, "original": "Write a function to rearrange positive and negative numbers in a given array using lambda function.", "mutation": "Create a function to reorganize positive and negative numbers in a provided array using a lambda function."}
{"task_id": 915, "original": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.", "mutation": "Create a function to determine if there exists a triplet in the array whose total is equivalent to a specified value."}
{"task_id": 916, "original": "Write a function to find the sequences of one upper case letter followed by lower case letters.", "mutation": "Compose a function to detect the patterns of one capital letter succeeded by lowercase letters."}
{"task_id": 917, "original": "Write a function to count coin change.", "mutation": "Create a function to calculate coin change."}
{"task_id": 918, "original": "Write a python function to multiply all items in the list.", "mutation": "Compose a python function to calculate the product of all items in the list."}
{"task_id": 919, "original": "Write a function to remove all tuples with all none values in the given tuple list.", "mutation": "Create a function to eliminate all tuples with all null values in the provided tuple list."}
{"task_id": 920, "original": "Write a function to perform chunking of tuples each of size n.", "mutation": "Compose a function to execute chunking of tuples each of size n."}
{"task_id": 921, "original": "Write a function to find a pair with the highest product from a given array of integers.", "mutation": "Create a function to determine a pair with the greatest product from a provided array of integers."}
{"task_id": 922, "original": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.", "mutation": "Compose a function to determine the length of the shortest string that contains both str1 and str2 as subsequences."}
{"task_id": 923, "original": "Write a function to find maximum of two numbers.", "mutation": "Create a function to determine the highest of two numbers."}
{"task_id": 924, "original": "Write a python function to calculate the product of all the numbers of a given tuple.", "mutation": "Create a python function to determine the product of all the numbers in a specified tuple."}
{"task_id": 925, "original": "Write a function to find n-th rencontres number.", "mutation": "Create a function to determine the n-th rencontres number."}
{"task_id": 926, "original": "Write a function to calculate the height of the given binary tree.", "mutation": "Create a function to determine the height of the provided binary tree."}
{"task_id": 927, "original": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.", "mutation": "Create a function to transform a date from yyyy-mm-dd format to dd-mm-yyyy format."}
{"task_id": 928, "original": "Write a function to count repeated items of a tuple.", "mutation": "Compose a function to tally duplicated elements of a tuple."}
{"task_id": 929, "original": "Write a function that matches a string that has an a followed by zero or more b's by using regex.", "mutation": "Create a function that identifies a string containing an a followed by zero or more b's using regex."}
{"task_id": 930, "original": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.", "mutation": "Compose a function to determine the total of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3."}
{"task_id": 931, "original": "Write a function to remove duplicate words from a given list of strings.", "mutation": "Compose a function to eliminate duplicate words from a provided list of strings."}
{"task_id": 932, "original": "Write a function to convert camel case string to snake case string by using regex.", "mutation": "Create a function to transform camel case string to snake case string using regex."}
{"task_id": 933, "original": "Write a function to find the nth delannoy number.", "mutation": "Create a function to determine the nth delannoy number."}
{"task_id": 934, "original": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.", "mutation": "Create a function to determine the total of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2."}
{"task_id": 935, "original": "Write a function to re-arrange the given tuples based on the given ordered list.", "mutation": "Compose a function to rearrange the provided tuples according to the specified ordered list."}
{"task_id": 936, "original": "Write a function to count the most common character in a given string.", "mutation": "Compose a function to tally the most frequent character in a provided string."}
{"task_id": 937, "original": "Write a function to find three closest elements from three sorted arrays.", "mutation": "Create a function to locate three closest elements from three sorted arrays."}
{"task_id": 938, "original": "Write a function to sort a list of dictionaries using lambda function.", "mutation": "Compose a function to arrange a list of dictionaries using a lambda function."}
{"task_id": 939, "original": "Write a function to sort the given array by using heap sort.", "mutation": "Compose a function to arrange the provided array by utilizing heap sort."}
{"task_id": 940, "original": "Write a function to count the elements in a list until an element is a tuple.", "mutation": "Create a function to tally the elements in a list until an element becomes a tuple."}
{"task_id": 941, "original": "Write a function to check if any list element is present in the given list.", "mutation": "Compose a function to verify if any list element exists in the provided list."}
{"task_id": 942, "original": "Write a function to combine two given sorted lists using heapq module.", "mutation": "Compose a function to merge two provided sorted lists using the heapq module."}
{"task_id": 943, "original": "Write a function to separate and print the numbers and their position of a given string.", "mutation": "Compose a function to divide and display the numbers and their position of a provided string."}
{"task_id": 944, "original": "Write a function to convert the given tuples into set.", "mutation": "Create a function to transform the provided tuples into a set."}
{"task_id": 945, "original": "Write a function to find the most common elements and their counts of a specified text.", "mutation": "Compose a function to determine the most frequent elements and their frequencies in a specified text."}
{"task_id": 946, "original": "Write a python function to find the length of the shortest word.", "mutation": "Compose a python function to determine the length of the briefest word."}
{"task_id": 947, "original": "Write a function to get an item of a tuple.", "mutation": "Compose a function to retrieve an item of a tuple."}
{"task_id": 948, "original": "Write a function to sort the given tuple list basis the total digits in tuple.", "mutation": "Create a function to arrange the provided tuple list based on the total digits in each tuple."}
{"task_id": 949, "original": "Write a function to display sign of the chinese zodiac for given year.", "mutation": "Compose a function to exhibit sign of the chinese zodiac for provided year."}
{"task_id": 950, "original": "Write a function to find the maximum of similar indices in two lists of tuples.", "mutation": "Create a function to determine the highest value of corresponding indexes in two lists of tuples."}
{"task_id": 951, "original": "Write a function to compute the value of ncr mod p.", "mutation": "Create a function to calculate the value of ncr mod p."}
{"task_id": 952, "original": "Write a python function to find the minimun number of subsets with distinct elements.", "mutation": "Create a python function to determine the minimum number of subsets with unique elements."}
{"task_id": 953, "original": "Write a function that gives profit amount if the given amount has profit else return none.", "mutation": "Create a function that calculates profit amount if the provided amount yields profit, otherwise return none."}
{"task_id": 954, "original": "Write a function to find out, if the given number is abundant.", "mutation": "Create a function to determine if the provided number is abundant."}
{"task_id": 955, "original": "Write a function to split the given string at uppercase letters by using regex.", "mutation": "Compose a function to divide the provided string at uppercase letters by utilizing regex."}
{"task_id": 956, "original": "Write a python function to get the position of rightmost set bit.", "mutation": "Create a python function to retrieve the position of the rightmost set bit."}
{"task_id": 957, "original": "Write a function to convert an integer into a roman numeral.", "mutation": "Compose a function to transform an integer into a roman numeral."}
{"task_id": 958, "original": "Write a python function to find the average of a list.", "mutation": "Compose a python function to determine the mean of a list."}
{"task_id": 959, "original": "Write a function to solve tiling problem.", "mutation": "Compose a function to address tiling problem."}
{"task_id": 960, "original": "Write a function to convert a roman numeral to an integer.", "mutation": "Compose a function to transform a roman numeral to an integer."}
{"task_id": 961, "original": "Write a python function to find the sum of all even natural numbers within the range l and r.", "mutation": "Create a python function to calculate the total of all even natural numbers between the limits l and r."}
{"task_id": 962, "original": "Write a function to calculate the discriminant value.", "mutation": "Compose a function to determine the discriminant value."}
{"task_id": 963, "original": "Write a python function to check whether the length of the word is even or not.", "mutation": "Compose a python function to verify if the length of the word is even or not."}
{"task_id": 964, "original": "Write a function to convert camel case string to snake case string.", "mutation": "Create a function to transform camel case string to snake case string."}
{"task_id": 965, "original": "Write a function to remove an empty tuple from a list of tuples.", "mutation": "Create a function to eliminate an empty tuple from a list of tuples."}
{"task_id": 966, "original": "Write a python function to accept the strings which contains all vowels.", "mutation": "Create a python function to receive the strings that include all vowels."}
{"task_id": 967, "original": "Write a python function to find maximum possible value for the given periodic function.", "mutation": "Create a python function to determine the highest achievable value for the provided periodic function."}
{"task_id": 968, "original": "Write a function to join the tuples if they have similar initial elements.", "mutation": "Create a function to merge the tuples if they share common initial elements."}
{"task_id": 969, "original": "Write a function to find minimum of two numbers.", "mutation": "Create a function to determine the minimum of two numbers."}
{"task_id": 970, "original": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.", "mutation": "Create a function to determine the highest number of segments of sizes a, b, and c that can be constructed from n."}
{"task_id": 971, "original": "Write a function to concatenate the given two tuples to a nested tuple.", "mutation": "Compose a function to combine the provided two tuples into a nested tuple."}
{"task_id": 972, "original": "Write a python function to left rotate the string.", "mutation": "Compose a python function to shift the string to the left."}
{"task_id": 973, "original": "Write a function to find the minimum total path sum in the given triangle.", "mutation": "Compose a function to determine the smallest overall path sum in the provided triangle."}
